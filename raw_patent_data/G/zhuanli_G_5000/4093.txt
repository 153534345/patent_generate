标题title
基于git hook脚本的代码外泄保护方法和装置
摘要abst
本发明提供一种基于git hook脚本的代码外泄保护方法和装置，通过git平台的hook机制检测用户触发的源代码推送事件并获取源代码推送事件中包含的目标仓库地址，再基于预推脚本将目标仓库地址传输至代码推送监控工具，利用代码推送监控工具对目标仓库地址进行推送权限鉴别，得到目标仓库地址的推送权限，并将目标仓库地址的推送权限返回至git平台，使得git平台可以基于目标仓库地址的推送权限决策是否将源代码推送至该目标仓库地址中，保障了源码外泄检测和控制的可靠性和准确性，且其稳定性、兼容性以及效率更高，且可以在更精确地进行代码外泄保护的同时不影响用户的正常使用操作。
权利要求书clms
1.一种基于git hook脚本的代码外泄保护方法，其特征在于，包括：基于git平台的hook机制检测用户触发的源代码推送事件；若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。2.根据权利要求1所述的基于githook脚本的代码外泄保护方法，其特征在于，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。3.根据权利要求2所述的基于git hook脚本的代码外泄保护方法，其特征在于，所述预推脚本是基于如下步骤维护的：系统初始化时，对系统磁盘进行全盘遍历，获取所述系统磁盘中的所有.git目录；针对每一个.git目录，对相应.git目录的hook文件夹中的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令的能力，以及获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台的能力；启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态。4.根据权利要求3所述的基于githook脚本的代码外泄保护方法，其特征在于，所述启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态，具体包括：保存每一个.git目录下当前的预推脚本作为相应.git目录下的参考预推脚本后，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件；若监控到任一.git目录下的预推脚本的文件修改事件，则获取修改后的预推脚本，并比对所述任一.git目录下的参考预推脚本和修改后的预推脚本；若所述任一.git目录下的修改后的预推脚本涉及的修改位置与所述代码推送监控工具相关，则基于所述任一.git目录下的参考预推脚本替换所述任一.git目录下的修改后的预推脚本；否则，保存所述任一.git目录下的修改后的预推脚本作为所述任一.git目录下的参考预推脚本。5.根据权利要求1所述的基于githook脚本的代码外泄保护方法，其特征在于，所述基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，具体包括：所述代码推送监控工具读取白名单配置文件中的白名单仓库地址；逐条匹配所述白名单仓库地址与所述目标仓库地址，确定所述目标仓库地址与每条白名单仓库地址的匹配结果；若所述目标仓库地址与任一条白名单仓库地址的匹配结果为匹配成功，则确定所述目标仓库地址的推送权限为允许推送；若所述目标仓库地址与所有白名单仓库地址的匹配结果均为匹配失败，则确定所述目标仓库地址的推送权限为阻断推送。6.根据权利要求5所述的基于githook脚本的代码外泄保护方法，其特征在于，所述白名单配置文件中的白名单仓库地址为正则表达式，所述白名单仓库地址与所述目标仓库地址的匹配方式为正则匹配。7.一种基于git hook脚本的代码外泄保护装置，其特征在于，包括：事件捕获单元，用于基于git平台的hook机制检测用户触发的源代码推送事件；目标仓库地址获取单元，用于若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；仓库地址鉴定单元，用于基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；代码推送控制单元，用于若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。8.根据权利要求7所述的基于githook脚本的代码外泄保护装置，其特征在于，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。9.一种电子设备，包括存储器、处理器及存储在所述存储器上并可在所述处理器上运行的计算机程序，其特征在于，所述处理器执行所述程序时实现如权利要求1至6任一项所述基于git hook脚本的代码外泄保护方法。10.一种非暂态计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现如权利要求1至6任一项所述基于git hook脚本的代码外泄保护方法。
说明书desc
技术领域本发明涉及信息安全技术领域，尤其涉及一种基于git hook脚本的代码外泄保护方法和装置。背景技术git是一种开源的分布式版本控制系统，是目前最常用的源代码管理工具，其在提升了研发效率的同时，也存在一定的安全风险。员工可能会通过git平台将源代码或文档提交到外部的私有仓库中，从而泄露公司的机密。因此，需要在源代码提交过程中引入防止外泄的环节，以避免出现机密泄漏的问题。其中，针对源代码外泄的保护方案，通常会使用以下两种方式进行监控防护：1、基于网络流量分析的方式，在通过git平台推送代码时，监控网络传输流量，对流量进行解密分析，阻止git平台推送源码到外部私有仓库；2、基于应用监控的方式，在通过git平台推送代码时，监控git.exe进程的文件访问操作，阻止该进程读取源代码内容，以防止推送源码到外部私有仓库。然而，基于网络流量分析的方式中需要破解git平台的私有加密协议，在破解过程中可能无法还原出原始内容，也就无从对外泄内容进行保护，即使能够进行解密，该方案也会降低网络速度，以及存在各种应用协议的兼容性问题，可能导致很多网络应用无法使用该方案进行代码外泄保护。基于应用监控的方式中无法精准的获取到外泄行为，本地的提交操作也会因为git.exe读写源码文件而触发阻断，影响用户的使用，另外该方案也无法获取到外部代码仓库的地址，不能判断代码是推送到本地服务器还是外部服务器，从而难以准确地进行代码外泄保护。发明内容本发明提供一种基于githook脚本的代码外泄保护方法和装置，用以解决现有技术中代码外泄保护易失效的缺陷。本发明提供一种基于githook脚本的代码外泄保护方法，包括：基于git平台的hook机制检测用户触发的源代码推送事件；若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。根据本发明提供的一种基于githook脚本的代码外泄保护方法，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。根据本发明提供的一种基于githook脚本的代码外泄保护方法，所述预推脚本是基于如下步骤维护的：系统初始化时，对系统磁盘进行全盘遍历，获取所述系统磁盘中的所有.git目录；针对每一个.git目录，对相应.git目录的hook文件夹中的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令的能力，以及获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台的能力；启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态。根据本发明提供的一种基于githook脚本的代码外泄保护方法，所述启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态，具体包括：保存每一个.git目录下当前的预推脚本作为相应.git目录下的参考预推脚本后，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件；若监控到任一.git目录下的预推脚本的文件修改事件，则获取修改后的预推脚本，并比对所述任一.git目录下的参考预推脚本和修改后的预推脚本；若所述任一.git目录下的修改后的预推脚本涉及的修改位置与所述代码推送监控工具相关，则基于所述任一.git目录下的参考预推脚本替换所述任一.git目录下的修改后的预推脚本；否则，保存所述任一.git目录下的修改后的预推脚本作为所述任一.git目录下的参考预推脚本。根据本发明提供的一种基于githook脚本的代码外泄保护方法，所述基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，具体包括：所述代码推送监控工具读取白名单配置文件中的白名单仓库地址；逐条匹配所述白名单仓库地址与所述目标仓库地址，确定所述目标仓库地址与每条白名单仓库地址的匹配结果；若所述目标仓库地址与任一条白名单仓库地址的匹配结果为匹配成功，则确定所述目标仓库地址的推送权限为允许推送；若所述目标仓库地址与所有白名单仓库地址的匹配结果均为匹配失败，则确定所述目标仓库地址的推送权限为阻断推送。根据本发明提供的一种基于githook脚本的代码外泄保护方法，所述白名单配置文件中的白名单仓库地址为正则表达式，所述白名单仓库地址与所述目标仓库地址的匹配方式为正则匹配。本发明还提供一种基于githook脚本的代码外泄保护装置，包括：事件捕获单元，用于基于git平台的hook机制检测用户触发的源代码推送事件；目标仓库地址获取单元，用于若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；仓库地址鉴定单元，用于基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；代码推送控制单元，用于若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。根据本发明提供的一种基于githook脚本的代码外泄保护装置，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。本发明还提供一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，所述处理器执行所述程序时实现如上述任一种所述基于git hook脚本的代码外泄保护方法。本发明还提供一种非暂态计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现如上述任一种所述基于git hook脚本的代码外泄保护方法。本发明还提供一种计算机程序产品，包括计算机程序，所述计算机程序被处理器执行时实现如上述任一种所述基于githook脚本的代码外泄保护方法。本发明提供的基于githook脚本的代码外泄保护方法和装置，通过git平台的hook机制检测用户触发的源代码推送事件并获取源代码推送事件中包含的目标仓库地址，再基于预推脚本将目标仓库地址传输至代码推送监控工具，利用代码推送监控工具对目标仓库地址进行推送权限鉴别，得到目标仓库地址的推送权限，并将目标仓库地址的推送权限返回至git平台，使得git平台可以基于目标仓库地址的推送权限决策是否将源代码推送至该目标仓库地址中，保障了源码外泄检测和控制的可靠性和准确性，且其稳定性、兼容性以及效率更高；此外，该方法可以准确地区分被允许的本地推送行为和不被允许的外部推送行为，因此可以在更精确地进行代码外泄保护的同时不影响用户的正常使用操作。附图说明为了更清楚地说明本发明或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作一简单地介绍，显而易见地，下面描述中的附图是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1是本发明提供的基于git hook脚本的代码外泄保护方法的流程示意图；图2是本发明提供的预推脚本维护方法的流程示意图；图3是本发明提供的推送权限确定方法的流程示意图；图4是本发明提供的基于git hook脚本的代码外泄保护装置的结构示意图；图5是本发明提供的电子设备的结构示意图。具体实施方式为使本发明的目的、技术方案和优点更加清楚，下面将结合本发明中的附图，对本发明中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。图1是本发明提供的基于git hook脚本的代码外泄保护方法的流程示意图，如图1所示，该方法包括：步骤110，基于git平台的hook机制检测用户触发的源代码推送事件；步骤120，若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；步骤130，基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；步骤140，若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。具体地，git平台具备hook机制可以检测用户触发的各类事件，包括源代码推送事件。当用户在git平台添加代码并点击提交和推送后，可以触发源代码推送事件，此时git平台可以捕获到该事件。当git平台捕获到源代码推送事件后，可以获取该源代码推送事件中包含的目标仓库地址，即用户需要将源代码推送至的目的仓库。为了进行代码外泄保护，可以在用户点击推送代码但git平台仍未实际进行推送操作时对待推送代码的推送地址进行识别，确定其推送地址是公司内部地址还是外部地址，从而阻止用户将代码推送至不被允许的外部地址。此处，可以预先在git平台中预设预推脚本，以在检测到源代码推送事件后将git平台获取的目标仓库地址传输至自定义的代码推送监控工具，以对目标仓库地址进行推送权限鉴别。其中，可以在.git/hooks目录下新建预推脚本。由于git平台中使用标准的命名体系即可按照预设的时间点执行相应脚本，因此可以将预推脚本命名为pre-push脚本，使其在git平台推送代码之前运行。在该预推脚本中，会执行数据传输命令，将上述目标仓库地址传输至自定义的代码推送监控工具，并接收代码推送监控工具的返回结果并将其返回至git平台。代码推送监控工具会对上述目标仓库地址进行推送权限鉴别，确定该目标仓库地址是否为被允许的推送地址，从而确定该目标仓库地址的推送权限。其中，若该目标仓库地址为被允许的推送地址，则可以确定该目标仓库地址的推送权限为允许推送；若该目标仓库地址为不被允许的推送地址，则可以确定该目标仓库地址的推送权限为阻断推送。git平台根据预推脚本返回的目标仓库地址的推送权限对源代码推送事件进行处理。若目标仓库地址的推送权限为允许推送，则git平台将上述源代码推送事件中包含的源代码推送至上述目标仓库地址中；若目标仓库地址的推送权限为阻断推送，则git平台将阻断上述源代码推送事件，不再将上述源代码推送事件中包含的源代码推送至上述目标仓库地址中。可见，本发明实施例通过使用git平台的hook机制能够精准的捕获用户的源代码推送操作，且能够获取源代码待推送的目标仓库地址，从而利用自定义的代码推送监控工具对目标仓库地址进行推送权限鉴别，从而决策是否将该代码推送行为阻断掉，保障了源码外泄检测和控制的可靠性和准确性，且该方式利用了git平台本身的hook机制，不受git平台私有加密协议的影响，也不必对网络流量进行分析，且保护机制运行在应用层，不涉及底层驱动和应用程序注入，因此其稳定性、兼容性以及效率更高。此外，该方法可以获取代码推送的目标仓库地址并对该目标仓库地址进行逻辑判断，从而准确地区分被允许的本地推送行为和不被允许的外部推送行为，因此可以在更精确地进行代码外泄保护的同时不影响用户的正常使用操作。本发明实施例提供的方法，通过git平台的hook机制检测用户触发的源代码推送事件并获取源代码推送事件中包含的目标仓库地址，再基于预推脚本将目标仓库地址传输至代码推送监控工具，利用代码推送监控工具对目标仓库地址进行推送权限鉴别，得到目标仓库地址的推送权限，并将目标仓库地址的推送权限返回至git平台，使得git平台可以基于目标仓库地址的推送权限决策是否将源代码推送至该目标仓库地址中，保障了源码外泄检测和控制的可靠性和准确性，且其稳定性、兼容性以及效率更高；此外，该方法可以准确地区分被允许的本地推送行为和不被允许的外部推送行为，因此可以在更精确地进行代码外泄保护的同时不影响用户的正常使用操作。基于上述实施例，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。具体地，预推脚本获取代码推送监控工具的地址，并将git平台获取的目标仓库地址传输至代码推送监控工具中，并执行代码推送监控工具的推送权限鉴别命令。推送权限鉴别命令执行完毕退出之后，预推脚本会获取上述推送权限鉴别命令的退出状态。若推送权限鉴别命令的退出状态为正常，表明该推送权限鉴别命令的执行过程中没有出现错误，因此可以获取推送权限鉴别命令返回的执行结果，作为目标仓库地址的推送权限，并将目标仓库地址的推送权限返回至git平台。基于上述任一实施例，如图2所示，所述预推脚本是基于如下步骤维护的：步骤210，系统初始化时，对系统磁盘进行全盘遍历，获取所述系统磁盘中的所有.git目录；步骤220，针对每一个.git目录，对相应.git目录的hook文件夹中的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令的能力，以及获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台的能力；步骤230，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态。具体地，由于上述代码外泄保护方案用到了git的hook机制和预推脚本，因此可能存在用户恶意规避此监控方法的情况，因此为了确保代码外泄保护方法的有效性，可以增加可靠性保证机制，保证预推脚本的监控功能的可靠性。其中，可以在系统初始化时，对系统磁盘进行全盘遍历，获取该系统磁盘中所有的.git目录。针对每一个.git目录，对相应.git目录的hook文件夹中原始的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至代码推送监控工具并执行代码推送监控工具的推送权限鉴别命令的能力，以及具备获取推送权限鉴别命令返回的执行结果，作为目标仓库地址的推送权限，并将该目标仓库地址的推送权限返回至git平台的能力。随后，开启文件监控机制对磁盘文件进行监控，监控每一个.git目录下的预推脚本的文件修改事件。在监控到任一.git目录下的预推脚本的文件修改事件后，对该.git目录下的预推脚本执行文件还原操作，使得该.git目录下的预推脚本恢复至文件修改事件发生前的状态，从而确保该脚本一定是具有上述“监控”能力的。基于上述任一实施例，所述启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态，具体包括：保存每一个.git目录下当前的预推脚本作为相应.git目录下的参考预推脚本后，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件；若监控到任一.git目录下的预推脚本的文件修改事件，则获取修改后的预推脚本，并比对所述任一.git目录下的参考预推脚本和修改后的预推脚本；若所述任一.git目录下的修改后的预推脚本涉及的修改位置与所述代码推送监控工具相关，则基于所述任一.git目录下的参考预推脚本替换所述任一.git目录下的修改后的预推脚本；否则，保存所述任一.git目录下的修改后的预推脚本作为所述任一.git目录下的参考预推脚本。具体地，在针对每一个.git目录，对相应.git目录的hook文件夹中的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令的能力，以及获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台的能力之后，保存每一个.git目录下当前的预推脚本作为相应.git目录下的参考预推脚本。随后，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件。若监控到任一.git目录下的预推脚本的文件修改事件，则获取修改后的预推脚本，并比对该.git目录下的参考预推脚本和修改后的预推脚本，确定修改后的预推脚本与参考预推脚本之间的区别代码所在的位置，作为修改后的预推脚本涉及的修改位置。若该.git目录下的修改后的预推脚本涉及的修改位置与代码推送监控工具相关，例如删除了将git平台获取的目标仓库地址传输至代码推送监控工具的命令行，或者删除了获取推送权限鉴别命令返回的执行结果的命令行等，则基于该.git目录下的参考预推脚本替换该.git目录下的修改后的预推脚本。若该.git目录下的修改后的预推脚本涉及的修改位置与代码推送监控工具不相关，例如增加了其他监控功能，则可以保存该.git目录下的修改后的预推脚本作为该.git目录下的参考预推脚本，且不执行文件还原操作。基于上述任一实施例，如图3所示，所述基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，具体包括：步骤310，所述代码推送监控工具读取白名单配置文件中的白名单仓库地址；步骤320，逐条匹配所述白名单仓库地址与所述目标仓库地址，确定所述目标仓库地址与每条白名单仓库地址的匹配结果；步骤330，若所述目标仓库地址与任一条白名单仓库地址的匹配结果为匹配成功，则确定所述目标仓库地址的推送权限为允许推送；步骤340，若所述目标仓库地址与所有白名单仓库地址的匹配结果均为匹配失败，则确定所述目标仓库地址的推送权限为阻断推送。具体地，代码推送监控工具读取白名单配置文件，获取其中记录的白名单仓库地址。其中，白名单仓库地址为系统允许推送的网络地址或网络地址的正则表达式。逐条匹配白名单仓库地址与目标仓库地址，确定目标仓库地址与每条白名单仓库地址的匹配结果。其中，当白名单仓库地址为系统允许推送的网络地址的正则表达式时，白名单仓库地址与目标仓库地址的匹配方式为正则匹配。如果目标仓库地址与任一条白名单仓库地址的匹配结果为匹配成功，则说明用户将代码提交到允许的仓库中，因此可以确定该目标仓库地址的推送权限为允许推送；如果目标仓库地址与所有白名单仓库地址的匹配结果均为匹配失败，则说明用户将代码推送到不允许的仓库中，因此可以确定该目标仓库地址的推送权限为阻断推送，同时调用防泄漏的组件将此次违规操作上传到系统管理端通知管理员。下面对本发明提供的基于git hook脚本的代码外泄保护装置进行描述，下文描述的基于githook脚本的代码外泄保护装置与上文描述的基于git hook脚本的代码外泄保护方法可相互对应参照。基于上述任一实施例，图4是本发明提供的基于git hook脚本的代码外泄保护装置的结构示意图，如图4所示，该装置包括：事件捕获单元410、目标仓库地址获取单元420、仓库地址鉴定单元430和代码推送控制单元440。其中，事件捕获单元410用于基于git平台的hook机制检测用户触发的源代码推送事件；目标仓库地址获取单元420用于若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；仓库地址鉴定单元430用于基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；代码推送控制单元440用于若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。本发明实施例提供的装置，通过git平台的hook机制检测用户触发的源代码推送事件并获取源代码推送事件中包含的目标仓库地址，再基于预推脚本将目标仓库地址传输至代码推送监控工具，利用代码推送监控工具对目标仓库地址进行推送权限鉴别，得到目标仓库地址的推送权限，并将目标仓库地址的推送权限返回至git平台，使得git平台可以基于目标仓库地址的推送权限决策是否将源代码推送至该目标仓库地址中，保障了源码外泄检测和控制的可靠性和准确性，且其稳定性、兼容性以及效率更高；此外，该方法可以准确地区分被允许的本地推送行为和不被允许的外部推送行为，因此可以在更精确地进行代码外泄保护的同时不影响用户的正常使用操作。基于上述任一实施例，所述基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台，具体包括：所述预推脚本获取所述代码推送监控工具的地址后，将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令；所述预推脚本获取所述推送权限鉴别命令的退出状态，若所述推送权限鉴别命令的退出状态为正常，则获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台。基于上述任一实施例，所述预推脚本是基于如下步骤维护的：系统初始化时，对系统磁盘进行全盘遍历，获取所述系统磁盘中的所有.git目录；针对每一个.git目录，对相应.git目录的hook文件夹中的预推脚本进行修改，使得修改后的预推脚本具备将git平台获取的目标仓库地址传输至所述代码推送监控工具并执行所述代码推送监控工具的推送权限鉴别命令的能力，以及获取所述推送权限鉴别命令返回的执行结果，作为所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至git平台的能力；启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态。基于上述任一实施例，所述启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件，并在监控到任一.git目录下的预推脚本的文件修改事件后，对所述任一.git目录下的预推脚本执行文件还原操作，使得所述任一.git目录下的预推脚本恢复至所述文件修改事件发生前的状态，具体包括：保存每一个.git目录下当前的预推脚本作为相应.git目录下的参考预推脚本后，启动文件监控机制，监控每一个.git目录下的预推脚本的文件修改事件；若监控到任一.git目录下的预推脚本的文件修改事件，则获取修改后的预推脚本，并比对所述任一.git目录下的参考预推脚本和修改后的预推脚本；若所述任一.git目录下的修改后的预推脚本涉及的修改位置与所述代码推送监控工具相关，则基于所述任一.git目录下的参考预推脚本替换所述任一.git目录下的修改后的预推脚本；否则，保存所述任一.git目录下的修改后的预推脚本作为所述任一.git目录下的参考预推脚本。基于上述任一实施例，所述基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，具体包括：所述代码推送监控工具读取白名单配置文件中的白名单仓库地址；逐条匹配所述白名单仓库地址与所述目标仓库地址，确定所述目标仓库地址与每条白名单仓库地址的匹配结果；若所述目标仓库地址与任一条白名单仓库地址的匹配结果为匹配成功，则确定所述目标仓库地址的推送权限为允许推送；若所述目标仓库地址与所有白名单仓库地址的匹配结果均为匹配失败，则确定所述目标仓库地址的推送权限为阻断推送。基于上述任一实施例，所述白名单配置文件中的白名单仓库地址为正则表达式，所述白名单仓库地址与所述目标仓库地址的匹配方式为正则匹配。图5是本发明提供的电子设备的结构示意图，如图5所示，该电子设备可以包括：处理器510、存储器520、通信接口530和通信总线540，其中，处理器510，存储器520，通信接口530通过通信总线540完成相互间的通信。处理器510可以调用存储器520中的逻辑指令，以执行基于githook脚本的代码外泄保护方法，该方法包括：基于git平台的hook机制检测用户触发的源代码推送事件；若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。此外，上述的存储器520中的逻辑指令可以通过软件功能单元的形式实现并作为独立的产品销售或使用时，可以存储在一个计算机可读取存储介质中。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分或者该技术方案的部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台计算机设备执行本发明各个实施例所述方法的全部或部分步骤。而前述的存储介质包括：U盘、移动硬盘、只读存储器、随机存取存储器、磁碟或者光盘等各种可以存储程序代码的介质。另一方面，本发明还提供一种计算机程序产品，所述计算机程序产品包括存储在非暂态计算机可读存储介质上的计算机程序，所述计算机程序包括程序指令，当所述程序指令被计算机执行时，计算机能够执行上述各方法所提供的基于git hook脚本的代码外泄保护方法，该方法包括：基于git平台的hook机制检测用户触发的源代码推送事件；若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。又一方面，本发明还提供一种非暂态计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现以执行上述各提供的基于git hook脚本的代码外泄保护方法，该方法包括：基于git平台的hook机制检测用户触发的源代码推送事件；若检测到源代码推送事件，则git平台获取所述源代码推送事件中包含的目标仓库地址；基于预推脚本将所述目标仓库地址传输至代码推送监控工具，基于所述代码推送监控工具对所述目标仓库地址进行推送权限鉴别，得到所述目标仓库地址的推送权限，并将所述目标仓库地址的推送权限返回至所述预推脚本；所述预推脚本将所述目标仓库地址的推送权限返回至git平台；若所述目标仓库地址的推送权限为允许推送，则git平台将所述源代码推送事件中包含的源代码推送至所述目标仓库地址中；若所述目标仓库地址的推送权限为阻断推送，则git平台阻断所述源代码推送事件。以上所描述的装置实施例仅仅是示意性的，其中所述作为分离部件说明的单元可以是或者也可以不是物理上分开的，作为单元显示的部件可以是或者也可以不是物理单元，即可以位于一个地方，或者也可以分布到多个网络单元上。可以根据实际的需要选择其中的部分或者全部模块来实现本实施例方案的目的。本领域普通技术人员在不付出创造性的劳动的情况下，即可以理解并实施。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到各实施方式可借助软件加必需的通用硬件平台的方式来实现，当然也可以通过硬件。基于这样的理解，上述技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品可以存储在计算机可读存储介质中，如ROM/RAM、磁碟、光盘等，包括若干指令用以使得一台计算机设备执行各个实施例或者实施例的某些部分所述的方法。最后应说明的是：以上实施例仅用以说明本发明的技术方案，而非对其限制；尽管参照前述实施例对本发明进行了详细的说明，本领域的普通技术人员应当理解：其依然可以对前述各实施例所记载的技术方案进行修改，或者对其中部分技术特征进行等同替换；而这些修改或者替换，并不使相应技术方案的本质脱离本发明各实施例技术方案的精神和范围。
