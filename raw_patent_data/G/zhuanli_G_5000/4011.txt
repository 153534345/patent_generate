标题title
基于元框架的数据定义与关系的孪生建模方法
摘要abst
本发明提供了基于元框架的数据定义与关系的孪生建模方法，涉及框架结构信息技术领域，本方法包括步骤S1：元由初始符号元与用户符号元构成，根据不同软件应用定义出的用户符号，并与基本符号元形成关联；S2：基于步骤S1中的元进行预设定义，通过对元与元的关联对软件系统构架进行数字孪生，并形成元框架的数据规格库；S3：采用标识方式对元定义与元关系进行保存，可通过图形的方式进行关联的查看，并采用低代码平台进行维护。本方法能够通过元框架统一不同的开发语言或开发环境所需要的开发方式。
权利要求书clms
1.基于元框架的数据定义与关系的孪生建模方法，其特征在于，包括步骤：S1：元由初始符号元与用户符号元构成，根据不同软件应用定义出的用户符号，并与基本符号元形成关联；S2：基于步骤S1中的元进行预设定义，通过对元与元的关联对软件系统构架进行数字孪生，并形成元框架的数据规格库；S3：采用标识方式对元定义与元关系进行保存，可通过图形的方式进行关联的查看，并采用低代码平台进行维护。2.根据权利要求1所述的基于元框架的数据定义与关系的孪生建模方法，其特征在于，所述步骤S2包括：S21：当软件在建设时，均通过两两符号元之间形成关联的方式进行定义；S22：通过修改元与元间的关联定义形成软件的基因DNA，对软件系统构架的数字孪生，通过解析工具实现应用。3.根据权利要求1所述的基于元框架的数据定义与关系的孪生建模方法，其特征在于，两个不同的符号元之间通过连接元建立关联。4.根据权利要求1所述的基于元框架的数据定义与关系的孪生建模方法，其特征在于，所述低代码分为数据类语法，作业项类语法，功能类语法和控件类语法。
说明书desc
技术领域本发明涉及框架结构信息技术领域，具体而言，涉及基于元框架的数据定义与关系的孪生建模方法。背景技术当前软件行业主流的开发框架都有的各自的优缺点，有适用于小型系统的开发框架，有适用于大型或分布系统的开发框架，每种开发框架都有个各自的开发层次与标准，针对不同的开发语言或开发环境也会开发方式的不同。对于开发人员来讲，要掌握所有的开发框架也具有一定难度。发明内容本发明解决的问题是如何统一不同的开发语言或开发环境所需要的开发方式。为解决上述问题，本发明提供基于元框架的数据定义与关系的孪生建模方法，包括步骤：S1：元由初始符号元与用户符号元构成，根据不同软件应用定义出的用户符号，并与基本符号元形成关联；S2：基于步骤S1中的元进行预设定义，通过对元与元的关联对软件系统构架进行数字孪生，并形成元框架的数据规格库；S3：采用标识方式对数据库的内容进行保存，通过建立图形的方式进行关联的查看，并采用低代码平台进行维护。上述方法中，基于元框架的数据规格定义技术，采用模拟生命体构建的DNA碱基对方式，对软件系统构架进行数字孪生。软件系统无论是复杂的应用或简单的应用，都归纳为元构成，元分为符号元与连接元。符号元为系统中应用到的最基本的符号，由两类初始符号元与用户符号元构成。初始符号元为系统构成的最初始符号，根据版本的迭代会有少量增加。如模块、作业项、功能、页签、输入框、表格、数据库、表、字段、索引等符号。用户符号元，根据不同软件应用定义出的用户符号，并与基本符号元形成关联，如模块对应销售、采购、库存等，作业项对应销售订单、采购订单、入库单等，功能对应新增、删除、修改等。连接元为两个不同的符号元之间建立关联时使用，表示符号元间采用什么样的方式进行关联。如模块封装、操作指定、输入框绑定等。上述方法中，基于以上元的原理，对于任何软件在建设之初或运行维护期间，均通过两两符号元之间形成关联的方式进行定义，形成元框架的数据规格库，包括后期对软件的调整均通过修改元与元间的关联定义来实现，从而形成软件的基因DNA，实现对软件系统构架的数字孪生，通过统一的解析工具，便可实现纷繁多样的应用。进一步地，所述步骤S2包括：S21：当软件在建设时，均通过两两符号元之间形成关联的方式进行定义；S22：通过修改元与元间的关联定义形成软件的基因DNA，对软件系统构架的数字孪生，通过解析工具实现应用。进一步地，两个不同的符号元之间通过连接元建立关联。进一步地，所述低代码分为数据类语法，作业项类语法，功能类语法和控件类语法。本发明采用上述技术方案包括以下有益效果：本发明基于元框架的数据规格定义技术，采用模拟生命体构建的DNA碱基对方式，实现对软件系统构架的数字孪生，软件系统无论是复杂的应用或简单的应用，都归纳为元，其构成为元分为符号元与连接元，模拟生物体构成的方式实现对软件开发框架的定义，将软件应用分解成最小单位元，开发人员需在开发时通过低代码开发的方式对元进行关联维护，就能快速形成软件的数据规格定义库，并在此基础上，通过统一的规格库解析工具开发出各类软件系统。附图说明图1为本发明实施例提供的基于元框架的数据定义与关系的孪生建模方法流程图一；图2为本发明实施例提供的基于元框架的数据定义与关系的孪生建模方法流程图二；图3为本发明实施例提供的基于元框架的数据定义与关系的孪生建模方法中传统应用构建模型和元应用构建模型的示意图。具体实施方式为使本发明的上述目的、特征和优点能够更为明显易懂，下面结合附图对本发明的具体实施例做详细的说明。以下是本发明的具体实施例并结合附图，对本发明的技术方案作进一步的描述，但本发明并不限于这些实施例。实施例本实施例提供了基于元框架的数据定义与关系的孪生建模方法，如图1和图2所示，本方法包括步骤：S1：元由初始符号元与用户符号元构成，根据不同软件应用定义出的用户符号，并与基本符号元形成关联；S2：基于步骤S1中的元进行预设定义，通过对元与元的关联对软件系统构架进行数字孪生，并形成元框架的数据规格库；S3：采用标识方式对数据库的内容进行保存，通过建立图形的方式进行关联的查看，并采用低代码平台进行维护。具体的，本方法由Meta元定义，元关联方式与元低代码维护工具三大部分组成，基于元框架的数据规格定义技术，其中元框架采用Meta-Frame，通过采用模拟生命体构建的DNA碱基对方式，实现对软件系统构架的数字孪生，软件系统无论是复杂的应用或简单的应用，都归纳为元构成，元分为符号元与连接元。符号元为系统中应用到的最基本的符号，由两类构成，分别为初始符号元与用户符号元构成。其中，初始符号元为系统构成的最初始符号，有4大类，107个，已归纳出软件构成的最基本的元，根据版本的迭代会有少量增加。如模块、作业项、功能、页签、输入框、表格、数据库、表、字段、索引等符号。用户符号元，根据不同软件应用定义出的用户符号，并与基本符号元形成关联，如模块对应销售、采购、库存等，作业项对应销售订单、采购订单、入库单等，功能对应新增、删除、修改等。连接元为两个不同的符号元之间建立关联时使用，表示符号元间采用什么样的方式进行关联。如模块封装、操作指定、输入框绑定等。具体的，基于以上元的原理，对于任何软件在建设之初或运行维护期间，均通过两两符号元之间形成关联的方式进行定义，形成元框架的数据规格库，包括后期对软件的调整均通过修改元与元间的关联定义来实现，从而形成软件的基因DNA，实现对软件系统构架的数字孪生，通过统一的解析工具，便可实现纷繁多样的应用。连接记录标识，唯一标识，每一条记录都是唯一不重复。连接元标识，来源于连接元集，表示采用什么样的方式进行关联。源符号元标识，可以是基础符号元或用户符号元，以基础符号元为主。目标元标识，可以是基础符号元或用户符号元，以用户符号元为主。参阅图2，其中，步骤S2包括S21：当软件在建设时，均通过两两符号元之间形成关联的方式进行定义；S22：通过修改元与元间的关联定义形成软件的基因DNA，对软件系统构架的数字孪生，通过解析工具实现应用。其中，两个不同的符号元之间通过连接元建立关联。其中，低代码分为数据类语法，作业项类语法，功能类语法和控件类语法。具体的，销售订单-打印-合同模板，实现销售订单的合同打印功能；建立销售订单与销售合同模板的用户符号元；采用打印连接关联销售订单与销售合同模板。具体的，销售订单主档-字段-成本价，销售订单增加成本价字段，浮点型；建立或使用相关元标识；建立关联，此功能需要建立两个关联；建立成本字段为浮点型的关联；建立销售订单与成本字段的关联。具体的，将软件定义为由元分为符号元与连接元。基于以上元的原理，对于任何软件在建设之初或运行维护期间，均通过两两符号元之间形成关联的方式进行定义，形成元框架的数据规格库，从而形成软件的基因DNA，实现对软件系统构架的数字孪生。通过统一的元维护与解析工具，实现纷繁多样的应用。参阅图3，对于复杂的系统建设，目前采用的是微服务构架。相关原理如下：将应用程序构建成服务套件。每个服务都是独立部署和可扩展的，拥有自己的API边界。不同的服务可以用不同的编程语言编写，管理它们自己的数据库，由不同的团队开发。软件整体采用1+N的方式，由建设方搭建统一的Paas层，并提供相关开发工具。各类应用由不同的软件服务商开发，完成后打包到平台后再给企业使用。开发商的开发模式与开发能力极大影响系统的健壮性与稳定性。各应用也会存在相对独立的数据库。如基础资料某项内容的增、删、改需要各开发商都进行相关的调整。系统很难做到各大应用能够真正的集成，深度的融合。对所有的应用进行统一的数据元定义，将我们为制造业的不同产品系列的多项具体应用采取同样数据元定义，同样的数据规格框架，构建成统一的数据库，就彻底解决了：随着不同应用软件的应用加深，需要实现更多数据对接以实现更多软件协同融合的问题，基于本方法的MetaFrame技术，就不需要对接行为产生了，因为数据本来就在一起；不同应用软件其中一个变化，需要数据重新对接的问题，也不会出现了。因为以上的各项应用本来就是基于这个数据底座开发的软件应用，只要软件进行变动，就必须按照元框架要求进行设计和编程，所以，不会出现一个应用变化，其他应用需要重新数据对接的问题。本方法基于元框架的数据规格定义技术，采用模拟生命体构建的DNA碱基对方式，对软件系统构架进行数字孪生，软件系统无论是复杂的应用或简单的应用，都归纳为元，其构成为元分为符号元与连接元，模拟生物体构成的方式实现对软件开发框架的定义，将软件应用分解成最小单位元，开发人员需在开发时通过低代码开发的方式对元进行关联维护，就能快速形成软件的数据规格定义库，并在此基础上，通过统一的规格库解析工具开发出各类软件系统。虽然本公开披露如上，但本公开的保护范围并非仅限于此。本领域技术人员，在不脱离本公开的精神和范围的前提下，可进行各种变更与修改，这些变更与修改均将落入本发明的保护范围。
