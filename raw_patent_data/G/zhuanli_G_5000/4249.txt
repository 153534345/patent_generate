标题title
一种复杂实时嵌入式系统的软件架构设计与架构传递方法
摘要abst
本发明公开了一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，包括如下步骤：步骤1、根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTE Profile进行软件架构设计建模；步骤2、定义软件架构模型元素与软件详细设计模型元素的传递规则；步骤3、基于传递规则实现软件架构模型到软件详细设计模型的传递。本发明可对复杂实时嵌入式系统软件架构进行合理建模以支持系统实时性及相关性能的分析，在确定了系统软件架构满足系统性能要求之后，将系统的软件架构模型自动转换为软件详细设计模型的框架，实现了基于模型的复杂实时嵌入式系统开发过程中系统架构模型与系统详细设计模型之间传递的高效性，一致性。
权利要求书clms
1.一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，包括如下步骤：步骤1、根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTE Profile进行软件架构设计建模；步骤2、定义软件架构模型元素与软件详细设计模型元素的传递规则；步骤3、基于传递规则实现软件架构模型到软件详细设计模型的传递。2.根据权利要求1所述的一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，所述步骤1根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTE Profile进行软件架构设计建模，具体包括：基于复杂实时嵌入式系统的SysML及MARTE Profile软件架构设计建模，根据复杂实时嵌入式系统的软件需求和设计约束，进行软件功能用例分析，开展应用软件配置项研发，应用软件架构中使用进程以及线程，所述的进程包含多个线程，所述的进程和线程均使用SysML中的Block进行表示，或者使用MARTE Profile对Block进行封装后进行表示。3.根据权利要求2所述的一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，对block单独使用包进行组织，从而区分代表进程和线程的Block与表示应用软件的Block，表示应用软件的进程中的线程之间的数据流交互使用内部块图IBD进行描述，表示进程Block的Port表示功能的信息流端口，连接Connection用于表示进程和线程之间的信息流连接关系，其中内部块图IBD中的组成部分通过定义好的MARTE元素进行线程和进程的区分。4.根据权利要求1所述的一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，所述步骤2定义软件架构模型元素与软件详细设计模型元素的传递规则，具体包括：确定软件详细设计使用的特定领域建模语言，根据嵌入式实时系统的架构模型中使用的模型元素，确定架构模型中的哪些模型元素需要向软件详细设计领域传递，然后根据架构模型元素与软件详细设计模型元素所表示概念确立它们之间的对应关系；在确定了两种模型元素之间的对应关系之后，需要确定两种模型定义方式之间的关系；然后根据它们定义方式之间的关系确定模型转换的方法；模型转换技术基于OMG相关标准来实现，从转换后产生的目标模型类型来划分，模型的转换分为两种模式，模型到模型的转换和模型到文本的转换；如果被转换模型和转换后模型都是基于MOF标准的元模型，那么选择模型到模型的转换方式，如果转换后的模型不是基于MOF标准的元模型，那么就选择模型到文本的转换方式。5.根据权利要求1所述的一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，所述步骤3基于传递规则实现软件架构模型到软件详细设计模型的传递，具体包括：利用步骤2确定的模型转换方法，选择具体的转换实现技术以及工具平台，进行模型转换的实现，从而实现从软件架构模型到软件详细设计模型之间的自动传递。6.根据权利要求5所述的一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，其特征在于，所述步骤3基于传递规则实现软件架构模型到软件详细设计模型的传递，具体包括：针对模型到模型和模型到文本的转换实现方式采用OMG定义的相关的标准，其中QVT标准是模型到模型转换的标准，而MOFM2T标准是模型到文本转换的标准。
说明书desc
技术领域本发明设计嵌入式实时系统领域，特别涉及嵌入式实时系统软件架构模型与软件详细设计模型之间进行传递的方法。背景技术航空嵌入式系统是航空飞行器中重要的组成系统，作为一种特殊的嵌入式系统，航空嵌入式系统的对系统的性能和质量特性具有严苛的要求。随着航空飞行器网络化、智能化程度的增强，航空嵌入式系统的重要性也不断增加，同时系统的复杂性也相应增加。为了应对系统复杂性的挑战，基于模型的系统工程方法已经成为航空嵌入式系统开发中的重要手段。在以往基于模型的嵌入式实时系统设计工作中，在确定了系统软件架构模型之后，往往由软件详细设计人员通过对系统软件架构模型进行理解后，手动建立软件详细设计模型。这种建模方式存在如下的不足：1、模型传递效率较低为了表示系统多个方面的特征，系统架构模型中往往采用了多种建模元素，除过基本的表示系统结构和行为的建模元素外，还有许多表示系统性能方面的多种建模元素。软件详细设计建模人员需要了解多种软件架构建模元素，然后确定哪些架构建模元素需要传递到软件详细设计模型，然后手动创建对应的软件详细设计模型。2、容易存在模型不一致从软件架构模型到系统详细设计模型传递与转换是由人工进行，不同的人员由于个体因素，不同的设计人员所产生的转换结果往往存在不一致。同时由于软件复杂性的不断增加，人工进行转换也往往容易出错，这样也会导致软件架构模型和软件详细设计模型之间的不一致。发明内容为了解决上述技术问题，本发明梳理了实时嵌入式系统软件架构与详细设计之间的传递规则及传递方法，提出一种复杂实时嵌入式系统的软件架构设计与架构传递方法。本发明的技术方案为：一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，包括如下步骤：步骤1、根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTEProfile进行软件架构设计建模；步骤2、定义软件架构模型元素与软件详细设计模型元素的传递规则；步骤3、基于传递规则实现软件架构模型到软件详细设计模型的传递。进一步的，所述步骤1基于复杂实时嵌入式系统的软件需求和设计约束，进行软件架构设计，对复杂实时嵌入式系统进行SysML及MARTE Profile的软件架构设计建模，具体包括：软件架构设计建模将引入MARTE，MARTE是OMG基于UML的扩展机制定义的一种针对实时嵌入式系统进行建模与分析的特定领域建模语言，MARTE概要文件的组织架构如图2所示。MARTE主要侧重于性能和可调度性分析，但是，它也提供了一个通用的分析框架，基于这个框架，可以扩展出其他种类的分析。使用MARTE中的建模元素可以定义嵌入式系统应用软件的组成。应用软件架构中使用进程以及线程的概念，进程将包含多个线程，这两个概念均使用SysML中的Block进行表示。为了区分代表进程和线程的Block与表示应用软件的Block，建议将其单独使用包进行组织。表示应用软件的进程中的线程之间的数据流交互使用内部块图进行描述。表示进程Block的Port表示功能的信息流端口，连接Connection用于表示进程和线程之间的信息流连接关系，其中内部块图中的组成部分通过定义好的MARTE元素进行线程和进程的区分；进一步的，所述步骤2定义软件架构模型元素与软件详细设计模型元素的传递规则，具体包括：确定软件详细设计使用的特定领域建模语言，根据嵌入式实时系统的架构模型中使用的模型元素，确定架构模型中的哪些模型元素需要向软件详细设计领域传递，然后根据架构模型元素与软件详细设计模型元素所表示概念确立它们之间的对应关系；在确定了两种模型元素之间的对应关系之后，需要确定两种模型定义方式之间的关系；然后根据它们定义方式之间的关系确定模型转换的方法。目前的模型转换技术主要基于OMG相关标准来实现。从转换后产生的目标模型类型来划分，模型的转换通常分为两种模式，模型到模型的转换和模型到文本的转换。如果被转换模型和转换后模型都是基于MOF标准的元模型，那么可以选择模型到模型的转换方式，如果转换后的模型不是基于MOF标准的元模型，那么就选择模型到文本的转换方式。进一步的，所述步骤3基于传递规则实现软件架构模型到软件详细设计模型的传递，具体包括：此阶段利用步骤2确定的模型转换方法，选择具体的转换实现技术以及工具平台，进行模型转换的实现。从而实现从软件架构模型到软件详细设计模型之间的自动传递。OMG针对模型到模型和模型到文本的转换实现方式定义了相关的标准，其中QVT标准是模型到模型转换的主要标准，而MOFM2T标准是模型到文本转换的主表标准。模型转换的实现技术基本都遵循这些标准，在选择实现技术的时候尽可能选择采用声明方式进行模型转换的实现技术。有益效果：本发明的设计方法可对基于OMG的MOF标准体系下创建的实时嵌入式软件系统架构模型，在统一的模型转换规则和转换方法的基础上，自动产生软件详细设计模型的模型框架，实现实时嵌入式软件系统架构模型向软件详细设计模型传递的自动化、一致性、高效性。附图说明图1本发明的方法总体流程图；图2MARTE Profile构成；图3MARTE Profile实现；图4航空计算机主控板软件架构SysML及MATRE Profile建模示例；图5航空计算机主控板软件架构Acceleo转换代码示例；图6航空计算机主控板软件架构生成的Simulink模型示例。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整的描述，显然，所描述的实施例仅为本发明的一部分实施例，而不是全部的实施例，基于本发明中的实施例，本领域的普通技术人员在不付出创造性劳动的前提下所获得的所有其他实施例，都属于本发明的保护范围。根据本发明的实施例，提出一种基于复杂实时嵌入式系统的软件架构设计与架构传递方法，参加图1，包括如下步骤：步骤1、根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTEProfile进行软件架构设计建模；步骤2、定义软件架构模型元素与软件详细设计模型元素的传递规则；步骤3、基于传递规则实现软件架构模型到软件详细设计模型的传递。具体的，所述步骤1根据复杂实时嵌入式系统软件需求和设计约束，基于SysML及MARTE Profile进行软件架构设计建模：基于复杂实时嵌入式系统软件需求和设计约束，使用Modsim工具对复杂实时嵌入式系统进行应用软件架构设计建模，其中Modsim是金航数码基于SysML自主开发的系统设计建模与仿真系统。该建模与仿真系统是基于Eclipse RCP平台架构搭建，采用标准客户端模式，提供UML2.5和SysML1.6标准规范的建模。在应用软件架构设计建模过程中，应用软件架构中将使用进程以及线程的概念，进程将包含多个线程，这两个概念均使用SysML中的Block对Block进行封装)进行表示，应用了MARTE Profile的Block如图3所示。为了区分代表进程和线程的Block与表示应用软件的Block，建议将其单独使用包进行组织。表示应用软件的进程中的线程之间的数据流交互使用内部块图进行描述。表示进程Block的Port表示功能的信息流端口，连接Connection用于表示进程和线程之间的信息流连接关系，其中内部块图中的组成部分通过定义好的MARTE元素进行线程和进程的区分，使用MARTE Profile的MemoryPartition表示应用软件的进程，使用SwSchedulableResource表示应用软件的线程；本步所创建的IBD如图4所示。具体的，所述步骤2定义软件架构模型元素与软件详细设计模型元素的传递规则；具体包括：复杂嵌入式实时系统的架构通常有多种表示模式，层级结构是一种典型的嵌入式系统架构表示形式。一种典型的层级结构就是将嵌入式实时系统分为两层，上层为系统应用软件层，下层为平台层，两层之间通过分配或部署的关系进行关联。这里的平台层是广义的平台层，包含硬件平台和软件平台，本步骤中需要被转换的软件架构元素属于系统应用软件层的系统架构元素。在步骤1中，参见下表1，列出了相应的应用软件架构模型元素，包括表示软件功能模块或软件线程的Block或者SwSchedulableResource，以及模块之间交互的端口或者端口类型定义等。这些模块或者模块之间的交互关系，都将在详细设计中进行细化。软件详细设计模型以Simulink模型为例，在Simulink模型中不仅能够表示软件模块的详细逻辑，也能够表示模块本身和模块之间的交互关系。在表示模块本身及交互关系是分别使用了Block，Subsystem Block，Input/Output Block等模型元素。为了实现软件架构模型向软件详细设计模型的传递，需要定义两种模型元素之间的对应关系。这里识别的对应关系如下表所示：表1在确定了模型元素之间的映射关系之后，需要选择模型转换的方式。如果软件详细设计模型建模语言与软件架构模型建模语言是在同一种元模型上扩展的，那么就可以选择模型到模型的转换方式，如果不是基于同一种元模型，而且软件详细设计模型具有文本的表达形式，则可以使用模型到文本的转换方式。在本例子中所使用的Simulink模型与SysML/MARTE模型不是基于同一种元模型扩展的，因此应该选择模型到文本的转换方式。具体的，步骤3、基于传递规则实现软件架构模型到软件详细设计模型的传递，具体如下：在步骤2确定的模型映射规则以及模型转换方式的基础上，选择对应的技术实现方式来实现模型的转换。SysML/MARTE建模语言都是通过UML Profile机制对UML建模语言进行扩展和重用来定义的。SysML/MARTE建模语言分别有各自对应的Profile，而每个Profile中则定义了表示建模语言相关概念的构造型。在实现转换时，通过对SysML/MARTE模型进行解析，根据构造型来识别对应的建模元素，然后根据映射规则产生软件详细设计模型的建模元素定义。以Simulink模型作为软件详细设计模型为例，采用Acceleo模型转换引擎来将SysML/MARTE模型中的相关元素转换为Simulink模型中的模型元素。Acceleo是对MOFM2T标准的一种开源技术实现，能够很好地支持基于MOF元元模型及基于UML Profile扩展机制定义的建模语言所定义的模型向文本的转换。图5所示是本例子中所使用的Acceleo实现转换的部分代码片段，经过对Acceleo代码的执行，产生了对应SimulinkM文件，在Simulink中打开M文件，然后运行M文件，就产生了对应的Simulink模型。图5是Acceleo脚本创建的模型转换逻辑，图6所示是本例子中产生的Simulink模型。尽管上面对本发明说明性的具体实施方式进行了描述，以便于本技术领域的技术人员理解本发明，且应该清楚，本发明不限于具体实施方式的范围，对本技术领域的普通技术人员来讲，只要各种变化在所附的权利要求限定和确定的本发明的精神和范围内，这些变化是显而易见的，一切利用本发明构思的发明创造均在保护之列。
