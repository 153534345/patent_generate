标题title
一种基于fuzzing测试需校验流量的方法、装置及设备
摘要abst
本发明涉及一种基于fuzzing测试需校验流量的方法，包括根据目标产品的类型对应的调试器，编写所述调试器的插件，将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件，所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。本发明实现了测试过程中不用解密，即可进行大批量的测试。且无需知道具体加解密算法，对有无加解密的流量均能进行模糊测试，并取得较好的测试效果，甚至发现一些0day漏洞。本发明还涉及一种基于fuzzing测试需校验流量的装置、一种存储介质和设备。
权利要求书clms
1.一种基于fuzzing测试需校验流量的方法，其特征在于，包括，根据目标产品的类型对应的调试器，编写所述调试器的插件；将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件；所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。2.根据权利要求1所述的基于fuzzing测试需校验流量的方法，其特征在于，所述加载所述调试器的插件之后，还包括，调试目标产品，并定位所述目标产品的解密应用程序接口处为所述断点的位置。3.根据权利要求2所述的基于fuzzing测试需校验流量的方法，其特征在于，所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，具体包括：利用所述插件将所述预设随机修改算法设置于所述断点处；当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。4.根据权利要求3所述的基于fuzzing测试需校验流量的方法，其特征在于，所述通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题，具体包括：通过所述进程继续执行所述断点处的数据，并获取所述执行结果；当所述执行结果是异常时，则生成崩溃转存文件；对所崩溃转存文件进行分析，得到所述目标产品的问题。5.根据权利要求1-4中任一项所述的基于fuzzing测试需校验流量的方法，其特征在于，所述方法还包括，当所述插件根据第一预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第一执行结果；所述插件根据第二预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第二执行结果。6.一种基于fuzzing测试需校验流量的装置，其特征在于，包括：插件模块，用于根据目标产品的类型对应的调试器，编写所述调试器的插件；加载模块，用于将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件；执行模块，用于所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。7.根据权利要求6所述的基于fuzzing测试需校验流量的装置，其特征在于，所述加载模块还用于调试目标产品，并定位所述目标产品的解密应用程序接口处为所述断点的位置。8.根据权利要求7所述的基于fuzzing测试需校验流量的装置，其特征在于，所述执行模块，具体用于利用所述插件将所述预设随机修改算法设置于所述断点处；当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。9.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，该程序被处理器执行时实现权利要求1-5中任一项所述的基于fuzzing测试需校验流量的方法的步骤。10.一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，其特征在于，所述处理器执行所述程序时实现如权利要求1至5中任一项所述的基于fuzzing测试需校验流量的方法的步骤。
说明书desc
技术领域本发明涉及计算机技术领域，尤其涉及一种基于fuzzing测试需校验流量的方法、装置及设备。背景技术当今计算机软件领域，在产品的测试阶段，测试人员需要编写很多测试用例，投入大量时间进行人工测试，记录测试结果。这种做法效率较低，也难以取得较好的效果。有时还可能会出现漏测的情况，严重时，甚至导致线上事故的发生。fuzzing是安全研究人员最爱用的漏洞发现工具之一。fuzzing可以提供各种可能的输入，观察输出的结果是否正常，并且一次自动运行多天，最后分析输出的结果，从而达到比人工测试更好的效果。对于一个目标产品，如果输入输出的都是加密流量且使用动态密钥时，现有的fuzzing工具无法对加密流量进行测试。目前现有的fuzzers工具，均无法对需要加密解密的流量进行模糊测试，倘若用代码干预的方式，直接去掉加解密过程进行测试的方式不符合测试要求。发明内容本发明所要解决的技术问题是针对现有技术的不足，提供一种基于fuzzing测试需校验流量的方法、装置及设备。本发明解决上述技术问题的技术方案如下：一种基于fuzzing测试需校验流量的方法，包括，根据目标产品的类型对应的调试器，编写所述调试器的插件；将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件；所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。本方法发明的有益效果是：提出了一种基于fuzzing测试需校验流量的方法，包括根据目标产品的类型对应的调试器，编写所述调试器的插件，将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件，所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。本发明实现了测试过程中不用解密，即可进行大批量的测试。且无需知道具体加解密算法，对有无加解密的流量均能进行模糊测试，并取得较好的测试效果，甚至发现一些0day漏洞。在上述技术方案的基础上，本发明还可以做如下改进。进一步地，所述加载所述调试器的插件之后，还包括，调试目标产品，并定位所述目标产品的解密应用程序接口处为所述断点的位置。进一步地，所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，具体包括：利用所述插件将所述预设随机修改算法设置于所述断点处；当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。进一步地，所述通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题，具体包括：通过所述进程继续执行所述断点处的数据，并获取所述执行结果；当所述执行结果是异常时，则生成崩溃转存文件；对所崩溃转存文件进行分析，得到所述目标产品的问题。进一步地，所述方法还包括，当所述插件根据第一预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第一执行结果；所述插件根据第二预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第二执行结果。本发明解决上述技术问题的另一技术方案如下：一种基于fuzzing测试需校验流量的装置，包括：插件模块，用于根据目标产品的类型对应的调试器，编写所述调试器的插件；加载模块，用于将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件；执行模块，用于所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。进一步地，所述加载模块还用于调试目标产品，并定位所述目标产品的解密应用程序接口处为所述断点的位置。进一步地，所述执行模块，具体用于利用所述插件将所述预设随机修改算法设置于所述断点处；当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。此外，本发明提供一种计算机可读存储介质，其上存储有计算机程序，该程序被处理器执行时实现上述技术方案中任一项所述的基于fuzzing测试需校验流量的方法的步骤。本发明还提供一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，所述处理器执行所述程序时实现如上述技术方案中任一项所述的基于fuzzing测试需校验流量的方法的步骤。本发明附加的方面的优点将在下面的描述中部分给出，部分将从下面的描述中变得明显，或通过本发明实践了解到。附图说明为了更清楚地说明本发明实施例的技术方案，下面将对本发明实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面所描述的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本发明的一种基于fuzzing测试需校验流量的方法的流程示意图；图2为本发明的一种基于fuzzing测试需校验流量的装置的模块示意图；图3为本发明的一种基于fuzzing测试需校验流量的方法的流程示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本发明的一部分实施例，而不是全部实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动的前提下所获得的所有其他实施例，都应属于本发明保护的范围。如图1所述，本发明实施例所述的一种基于fuzzing测试需校验流量的方法，包括以下步骤：110、根据目标产品的类型对应的调试器，编写所述调试器的插件。应理解，目前产品的类型是指目标产品的运行环境，如果目标产品是基于linux上运行的c/c++程序，可以使用gdb调试器，当目标产品是基于windows上运行的exe程序，可以使用windbg调试器，当目标产品基于其它语言比如java程序，也有对应的jdb调试器。编写调试器的插件的方法很多，本申请文件中的调试器插件是指确定目标产品的锚点，并将已建立的随机修改算法插入锚点处。120、将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件。应理解，将调试器附加到目标产品的进程后，需要调试目标产品，并定位目标产品的解密应用程序接口处为断点处的位置，即此断点处为目标产品运行中经过解密得到的明文数据的位置。130、所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。应理解，随机修改算法是基于测试用例开发的算法，测试用例中包括对明文数据进行随机修改的各种测试例。基于上述实施例，进一步地，所述加载所述调试器的插件之后，还包括调试目标产品，并定位目标产品的解密应用程序接口处为断点处的位置。进一步地，步骤130中插件根据预设随机修改算法修改所述目标产品的断点处的数据，具体包括：131、利用所述插件将所述预设随机修改算法设置于所述断点处。132、当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。进一步地，步骤130中所述通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题，具体包括：133、通过所述进程继续执行所述断点处的数据，并获取所述执行结果。134、当所述执行结果是异常时，则生成崩溃转存文件。135、对所崩溃转存文件进行分析，得到所述目标产品的问题。对崩溃转存crash dump文件分析，得到产品的bug或缺陷的方法很多，本申请文件中不再赘述。进一步地，基于上述实施例中还包括：当所述插件根据第一预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第一执行结果。所述插件根据第二预设随机修改算法修改所述目标产品的断点处的数据，并通过所述进程执行修改后的数据，得到第二执行结果。应理解，可以根据测试用例编写不同的随机修改算法，此外，也可以利用多种随机修改算法对目标产品进行测试。应理解，本实施例中在调试目标产品定位到解密应用程序接口API后，通常解密API的返回值就是明文数据，在完成解密之后使得调试器可以随机在明文数据里改变一些数据，从而达到不用解密，即可修改数据，进行大批量的测试。本申请中不需要知道具体加解密算法，对有无加解密的流量均能进行模糊测试，并取得较好的测试效果，甚至发现一些0day漏洞。通常对于标准的加解密业务，数据处理流程有以下步骤：程序对应进程process，在输入端接收到数据进行验证；若未加密，则直接拒绝；若已加密，则使用加解密规则进行解密；若解密失败，则拒绝；若解密成功，即可得到明文；process进程继续运行，若程序运行正常，则进行输出，可能会对输出的内容再次进行加密，若运行遇到异常，则生成crashdump文件，保存dump文件进行分析，发现可能存在的bug或者漏洞。通常技术中都试图生成可以通过格式校验的部分，而本申请中直接跳过了格式校验部分。当运行时重复向目标产品输入同一段或者几段合法的加密数据。本实施例不仅仅是对加密数据有效，而且对所有对输入数据做格式检验的产品都有效。如图3所示，首先需要根据目标产品运行的环境，确定使用的调试器，写调试器的插件，如目标产品是基于linux上运行的c/c++程序，可以使用gdb调试器，当目标产品是基于windows上运行的exe程序，可以使用windbg调试器，当目标产品基于其它语言比如java程序，也有对应的jdb调试器。对于调试器的插件是在目前产品运行时，实时将得到的明文数据进行随机修改。当然，也可以不使用调试器插件，利用如microsoft detours库中钩子函数hook的方式也能达到同样效果。但是利用这种代码注入工具来完成同样的功能需要完成定制代码。而采用调试器插件，当找到了正确的断点以后，只要定义断点即可，方法更为方便。例如，以windbg调试器为例：首先，将windbg调试器附加到目标产品的进程process上，windbg xxx.exe encrypted.dat；加载调试器的插件load qt_fuzzer.dll，找到程序运行到完成解密步骤，开始处理明文数据的位置，这里的锚点可以使用strace命令分析或者人为经验得出。本申请中不做限制。使用插件设置带命令的断点，将明文数据进行随机修改，每一种输出结果就相当于是执行一个测试用例的输出结果，由于是基于机器算法，所以比人工测试的速度快得多。如bp 0x0040108c"！fuzz@eax L0n8192”；'gc'"。进程process继续运行被插件修改后的明文数据，当执行完成后，若未遇到异常，则正常结束；若遇到异常，则对生成的crash dump文件进行分析，发现产品中存在的bug。设置自动测试的时间设置为1至3天，当运行结束之后，获取所有收集的结果。此外，当使用一种随机修改算法测试结束后，根据实际情况，继续调整随机修改算法算法可以基于模型学习或者人工改进，随机修改算法是对明文数据进行随机修改。再运行2天左右的时间，观察输出结果。重复以上的步骤，直至不能发现新的问题。实际观察，使用此种方法跑一到两天，就会跑出了很多开发团队原来没有发现的bug。此技术可以直接跳过校验环节，所以在效率上比人工操作更快，在广度上比人的思维更广。节省大量人力和时间成本，能高效发现产品的bug问题，甚至于发现0day漏洞基于上述实施例所提出的一种基于fuzzing测试需校验流量的方法，包括根据目标产品的类型对应的调试器，编写所述调试器的插件，将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件，所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。本发明实现了测试过程中不用解密，即可进行大批量的测试。且无需知道具体加解密算法，对有无加解密的流量均能进行模糊测试，并取得较好的测试效果，甚至发现一些0day漏洞。如图2所示，一种基于fuzzing测试需校验流量的装置，包括：插件模块，用于根据目标产品的类型对应的调试器，编写所述调试器的插件；加载模块，用于将所述调试器附加至所述目标产品的进程后，加载所述调试器的插件；执行模块，用于所述插件根据预设随机修改算法修改所述目标产品的断点处的数据，通过所述进程执行修改后的数据，并根据执行结果，得到所述目标产品的问题。进一步地，所述加载模块还用于调试目标产品，并定位所述目标产品的解密应用程序接口处为所述断点的位置。进一步地，所述执行模块，具体用于利用所述插件将所述预设随机修改算法设置于所述断点处；当所述断点处接收到明文数据时，通过所述预设随机修改算法将所述明文数据进行随机修改，并将修改后的所述明文数据返回所述断点处。此外，本发明提供一种计算机可读存储介质，其上存储有计算机程序，该程序被处理器执行时实现上述技术方案中任一项所述的基于fuzzing测试需校验流量的方法的步骤。本发明还提供一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，所述处理器执行所述程序时实现如上述技术方案中任一项所述的基于fuzzing测试需校验流量的方法的步骤。在上述实施例中，对各个实施例的描述都各有侧重，某个实施例中没有详述或记载的部分，可以参见其它实施例的相关描述。本领域普通技术人员可以意识到，结合本文中所公开的实施例描述的各示例的单元及算法步骤，能够以电子硬件、或者计算机软件和电子硬件的结合来实现。这些功能究竟以硬件还是软件方式来执行，取决于技术方案的特定应用和设计约束条件。专业技术人员可以对每个特定的应用来使用不同方法来实现所描述的功能，但是这种实现不应认为超出本发明的范围。在本发明所提供的实施例中，应该理解到，所揭露的装置/终端设备和方法，可以通过其它的方式实现。例如，以上所描述的装置/终端设备实施例仅仅是示意性的，例如，所述模块或单元的划分，仅仅为一种逻辑功能划分，实际实现时可以有另外的划分方式，例如多个单元或组件可以结合或者可以集成到另一个系统，或一些特征可以忽略，或不执行。另一点，所显示或讨论的相互之间的耦合或直接耦合或通讯连接可以是通过一些接口，装置或单元的间接耦合或通讯连接，可以是电性，机械或其它的形式。所述作为分离部件说明的单元可以是或者也可以不是物理上分开的，作为单元显示的部件可以是或者也可以不是物理单元，即可以位于一个地方，或者也可以分布到多个网络单元上。可以根据实际的需要选择其中的部分或者全部单元来实现本实施例方案的目的。另外，在本发明各个实施例中的各功能单元可以集成在一个处理单元中，也可以是各个单元单独物理存在，也可以两个或两个以上单元集成在一个单元中。上述集成的单元既可以采用硬件的形式实现，也可以采用软件功能单元的形式实现。所述集成的模块/单元如果以软件功能单元的形式实现并作为独立的产品销售或使用时，可以存储在一个计算机可读取存储介质中。基于这样的理解，本发明实现上述实施例方法中的全部或部分流程，也可以通过计算机程序来指令相关的硬件来完成，所述的计算机程序可存储于一计算机可读存储介质中，该计算机程序在被处理器执行时，可实现上述各个方法实施例的步骤。其中，所述计算机程序包括计算机程序代码，所述计算机程序代码可以为源代码形式、对象代码形式、可执行文件或某些中间形式等。所述计算机可读介质可以包括：能够携带所述计算机程序代码的任何实体或装置、记录介质、U盘、移动硬盘、磁碟、光盘、计算机存储器、只读存储器、随机存取存储器、电载波信号、电信信号以及软件分发介质等。需要说明的是，所述计算机可读介质包含的内容可以根据司法管辖区内立法和专利实践的要求进行适当的增减，例如在某些司法管辖区，根据立法和专利实践，计算机可读介质不包括是电载波信号和电信信号。以上所述实施例仅用以说明本发明的技术方案，而非对其限制；尽管参照前述实施例对本发明进行了详细的说明，本领域的普通技术人员应当理解：其依然可以对前述各实施例所记载的技术方案进行修改，或者对其中部分技术特征进行等同替换；而这些修改或者替换，并不使相应技术方案的本质脱离本发明各实施例技术方案的精神和范围，均应包含在本发明的保护范围之内。以上，仅为本发明的具体实施方式，但本发明的保护范围并不局限于此，任何熟悉本技术领域的技术人员在本发明揭露的技术范围内，可轻易想到各种等效的修改或替换，这些修改或替换都应涵盖在本发明的保护范围之内。因此，本发明的保护范围应以权利要求的保护范围为准。
