标题title
一种网络文件编译方法、装置、存储介质及电子装置
摘要abst
本发明实施例提供了一种网络文件编译方法、装置、存储介质及电子装置，涉及网络资源管理的技术领域。其方法包括：获取目标对象信息；基于所述目标对象的文件类型，生成目标配置文件；根据所述配置文件以及预先采集的参数信息，生成技术栈文件；根据所述技术栈文件，确定目标网络文件；通过本发明，解决了文件编译效率低的问题，进而达到了提高网络文件编译效率的效果。
权利要求书clms
1.一种网络文件编译方法，其特征在于，包括：获取目标对象信息，其中，所述目标对象信息包括所述目标对象的文件类型；基于所述目标对象的文件类型，生成目标配置文件，其中，所述目标配置文件包括适应于所述目标对象的配置文件；根据所述配置文件以及预先采集的参数信息，生成技术栈文件；根据所述技术栈文件，确定目标网络文件。2.根据权利要求1所述的方法，其特征在于，所述基于所述目标对象的文件类型，生成目标配置文件还包括：在确定所述文件类型包括至少两种的情况下，确定所述目标对象之间的差异化信息；根据所述差异化信息以及所述文件类型，生成所述目标配置文件。3.根据权利要求1所述的方法，其特征在于，所述获取目标对象信息包括：根据预设的轮询算法对目标文件库进行轮询操作，以获取所述目标对象信息，其中，所述目标文件库包括所述目标对象。4.根据权利要求1所述的方法，其特征在于，所述根据所述配置文件以及预先采集的参数信息，生成技术栈文件包括：对所述参数信息执行解析操作，以得到参数类型信息；基于所述参数类型信息，确定技术栈信息；根据所述技术栈信息以及所述配置文件，执行全量编译脚本操作，以生成所述技术栈文件。5.一种网络文件编译装置，其特征在于，包括：对象信息采集模块，用于获取目标对象信息，其中，所述目标对象信息包括所述目标对象的文件类型；配置文件生成模块，用于基于所述目标对象的文件类型，生成目标配置文件，其中，所述目标配置文件包括适应于所述目标对象的配置文件；技术栈文件生成模块，用于根据所述配置文件以及预先采集的参数信息，生成技术栈文件；网络文件生成模块，用于根据所述技术栈文件，确定目标网络文件。6.根据权利要求5所述的装置，其特征在于，所述配置文件生成模块包括：差异化确定单元，用于在确定所述文件类型包括至少两种的情况下，确定所述目标对象之间的差异化信息；配置文件生成单元，用于根据所述差异化信息以及所述文件类型，生成所述目标配置文件。7.根据权利要求5所述的装置，其特征在于，所述对象信息采集模块包括：轮询操作单元，用于根据预设的轮询算法对目标文件库进行轮询操作，以获取所述目标对象信息，其中，所述目标文件库包括所述目标对象。8.根据权利要求5所述的装置，其特征在于，所述技术栈文件生成模块包括：参数信息单元，用于对所述参数信息执行解析操作，以得到参数类型信息；技术栈信息单元，用于基于所述参数类型信息，确定技术栈信息；根据所述技术栈信息以及所述配置文件，执行全量编译脚本操作，以生成所述技术栈文件。9.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质中存储有计算机程序，其中，所述计算机程序被设置为运行时执行所述权利要求1至4任一项中所述的方法。10.一种电子装置，包括存储器和处理器，其特征在于，所述存储器中存储有计算机程序，所述处理器被设置为运行所述计算机程序以执行所述权利要求1至4任一项中所述的方法。
说明书desc
技术领域本发明实施例涉及通信领域，具体而言，涉及一种网络文件编译方法、装置、存储介质及电子装置。背景技术随着web工程化不断升温，层出不穷的框架和类库技术在不断的进行迭代，这导致在开发过程当中，当新老项目的技术不一致，或者技术体系存在区别时，将会导致项目的维护成本和学习成本都大大增加。例如当项目维护人员为VUE技术栈的技术者，而需要的维护的项目是REACT技术栈时，那么该维护人员不得不去学习原先项目的技术栈，而当前的维护跨技术维护方式的侵入性太大，且需要在区分开项目的入口，和配置文件，这导致无法很好的在一套代码内去修改，且代码每次更新的时候都会涉及每个子块的内容，对原先存在或者不熟悉这套体系的开发人员不友好，增加了项目维护难度以及项目开发周期。而针对上述问题，当前并没有较好的解决方式。发明内容本发明实施例提供了一种网络文件编译方法、装置、存储介质及电子装置，以至少解决相关技术中网络文件编译效率低的问题。根据本发明的一个实施例，提供了一种网络文件编译方法，包括：获取目标对象信息，其中，所述目标对象信息包括所述目标对象的文件类型；基于所述目标对象的文件类型，生成目标配置文件，其中，所述目标配置文件包括适应于所述目标对象的配置文件；根据所述配置文件以及预先采集的参数信息，生成技术栈文件；根据所述技术栈文件，确定目标网络文件。在一个示例性实施例中，所述基于所述目标对象的文件类型，生成目标配置文件还包括：在确定所述文件类型包括至少两种的情况下，确定所述目标对象之间的差异化信息；根据所述差异化信息以及所述文件类型，生成所述目标配置文件。在一个示例性实施例中，所述获取目标对象信息包括：根据预设的轮询算法对目标文件库进行轮询操作，以获取所述目标对象信息，其中，所述目标文件库包括所述目标对象。在一个示例性实施例中，所述根据所述配置文件以及预先采集的参数信息，生成技术栈文件包括：对所述参数信息执行解析操作，以得到参数类型信息；基于所述参数类型信息，确定技术栈信息；根据所述技术栈信息以及所述配置文件，执行全量编译脚本操作，以生成所述技术栈文件。根据本发明的另一个实施例，提供了一种网络文件编译装置，包括：对象信息采集模块，用于获取目标对象信息，其中，所述目标对象信息包括所述目标对象的文件类型；配置文件生成模块，用于基于所述目标对象的文件类型，生成目标配置文件，其中，所述目标配置文件包括适应于所述目标对象的配置文件；技术栈文件生成模块，用于根据所述配置文件以及预先采集的参数信息，生成技术栈文件；网络文件生成模块，用于根据所述技术栈文件，确定目标网络文件。在一个示例性实施例中，所述配置文件生成模块包括：差异化确定单元，用于在确定所述文件类型包括至少两种的情况下，确定所述目标对象之间的差异化信息；配置文件生成单元，用于根据所述差异化信息以及所述文件类型，生成所述目标配置文件。在一个示例性实施例中，所述对象信息采集模块包括：轮询操作单元，用于根据预设的轮询算法对目标文件库进行轮询操作，以获取所述目标对象信息，其中，所述目标文件库包括所述目标对象在一个示例性实施例中，所述技术栈文件生成模块包括：参数信息单元，用于对所述参数信息执行解析操作，以得到参数类型信息；技术栈信息单元，用于基于所述参数类型信息，确定技术栈信息；根据所述技术栈信息以及所述配置文件，执行全量编译脚本操作，以生成所述技术栈文件。根据本发明的又一个实施例，还提供了一种计算机可读存储介质，所述计算机可读存储介质中存储有计算机程序，其中，所述计算机程序被设置为运行时执行上述任一项方法实施例中的步骤。根据本发明的又一个实施例，还提供了一种电子装置，包括存储器和处理器，所述存储器中存储有计算机程序，所述处理器被设置为运行所述计算机程序以执行上述任一项方法实施例中的步骤。通过本发明，由于根据目标对象的文件类型生成与目标对象适配的配置文件和技术栈文件，因而工作人员只需根据生成的目标网络文件即可执行后续的开发工作，无需再额外区分目标对象的技术类型，因此，可以解决网络文件编译效率低大的问题，达到提高网络文件编译效率的效果。附图说明图1是本发明实施例的一种网络文件编译方法的移动终端的硬件结构框图；图2是根据本发明实施例的一种网络文件编译方法的流程图；图3是根据本发明实施例的一种网络文件编译装置的结构框图；图4是根据本发明具体实施例的流程图；图5是根据本发明具体实施例的原理示意图；图6是根据本发明具体实施例的结构示意图。具体实施方式下文中将参考附图并结合实施例来详细说明本发明的实施例。需要说明的是，本发明的说明书和权利要求书及上述附图中的术语“第一”、“第二”等是用于区别类似的对象，而不必用于描述特定的顺序或先后次序。本申请实施例中所提供的方法实施例可以在移动终端、计算机终端或者类似的运算装置中执行。以运行在移动终端上为例，图1是本发明实施例的一种网络文件编译方法的移动终端的硬件结构框图。如图1所示，移动终端可以包括一个或多个处理器102和用于存储数据的存储器104，其中，上述移动终端还可以包括用于通信功能的传输设备106以及输入输出设备108。本领域普通技术人员可以理解，图1所示的结构仅为示意，其并不对上述移动终端的结构造成限定。例如，移动终端还可包括比图1中所示更多或者更少的组件，或者具有与图1所示不同的配置。存储器104可用于存储计算机程序，例如，应用软件的软件程序以及模块，如本发明实施例中的一种网络文件编译方法对应的计算机程序，处理器102通过运行存储在存储器104内的计算机程序，从而执行各种功能应用以及数据处理，即实现上述的方法。存储器104可包括高速随机存储器，还可包括非易失性存储器，如一个或者多个磁性存储装置、闪存、或者其他非易失性固态存储器。在一些实例中，存储器104可进一步包括相对于处理器102远程设置的存储器，这些远程存储器可以通过网络连接至移动终端。上述网络的实例包括但不限于互联网、企业内部网、局域网、移动通信网及其组合。传输装置106用于经由一个网络接收或者发送数据。上述的网络具体实例可包括移动终端的通信供应商提供的无线网络。在一个实例中，传输装置106包括一个网络适配器，其可通过基站与其他网络设备相连从而可与互联网进行通讯。在一个实例中，传输装置106可以为射频模块，其用于通过无线方式与互联网进行通讯。在本实施例中提供了一种网络文件编译方法，图2是根据本发明实施例的一种网络文件编译方法的流程图，如图2所示，该流程包括如下步骤：步骤S202，获取目标对象信息，其中，目标对象信息包括目标对象的文件类型；在本实施例中，获取目标对象信息是为了确定目标对象的编译类型以及待编译的文件对象所需要的文件，该过程由于无需人工识别，且对目标对象的文件类型不做限制，因而节约了人力，也避免因人工识别造成的识别错误或遗漏，提高了文件编译精度。其中，目标对象的可以是文件对象，也可以是节点对象，还可以是网络流量对象等，需要说明的是，目标对象的数量可以是一个，也可以是多个，对应的，文件类型的种类可以是一种，也可以是多种；文件类型的可以是html、css、js、img等文件类型，还可以是其它文件类型；目标对象信息可以是使用JAVASCRIPT原生方法FS和PARH设计自适应文件夹轮询算法去完成SRR脚本的编译文件引入操作来获得，也可以是通过其它算法或模型来获得。需要说明的是，目标对象信息可以是以数据流的形式进行网络传输，也可以是以文件包的形式通信传输，还可以是以其它方式进行传输。步骤S204，基于目标对象的文件类型，生成目标配置文件，其中，目标配置文件包括适应于目标对象的配置文件；在本实施例中，生成配置文件是为了适应不同类型的文件，从而使工作人员无需额外对不同的文件类型分别编译对应的配置的文件，减少了人工量，同时也避免了人工编译配置造成的错误和遗漏，提高了配置精度和效率。其中，配置文件包括编译配置文件，差异配置文件和merge配置文件等；配置文件的生成可以是在module bundler层的算法来实现，也可以是在其它编译器中实现；目标配置文件的数量可以是根据文件类型的不同有不同的数量。例如，在获取到目标对象信息后，将获取的到的文件对象传入module bundler层，随后在module bundler层编写通用的编译配置文件，差异配置文件和merge配置文件。需要说明的是，在module bundler层编写通用的配置文件是将不同的配置文件分别进行拆分后再分别进行编译，这种方式能够适应于不同文件对象的，因而无需专门对文件对象进行识别即可完成后续的工作，节约了人力；且相比原先的单独且冗余的架构新增了技术的融合，减少了不必要的配置，相比以前编译后的巨大体积的包文件，本架构更合理的做了拆分，更利于性能优化。步骤S206，根据配置文件以及预先采集的参数信息，生成技术栈文件；在本实施例中，生成框架协议是为了方便生成后续的静态文件如html、css、js、img等，而采集参数信息是为了适应实际使用。其中，参数信息可以是SRR+REACT参数、SPA+VUE参数等；技术栈文件可以是基于REACT技术栈的多页应用文件，也可以是基于VUE技术栈的单页页应用。例如，可以基于配置文件以及传入的SPA+VUE参数，生成基于VUE技术栈的单页页应用文件，也可以基于配置文件以及传入的SRR+REACT参数，生成基于REACT技术栈的多页应用文件。步骤S208，根据技术栈文件，确定目标网络文件。在本实施例中，确定了技术栈文件，即确定了对目标对象所要采用的技术类型，从而可以使生成的目标网络文件适应于目标对象。其中，目标网络文件可以是html、css、js、img等静态网页文件，也可以是网络节点协议等文件，还可以是其它网络文件。例如，根据生成的REACT技术栈的多页应用生成html、css、js、img等静态网页文件。通过上述步骤，由于通过算法和模型自行对目标对象的文件类型进行识别，并生成对应的配置文件，减少了人工工作量，从而提高了网络文件编译效率以及编译的精确度，解决了网络文件编译效率低的问题，提高了网络文件编译效率。其中，上述步骤的执行主体可以为基站、终端等，但不限于此。在一个可选的实施例中，基于目标对象的文件类型，生成目标配置文件还包括：步骤S2042，在确定文件类型包括至少两种的情况下，确定目标对象之间的差异化信息；步骤S2044，根据差异化信息以及文件类型，生成目标配置文件。在本实施例中，在文件类型有多个情况下，则需要根据不同的文件类型生成不同的配置文件，以适应不同的文件对象，而确定差异化信息则是为了精确的生成对应的配置文件，保证生成后的配置文件能够正常运行。其中，差异化信息包括目标对象的差异化入口数量、入口接口坐标、代码等信息。在一个可选的实施例中，获取目标对象信息包括：步骤S2022，根据预设的轮询算法对目标文件库进行轮询操作，以获取目标对象信息，其中，目标文件库包括目标对象。在本实施例中，通过轮询算法对目标文件库进行轮询，能够避免人工处理造成的失误和遗漏，减少工作量，并提高精确度；同时，通过轮询算法进行轮询也能够无视目标对象的文件类型，减少了对目标对象的文件类型判断的时间，提高了文件编译效率。其中，轮询算法可以是JAVASCRIPT原生方法FS和PARH设计自适应文件夹轮询算法，也可以是其它算法；目标文件库可以是包含SRR脚本的文件库，也可以是其它文件库。在一个可选的实施例中，根据配置文件以及预先采集的参数信息，生成技术栈文件包括：步骤S2062，对参数信息执行解析操作，以得到参数类型信息；步骤S2064，基于参数类型信息，确定技术栈信息；步骤S2064，根据技术栈信息以及配置文件，执行全量编译脚本操作，以生成技术栈文件。在本实施例中，通过参数类型信息来确定技术栈信息能够保证生成的技术栈文件适应于参数，从而保证生成的网络文件能够正常运行，提高了文件编译精度和效率。其中，参数类型信息可以是SRR+REACT参数、SPA+VUE参数等。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到根据上述实施例的方法可借助软件加必需的通用硬件平台的方式来实现，当然也可以通过硬件，但很多情况下前者是更佳的实施方式。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台终端设备执行本发明各个实施例所述的方法。在本实施例中还提供了一种网络文件编译装置，该装置用于实现上述实施例及优选实施方式，已经进行过说明的不再赘述。如以下所使用的，术语“模块”可以实现预定功能的软件和/或硬件的组合。尽管以下实施例所描述的装置较佳地以软件来实现，但是硬件，或者软件和硬件的组合的实现也是可能并被构想的。图3是根据本发明实施例的一种网络文件编译装置的结构框图，如图3所示，该装置包括：对象信息采集模块32，用于获取目标对象信息，其中，所述目标对象信息包括所述目标对象的文件类型；配置文件生成模块34，用于基于所述目标对象的文件类型，生成目标配置文件，其中，所述目标配置文件包括适应于所述目标对象的配置文件；技术栈文件生成模块36，用于根据所述配置文件以及预先采集的参数信息，生成技术栈文件；网络文件生成模块38，用于根据所述技术栈文件，确定目标网络文件。在一个可选的实施例中，配置文件生成模块34包括：差异化确定单元342，用于在确定所述文件类型包括至少两种的情况下，确定所述目标对象之间的差异化信息；配置文件生成单元344，用于根据所述差异化信息以及所述文件类型，生成所述目标配置文件。在一个可选的实施例中，对象信息采集模块包括：轮询操作单元，用于根据预设的轮询算法对目标文件库进行轮询操作，以获取所述目标对象信息，其中，所述目标文件库包括所述目标对象在一个可选的实施例中，技术栈文件生成模块包括：参数信息单元，用于对所述参数信息执行解析操作，以得到参数类型信息；技术栈信息单元，用于基于所述参数类型信息，确定技术栈信息；根据所述技术栈信息以及所述配置文件，执行全量编译脚本操作，以生成所述技术栈文件。需要说明的是，上述各个模块是可以通过软件或硬件来实现的，对于后者，可以通过以下方式实现，但不限于此：上述模块均位于同一处理器中；或者，上述各个模块以任意组合的形式分别位于不同的处理器中。下面结合具体实施例对本发明进行说明。实施例1：如图4至图6所示，包括以下步骤：步骤S41，使用JAVASCRIPT原生方法FS和PARH设计自适应文件夹轮询算法，去完成SRR脚本的编译文件引入操作以获所有需要编译的文件对象；步骤S42，将获取的到的文件对象传入module bundler层；步骤S43，在module bundler层编写通用的编译配置文件，差异配置文件和merge配置文件；步骤S44，编写启动脚本，在脚本中传入相对应的参数，并根据传入的参数生成REACT技术栈的多页应用；步骤S45，生成html、css、js、img等文件。相比原先的单独且冗余的架构，本方案新增了技术的融合，并减少了不必要的配置，且相比以前编译后的巨大体积的包文件，本架构更合理的做了拆分，更利于浏览器的性能优化。实施例2：本实施例与实施例1的主要区别在于：步骤S46，向脚本中传入相对应的参数，例如：传入“SPA+VUE”参数，随后根据“SPA+VUE”参数生成VUE技术栈的单页页应用。实施例3：本实施例与实施例1的主要区别在于：步骤S47，向脚本中传入相对应的参数，并自动解析编码风格和规范，以及判断技术类型，并决定对应的技术栈，随后执行执行全量编译脚本；例如传入“ALL”参数，随后自动解析确定该参数对应的技术栈，再执行全量编译脚本。本发明的实施例还提供了一种计算机可读存储介质，该计算机可读存储介质中存储有计算机程序，其中，该计算机程序被设置为运行时执行上述任一项方法实施例中的步骤。在一个示例性实施例中，上述计算机可读存储介质可以包括但不限于：U盘、只读存储器、随机存取存储器、移动硬盘、磁碟或者光盘等各种可以存储计算机程序的介质。本发明的实施例还提供了一种电子装置，包括存储器和处理器，该存储器中存储有计算机程序，该处理器被设置为运行计算机程序以执行上述任一项方法实施例中的步骤。在一个示例性实施例中，上述电子装置还可以包括传输设备以及输入输出设备，其中，该传输设备和上述处理器连接，该输入输出设备和上述处理器连接。本实施例中的具体示例可以参考上述实施例及示例性实施方式中所描述的示例，本实施例在此不再赘述。显然，本领域的技术人员应该明白，上述的本发明的各模块或各步骤可以用通用的计算装置来实现，它们可以集中在单个的计算装置上，或者分布在多个计算装置所组成的网络上，它们可以用计算装置可执行的程序代码来实现，从而，可以将它们存储在存储装置中由计算装置来执行，并且在某些情况下，可以以不同于此处的顺序执行所示出或描述的步骤，或者将它们分别制作成各个集成电路模块，或者将它们中的多个模块或步骤制作成单个集成电路模块来实现。这样，本发明不限制于任何特定的硬件和软件结合。以上所述仅为本发明的优选实施例而已，并不用于限制本发明，对于本领域的技术人员来说，本发明可以有各种更改和变化。凡在本发明的原则之内，所作的任何修改、等同替换、改进等，均应包含在本发明的保护范围之内。
