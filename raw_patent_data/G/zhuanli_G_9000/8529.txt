标题title
触控笔控制方法、装置、电子设备和存储介质
摘要abst
本公开提供一种触控笔控制方法、装置、电子设备和存储介质。所述控制方法，包括：响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制；根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类；根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。由此，通过编译触控笔目标功能对应的目标控制类，实现了在目标应用中便捷准确地控制触控笔功能。
权利要求书clms
1.一种触控笔控制方法，包括：响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制；根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类；根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。2.如权利要求1所述的方法，其中，所述根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类，包括：根据所述目标功能，获取与所述目标功能匹配的预设触控笔功能；根据各预设触控笔功能与各预设控制类之间的映射关系，确定与匹配的所述预设触控笔功能具有映射关系的预设控制类，并将所述预设控制类作为所述目标功能对应的所述目标控制类。3.如权利要求1或2所述的方法，其中，所述方法还包括：通过调试，确定各预设触控笔功能与各预设控制类之间的映射关系，并且其中，所述通过调试，确定各预设触控笔功能与各预设控制类之间的映射关系，包括：执行功能设置步骤，以设置其中一个预设触控笔功能；执行断点设置步骤，以从各预设控制类中获取其中一个待验证预设控制类，并针对所述待验证预设控制类设置断点；执行调试步骤，对所述断点处的所述待验证预设控制类进行调试，确定所述待验证预设控制类的实际触控笔功能；执行验证步骤，在所述实际触控笔功能与所述预设触控笔功能匹配的情况下，建立所述预设触控笔功能与所述待验证预设控制类之间的映射关系，在所述实际触控笔功能与所述预设触控笔功能不匹配的情况下，返回执行所述断点设置步骤。4.如权利要求3所述的方法，其中，所述调试步骤包括：通过改变所述断点处的所述待验证预设控制类的设置，确定所述待验证预设控制类的所述实际触控笔功能。5.如权利要求4所述的方法，其中，所述预设控制类包括成员函数和/或成员变量；并且其中，所述改变所述断点处的所述待验证预设控制类的设置包括：在所述待验证预设控制类包含所述成员函数的情况下，通过调用所述成员函数的方式来改变所述预设控制类的设置；在所述待验证预设控制类包含所述成员变量的情况下，通过修改所述成员变量的方式来改变所述预设控制类的设置。6.如权利要求1或2所述的方法，其中，所述方法还包括：响应于用户界面中加载有预设输入窗口的侦测结果，或者响应于所述触控笔被激活的侦测结果，将包含有各预设控制类的触控笔控制类库加载至系统内存。7.如权利要求6所述的方法，其中，所述方法还包括：获取当前运行的目标应用的用户界面的响应者视图；查询所述响应者视图；在所述响应者视图中存在有所述触控笔控制类库的情况下，确定所述触控笔控制类库被加载于所述目标应用的进程中。8.如权利要求1或2所述的方法，其中，所述根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制，包括：根据所述控制指令、各预设触控笔功能和各预设控制类之间的映射关系，编写所述目标控制类的控制指令代码；在所述目标应用中编译所述控制指令代码，以实现对所述触控笔的目标功能进行控制；其中，通过以下方式编写所述目标控制类的控制指令代码：在所述目标控制类包含成员变量的情况下，根据所述控制指令修改所述成员变量，或者根据所述控制指令从其他进程中获取对应于所述成员变量的修改值，并根据所述修改值修改所述成员变量；在所述目标控制类包含成员函数的情况下，根据所述控制指令调用所述成员函数。9.一种触控笔功能的控制处理装置，包括：获取模块，用于响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制；确定模块，用于根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类；编译模块，用于根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。10.一种电子设备，包括：处理器；以及存储程序的存储器，其中，所述程序包括指令，所述指令在由所述处理器执行时使所述处理器执行根据权利要求1-8中任一项所述的方法。11.一种存储有计算机指令的非瞬时计算机可读存储介质，其中，所述计算机指令用于使计算机执行根据权利要求1-8中任一项所述的方法。
说明书desc
技术领域本公开涉及触控笔技术领域，尤其涉及一种触控笔控制方法、装置、电子设备和存储介质。背景技术触控笔是一种小的笔形工具，用来输入指令到平板电脑等具有触控功能的设备，用户可以通过触控笔点击触控屏幕来选取文件、涂写和绘画。因为操作简单、使用方便带有触控笔的移动设备应用非常广泛。然而，触控笔功能通常都是设备操作系统自带的，由于操作系统的限制，现有带有触控笔的移动设备大多无法在应用程序中控制移动设备的触控笔功能。基于此，需要一种方案来在应用中便捷准确地控制触控笔功能。发明内容本公开实施例提供了一种触控笔控制方法、装置、电子设备和存储介质，能够在目标应用中便捷准确地控制触控笔功能。根据本公开的一方面，提供了一种触控笔控制方法，包括：响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制；根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类；根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。根据本公开的第二方面，提供了一种触控笔功能的控制处理装置，包括：获取模块，用于响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制；确定模块，用于根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类；编译模块，用于根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。根据本公开的第三方面，提供了一种电子设备，包括：处理器；以及存储程序的存储器，其中，所述程序包括指令，所述指令在由所述处理器执行时使所述处理器执行如第一方面所述的方法。根据本公开的第四方面，提供了一种存储有计算机指令的非瞬时计算机可读存储介质，其中，所述计算机指令用于使计算机执行如第一方面所述的方法。根据本公开的第五方面，提供了一种计算机程序产品，包括计算机程序，其中，所述计算机程序在被处理器执行时，实现如第一方面所述的方法。本申请实施例中提供的一个或多个技术方案，响应于用户的控制指令，并根据预设触控笔功能和预设控制类之间的映射关系来确定目标控制类，并通过编译目标控制类来实现对触控笔目标功能的控制。由此，通过编译触控笔目标功能对应的目标控制类，实现了在目标应用中便捷准确地控制触控笔功能。附图说明在下面结合附图对于示例性实施例的描述中，本公开的更多细节、特征和优点被公开，在附图中：图1示出了根据本公开示例性实施例的触控笔控制方法的流程示意图；图2示出了根据本公开又一示例性实施例的触控笔控制方法的流程示意图；图3示出了根据本公开又一示例性实施例的触控笔的触控笔控制类库示意图；图4示出了根据本公开又一示例性实施例的触控笔控制方法的流程示意图；图5示出了根据本公开又一示例性实施例的触控笔控制方法的流程示意图；图6示出了根据本公开示例性实施例的触控笔功能的控制处理装置的示意性结构图；图7示出了根据本公开另一实施例的触控笔功能的控制处理装置的示意性结构图；以及图8示出了能够用于实现本公开的实施例的示例性电子设备的结构框图。具体实施方式下面将参照附图更详细地描述本公开的实施例。虽然附图中显示了本公开的某些实施例，然而应当理解的是，本公开可以通过各种形式来实现，而且不应该被解释为限于这里阐述的实施例，相反提供这些实施例是为了更加透彻和完整地理解本公开。应当理解的是，本公开的附图及实施例仅用于示例性作用，并非用于限制本公开的保护范围。应当理解，本公开的方法实施方式中记载的各个步骤可以按照不同的顺序执行，和/或并行执行。此外，方法实施方式可以包括附加的步骤和/或省略执行示出的步骤。本公开的范围在此方面不受限制。本文使用的术语“包括”及其变形是开放性包括，即“包括但不限于”。术语“基于”是“至少部分地基于”。术语：“一个实施例”表示“至少一个实施例”；术语“另一实施例”表示“至少一个另外的实施例”；术语“一些实施例”表示“至少一些实施例”。其他术语的相关定义将在下文描述中给出。需要注意，本公开中提及的“第一”、“第二”等概念仅用于对不同的装置、模块或单元进行区分，并非用于限定这些装置、模块或单元所执行的功能的顺序或者相互依存关系。需要注意，本公开中提及的“一个”、“多个”的修饰是示意性而非限制性的，本领域技术人员应当理解，除非在上下文另有明确指出，否则应该理解为“一个或多个”。本公开实施方式中的多个装置之间所交互的消息或者信息的名称仅用于说明性的目的，而并不是用于对这些消息或信息的范围进行限制。目前在线教育中大多使用iPad+ApplePencil作为主讲授课工具的系统。现有带有触控笔的移动设备大多无法在应用程序中控制移动设备的触控笔功能。比如无法在应用中关闭触控笔输入、设置触控笔用户界面以及设置延迟响应等。在一些实施例中，系统会引导或者提示用户在系统中关闭系统自带的触控笔功能，并重新根据目标应用开发一套触控笔功能控制系统，以实现便捷的触控笔控制。然而这种方式需要用户关闭设备系统的触控笔功能，导致其他的应用无法使用；而且，为目标应用开发一套触控笔控制系统的成本也比较大。在一些实施例中，可以使用系统提供的软件程序接口来修改系统自带的触控笔功能。由于系统提供的API很有限，并且极其依赖系统环境，这种方式控制触控笔功能的作用和效果非常有限。参照附图1，根据本公开的一方面，本公开的实施例提供了一种触控笔控制方法，包括：在步骤S120，响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制。用户在使用平板电脑等带有触控笔的电子设备中的应用时，会触发系统激活触控笔的相关功能。用户可输入控制操作以执行相应的触控笔功能。响应于用户的控制操作，可以获取相应的控制指令，这一控制指令用于指示对这一应用中的触控笔的目标功能进行控制。在步骤S140，根据各预设触控笔功能与各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类。于本实施例中，预设控制类可包括成员变量、成员函数中的至少一个。设备的各种功能都在系统里有着相应的控制类，通过改变控制类的设置，即可以实现对功能的控制。每种触控笔功能都对应着一个控制类，比如，触控笔的颜色功能对应相应的一个控制类，若将此控制类的值设置为green，则触控笔的笔迹颜色为绿色；若将此控制类的值设置为red，则触控笔的笔迹颜色为红色。根据各预设触控笔功能和各预设控制类的映射关系，可以确定出目标功能对应的目标控制类，即为需要修改的目标控制类。在步骤S160，根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。在确定好目标功能对应的目标控制类后，可根据控制指令来针对目标控制类执行代码编译处理，即可实现对触控笔的目标功能的控制。具体地，当在线教育的教师在iPad上使用授课应用时，有时会无意间触发控制系统自带的“随手写”功能，导致iPad的触控屏上出现“随手写”的输入界面，而无法在触控屏上进行选取或其他操作。教师因而会想要控制关闭触控笔的“随手写”功能。响应于教师的这一操作，可以获取用于指示在授课应用中关闭“随手写”功能的控制指令，其中“随手写”功能即为目标功能。根据用于指示关闭“随手写”功能的控制指令，将目标控制类的参数值从“ON”修改为“OFF”，从而实现对“随手写”功能的关闭。本实施例提供的触控笔控制方法中，响应于用户的控制指令，并根据各预设触控笔功能和各预设控制类之间的映射来确定目标控制类，并根据控制指令针对目标控制类进行代码编译来实现对触控笔的目标功能的控制。因而，通过修改触控笔的目标功能对应的目标控制类，实现了在目标应用中便捷准确地控制触控笔功能。参照图2，在本公开的另一种实施例中，所述根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类，包括：在步骤S242，通过调试，确定各预设触控笔功能与各预设控制类之间的映射关系。带有触控笔的触控设备在其操作系统中都包括触控笔的触控笔控制类库，触控笔控制类库中包含有触控笔的各预设控制类。于本实施例中，预设控制类可包含成员变量、成员函数中的至少一个。通过调试系统，可以确定各预设触控笔功能与触控笔控制类库中各预设控制类之间的映射关系。参照图3，触控笔的触控笔控制类库中包括多个预设控制类，其中，预设控制类“触控笔程序选项和设置读取”对应“随手写”的整体开关控制；预设控制类“触控笔程序接口输入画板控制器”对应“随手写”的用户界面样式；预设控制类“触控笔程序接口输入元素”对应“随手写”的书写控制部分。于本实施例中，通过变更预设控制类的设置，可以实现相应的预设触控笔功能。比如，针对“随手写”的整体开关控制，若“触控笔程序选项和设置读取”为“ON”，可开启“随手写”，若“触控笔程序选项和设置读取”为“OFF”，可关闭“随手写”。在步骤S244，根据所述目标功能，获取与所述目标功能匹配的所述预设触控笔功能。例如，可将所述目标功能与各预设触控笔功能分别进行比对，获取与所述目标功能匹配的所述预设触控笔功能。在步骤S246，根据各预设触控笔功能与各预设控制类之间的映射关系，确定与匹配的所述预设触控笔功能具有映射关系的所述预设控制类，并将所述预设控制类作为所述目标功能的所述目标控制类。例如，当目标功能为关闭“随手写”时，“触控笔程序选项和设置读取”即为对应的目标控制类。参照图4，在本公开的另一种实施例中，通过调试确定各触控笔功能和各预设控制类之间的映射关系，包括：步骤S4421，设置其中一个预设触控笔功能。具体地，可执行功能设置步骤，以设置各预设触控笔功能的其中一个。在步骤S4422，从各预设控制类中获取其中一个待验证预设控制类，并针对所述待验证预设控制类设置断点。具体地，可从各预设控制类中获取一个待验证预设控制类，并针对待验证预设控制类中的成员变量和/或成员函数设置断点。在步骤S4423，对所述断点处的所述待验证预设控制类进行调试，确定所述待验证预设控制类的实际触控笔功能。具体地，可通过改变所述断点处的待验证预设控制类的设置，确定待验证预设控制类的所述实际触控笔功能。在步骤S4424，判断所述实际触控笔功能与所述预设触控笔功能是否匹配，若匹配，执行步骤S4425，若不匹配，返回步骤S4422。具体地，可判断待验证预设控制类的实际触控笔功能是否与步骤S4421设置的预设触控笔功能相一致，若一致，则代表验证通过并进行步骤S4425，若不一致，则返回执行步骤S4422，以获取下一个待验证预设控制类。在步骤S4425，建立所述预设触控笔功能与所述待验证预设控制类之间的映射关系。具体地，若所述实际触控笔功能与所述预设触控笔功能相匹配，则代表验证成功，则建立所述预设触控笔功能与所述待验证预设控制类之间的映射关系。针对不同的操作系统有不同的辅助开发工具和调试器，比如Xcode是苹果系统官方提供的应用开发工具，AndroidStudio是安卓系统官方提供的应用开发工具，结合LLDB是苹果系统提供的内置于Xcode的一款调试器，GDB是业界通用的一款调试器。基于这些辅助开发工具和调试器可以通过调试来确定各预设触控笔功能和触控笔控制类库中各预设控制类之间的对应关系。断点是调试器的功能之一，其可让程序中断在需要的地方，从而方便其分析。具体地，断点可以是一个信号，其可通知调试器，在某个特定点上令程序进入中断模式，进入中断模式并不会终止或结束程序的执行，执行可以在任何时候继续。具体地，可以通过LLDB在苹果系统的触控笔控制类库中待验证的一个预设控制类处设置断点，以供确定断点处的预设控制类所对应的实际触控笔功能，若实际触控笔功能与预设触控笔功能相匹配，则建立所述预设触控笔功能与所述预设控制类之间的映射关系。在本公开的另一种实施例中，所述通过针对所述断点处的所述预设控制类进行调试，以确定所述预设控制类的实际触控笔功能，包括：通过改变所述断点处的所述预设控制类的设置，确定所述预设控制类的所述实际触控笔功能。具体地，可以通过前述应用开发工具和调试器来改变断点处的预设控制类的设置，这会引起触控笔功能的改变。基于功能的改变可以确定断点处的预设控制类的实际触控笔功能。在本公开的另一种实施例中，触控笔控制类库中的各预设控制类可包括成员变量、成员函数中的至少一个，所述改变所述断点处的所述预设控制类的设置，包括：若所述预设控制类包含所述成员函数，通过调用所述成员函数的方式来改变所述预设控制类的设置；若所述预设控制类包含所述成员变量，通过修改所述成员变量的方式来改变所述预设控制类的设置。在本公开的另一种实施例中，在所述根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类之前，还包括：响应于用户界面中加载有预设输入窗口的侦测结果，或者响应于所述触控笔被激活的侦测结果，将包含有各预设控制类的触控笔控制类库加载至系统内存。于一实施例中，当侦测到电子设备的用户界面中加载有预设输入窗口时，将包含有各预设控制类的触控笔控制类库加载至系统内存。例如，针对苹果系统而言，若iPad屏幕上有输入框时，不管输入框是在网页中，还是在原生界面中的输入框，系统都会触发提前加载触控笔的触控笔控制类库至系统内存，使得所述触控笔控制类库中的各预设控制类可以被调试。于另一实施例中，当侦测到触控笔被激活时，将包含有各预设控制类的触控笔控制类库加载至系统内存。例如，针对其他非苹果系统的平板电脑而言，最迟可以在触控笔落在屏幕上之前，将触控笔的触控笔控制类库加载至系统内存，使得所述触控笔控制类库中的各预设控制类可以被调试。再者，由于不确定是否是由目标应用将触控笔的触控笔控制类库加载到系统内存中，因此需要确认触控笔的触控笔控制类库是否在目标应用的进程中。通过确定触控笔的触控笔控制类库在系统内存和目标应用的进程中，可以确保后续操作的有效性。有鉴于此，在本公开的另一种实施例中，所述方法还包括以下步骤：步骤S510，获取当前运行的目标应用的用户界面的响应者视图。具体地，可以通过Xcode或者AndroidStudio等辅助开发工具，结合LLDB或者GDB等动态调试器，针对系统内存中的触控笔控制类库进行查询。以Xcode+LLDB为例，可首先在Xcode中运行目标应用，接着在Xcode中捕捉目标应用的用户界面层级关系，并在用户界面层级中获取响应者视图。步骤S520，查询所述响应者视图，并在所述响应者视图中存在有所述触控笔控制类库的情况下，确定所述触控笔控制类库被加载于所述目标应用的进程中。在获取响应者视图后，可使用Xcode捕捉当前内存中的所有对象及各对应的各控制类库，若能在各控制类库中找到所述触控笔控制类库，则代表输入窗口与触控笔之间具有引用关系链，则可确定所述触控笔控制类库被加载于所述目标应用的进程中。在本公开的另一种实施例中，所述根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制，包括：根据控制指令、各预设触控笔功能和各预设控制类之间的映射关系，编写目标控制类的控制指令代码，并在目标应用中编译控制指令代码，以实现对触控笔的目标功能进行控制。可选地，可通过以下方式编译控制指令代码：在目标控制类包含成员变量的情况下，根据所述控制指令修改所述成员变量，或者根据所述控制指令从其他进程中获取对应于所述成员变量的修改值，并根据所述修改值修改所述成员变量，以实现对所述触控笔的目标功能进行控制。具体地，对于目标应用进程中的成员变量可以直接采用修改方式，即根据控制指令直接在目标应用的进程中修改目标控制类的参数值。此外，对于跨进程的成员变量则不能采用修改方法，而是需要用调用方式，即先从其他进程中获取对应于成员变量的修改值，再根据修改值修改目标控制类中的成员变量。上述两种方式可针对触控笔的不同功能对应的不同形式的变量进行修改，实现对触控笔多种不同功能的控制。再者，若所述目标控制类包含成员函数，则根据所述控制指令调用所述成员函数，以实现对所述触控笔的目标功能进行控制。具体地，由于成员函数无法采用修改方式，因此，需采用调用方式，实现触控笔目标功能的控制。参照附图6，本公开实施例提供了一种触控笔功能的控制处理装置600，包括：获取模块610，用于响应于用户对目标应用中的触控笔的控制操作，获取控制指令，所述控制指令用于指示对所述目标应用中的触控笔的目标功能进行控制。确定模块620用于根据各预设触控笔功能和各预设控制类之间的映射关系，确定所述目标功能对应的目标控制类。编译模块630用于根据所述控制指令对所述目标控制类进行代码编译，以实现对所述触控笔的目标功能进行控制。可选地，确定模块620还用于：根据所述目标功能，获取与所述目标功能匹配的所述预设触控笔功能；根据各预设触控笔功能与各预设控制类之间的映射关系，确定与匹配的所述预设触控笔功能具有映射关系的所述预设控制类，并将所述预设控制类作为所述目标功能对应的所述目标控制类。可选地，编译模块630还用于：若所述目标控制类包含成员变量，根据所述控制指令修改所述成员变量，或者根据所述控制指令从其他进程中获取对应于所述成员变量的修改值，并根据所述修改值修改所述成员变量，以实现对所述触控笔的目标功能进行控制；若所述目标控制类包含成员函数，根据所述控制指令调用所述成员函数，以实现对所述触控笔的目标功能进行控制。参照附图7，其示出了本公开的触控笔功能的控制处理装置600的另一实施例架构图。如图所示，本实施例的控制处理装置600除包括上述的获取模块610、确定模块620、编译模块630之外，还包括映射模块640和加载模块650。映射模块640，用于通过调试，确定各预设触控笔功能与各预设控制类之间的映射关系。可选地，映射模块640还用于：执行功能设置步骤，以设置其中一个预设触控笔功能；执行断点设置步骤，以从各预设控制类中获取其中一个待验证预设控制类，并针对所述待验证预设控制类设置断点；执行调试步骤，对所述断点处的所述待验证预设控制类进行调试，以确定所述待验证预设控制类的实际触控笔功能；执行验证步骤，若所述实际触控笔功能与所述预设触控笔功能相匹配，建立所述预设触控笔功能与所述待验证预设控制类之间的映射关系，若所述实际触控笔功能与所述预设触控笔功能不匹配，返回执行所述断点设置步骤。可选地，映射模块640还用于：通过改变所述断点处的所述待验证预设控制类的设置，确定所述待验证预设控制类的所述实际触控笔功能。可选地，所述待验证预设控制类包括成员函数和/或成员变量；对应地，映射模块还用于：若所述待验证预设控制类包含所述成员函数，通过调用所述成员函数的方式来改变所述预设控制类的设置；若所述待验证预设控制类包含所述成员变量，通过修改所述成员变量的方式来改变所述预设控制类的设置。加载模块650，用于响应于用户界面中加载有预设输入窗口的侦测结果，或者响应于所述触控笔被激活的侦测结果，将包含有各预设控制类的触控笔控制类库加载至系统内存。可选地，加载模块650还用于：获取当前运行的目标应用的用户界面的响应者视图；查询所述响应者视图，在所述响应者视图中存在有所述触控笔控制类库的情况下，确定所述触控笔控制类库被加载于所述目标应用的进程中。在本公开的第三方面，本公开的实施例提供一种电子设备，包括：处理器；以及存储程序的存储器，其中，所述程序包括指令，所述指令在由所述处理器执行时使所述处理器执行如本公开第一方面所述的方法。在本公开的第四方面，本公开的实施例提供一种存储有计算机指令的非瞬时计算机可读存储介质，其中，所述计算机指令用于使所述计算机执行如本公开第一方面所述的方法。在本公开的第五方面，本公开的实施例提供一种计算机程序产品，包括计算机程序，其中，所述计算机程序在被处理器执行时实现如本公开第一方面所述的方法。参考图8，现将描述可以作为本公开的服务器或客户端的电子设备800的结构框图，其是可以应用于本公开的各方面的硬件设备的示例。电子设备旨在表示各种形式的数字电子的计算机设备，诸如，膝上型计算机、台式计算机、工作台、个人数字助理、服务器、刀片式服务器、大型计算机、和其它适合的计算机。电子设备还可以表示各种形式的移动装置，诸如，个人数字处理、蜂窝电话、智能电话、可穿戴设备和其它类似的计算装置。本文所示的部件、它们的连接和关系、以及它们的功能仅仅作为示例，并且不意在限制本文中描述的和/或者要求的本公开的实现。如图8所示，电子设备800包括计算单元801，其可以根据存储在只读存储器802中的计算机程序或者从存储单元808加载到随机访问存储器803中的计算机程序，来执行各种适当的动作和处理。在RAM 803中，还可存储设备800操作所需的各种程序和数据。计算单元801、ROM 802以及RAM 803通过总线804彼此相连。输入/输出接口805也连接至总线804。电子设备800中的多个部件连接至I/O接口805，包括：输入单元806、输出单元807、存储单元808以及通信单元809。输入单元806可以是能向电子设备800输入信息的任何类型的设备，输入单元806可以接收输入的数字或字符信息，以及产生与电子设备的用户设置和/或功能控制有关的键信号输入。输出单元807可以是能呈现信息的任何类型的设备，并且可以包括但不限于显示器、扬声器、视频/音频输出终端、振动器和/或打印机。存储单元804可以包括但不限于磁盘、光盘。通信单元809允许电子设备800通过诸如因特网的计算机网络和/或各种电信网络与其他设备交换信息/数据，并且可以包括但不限于调制解调器、网卡、红外通信设备、无线通信收发机和/或芯片组，例如蓝牙TM设备、WiFi设备、WiMax设备、蜂窝通信设备和/或类似物。计算单元801可以是各种具有处理和计算能力的通用和/或专用处理组件。计算单元801的一些示例包括但不限于中央处理单元、图形处理单元、各种专用的人工智能计算芯片、各种运行机器学习模型算法的计算单元、数字信号处理器、以及任何适当的处理器、控制器、微控制器等。计算单元801执行上文所描述的各个方法和处理。例如，在一些实施例中，如第一方面的特征共享建模方法可被实现为计算机软件程序，其被有形地包含于机器可读介质，例如存储单元808。在一些实施例中，计算机程序的部分或者全部可以经由ROM 802和/或通信单元809而被载入和/或安装到电子设备800上。在一些实施例中，计算单元801可以通过其他任何适当的方式而被配置为执行各实施例所述的触控笔控制方法。用于实施本公开的方法的程序代码可以采用一个或多个编程语言的任何组合来编写。这些程序代码可以提供给通用计算机、专用计算机或其他可编程数据处理装置的处理器或控制器，使得程序代码当由处理器或控制器执行时使流程图和/或框图中所规定的功能/操作被实施。程序代码可以完全在机器上执行、部分地在机器上执行，作为独立软件包部分地在机器上执行且部分地在远程机器上执行或完全在远程机器或服务器上执行。在本公开的上下文中，机器可读介质可以是有形的介质，其可以包含或存储以供指令执行系统、装置或设备使用或与指令执行系统、装置或设备结合地使用的程序。机器可读介质可以是机器可读信号介质或机器可读储存介质。机器可读介质可以包括但不限于电子的、磁性的、光学的、电磁的、红外的、或半导体系统、装置或设备，或者上述内容的任何合适组合。机器可读存储介质的更具体示例会包括基于一个或多个线的电气连接、便携式计算机盘、硬盘、随机存取存储器、只读存储器、可擦除可编程只读存储器、光纤、便捷式紧凑盘只读存储器、光学储存设备、磁储存设备、或上述内容的任何合适组合。如本公开使用的，术语“机器可读介质”和“计算机可读介质”指的是用于将机器指令和/或数据提供给可编程处理器的任何计算机程序产品、设备、和/或装置)，包括，接收作为机器可读信号的机器指令的机器可读介质。术语“机器可读信号”指的是用于将机器指令和/或数据提供给可编程处理器的任何信号。为了提供与用户的交互，可以在计算机上实施此处描述的系统和技术，该计算机具有：用于向用户显示信息的显示装置或者LCD监视器）；以及键盘和指向装置，用户可以通过该键盘和该指向装置来将输入提供给计算机。其它种类的装置还可以用于提供与用户的交互；例如，提供给用户的反馈可以是任何形式的传感反馈；并且可以用任何形式来接收来自用户的输入。可以将此处描述的系统和技术实施在包括后台部件的计算系统、或者包括中间件部件的计算系统、或者包括前端部件的计算系统、或者包括这种后台部件、中间件部件、或者前端部件的任何组合的计算系统中。可以通过任何形式或者介质的数字数据通信来将系统的部件相互连接。通信网络的示例包括：局域网、广域网和互联网。计算机系统可以包括客户端和服务器。客户端和服务器一般远离彼此并且通常通过通信网络进行交互。通过在相应的计算机上运行并且彼此具有客户端-服务器关系的计算机程序来产生客户端和服务器的关系。
