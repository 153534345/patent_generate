标题title
一种基于映射关系的对抗性Android恶意软件检测方法
摘要abst
目前，Android系统上恶意软件的种类和数量疯狂增长，对用户构成了极大的威胁，因此本发明提出了一种基于映射关系的对抗性Android恶意软件检测方法。首先，创立硬件库，同时根据权限控制API的机制，利用构建的敏感API库和敏感权限库建立映射关系库，然后，利用python调用Android软件的逆向工具，对软件进行脱壳重打包处理后，获取从Android软件中提取到的API、权限、硬件特征，与映射关系库、硬件库进行对比，生成one‑hot编码，最后，训练CNN模型，在测试集中使用最佳训练模型对软件进行检测。本发明能有效地检测Android系统上恶意软件，对智能手机生态圈的健康发展具有重要意义。
权利要求书clms
1.一种基于映射关系的对抗性Android恶意软件检测方法，其特征在于，包括以下步骤：步骤1：编写python文件，对Android软件进行特征提取：步骤1-1：判断Android软件的加固情况，如果文件被加固过，则利用脱壳和重打包工具对Android软件进行脱壳重打包；步骤1-2：利用解压工具对Android软件进行解压，保存解压后的文件；步骤1-3：查找解压后的文件中后缀为.dex的文件，使用baksmali工具将.dex文件转换为.smali文件，并保存；步骤1-4：遍历保存的.smali文件，搜集Android软件的使用的API信息；步骤1-5：查找解压后的文件中名为AndroidManifest.xml的文件，使用aapt工具将AndroidManifest.xml文件转换为AndroidManifest.txt文件，并保存；步骤1-6：根据AndroidManifest.txt文件，获取Android软件中申明的权限和硬件信息；步骤2：编写python文件，对Android软件特征进行预处理：步骤2-1：将从多个Android软件中获取到的API进行整理，根据API的危险级别和出现的频率建立敏感API库：D＝{d1,d2,...,dm}；步骤2-2：将从多个Android软件中获取到的权限进行整理，根据权限的危险级别和出现的频率建立敏感权限库：P＝{p1,p2,...,pn}；步骤2-3：根据权限控制相关API的机制，建立敏感权限和敏感API的映射关系库，权限控制相关API的机制为：A＝{|pi∈P,dj∈D,pi控制dj}；步骤2-4：将从多个Android软件中获取到的硬件进行整理，将所有出现过的硬件申请均加入硬件库；步骤2-5：将从Android软件中提取到的特征与映射关系库、硬件库进行对比，生成one-hot编码，即将每个Android软件转换为二进制向量；步骤2-6：将步骤2-5中的二进制向量每8位进行分割，转换为灰度图；步骤3：对数据集进行选择与分割：步骤3-1：将从步骤2-6中获得的灰度图按照标签类型分成normal_data，malware_data；步骤3-2：从normal_data、malware_data中分别进行随机抽取，用于构建训练集、验证集、测试集；步骤4：搭建CNN模型进行训练：步骤4-1：搭建CNN，使用relu函数作为激活函数，采用adam优化器进行优化，最后使用softmax函数作为分类器；步骤4-2：分类精度的评价指标使用Accuracy与Error_rate表示:式中，P代表正例总数、N代表负例总数；TP表示真实类别为正例，预测类别为正例；TN表示真实类别为负例，预测类别为负例；FP表示真实类别为负例，预测类别为正例；FN表示真实类别为正例，预测类别为负例；步骤4-3：使用train_data对搭建的模型进行训练；步骤4-4：在训练过程中，使用validation_data对模型进行验证，并保存最佳模型：步骤5：加载最佳的训练模型，对test_data进行测试，对软件进行检测，并计算其精度。2.如权利要求1所述的基于多维特征映射关系的Android恶意软件检测方法，其特征在于：步骤3-1中的标签类型分为正常软件：0和恶意软件：1。3.如权利要求1所述的基于多维特征映射关系的Android恶意软件检测方法，其特征在于：步骤3-2中的训练集、验证集、测试集分别占normal_data、malware_data的70％、20％、10％。
说明书desc
技术领域本发明涉及一种基于映射关系的对抗性Android恶意软件检测方法，属于安全技术领域。背景技术为了提高用户的体验感，Android软件获取了更多的用户隐私信息，如果可以准确检测出恶意软件，则可以在很大程度上保护用户的隐私数据。为了有效保障智能手机生态圈的健康发展，目前许多技术人员已经将深度学习的方法应用于自动高效的检测Android恶意软件问题上，但是很多软件设计者为了保护软件底层代码进行了加壳，同时，很少有人将Android软件中的API和权限建立映射关系库的同时融入硬件特征。因此本发明提出了一种基于映射关系的对抗性Android恶意软件检测方法。首先，创立硬件库，同时根据权限控制API的机制，利用构建的敏感API库和敏感权限库建立映射关系库，然后，利用python调用Android软件的逆向工具，对软件进行脱壳重打包处理后，获取从Android软件中提取到的API、权限、硬件特征，与映射关系库、硬件库进行对比，生成one-hot编码，最后，训练CNN模型，在测试集中使用最佳训练模型对软件进行检测。发明内容本发明要克服现有技术的上述缺点，提供基于映射关系的对抗性Android恶意软件检测方法。本发明采用的技术方案为：一种基于映射关系的对抗性Android恶意软件检测方法，首先，先对软件进行脱壳重打包，然后获取软件的API、权限、硬件信息，与构建的库进行对比生成one-hot编码，最后，训练CNN模型，在测试集中使用最佳训练模型对软件进行检测。具体包括以下步骤：步骤1：编写python文件，对Android软件进行特征提取：步骤1-1：判断Android软件的加固情况，如果文件被加固过，则利用脱壳和重打包工具对 Android软件进行脱壳重打包；步骤1-2：利用解压工具对Android软件进行解压，保存解压后的文件；步骤1-3：查找解压后的文件中后缀为.dex的文件，使用baksmali工具将.dex文件转换为.smali 文件，并保存；步骤1-4：遍历保存的.smali文件，搜集Android软件的使用的API信息；步骤1-5：查找解压后的文件中名为AndroidManifest.xml的文件，使用aapt工具将 AndroidManifest.xml文件转换为AndroidManifest.txt文件，并保存；步骤1-6：根据AndroidManifest.txt文件，获取Android软件中申明的权限和硬件信息；步骤2：编写python文件，对Android软件特征进行预处理：步骤2-1：将从多个Android软件中获取到的API进行整理，根据API的危险级别和出现的频率建立敏感API库：D＝{d1,d2,...,dm}；步骤2-2：将从多个Android软件中获取到的权限进行整理，根据权限的危险级别和出现的频率建立敏感权限库：P＝{p1,p2,...,pn}；步骤2-3：根据权限控制相关API的机制，建立敏感权限和敏感API的映射关系库，权限控制相关API的机制为：A＝{|pi∈P,dj∈D,pi控制dj}；步骤2-4：将从多个Android软件中获取到的硬件进行整理，将所有出现过的硬件申请均加入硬件库；步骤2-5：将从Android软件中提取到的特征与映射关系库、硬件库进行对比，生成one-hot 编码，即将每个Android软件转换为二进制向量；步骤2-6：将步骤2-5中的二进制向量每8位进行分割，转换为灰度图；步骤3：对数据集进行选择与分割：步骤3-1：将从步骤2-6中获得的灰度图按照标签类型分成normal_data，malware_data；步骤3-2：从normal_data、malware_data中分别进行随机抽取，用于构建训练集、验证集、测试集；步骤4：搭建CNN模型进行训练：步骤4-1：搭建CNN，使用relu函数作为激活函数，采用adam优化器进行优化，最后使用 softmax函数作为分类器；步骤4-2：分类精度的评价指标使用Accuracy与Error_rate表示:式中，P代表正例总数、N代表负例总数；TP表示真实类别为正例，预测类别为正例；TN表示真实类别为负例，预测类别为负例；FP表示真实类别为负例，预测类别为正例；FN 表示真实类别为正例，预测类别为负例；步骤4-3：使用train_data对搭建的模型进行训练；步骤4-4：在训练过程中，使用validation_data对模型进行验证，并保存最佳模型：步骤5：加载最佳的训练模型，对test_data进行测试，对软件进行检测，并计算其精度。优选地，步骤3-1中的标签类型分为正常软件：0和恶意软件：1。优选地，步骤3-2中的训练集、验证集、测试集|pi∈P,dj∈D,pi控制dj}；步骤2-4：将从多个Android软件中获取到的硬件进行整理，将所有出现过的硬件申请均加入硬件库；步骤2-5：将从Android软件中提取到的特征与映射关系库、硬件库进行对比，生成one-hot 编码，即将每个Android软件转换为二进制向量；步骤2-6：将步骤2-5中的二进制向量每8位进行分割，转换为灰度图；步骤3：对数据集进行选择与分割：步骤3-1：将从步骤2-6中获得的灰度图按照标签类型分成normal_data，malware_data；步骤3-2：从normal_data、malware_data中分别进行随机抽取，用于构建训练集、验证集、测试集；步骤4：搭建CNN模型进行训练：步骤4-1：搭建CNN，使用relu函数作为激活函数，采用adam优化器进行优化，最后使用 softmax函数作为分类器；步骤4-2：分类精度的评价指标使用Accuracy与Error_rate表示:式中，P代表正例总数、N代表负例总数；TP表示真实类别为正例，预测类别为正例；TN表示真实类别为负例，预测类别为负例；FP表示真实类别为负例，预测类别为正例；FN 表示真实类别为正例，预测类别为负例；步骤4-3：使用train_data对搭建的模型进行训练；步骤4-4：在训练过程中，使用validation_data对模型进行验证，并保存最佳模型：步骤5：加载最佳的训练模型，对test_data进行测试，对软件进行检测，并计算其精度。本说明书实施例所述的内容仅仅是对发明构思的实现形式的列举，本发明的保护范围不应当被视为仅限于实施例所陈述的具体形式，本发明的保护范围也及于本领域技术人员根据本发明构思所能够想到的等同技术手段。
