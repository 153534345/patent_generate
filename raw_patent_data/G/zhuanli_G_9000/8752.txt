标题title
用于容器组的解耦管理方法、装置、设备、介质
摘要abst
本发明提供了一种用于容器组的解耦管理方法，可以应用于金融技术领域。该用于容器组的解耦管理方法包括：配置边车容器自定义控制器，在边车容器自定义控制器中定义有操作属性和容器属性，操作属性包括删除操作，容器属性包括禁止运行的边车容器镜像列表；接受针对至少一个容器组的定义调整请求；匹配至少一个容器组与边车容器自定义控制器；根据匹配出的边车容器自定义控制器，从至少一个容器组的定义中删除禁止运行的边车容器镜像列表中的边车容器镜像的配置；根据调整后的至少一个容器组的定义创建至少一个容器组，以在至少一个容器组中实现业务容器与边车容器的解耦。本发明还提供了一种用于容器组的解耦管理装置、设备、存储介质和程序产品。
权利要求书clms
1.一种用于容器组的解耦管理方法，所述容器组包括业务容器和边车容器，其特征在于，所述方法包括：配置边车容器自定义控制器，其中，在所述边车容器自定义控制器中定义有操作属性和容器属性，所述操作属性包括删除操作，所述容器属性包括禁止运行的边车容器镜像列表；接受针对至少一个容器组的定义调整请求；匹配所述至少一个容器组与所述边车容器自定义控制器；根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义，其中，所述调整所述至少一个容器组的定义包括：从所述至少一个容器组的定义中删除所述禁止运行的边车容器镜像列表中的边车容器镜像的配置；根据调整后的所述至少一个容器组的定义创建所述至少一个容器组，以在所述至少一个容器组中实现业务容器与边车容器的解耦。2.根据权利要求1所述的方法，其特征在于，所述配置边车容器自定义控制器包括：定义所述边车容器自定义控制器的操作属性、容器属性、名称空间属性和标签属性，其中，所述名称空间属性包括与所述边车容器自定义控制器匹配的至少一个容器组的名称空间，所述标签属性包括与所述边车容器自定义控制器匹配的至少一个容器组的标签。3.根据权利要求2所述的方法，其特征在于，所述匹配所述至少一个容器组与所述边车容器自定义控制器包括：匹配所述边车容器自定义控制器的名称空间属性与所述至少一个容器组的名称空间，获取匹配成功的边车容器自定义控制器；匹配获取到的所述边车容器自定义控制器的标签属性与所述至少一个容器组的标签，获取匹配成功的边车容器自定义控制器。4.根据权利要求1所述的方法，其特征在于，所述匹配所述至少一个容器组与所述边车容器自定义控制器包括：若没有匹配成功，则不调整所述至少一个容器组的定义，创建所述至少一个容器组。5.根据权利要求1所述的方法，其特征在于，所述根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义包括：当匹配出的所述边车容器自定义控制器的数量为一个时，根据所述边车容器自定义控制器，调整所述至少一个容器组的定义；当匹配出的所述边车容器自定义控制器的数量大于一时，根据所述边车容器自定义控制器的自定义顺序，依次对所述至少一个容器组的定义进行调整。6.根据权利要求1所述的方法，其特征在于，所述操作属性还包括插入操作，所述容器属性包括待插入的边车容器镜像列表，所述根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义包括：将所述待插入的边车容器镜像列表中的边车容器镜像插入所述至少一个容器组的定义。7.一种用于容器组的解耦管理装置，所述容器组包括业务容器和边车容器，其特征在于，包括：自定义控制器配置模块，用于配置边车容器自定义控制器，其中，在所述边车容器自定义控制器中定义有操作属性和容器属性，所述操作属性包括删除操作，所述容器属性包括禁止运行的边车容器镜像列表；调整请求接受模块，用于接受针对至少一个容器组的定义调整请求；自定义控制器匹配模块，用于匹配所述至少一个容器组与所述边车容器自定义控制器；容器组定义调整模块，用于根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义，其中，所述调整所述至少一个容器组的定义包括：从所述至少一个容器组的定义中删除所述禁止运行的边车容器镜像列表中的边车容器镜像的配置；容器组创建模块，用于根据调整后的所述至少一个容器组的定义创建所述至少一个容器组，以在所述至少一个容器组中实现业务容器与边车容器的解耦。8.一种电子设备，其特征在于，包括：一个或多个处理器；存储装置，用于存储一个或多个程序，其中，当所述一个或多个程序被所述一个或多个处理器执行时，使得所述一个或多个处理器执行根据权利要求1~6中任一项所述的方法。9.一种计算机可读存储介质，其特征在于，其上存储有可执行指令，该指令被处理器执行时使处理器执行根据权利要求1~6中任一项所述的方法。
说明书desc
技术领域本发明涉及金融科技领域，具体地涉及一种用于容器组的解耦管理方法、装置、设备和介质。背景技术Kubernetes是用于自动部署、扩展和管理容器化应用程序的开源系统。它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现。Kubernetes以Pod为基本调度编排单位，1个Pod中可包含1个或多个容器。Pod中一般包含业务容器和一个或多个边车容器，边车容器用于完成日志采集、流量负载等功能。目前，若需升级边车容器，如日志采集或流量负载程序升级，各个业务系统需各自完成边车容器升级。而在实际应用中，同家公司中技术架构相对统一，公司内部多个业务系统配置的边车容器基本相同。因此，可以将边车容器升级相对于业务容器独立出来，从而实现业务系统对边车容器升级无感、边车容器与业务容器的解耦管理。为实现业务容器与边车容器的解耦管理，业界提出了一些解决办法。阿里云开源了OpenKruise组件库，其中的SideCarSet组件可实现边车容器的自动注入；开源软件Istio也实现了Envoy边车容器到业务容器的自动注入。然而，上述方法都仅实现了边车容器的注入，但没有实现Pod中已有边车容器情况下如何禁止边车容器运行的功能。发明内容鉴于上述问题，本发明提供了一种用于容器组的解耦管理方法、装置、设备和介质，可以实现Pod中已有边车容器情况下禁止边车容器运行的方法，在相同禁用需求的Pod数量巨大时，提升了禁用的效率和稳定性，进一步完善边车容器的解耦管理。本发明第一个方面提供了一种用于容器组的解耦管理方法，所述容器组包括业务容器和边车容器，所述方法包括：配置边车容器自定义控制器，其中，在所述边车容器自定义控制器中定义有操作属性和容器属性，所述操作属性包括删除操作，所述容器属性包括禁止运行的边车容器镜像列表；接受针对至少一个容器组的定义调整请求；匹配所述至少一个容器组与所述边车容器自定义控制器；根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义，其中，所述调整所述至少一个容器组的定义包括：从所述至少一个容器组的定义中删除所述禁止运行的边车容器镜像列表中的边车容器镜像的配置；根据调整后的所述至少一个容器组的定义创建所述至少一个容器组，以在所述至少一个容器组中实现业务容器与边车容器的解耦。根据本发明的实施例，所述配置边车容器自定义控制器包括：定义所述边车容器自定义控制器的操作属性、容器属性、名称空间属性和标签属性，其中，所述名称空间属性包括与所述边车容器自定义控制器匹配的至少一个容器组的名称空间，所述标签属性包括与所述边车容器自定义控制器匹配的至少一个容器组的标签。根据本发明的实施例，所述匹配所述至少一个容器组与所述边车容器自定义控制器包括：匹配所述边车容器自定义控制器的名称空间属性与所述至少一个容器组的名称空间，获取匹配成功的边车容器自定义控制器；匹配获取到的所述边车容器自定义控制器的标签属性与所述至少一个容器组的标签，获取匹配成功的边车容器自定义控制器。根据本发明的实施例，所述匹配所述至少一个容器组与所述边车容器自定义控制器包括：若没有匹配成功，则不调整所述至少一个容器组的定义，并创建所述至少一个容器组。根据本发明的实施例，所述根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义包括：当匹配出的所述边车容器自定义控制器的数量为一个时，根据所述边车容器自定义控制器，调整所述至少一个容器组的定义；当匹配出的所述边车容器自定义控制器的数量大于一时，根据所述边车容器自定义控制器的自定义顺序，依次对所述至少一个容器组的定义进行调整。根据本发明的实施例，所述操作属性还包括插入操作，所述容器属性包括待插入的边车容器镜像列表，所述根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义包括：将所述待插入的边车容器镜像列表中的边车容器镜像插入所述至少一个容器组的定义。本发明的第二方面提供了一种用于容器组的解耦管理装置，所述容器组包括业务容器和边车容器，包括：自定义控制器配置模块，用于配置边车容器自定义控制器，其中，在所述边车容器自定义控制器中定义有操作属性和容器属性，所述操作属性包括删除操作，所述容器属性包括禁止运行的边车容器镜像列表；调整请求接受模块，用于接受针对至少一个容器组的定义调整请求；自定义控制器匹配模块，用于匹配所述至少一个容器组与所述边车容器自定义控制器；容器组定义调整模块，用于根据匹配出的边车容器自定义控制器，调整所述至少一个容器组的定义，其中，所述调整所述至少一个容器组的定义包括：从所述至少一个容器组的定义中删除所述禁止运行的边车容器镜像列表中的边车容器镜像的配置；容器组创建模块，用于根据调整后的所述至少一个容器组的定义创建所述至少一个容器组，以在所述至少一个容器组中实现业务容器与边车容器的解耦。本发明的第三方面提供了一种电子设备，包括：一个或多个处理器；存储器，用于存储一个或多个程序，其中，当所述一个或多个程序被所述一个或多个处理器执行时，使得一个或多个处理器执行上述用于容器组的解耦管理方法。本发明的第四方面还提供了一种计算机可读存储介质，其上存储有可执行指令，该指令被处理器执行时使处理器执行上述用于容器组的解耦管理方法。根据本发明实施例提供的用于容器组的解耦管理方法，基于Kubernetes的Admission Webhook机制和CRD机制，可以通过轻量级的边车容器自定义控制器，实现对批量的边车容器的配置管理，可以在容器组已有边车容器的情况下批量修改容器组边车容器的配置，提升了禁用的效率和稳定性，进一步完善了边车容器与业务容器的解耦管理，提高了解耦操作效率。附图说明通过以下参照附图对本发明实施例的描述，本发明的上述内容以及其他目的、特征和优点将更为清楚，在附图中：图1示意性示出了根据本发明实施例的用于容器组的解耦管理方法、装置、设备和介质的应用场景图；图2示意性示出了根据本发明一实施例的用于容器组的解耦管理方法的流程图；图3示意性示出了根据本发明一实施例的操作S210的流程图；图4示意性示出了根据本发明一实施例的操作S230的流程图；图5示意性示出了根据本发明一实施例的操作S240的流程图；图6示意性示出了根据本发明另一实施例的用于容器组的解耦管理方法的流程图；图7示意性示出了根据本发明实施例的用于容器组的解耦管理方法的示意图；图8示意性示出了根据本发明实施例的用于容器组的解耦管理装置的结构框图；以及图9示意性示出了根据本发明实施例的适于实现用于容器组的解耦管理方法的电子设备的方框图。具体实施方式以下，将参照附图来描述本发明的实施例。但是应该理解，这些描述只是示例性的，而并非要限制本发明的范围。在下面的详细描述中，为便于解释，阐述了许多具体的细节以提供对本发明实施例的全面理解。然而，明显地，一个或多个实施例在没有这些具体细节的情况下也可以被实施。此外，在以下说明中，省略了对公知结构和技术的描述，以避免不必要地混淆本发明的概念。在此使用的术语仅仅是为了描述具体实施例，而并非意在限制本发明。在此使用的术语“包括”、“包含”等表明了所述特征、步骤、操作和/或部件的存在，但是并不排除存在或添加一个或多个其他特征、步骤、操作或部件。在此使用的所有术语具有本领域技术人员通常所理解的含义，除非另外定义。应注意，这里使用的术语应解释为具有与本说明书的上下文相一致的含义，而不应以理想化或过于刻板的方式来解释。在使用类似于“A、B和C等中至少一个”这样的表述的情况下，一般来说应该按照本领域技术人员通常理解该表述的含义来予以解释。Kubernetes可以简称为K8s，是一个能用于管理云平台中多个主机上的容器化的应用。Kubernetes提供了应用部署、规划、更新、维护的一种机制。Kubernetes中应用部署通过部署容器方式实现。容器的实质是进程，运行于属于自己独立的命名空间。容器之间进程不会相互影响，能区分计算资源。在Kubernetes集群环境下，所部署的业务往往是以Pod的形式运行在节点Node上面的。通常，一个业务Pod中至少有一个业务容器，除业务容器外，还可以配置边车容器，边车容器又名Sidecar容器，用于实现业务容器的一些辅助功能，如，处理业务容器的日志、进行业务监控等功能。随着Kubernetes使用的越来越多，用户自定义资源的需求也会越来越多。而Kubernetes提供的聚合各个子资源的功能，已经不能满足日益增长的广泛需求了。用户希望提供一种用户自定义的资源，把各个子资源全部聚合起来。在Kubernetes里面，API编程范式也就是Custom Resources Definition，用户可以根据自己的需求添加自定义的Kubernetes对象资源。用户自己添加的Kubernetes对象资源和Kubernetes中自带的、原生的那些Pod、Deployment是同样的对象资源。本发明的实施例提供了一种用于容器组的解耦管理方法，通过配置边车容器自定义控制器，在创建容器组的过程中，与容器组进行匹配，进而根据边车容器自定义控制器的操作属性和容器属性调整容器组的定义，从而实现容器组中已有边车容器的情况下禁止边车容器运行，进一步完善边车容器的解耦管理。需要说明的是，本发明用于容器组的解耦管理方法和装置可用于金融领域在系统研发的容器部署，也可用于除金融领域之外的任意领域，本发明用于容器组的解耦管理方法和装置的应用领域不做限定。图1示意性示出了根据本发明实施例的用于容器组的解耦管理方法和装置的应用场景图。如图1所示，根据该实施例的应用场景100可以包括银行等金融领域应用场景中的系统开发，该系统基于Kubernetes编排管理生产环境构建，包括以Pod为基本调度编排单元，1个Pod中包含业务容器和1个或多个边车容器。网络104用以在终端设备101、102、103和服务器105之间提供通信链路的介质。网络104可以包括各种连接类型，例如有线、无线通信链路或者光纤电缆等等。用户可以使用终端设备101、102、103通过网络104与服务器105交互，以接收或发送消息等。终端设备101、102、103上可以安装有各种通讯客户端应用，例如购物类应用、网页浏览器应用、搜索类应用、即时通信工具、邮箱客户端、社交平台软件等。终端设备101、102、103可以是具有显示屏并且支持网页浏览的各种电子设备，包括但不限于智能手机、平板电脑、膝上型便携计算机和台式计算机等等。服务器105可以是提供各种服务的服务器，例如对用户利用终端设备101、102、103所浏览的网站提供支持的后台管理服务器。后台管理服务器可以对接收到的用户请求等数据进行分析等处理，并将处理结果反馈给终端设备。需要说明的是，本发明实施例所提供的用于容器组的解耦管理方法一般可以由服务器105执行。相应地，本发明实施例所提供的用于容器组的解耦管理装置一般可以设置于服务器105中。本发明实施例所提供的用于容器组的解耦管理方法也可以由不同于服务器105且能够与终端设备101、102、103和/或服务器105通信的服务器或服务器集群执行。相应地，本发明实施例所提供的用于容器组的解耦管理装置也可以设置于不同于服务器105且能够与终端设备101、102、103和/或服务器105通信的服务器或服务器集群中。应该理解，图1中的终端设备、网络和服务器的数目仅仅是示意性的。根据实现需要，可以具有任意数目的终端设备、网络和服务器。以下将基于图1描述的应用场景，通过图2~图3对公开实施例的用于容器组的解耦管理方法进行详细描述。图2示意性示出了根据本发明实施例的用于容器组的解耦管理方法的流程图。如图2所示，该实施例的用于容器组的解耦管理方法包括操作S210~操作S250，该解耦管理方法可以顺序执行。在操作S210，配置边车容器自定义控制器，在边车容器自定义控制器中定义有操作属性和容器属性，操作属性包括删除操作，容器属性包括禁止运行的边车容器镜像列表。在本实施例中，根据Kubernetes CRD规范，定义边车容器自定义控制器，操作属性表示对Pod内的边车容器执行操作的类型，可以包括删除操作、插入操作等，容器属性内配置了对应的边车容器镜像，容器就是镜像运行时的实体。在操作S220，接受针对至少一个容器组的定义调整请求。在本实施例中，在创建或重新定义Pod时，可以由Kubernetes API Server在接收到创建Pod的请求之后，发送容器组定义调整请求，以获取相应的边车容器自定义控制器来调整该Pod中的边车容器。将用于容器组的解耦管理装置可以配置为Admission Webhook处理模块，便于Kubernetes感知该模块的存在，从而执行本实施例的用于容器组的解耦管理方法。由于各容器组中边车容器的功能、组成类似，因此可接受来自多个容器组的定义调整请求，对多个容器组的定义进行批量调整。在操作S230，匹配至少一个容器组与边车容器自定义控制器。在本实施例中，用户可根据自身需求，可以给每个Pod配置边车容器自定义控制器，或者，可以根据Pod的分类配置不同的自定义控制器，或者，还可以给同一容器组内不同类型的边车容器定义不同的边车容器自定义控制器等。在操作S240，根据匹配出的边车容器自定义控制器，调整至少一个容器组的定义，调整至少一个容器组的定义包括：从至少一个容器组的定义中删除禁止运行的边车容器镜像列表中的边车容器镜像的配置。在本实施例中，当对Pod内的边车容器执行删除操作时，根据边车容器自定义控制器的容器属性，获取到边车容器镜像列表，根据边车容器镜像列表，删除Pod中对应的边车容器。在操作S250，根据调整后的至少一个容器组的定义创建至少一个容器组，以在至少一个容器组中实现业务容器与边车容器的解耦。在本实施例中，当用于容器组的解耦管理装置完成容器组的边车容器的配置处理后，将配置结果返回Kubernetes API Server，使Kubernetes API Server接着完成Pod创建。根据上述方法，通过配置轻量级的边车容器自定义控制器，可以在Pod定义的过程中，实现对批量的边车容器的配置管理，可以在容器组已有边车容器的情况下批量删除该容器组的边车容器的配置，提升了禁用的效率和稳定性，进一步完善了边车容器与业务容器的解耦管理，提高了解耦操作效率。下面将对上述操作步骤进行进一步的说明。图3示意性示出了根据本发明一实施例的操作S210的流程图。如图3所示，在操作S210，配置至少一个边车容器自定义控制器可以包括操作S211。在操作S211，定义边车容器自定义控制器的操作属性、容器属性、名称空间属性和标签属性，名称空间属性包括与边车容器自定义控制器匹配的至少一个容器组的名称空间，标签属性包括与边车容器自定义控制器匹配的至少一个容器组的标签。名称空间用于限制Pod资源名称的作用域，Pod中包含的容器共享该名称空间。标签可以用于标识Pod的运行节点、功能特性等，常用于标签选择器的匹配度检查，从而完成资源筛选。在本实施例中，边车容器自定义控制器的名称空间属性支持配置多个名称空间。当名称空间属性支持配置为“全部”时，则该边车容器自定义控制器对所有名称空间的Pod都生效。每个业务Pod有标签属性，由用户配置边车容器自定义控制器中标签属性与指定的业务Pod标签属性相同。边车容器自定义控制器支持配置多套，即用户可给多套Pod的边车容器配置同一边车容器自定义控制器，且对于同一Pod可以配置多套边车容器自定义控制器。进一步的，通过给Pod中的边车容器设置唯一的边车容器标签，或者对同一Pod中不同功能类型边车容器设置不同的标签，并给不同标签的边车容器配置不同的边车容器自定义控制器，从而可以实现对Pod中不同的边车容器进行不同的自定义调节。操作属性可以包括插入和删除属性，插入属性指示将容器属性中的边车容器镜像插入Pod中，删除属性指示删除容器属性中与容器属性中的镜像相同的边车容器，通过删除和插入的组合操作，可以实现容器组中全部或部分边车容器的更新。在本实施例中，边车容器自定义控制器还可以包括资源名称等。资源名称用于表明该边车容器自定义控制器的管理属性、内容等，便于用户快速了解该自定义管理资源的功能。图4示意性示出了根据本发明一实施例的操作S230的流程图。如图4所示，根据操作S230，匹配至少一个容器组与边车容器自定义控制器包括操作S231~操作S232。在操作S231，匹配边车容器自定义控制器的名称空间属性与至少一个容器组的名称空间，获取匹配成功的边车容器自定义控制器。在操作S232，匹配获取到的边车容器自定义控制器的标签属性与至少一个容器组的标签，获取匹配成功的边车容器自定义控制器。在本实施例中，查找与容器组匹配的边车容器自定义控制器至少分为名称空间匹配检测与标签匹配检测。首先从所有边车容器自定义控制器配置中，找出与当前Pod名称空间相同的边车容器自定义控制器配置或名称空间属性配置为“全部”的边车容器自定义控制器，当名称空间属性支持配置为“全部”时，则该边车容器自定义控制器对所有名称空间的Pod都生效。若匹配到了边车容器自定义控制器，则对名称空间匹配成功的边车容器自定义控制器进行标签匹配，找出与Pod的标签相同的边车容器自定义控制器。根据操作S230，若没有匹配成功，则不调整至少一个容器组的定义，直接执行操作S240，创建至少一个容器组。图5示意性示出了根据本发明一实施例的操作S240的流程图。如图5所示，根据操作S240，根据匹配出的边车容器自定义控制器，调整至少一个容器组的定义可以包括操作S241~操作S242。操作S241，当匹配出的边车容器自定义控制器的数量为一个时，根据边车容器自定义控制器，调整至少一个容器组的定义。操作S242，当匹配出的边车容器自定义控制器的数量大于一时，根据边车容器自定义控制器的自定义顺序，依次对至少一个容器组的定义进行调整。可选地，可以在配置边车容器自定义控制器时，给各边车容器自定义控制器自定义顺序，以在获取到管理资源后，根据该自定义顺序自动执行边车容器的配置调整。可选地，可以在获取到边车容器自定义控制器后，由用户自定义顺序，根据该自定义顺序依次根据各边车容器自定义控制器进行边车容器的调整。在本发明其中一个实施例中，当匹配出的边车容器自定义控制器的数量大于一时，可实现对Pod中的边车容器执行多次调整，可以根据不同类型的标签，对不同的边车容器分别进行调整。根据操作S250，根据调整后的至少一个容器组的定义创建至少一个容器组，以在至少一个容器组中实现业务容器与边车容器的解耦。在本实施例中，当用于容器组的解耦管理装置完成容器组的边车容器的配置处理后，将配置结果返回Kubernetes API Server，使Kubernetes API Server接着完成Pod创建。图6示意性示出了根据本发明另一实施例的用于容器组的解耦管理方法的流程图。如图6所示，该实施例的用于容器组的解耦管理方法包括操作S610~操作S650，该解耦管理方法可以顺序执行。在操作S610，配置边车容器自定义控制器，在边车容器自定义控制器中定义有操作属性和容器属性，操作属性包括删除操作，容器属性包括禁止运行的边车容器镜像列表。在操作S620，接受针对至少一个容器组的定义调整请求。在操作S630，匹配至少一个容器组与边车容器自定义控制器。在操作S640，根据匹配出的边车容器自定义控制器，调整至少一个容器组的定义，调整至少一个容器组的定义包括：将待插入的边车容器镜像列表中的边车容器镜像插入至少一个容器组的定义。在操作S650，根据调整后的至少一个容器组的定义创建至少一个容器组，以在至少一个容器组中实现业务容器与边车容器的解耦。在本实施例中，操作S610~操作S630、操作S650的具体执行方式参考上述操作S210~操作S230、操作S250，在匹配到边车容器自定义控制器后，根据边车容器自定义控制器的边车容器镜像列表，在Pod的定义中生成相应的边车容器对象，从而实现向Pod的定义中插入了相应的边车容器。根据本发明实施例提供的用于容器组的解耦管理方法，基于Kubernetes的Admission Webhook机制和CRD机制，可以通过轻量级的边车容器自定义控制器，实现对批量的边车容器的配置管理，可以在容器组已有边车容器的情况下批量修改容器组边车容器的配置，提升了禁用的效率和稳定性，进一步完善了边车容器与业务容器的解耦管理，提高了解耦操作效率。图7示意性示出了根据本发明实施例的用于容器组的解耦管理方法的示意图。边车容器解耦管理装置根据Kubernetes API Server发来的容器组Pod的定义调整请求，根据Pod的名称空间和标签为容器组匹配边车容器自定义控制器，根据匹配到的边车容器自定义控制器的操作属性和容器属性，对容器组的定义进行调整，将处理结果返回Kubernetes API Server，以完成该容器组的创建。边车容器解耦管理装置根据至少一个标签来寻找与容器组Pod匹配的边车容器自定义控制器，标签可以包括名称空间属性和容器组标签等。根据获取到的边车容器自定义控制器的操作属性对容器组Pod进行调整。若为删除操作，则根据边车容器镜像列表删除容器组定义中已定义的边车容器。若为插入操作，则向该容器组的定义中插入边车容器镜像列表中所包括的容器镜像，当获取到多个边车容器自定义控制器时，可以根据至少一个边车容器自定义控制器的自定义顺序，依次根据对应的边车容器自定义控制器的操作属性和容器属性对容器组的边车容器配置进行调整，从而实现对同一容器组中不同边车单元的多次修改。基于上述用于容器组的解耦管理方法，本发明还提供了一种用于容器组的解耦管理装置。以下将结合图8对该装置进行详细描述。图8示意性示出了根据本发明实施例的一种用于容器组的解耦管理装置的结构框图。如图8所示，在本实施例中，容器组包括业务容器和边车容器，本实施例提供的一种用于容器组的解耦管理装置800包括自定义控制器配置模块810、调整请求接受模块820、自定义控制器匹配模块830、容器组定义调整模块840和容器组创建模块850。自定义控制器配置模块810，用于配置边车容器自定义控制器，在边车容器自定义控制器中定义有操作属性和容器属性，操作属性包括删除操作，容器属性包括禁止运行的边车容器镜像列表。在一实施例中，自定义控制器配置模块810可以用于执行前文描述的操作S210，在此不再赘述。调整请求接受模块820，用于接受针对至少一个容器组的定义调整请求。在一实施例中，调整请求接受模块820可以用于执行前文描述的操作S220，在此不再赘述。自定义控制器匹配模块830，用于匹配至少一个容器组与边车容器自定义控制器。在一实施例中，自定义控制器匹配模块830可以用于执行前文描述的操作S230，在此不再赘述。容器组定义调整模块840，用于根据匹配出的边车容器自定义控制器，调整至少一个容器组的定义，调整至少一个容器组的定义包括：从至少一个容器组的定义中删除禁止运行的边车容器镜像列表中的边车容器镜像的配置。在一实施例中，容器组定义调整模块840可以用于执行前文描述的操作S240，在此不再赘述。容器组创建模块850，用于根据调整后的至少一个容器组的定义创建至少一个容器组，以在至少一个容器组中实现业务容器与边车容器的解耦。在一实施例中，容器组创建模块850可以用于执行前文描述的操作S250，在此不再赘述。根据本发明的实施例，由自定义控制器配置模块810预先完成边车容器自定义控制器的配置，当进行Pod定义时，Kubernetes API Server将请求发送至调整请求接受模块820；由自定义控制器匹配模块830根据该请求中包括的容器组的名称空间、标签等匹配相应的边车容器自定义控制器；在匹配到边车容器自定义控制器后，由容器组定义调整模块840运行该边车容器自定义控制器，根据该边车容器自定义控制器的操作属性和容器属性对Pod定义进行调整，具体包括根据边车容器镜像列表删除容器组定义中已定义的边车容器；在调节完毕后向Kubernetes API Server返回结果，完成该Pod的创建，以在所述至少一个容器组中实现业务容器与边车容器的解耦。在本发明其中一个实施例中，自定义控制器配置模块810包括资源配置单元，用于定义边车容器自定义控制器的操作属性、容器属性、名称空间属性和标签属性，名称空间属性包括与边车容器自定义控制器匹配的至少一个容器组的名称空间，标签属性包括与边车容器自定义控制器匹配的至少一个容器组的标签。标签属性至少可以包括名称空间属性、容器组标签等。用户可配置边车容器自定义控制器中名称空间列表属性与业务容器组Pod名称空间属性相同。名称空间属性支持配置多个名称空间。当名称空间属性支持配置为全部，则该边车容器自定义控制器对所有名称空间的Pod都生效。每个业务容器组Pod都有标签属性，由用户配置边车容器自定义控制器中标签属性与指定的业务容器组Pod标签属性相同。边车容器自定义控制器支持配置多套，即用户可给多套容器组Pod的边车容器配置同一边车容器自定义控制器，且对于同一容器组的Pod可以配置多套边车容器自定义控制器。进一步的，通过给容器组Pod中的边车容器设置唯一的边车容器标签，或者对同一容器组Pod中不同功能类型边车容器设置不同的标签，并给不同标签的边车容器配置不同的边车容器自定义控制器，从而可以实现对容器组Pod中不同的边车容器进行不同的自定义调节。操作属性可以包括插入和删除属性，插入属性指示将容器属性中的边车容器镜像插入容器组Pod中，删除属性指示删除容器属性中与容器属性中的镜像相同的边车容器，通过删除和插入的组合操作，可以实现容器组中全部或部分边车容器的更新。在本发明其中一个实施例中，自定义控制器匹配模块830可以包括空间名称匹配单元和标签匹配单元。空间名称匹配单元用于匹配边车容器自定义控制器的名称空间属性与至少一个容器组的名称空间，获取匹配成功的边车容器自定义控制器。标签匹配单元用于匹配获取到的边车容器自定义控制器的标签属性与至少一个容器组的标签，获取匹配成功的边车容器自定义控制器。在本实施例中，根据Pod的类型、属性等标签分类，自定义控制器匹配模块830查找与容器组匹配的边车容器自定义控制器至少分为名称空间匹配检测与标签匹配检测两步。首先从所有边车容器自定义控制器配置中，找出与当前容器组Pod名称空间相同的边车容器自定义控制器配置或名称空间属性配置为全部的边车容器自定义控制器。在匹配到名称空间属性包括容器组的名称空间的边车容器自定义控制器后，则对匹配到的边车容器自定义控制器进行标签匹配，从中找出与容器组Pod标签相同的边车容器自定义控制器。若匹配到标签属性包括容器组Pod标签的边车容器自定义控制器后，由自定义控制器匹配模块830根据匹配到的边车容器自定义控制器调整容器组中边车容器的配置。当匹配出的边车容器自定义控制器的数量为一个时，根据边车容器自定义控制器，调整至少一个容器组的定义；当匹配出的边车容器自定义控制器的数量大于一时，根据边车容器自定义控制器的自定义顺序，依次对至少一个容器组的定义进行调整。可选地，可以在配置边车容器自定义控制器时，给各边车容器自定义控制器自定义顺序，以在获取到管理资源后，根据该自定义顺序自动执行边车容器的配置调整。可选地，可以在获取到边车容器自定义控制器后，由用户自定义顺序，根据该自定义顺序依次根据各边车容器自定义控制器进行边车容器的调整。在本发明其中一个实施例中，自定义控制器匹配模块830还可以终止调整单元。终止调整单元用于在没有获取到名称空间属性包括至少一个容器组的名称空间的边车容器自定义控制器，或者，在没有获取到获取标签属性包括与至少一个容器组的标签的边车容器自定义控制器，则终止调整单元通知容器组创建模块850不调整至少一个容器组的定义，并创建至少一个容器组。在本发明的另一实施例中，边车容器自定义控制器的操作属性还包括插入操作，容器属性包括待插入的边车容器镜像列表，容器组定义调整模块840还用于将待插入的边车容器镜像列表中的边车容器镜像插入至少一个容器组的定义。根据本发明实施例提供的用于容器组的解耦管理装置，基于Kubernetes的Admission Webhook机制和CRD机制，可以通过配置轻量级的边车容器自定义控制器，实现对批量的边车容器的配置管理，可以在容器组已有边车容器的情况下批量修改容器组边车容器的配置，特别的是，可实现对批量的容器组中的边车容器进行批量的删除操作，提升了禁用的效率和稳定性，进一步完善了边车容器与业务容器的解耦管理，提高了解耦操作效率。根据本发明的实施例，自定义控制器配置模块810、调整请求接受模块820、自定义控制器匹配模块830、容器组定义调整模块840和容器组创建模块850中的任意多个模块可以合并在一个模块中实现，或者其中的任意一个模块可以被拆分成多个模块。或者，这些模块中的一个或多个模块的至少部分功能可以与其他模块的至少部分功能相结合，并在一个模块中实现。根据本发明的实施例，自定义控制器配置模块810、调整请求接受模块820、自定义控制器匹配模块830、容器组定义调整模块840和容器组创建模块850中的至少一个可以至少被部分地实现为硬件电路，例如现场可编程门阵列、可编程逻辑阵列、片上系统、基板上的系统、封装上的系统、专用集成电路，或可以通过对电路进行集成或封装的任何其他的合理方式等硬件或固件来实现，或以软件、硬件以及固件三种实现方式中任意一种或以其中任意几种的适当组合来实现。或者，自定义控制器配置模块810、调整请求接受模块820、自定义控制器匹配模块830、容器组定义调整模块840和容器组创建模块850中的至少一个可以至少被部分地实现为计算机程序模块，当该计算机程序模块被运行时，可以执行相应的功能。图9示意性示出了根据本发明实施例的适于实现用于容器组的解耦管理方法的电子设备的方框图。如图9所示，根据本发明实施例的电子设备900包括处理器901，其可以根据存储在只读存储器902中的程序或者从存储部分908加载到随机访问存储器903中的程序而执行各种适当的动作和处理。处理器901例如可以包括通用微处理器、指令集处理器和/或相关芯片组和/或专用微处理器）等等。处理器901还可以包括用于缓存用途的板载存储器。处理器901可以包括用于执行根据本发明实施例的方法流程的不同动作的单一处理单元或者是多个处理单元。在RAM 903中，存储有电子设备900操作所需的各种程序和数据。处理器901、ROM902以及RAM 903通过总线904彼此相连。处理器901通过执行ROM 902和/或RAM 903中的程序来执行根据本发明实施例的方法流程的各种操作。需要注意，所述程序也可以存储在除ROM 902和RAM 903以外的一个或多个存储器中。处理器901也可以通过执行存储在所述一个或多个存储器中的程序来执行根据本发明实施例的方法流程的各种操作。根据本发明的实施例，电子设备900还可以包括输入/输出接口905，输入/输出接口905也连接至总线904。电子设备900还可以包括连接至I/O接口905的以下部件中的一项或多项：包括键盘、鼠标等的输入部分906；包括诸如阴极射线管、液晶显示器等以及扬声器等的输出部分907；包括硬盘等的存储部分908；以及包括诸如LAN卡、调制解调器等的网络接口卡的通信部分909。通信部分909经由诸如因特网的网络执行通信处理。驱动器910也根据需要连接至I/O接口905。可拆卸介质911，诸如磁盘、光盘、磁光盘、半导体存储器等等，根据需要安装在驱动器910上，以便于从其上读出的计算机程序根据需要被安装入存储部分908。本发明还提供了一种计算机可读存储介质，该计算机可读存储介质可以是上述实施例中描述的设备/装置/系统中所包含的；也可以是单独存在，而未装配入该设备/装置/系统中。上述计算机可读存储介质承载有一个或者多个程序，当上述一个或者多个程序被执行时，实现根据本发明实施例的方法。根据本发明的实施例，计算机可读存储介质可以是非易失性的计算机可读存储介质，例如可以包括但不限于：便携式计算机磁盘、硬盘、随机访问存储器、只读存储器、可擦式可编程只读存储器、便携式紧凑磁盘只读存储器、光存储器件、磁存储器件、或者上述的任意合适的组合。在本发明中，计算机可读存储介质可以是任何包含或存储程序的有形介质，该程序可以被指令执行系统、装置或者器件使用或者与其结合使用。例如，根据本发明的实施例，计算机可读存储介质可以包括上文描述的ROM 902和/或RAM 903和/或ROM 902和RAM 903以外的一个或多个存储器。本发明的实施例还包括一种计算机程序产品，其包括计算机程序，该计算机程序包含用于执行流程图所示的方法的程序代码。当计算机程序产品在计算机系统中运行时，该程序代码用于使计算机系统实现本发明实施例所提供的用于容器组的解耦管理方法。在该计算机程序被处理器901执行时执行本发明实施例的系统/装置中限定的上述功能。根据本发明的实施例，上文描述的系统、装置、模块、单元等可以通过计算机程序模块来实现。在一种实施例中，该计算机程序可以依托于光存储器件、磁存储器件等有形存储介质。在另一种实施例中，该计算机程序也可以在网络介质上以信号的形式进行传输、分发，并通过通信部分909被下载和安装，和/或从可拆卸介质911被安装。该计算机程序包含的程序代码可以用任何适当的网络介质传输，包括但不限于：无线、有线等等，或者上述的任意合适的组合。在这样的实施例中，该计算机程序可以通过通信部分909从网络上被下载和安装，和/或从可拆卸介质911被安装。在该计算机程序被处理器901执行时，执行本发明实施例的系统中限定的上述功能。根据本发明的实施例，上文描述的系统、设备、装置、模块、单元等可以通过计算机程序模块来实现。根据本发明的实施例，可以以一种或多种程序设计语言的任意组合来编写用于执行本发明实施例提供的计算机程序的程序代码，具体地，可以利用高级过程和/或面向对象的编程语言、和/或汇编/机器语言来实施这些计算程序。程序设计语言包括但不限于诸如Java，C++，python，“C”语言或类似的程序设计语言。程序代码可以完全地在用户计算设备上执行、部分地在用户设备上执行、部分在远程计算设备上执行、或者完全在远程计算设备或服务器上执行。在涉及远程计算设备的情形中，远程计算设备可以通过任意种类的网络，包括局域网或广域网，连接到用户计算设备，或者，可以连接到外部计算设备。附图中的流程图和框图，图示了按照本发明各种实施例的系统、方法和计算机程序产品的可能实现的体系架构、功能和操作。在这点上，流程图或框图中的每个方框可以代表一个模块、程序段、或代码的一部分，上述模块、程序段、或代码的一部分包含一个或多个用于实现规定的逻辑功能的可执行指令。也应当注意，在有些作为替换的实现中，方框中所标注的功能也可以以不同于附图中所标注的顺序发生。例如，两个接连地表示的方框实际上可以基本并行地执行，它们有时也可以按相反的顺序执行，这依所涉及的功能而定。也要注意的是，框图或流程图中的每个方框、以及框图或流程图中的方框的组合，可以用执行规定的功能或操作的专用的基于硬件的系统来实现，或者可以用专用硬件与计算机指令的组合来实现。本领域技术人员可以理解，本发明的各个实施例中记载的特征可以进行多种组合或/或结合，即使这样的组合或结合没有明确记载于本发明中。特别地，在不脱离本发明精神和教导的情况下，本发明的各个实施例记载的特征可以进行多种组合和/或结合。所有这些组合和/或结合均落入本发明的范围。以上对本发明的实施例进行了描述。但是，这些实施例仅仅是为了说明的目的，而并非为了限制本发明的范围。尽管在以上分别描述了各实施例，但是这并不意味着各个实施例中的措施不能有利地结合使用。不脱离本发明的范围，本领域技术人员可以做出多种替代和修改，这些替代和修改都应落在本发明的范围之内。
