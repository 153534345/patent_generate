标题title
基于静态检测的Android应用生物认证安全性方法
摘要abst
一种基于静态检测的Android应用生物认证安全性方法，从待测的应用安装包中提取静态资源文件并收集得到应用基本信息；通过逆向工程，使用Soot分析工具与Soot‑infoflow‑android Android静态分析工具反编译应用安装包内的DEX文件，获得Jimple中间语言，并加载至全局内存空间；通过静态分析技术对应用程序生物认证接口使用情况进行生物认证接口安全性分析与第三方依赖库识别分析，以排除生物认证接口误用、生物认证接口与密码学对象配套使用误用，并通过异步回调得到应用自身生物认证接口实现安全性和/或其使用的生物认证依赖库的生物认证接口使用安全性。本发明能够自动化识别App中是否存在Android生物认证可被绕过的安全风险，并支持高效且批量分析Android App或其使用的第三方生物认证依赖库误用Android生物认证接口造成的安全漏洞。
权利要求书clms
1.一种基于静态检测的Android应用生物认证安全性方法，其特征在于，包括：步骤1)从待测的应用安装包中提取静态资源文件并收集得到应用基本信息；步骤2)通过逆向工程，使用Soot分析工具与Soot-infoflow-android Android静态分析工具反编译应用安装包内的DEX文件，获得Jimple中间语言，并加载至全局内存空间；步骤3)通过静态分析技术对应用程序生物认证接口使用情况进行生物认证接口安全性分析与第三方依赖库识别分析，以排除生物认证接口误用、生物认证接口与密码学对象配套使用误用，并通过异步回调得到应用自身生物认证接口实现安全性和/或其使用的生物认证依赖库的生物认证接口使用安全性。2.根据权利要求1所述的基于静态检测的Android应用生物认证安全性方法，其特征是，所述的步骤1具体为：将应用安装包作为ZIP加载至内存，并使用文件指针从内存中读取应用安装包中部分静态资源文件的动态链接库，例如AndroidManifest.xml与AndroidNative等，并通过字符串搜索匹配得到应用基本信息。3.根据权利要求1所述的基于静态检测的Android应用生物认证安全性方法，其特征是，在反编译时采用黑名单配置避免Android SDK附带的与应用程序无关的类被同时反编译带来的性能损失。4.根据权利要求1所述的基于静态检测的Android应用生物认证安全性方法，其特征是，所述的生物认证接口安全性分析，具体包括：①从步骤2得到的全局内存空间获得反编译后的应用中间代码，对应用中存在的所有类进行枚举，并使用Android生物认证接口类签名与枚举的类的父类类名进行字符串匹配，初步过滤出应用中存在的继承了Android系统生物认证接口的类；②通过递归搜索，检查初步筛选出的类重写的onAuthenticationSucceed回调方法中是否调用了回调参数结果对象中的getCryptoObject方法，从而判断应用程序调用生物认证接口是否安全；③在步骤①得到的初步过滤结果中进行进一步过滤：i)当在重写的回调方法中没有调用回调参数结果对象中的getCryptoObject方法，则认定该应用存在应用接口误用安全问题；ii)当调用了getCryptoObject方法，则通过递归搜索，将Android提供的密码学方法签名与调用getCryptoObject方法后调用的特定密码学方法的签名进行字符串比对，进一步确定应用是否正确使用了密码学对象的相关方法与Android生物认证接口配套保证生物认证结果正确性。5.根据权利要求4所述的基于静态检测的Android应用生物认证安全性方法，其特征是，在递归搜索中，使用类签名黑名单避免方法互相调用可能导致的潜在递归栈溢出风险。6.根据权利要求1所述的基于静态检测的Android应用生物认证安全性方法，其特征是，所述的第三方依赖库识别分析，具体包括：①从步骤2得到的全局内存空间获得反编译后的应用中间代码；②对应用存在的所有类进行枚举，并使用Android生物认证接口类签名与枚举的类的父类类名进行字符串匹配，初步过滤出应用中存在的继承了Android系统生物认证接口的类；③将过滤得到的类进行进一步分析：a)将过滤得到的类签名与收集到的已知第三方依赖库中的关键类的签名进行比对，确定该类是否为已知第三方依赖库；b)当不是已知的第三方依赖库，将过滤得到的类签名与该应用的包名进行比对，确定该类是否与应用的包在同一包中，从而确认该类是否存在于第三方依赖库或者其他厂商内部开发库中；c)识别得到结果后，使用第二条生物认证接口安全性分析进一步确定该依赖库是否存在生物认证系统接口误用情况。7.根据权利要求1所述的基于静态检测的Android应用生物认证安全性方法，其特征是，所述的异步回调，通过创建多个线程并行运行达到异步代码分析，并将分析结果处理函数作为回调函数传入，在分析线程完成时调用该函数完成分析结果处理。8.一种实现上述任一权利要求所述方法的系统，其特征在于，包括：基本信息分析模块、应用生物认证接口安全性分析模块与第三方生物认证依赖库安全性分析模块，其中：基本信息分析模块将应用安装包反编译加载至全局内存空间，应用生物认证接口安全性分析模块与第三方生物认证依赖库安全性分析模块分配到多个并行中线程读取全局内存空间中进行安全性分析，并通过异步回调分析结果处理函数传递分析结果继而整理为应用生物认证安全性分析报告。
说明书desc
技术领域本发明涉及的是一种信息安全领域的技术，具体是一种基于静态检测的Android应用生物认证安全性方法。背景技术现有Android应用开始使用系统提供的生物认证接口来给用户提供方便快捷的生物认证取代传统的密码认证。但生物认证接口的误用可能会导致高权限攻击者轻松绕过生物认证，从而实现无需密码与合法的生物信息也能完成应用的生物认证。同样，第三方开发的开源生物认证依赖库或内部开发的生物认证依赖库可能存在Android生物认证接口误用的情况，并且相较于前者影响更为广泛，安全威胁更大。发明内容本发明针对现有技术存在的上述不足，提出一种基于静态检测的Android应用生物认证安全性方法，能够自动化识别App中是否存在Android生物认证可被绕过的安全风险，并支持高效且批量分析Android App或其使用的第三方生物认证依赖库误用Android生物认证接口造成的安全漏洞。本发明是通过以下技术方案实现的：本发明涉及一种基于静态检测的Android应用生物认证安全性方法，包括：步骤1)从待测的应用安装包中提取静态资源文件并收集得到应用基本信息，具体为：将应用安装包作为ZIP加载至内存，并使用文件指针从内存中读取应用安装包中部分静态资源文件的动态链接库，例如AndroidManifest.xml与Android Native等，并通过字符串搜索匹配得到应用基本信息。所述的应用基本信息包括：应用安装包样本散列值、应用权限申请清单以及应用代码保护方案，通过应用基本信息可以预判应用是否申请生物认证权限，并针对可能存在的代码保护方案进行预判，加快后续分析速度同时避免误报产生。步骤2)通过逆向工程，使用Soot分析工具与Soot-infoflow-android Android静态分析工具反编译应用安装包内的DEX文件，获得Jimple中间语言，并加载至全局内存空间；优选地，在反编译时采用黑名单配置避免Android SDK附带的与应用程序无关的类被同时反编译带来的性能损失。步骤3)通过静态分析技术对应用程序生物认证接口使用情况进行生物认证接口安全性分析与第三方依赖库识别分析，以排除生物认证接口误用、生物认证接口与密码学对象配套使用误用，并通过异步回调得到应用自身生物认证接口实现安全性和/或其使用的生物认证依赖库的生物认证接口使用安全性。所述的生物认证接口安全性分析，具体包括：①从步骤2得到的全局内存空间获得反编译后的应用中间代码，对应用中存在的所有类进行枚举，并使用Android生物认证接口类签名与枚举的类的父类类名进行字符串匹配，初步过滤出应用中存在的继承了Android系统生物认证接口的类。②通过递归搜索，检查初步筛选出的类重写的onAuthenticationSucceed回调方法中是否调用了回调参数结果对象中的getCryptoObject方法，从而判断应用程序调用生物认证接口是否安全。优选地，在递归搜索中，使用类签名黑名单避免方法互相调用可能导致的潜在递归栈溢出风险。③在步骤①得到的初步过滤结果中进行进一步过滤：i)当在重写的回调方法中没有调用回调参数结果对象中的getCryptoObject方法，则认定该应用存在应用接口误用安全问题。ii)当调用了getCryptoObject方法，则通过递归搜索，将Android提供的密码学方法签名与调用getCryptoObject方法后调用的特定密码学方法的签名进行字符串比对，进一步确定应用是否正确使用了密码学对象的相关方法与Android生物认证接口配套保证生物认证结果正确性。所述的第三方依赖库识别分析，具体包括：①从步骤2得到的全局内存空间获得反编译后的应用中间代码；②对应用存在的所有类进行枚举，并使用Android生物认证接口类签名与枚举的类的父类类名进行字符串匹配，初步过滤出应用中存在的继承了Android系统生物认证接口的类；③将过滤得到的类进行进一步分析：a)将过滤得到的类签名与收集到的已知第三方依赖库中的关键类的签名进行比对，确定该类是否为已知第三方依赖库。b)当不是已知的第三方依赖库，将过滤得到的类签名与该应用的包名进行比对，确定该类是否与应用的包在同一包中，从而确认该类是否存在于第三方依赖库或者其他厂商内部开发库中。c)识别得到结果后，使用第二条生物认证接口安全性分析进一步确定该依赖库是否存在生物认证系统接口误用情况。所述的异步回调，通过创建多个线程并行运行达到异步代码分析，并将分析结果处理函数作为回调函数传入，在分析线程完成时调用该函数完成分析结果处理。本发明涉及一种实现上述方法的系统，包括：基本信息分析模块、应用生物认证接口安全性分析模块与第三方生物认证依赖库安全性分析模块，其中：基本信息分析模块将应用安装包反编译加载至全局内存空间，应用生物认证接口安全性分析模块与第三方生物认证依赖库安全性分析模块分配到多个并行中线程读取全局内存空间中进行安全性分析，并通过异步回调分析结果处理函数传递分析结果继而整理为应用生物认证安全性分析报告。技术效果本发明整体解决了现有技术无法快速分析应用所使用的Android系统生物认证接口或其使用的生物认证依赖库的安全性问题。与现有技术相比，本发明针对具有Android生物认证的程序进行安全性分析，分析性能高效，分析结果准确。附图说明图1为本发明流程示意图；图2为生物认证接口安全分析检测流程示意图；图3为第三方依赖库安全检测流程示意图。具体实施方式如图1所示，为本实施例涉及一种基于静态检测的Android应用生物认证安全性方法，采用多线程并行检测与异步处理的方法，将生物认证接口安全性分析与第三方生物认证依赖库识别和安全性分析并行运行并通过Java开发并实现，仅需本地编译并打包至jar格式即可在任意平台使用。在具体实现时，通过配设各个常用平台的批量检查脚本，便于批量地对大量应用程序进行分析和检查，最后生成的分析结果以数据库形式存储，便于使用各种分析工具对批量检测系统报告进行进一步分析。本实施例具体包括以下步骤：步骤1)对待测的应用安装包中存在的静态资源文件进行分析，收集得到应用基本信息，具体为：将应用安装包以ZIP格式读入内存，以文件指针的形式读取并解析应用清单文件从而获取应用权限申请，检查应用是否声明使用USE_FINGERPRINT或USE_BIOMETRIC权限从而预判应用是否使用Android生物认证接口，避免分析未使用生物认证接口的应用；枚举Android Native动态链接库，并与事先收集到的第三方代码保护方案样本进行比对，判断应用是否使用第三方已知代码保护方案，避免分析使用已知代码保护方案的应用产生的结果不准确。步骤2)通过逆向工程，使用Soot分析工具与Soot-infoflow-android Android静态分析工具反编译应用安装包内的DEX文件，获得Jimple中间语言，并加载至全局内存空间，具体为：调用Soot的Option类，设置应用安装包文件位置与Android SDK位置，设置支持多DEX反编译与保留虚类引用等反编译选项，添加反编译排除类黑名单并执行反编译操作，获得的Jimple中间语言将被加载至Soot的Scene类中的全局内存空间。步骤3)生物认证接口安全性分析与第三方生物认证依赖库识别和安全性分析，通过异步回调获取分析结果，具体为：主进程以应用生物认证接口安全性分析与第三方生物认证依赖库识别和安全性分析为目标创建多个并行线程，并将结果分析函数作为回调函数传入目标线程中。应用生物认证接口安全性分析线程获取全局反编译对象，并在匹配特定生物认证接口类签名过滤得到目标类后，递归分析特定方法中是否执行相应密码学操作，在分析结束后执行回调将结果传递给回调函数处理；第三方生物认证依赖库识别和安全性分析线程获取全局反编译对象，并通过预先收集第三方生物认证依赖库关键类签名进行匹配，在无匹配结果时采用应用生物认证接口安全性分析相同的方法对其进行分析，在分析结束后执行回调将结果传递给回调函数处理。本实施例对于单个50MB左右的大型Android App安装包，平均能在10秒左右完成全部分析；对于Android App市场数量规模的批量分析，可以在4天内扫描整个Android App市场超过100万个App。经过具体实际实验，在CPU为AMD 3700X，内存频率为3200MHz的具体环境设置下，以最大堆空间限制为10GiB，最大栈空间限制为5MiB，并行线程数限制为16个的参数运行上述方法，能够得到的实验数据是：单个应用分析可以达到平均0.2秒/MB，批量分析可以达到平均0.07秒/MB。与现有技术相比，本方法递归分析实现简单，多分析流程异步并行执行提高分析性能。上述具体实施可由本领域技术人员在不背离本发明原理和宗旨的前提下以不同的方式对其进行局部调整，本发明的保护范围以权利要求书为准且不由上述具体实施所限，在其范围内的各个实现方案均受本发明之约束。
