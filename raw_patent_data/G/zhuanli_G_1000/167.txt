标题title
一种基于数据特征的API应用程序接口链路测绘方法
摘要abst
本发明公开了一种基于数据特征的API应用程序接口链路测绘方法，包括以下步骤：S1：获取第一流量日志；S2：识别出第一流量日志中的应用程序接口、数据库上下行日志和结构化日志信息；S3：对结构化日志信息，基于数据特征，敏感元素，应用程序节点进行建模；S4：对第一流量日志抽样，获取指定时间段内第二流量日志；S5：基于第二流量日志还原应用程序接口点到点的访问，还原单次请求中，应用程序接口的上下游关系；S6：基于上下游关系，还原所有应用程序接口之间的调用关系，从而还原完整的调用链路，实现链路测绘，本申请可解决现有技术可能增加代码的复杂度和维护成本，集成成本高，存在性能损失，拓展性低和低颗粒度的问题。
权利要求书clms
1.一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，包括以下步骤：S1：通过流量探针获取第一流量日志，并保存到第一数据库中；S2：利用机器学习对第一流量日志进行分析，识别出第一流量日志中的应用程序接口、数据库上下行日志和结构化日志信息；S3：对结构化日志信息，基于数据特征元素，敏感元素，应用程序节点进行建模，持久化保存应用程序节点，敏感元素数据保存到第二数据库中；S4：通过抽样算法对第一数据库中的第一流量日志抽样，获取指定时间段内所有应用程序节点的第二流量日志或指定应用程序节点的第二流量日志；S5：基于第二流量日志还原应用程序接口点到点的访问，利用图的深度遍历算法，通过时间窗口和数据特征元素匹配，还原单次请求中，应用程序接口的上下游关系；S6：基于上下游关系，利用图的广度遍历算法，还原所有应用程序接口之间的调用关系，从而还原完整的调用链路，实现链路测绘；S7：调整S4中抽样算法对第一流量日志抽样的频率和数据量大小，对已测绘的链路进行持续迭代。2.根据权利要求1所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S1中的第一流量日志通过消息队列保存并建立分析数据集。3.根据权利要求2所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S2中机器学习通过分析数据集对第一流量日志进行分析。4.根据权利要求1所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，第一数据库为elasticsearch数据库，第二数据库为Mysql数据库。5.根据权利要求1所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S3中，建模内容包括：建立应用程序节点的关系，建立数据特征元素模型和建立应用程序与数据特征元素之间的关系。6.根据权利要求1所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S4中，抽样算法的抽样目标为结构化日志信息中的应用程序接口相关的流量日志，抽样算法用于抽取在预设时间单位中，携带数据特征元素的第一流量日志，抽样算法在设置的时间段内对第一流量日志进行多次随机抽样。7.根据权利要求1所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S5具体为：通过在预设时间窗口内，目标ip地址和源ip地址的关系，以及携带的传输数据，建立起应用程序节点上下游之间的关系，再通过图的深度遍历算法，还原单次请求中，所有应用程序节点与节点之间的关系。8.根据权利要求7所述的一种基于数据特征的API应用程序接口链路测绘方法，其特征在于，S6中，基于应用程序节点与节点之间的关系数据上，进行广度遍历算法，从而还原所有应用程序在不同请求下的调用关系，同时通过机器学习中的关联规则挖掘，决策树分析，推断，优化整体链路。
说明书desc
技术领域本发明属于业务安全技术领域，具体涉及一种基于数据特征的API应用程序接口链路测绘方法。背景技术随着互联网技术的发展，已经出现了越来越多，越来越大的互联网平台。为了应付日益增加的用户量与并发请求，微服务架构也越来越火热。这也导致了一个系统中的请求节点越来越多，应用程序接口之间的调用越来越复杂。从而催生出了对数据链路调用可视化，追踪，溯源，还原的等各种需求。从而诞生了应用程序链路测绘，追踪的技术。现有的主流链路追其技术原理是通过生成全局唯一的请求id来标识单个请求，从而通过请求id将应用程序接口串联起来。生成请求id的方案一般包括埋码和字节码注入的方式。埋码技术通常用于生成唯一的请求ID，并在每次调用过程中记录相关信息。这些信息会被打包成一个Span，并与全局的Trace ID关联起来。字节码注入技术是指在运行时动态修改字节码，以实现特定的功能。这种技术通常用于实现AOP和无侵入监控等场景。可在运行时动态修改目标方法的字节码，在方法的入口和出口处添加监控代码。这样，当目标方法被调用时，监控代码就会自动执行，收集相关信息。现有的链路追踪/测绘方案需要对监控的目标系统添加特定的代码，以便收集和分析日志，还原链路。目前的链路追踪技术缺点如下：1.侵入式追踪：需要在代码中添加额外的监控代码，这会增加代码的复杂度和维护成本；2.集成成本高：需要开发人员手动添加配置文件或增加代码，这会增加集成成本；3.性能损失：会对应用程序的性能产生一定的影响。如果追踪粒度越细，性能开销也可能越大；4.拓展性低：通常只能支持特定的语言和框架，如果需要支持其他语言或框架，则可能需要进行二次开发；5.低颗粒度：追踪时候只能标识链路节点之间的关系，但是很难通过链路节点的关系发现节点与节点之间的业务关系。发明内容为解决上述背景技术中提出的问题，本发明提供一种基于数据特征的API应用程序接口链路测绘方法，以解决现有技术会增加代码的复杂度和维护成本，集成成本高，存在性能损失，拓展性低和低颗粒度的问题。为实现上述目的，本发明提供如下技术方案：一种基于数据特征的API应用程序接口链路测绘方法，包括以下步骤：S1：通过流量探针获取第一流量日志，并保存到第一数据库中；S2：利用机器学习对第一流量日志进行分析，识别出第一流量日志中的应用程序接口、数据库上下行日志和结构化日志信息；S3：对结构化日志信息，基于数据特征元素，敏感元素，应用程序节点进行建模，持久化保存应用程序节点，敏感元素数据保存到第二数据库中；S4：通过抽样算法对第一数据库中的第一流量日志抽样，获取指定时间段内所有应用程序节点的第二流量日志或指定应用程序节点的第二流量日志；S5：基于第二流量日志还原应用程序接口点到点的访问，利用图的深度遍历算法，通过时间窗口和数据特征元素匹配，还原单次请求中，应用程序接口的上下游关系；S6：基于上下游关系，利用图的广度遍历算法，还原所有应用程序接口之间的调用关系，从而还原完整的调用链路，实现链路测绘；S7：调整S4中抽样算法对第一流量日志抽样的频率和数据量大小，对已测绘的链路进行持续迭代。优选地，S1中的第一流量日志通过消息队列保存并建立分析数据集。优选地，S2中机器学习通过分析数据集对第一流量日志进行分析。优选地，第一数据库为elasticsearch数据库，第二数据库为Mysql数据库。优选地，S3中，建模内容包括：建立应用程序节点的关系，建立数据特征元素模型和建立应用程序与数据特征元素之间的关系。优选地，S4中，抽样算法的抽样目标为结构化日志信息中的应用程序接口相关的流量日志，抽样算法用于抽取在预设时间单位中，携带数据特征元素的第一流量日志，抽样算法在设置的时间段内对第一流量日志进行多次随机抽样。优选地，S5具体为：通过在预设时间窗口内，目标ip地址和源ip地址的关系，以及携带的传输数据，建立起应用程序节点上下游之间的关系，再通过图的深度遍历算法，还原单次请求中，所有应用程序节点与节点之间的关系。优选地，S6中，基于应用程序节点与节点之间的关系数据上，进行广度遍历算法，从而还原所有应用程序在不同请求下的调用关系，同时通过机器学习中的关联规则挖掘，决策树分析，推断，优化整体链路。与现有技术相比，本发明的有益效果是：1、无侵入性：无需创造一个全局唯一的日志id用来还原链路，而是通过现有待测绘应用程序之间数据特征进行数据接口匹配，对已有的，需要测绘的目标系统无侵入性；2、集成成本低：不需要对目标系统进行二次开发，如新增代码，增改配置文件，本方法对目标系统无感知；3、低性能消耗：不需要生成全局唯一的追踪id，不需要通过字节码注入，独立于目标系统，着眼于已有数据的流量采集，对目标系统的性能消耗低。同时根据数据量进行不同程度的和频率的抽样采集，降低本方法的性能消耗；4、高拓展性：对目标系统开发语言没有要求，不需要特定的语言或者框架，不需要支持JVM等字节码技术，无需对目标监控系统做任何变化；5、高颗粒度：通过数据特征的匹配还原链路，可细颗粒化不同链路之间的调用关系，通过不同数据特征的意义可更好的还原不同场景的业务逻辑，实现业务逻辑流转，数据流转的高把握性。附图说明图1为本申请的流程示意图。具体实施方式为便于本领域技术人员理解本发明的技术内容，以下结合附图和具体的实例对本发明作进一步地详细说明。应当理解，此处所描述的具体实例仅用以解释本发明，并不用于限定本发明。实施例1：如图1所示，一种基于数据特征的API应用程序接口链路测绘方法，包括以下步骤：S1：通过流量探针获取流量访问日志，如http日志，数据库日志，通过kafka异步保存到elasticsearch数据库中：无须对现有的程序或者流量增加任何的代码注入，通过网络探针抓取访问日志，通过消息队列保存日志。建立分析的数据集。S2：利用机器学习能力对流量日志进行分析，识别出流量日志中的应用程序接口，数据库上下行日志，结构化日志信息：S3：对结构化的日志信息，基于数据特征元素，敏感元素，应用程序节点进行建模，持久化保存应用程序节点，敏感元素数据到Mysql数据库中：建立应用程序节点的关系。建立数据特征元素模型。建立应用程序与数据特征元素之间的关系。S4：通过可配置，可自定义的抽样算法对elasticsearch流量日志抽样，获取指定时间段内应用程序节点的流量日志或者指定应用程序节点的流量日志：抽样算法的抽样目标为建立结构化数据的应用程序接口相关的流量日志，抽取在预设时间单位中，携带数据特征元素的流量日志。抽样算法会在预设的时间单位内对流量日志进行多次随机抽样，通过多次随机时间节点抽样的方式，增加抽样样本在时间纬度上的覆盖率，从而提高链路还原的准确性。S5：基于流量日志还原应用程序接口点到点的访问，利用图的深度遍历算法，通过时间窗口和数据特征元素匹配，还原单次请求中，应用程序接口的上下游关系：基于大部分请求，上下游应用程序节点的响应时间在毫秒内，且同一个请求中，会携带相同或者相类似的数据特征元素的特点，可通过在预设时间窗口内，目标ip地址和源ip地址的关系，以及携带的传输数据，建立起应用程序节点上下游之间的关系。再通过图的深度遍历算法，还原单次请求中，所有应用程序节点与节点之间的关系。在进行遍历的过程中，需要注意调用链路之间存在环路以及在使用深度优先遍历算法时，链路过长引起的栈溢出等内存溢出问题。在具体的算法中处理链路时，可先对节点进行拓扑排序，判断是否存在环路，如果存在，则可将环路中的节点合并为一个节点，使得链路中不存在环路。同时，可设置一个最大的遍历深度，在深度优先遍历时遇到超过这个深度的节点时，停止继续遍历。这样可有效避免无限遍历环路的情况。最后，基于迭代替代递归的思想，维护一个“栈”来记录需要遍历的节点，依次从“栈”中出节点，遍历其出边指向的节点，并将这些节点压入“栈”中，直到“栈中”为空为止。这种方法能够有效地减少递归调用的次数，提高遍历性能。S6：基于点到点上下游关系，利用图的广度遍历算法，还原所有应用程序接口之间的调用关系，从而还原完整的调用链路，实现链路测绘：基于得到的应用程序节点与节点之间的关系数据上，进行广度遍历算法，从而还原所有应用程序在不同请求下的调用关系。同时通过机器学习中的关联规则挖掘，决策树分析用来分析，推断，优化整体链路。S7：调整日志抽样的频率，数据量大小，对已测绘的链路进行持续迭代，提高链路的准确性与危险预警能力：通过以上步骤形成的链路测绘关系，将会通过持续的对系统日志抽样从而不断迭代优化。同时在系统变更时，比如应用程序接口的上下线时，也可同步更新。在新增应用程序接口上线时，可自动识别应用程序接口，再通过最近最少更新的算法识别出最近新增的应用程序接口，近实时的绘制新应用程序接口的链路。同时，在应用程序接口下线时，获取到应用程序接口停用通知，标记出已停用的程序接口，在用户确认之后，删除与该应用程序接口相关的链路。关于链路迭代优化的评价标准，在实际实践过程中确立了以下评价标准1）完备性：应该覆盖的应用程序节点数量和已测绘应用程序节点数量，已测绘的节点数量越多，完备性越高。2）精确性：通过对已测绘链路的流量和整体系统流量对比，测绘出的链路流量越接近系统总流量则精确性越高；3）可解释性：已测绘的链路越能解释系统间的行为则可解释性越高。在本实施例中，本申请的数据特征采集提取负责采取应用程序接口通信过程中的数据采集，包括敏感信息，时间窗口等信息，根据需要和系统配置抽样提取可还原API接口调用过程的数据。通过数据特征匹配，还原应用程序接口调用过程中每个节点之间的上下游关系关系。最后通过链路还原，利用相关图论算法还原不同API不同数据元素之间的调用过程；本申请的技术原理是通过在时间窗口中匹配数据特征元素以及图的遍历算法，将应用程序接口上下游接口相互关联，还原应用程序接口的链路，可追踪特定敏感元素在应用程序接口链路之中的流转关系，实现数据安全预警等相关应用，其中数据可视化，风险可视化，可追踪特定敏感元素在应用程序接口链路之中的流转关系，可实现数据安全预警等相关应用。现举例应用场景：在大型电商网站中，用户下单时会经过多个服务节点，如商品查询、库存检查、订单创建、支付处理等。在大型电商网站使用本申请提案的技术方法，可在不进行字节码注入和埋码的情况下进行链路测绘，准确还原用户下单时经过的完整调用链路。这样可帮助运维人员快速定位故障和性能瓶颈，提高系统稳定性和可靠性。在大型的运营平台网站使用本申请提案的技术方法，除了可还原应用程序接口调用链路的链路，了解业务流向之外，还可了解敏感数据的流向，可发现已存在的数据安全风险，或者根据数据流向提前预警数据安全风险，这样使得运维人员可快速发现漏洞，提高系统的数据安全性和稳定性。此外，本申请提案的技术方案还具有其他优势。它对目标系统无侵入，不需要字节码注入或埋码，兼容多种语言和框架，集成成本低。这意味着它可快速部署到现有系统中，无需修改源代码或增加额外配置。
