标题title
RISC-V架构二进制转译文件复用方法、装置及存储介质
摘要abst
本发明公开了一种RISC‑V架构二进制转译文件复用方法、装置及存储介质，所述方法包括：在执行转译后的RISC‑V架构ELF文件时，利用转译后的RISC‑V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。
权利要求书clms
1.一种RISC-V架构二进制转译文件复用方法，其特征在于，包括：在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。2.根据权利要求1所述的方法，其特征在于，所述方法还包括：在无法查询到指令操作码块对应的内存地址时，对无法查询到的指令操作码块进行动态二进制翻译，并将翻译计算结果更新到内存链表中。3.根据权利要求2所述的方法，其特征在于，所述方法还包括：在所有指令操作码块完成翻译后，将更新后的内存链表中的计算结果存入二进制翻译计算结果缓存文件中。4.根据权利要求1所述的方法，其特征在于，所述方法还包括：对X86 ELF文件进行解析，提取元数据和指令操作码；创建及初始化内存链表；对X86 ELF文件中的指令操作码逐条进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存；按照所述数据块的内存地址和对应的指令操作码的对应关系写入内存链表中；返回对X86 ELF文件中的指令操作码逐条进行动态翻译步骤，直至所有的指令操作码动态翻译完成；利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，并利用内存链表生成二进制翻译计算结果缓存文件。5.根据权利要求4所述的方法，其特征在于，所述利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，包括：通过X86 ELF文件提取的元数据信息、指令操作码和数据信息，生成RISC-V架构ELF文件。6.根据权利要求4所述的方法，其特征在于，所述对X86 ELF文件进行解析，提取元数据和指令操作码，包括：从X86 ELF中对头部、程序头和节元数据进行提取；利用元数据指示的位置从X86 ELF中提取指令操作码和数据信息。7.根据权利要求5所述的方法，其特征在于，所述方法还包括：对X86 ELF文件信息进行提取，并将其转存为存储在RISC-V平台本地的.c文件。8.根据权利要求7所述的方法，其特征在于，所述方法还包括：将指令翻译、CPU环境模拟和库文件工程文件进行封装，形成转译后RISC-V架构可执行ELF文件。9.一种RISC-V架构二进制转译文件复用装置，其特征在于，包括：初始化模块，用于在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；解析模块，用于对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；更新模块，用于根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；查询模块，用于在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；取出模块，用于从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。10.一种包含计算机可执行指令的存储介质，其特征在于，所述计算机可执行指令在由计算机处理器执行时用于执行如权利要求1-8任一所述的RISC-V架构二进制转译文件复用方法。
说明书desc
技术领域本发明涉及RISC-V架构技术领域，尤其涉及一种RISC-V架构二进制转译文件复用方法、模块及存储介质。背景技术基于开源开放、模块化和高可扩展等特性，RISC-V架构在过去十余年里得到快速发展，成为继X86和ARM之后的第三大指令集架构。随着芯片技术的发展，软件需求也愈发迫切。然而，RISC-V软件生态处于建设初期，面临着大量X86软件的移植工作，这需要大量的人力和时间。二进制翻译技术能够有效解决软件跨平台移植问题，使X86架构程序直接在RISC-V平台上运行。二进制翻译主要可以分为静态二进制翻译和动态二进制翻译两种。由于静态二进制翻译存在无法保证程序动态执行的正确性的问题，为保证执行的正确性，广泛采用动态二进制进行翻译。对于一个X86软件移植到RISC-V平台，需要将其进行源码级别的重新编译，生成的可执行文件才能运行在RISC-V平台之上，通常会带来较大的移植成本和工作量。发明内容本发明实施例提供了一种RISC-V架构二进制转译文件复用方法、模块及存储介质，以解决现有技术中对于每一款X86架构软件在RISC-V平台需要重新编译造成的运行成本高的技术问题。第一方面，本发明实施例提供了一种RISC-V架构二进制转译文件复用方法，包括：在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。第二方面，本发明实施例还提供了一种RISC-V架构二进制转译文件复用模块，包括：初始化模块，用于在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；解析模块，用于对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；更新模块，用于根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；查询模块，用于在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；取出模块，用于从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。第三方面，本发明实施例还提供了一种包含计算机可执行指令的存储介质，所述计算机可执行指令在由计算机处理器执行时用于执行如上述实施例提供的RISC-V架构二进制转译文件复用方法。本发明实施例提供的RISC-V架构二进制转译文件复用方法、装置及存储介质，通过在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。利用内存链表，可针对每块指令操作码，查询到对应该指令操作码运算结果的内存地址，并从内存地址中直接取出RISC-V架构翻译结果。实现了X86架构软件在RISC-V架构系统中动态二进制翻译结果的复用，大大降低了移植成本。附图说明通过阅读参照以下附图所作的对非限制性实施例所作的详细描述，本发明的其它特征、目的和优点将会变得更明显：图1是本发明实施例一提供的RISC-V架构二进制转译文件复用方法的流程示意图；图2是本发明实施例一提供的RISC-V架构二进制转译文件复用方法中内存链表的结构示意图图3是本发明实施例二提供的RISC-V架构二进制转译内存链表文件复用方法的流程示意图；图4是本发明实施例三提供的RISC-V架构二进制转译文件复用装置的结构示意图。具体实施方式下面结合附图和实施例对本发明作进一步的详细说明。可以理解的是，此处所描述的具体实施例仅仅用于解释本发明，而非对本发明的限定。另外还需要说明的是，为了便于描述，附图中仅示出了与本发明相关的部分而非全部结构。实施例一图1是本发明实施例一提供的RISC-V架构二进制转译文件复用方法的流程图，本实施例可适用于针对同一个X86架构软件在转译完成后， 可以在RISC-V平台系统中复用的情况，该方法可以由RISC-V架构二进制转译文件复用装置来执行，具体包括如下步骤：步骤110, 在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表。在本实施例中，转译后的RISC-V架构ELF文件是由X86架构软件执行动态二进制翻译后生成的可执行文件。该文件可通过网络传输或者复制的方式，复制到其它还未安装转译程序的RISC-V系统中。在得到转译后的RISC-V架构ELF文件后，可以执行该文件并生成和初始化一个内存链表。通过转译可生成两个文件，其中，另一个是二进制翻译计算结果缓存文件，该文件缓存动态二进制翻译结果。可以利用转译后的RISC-V架构ELF文件进行加载。所述加载可以是利用ELF中的说明内容获取二进制翻译计算结果缓存文件中的对应内容。示例性的，所述生成并初始化内存链表，通过执行转译程序，在内存中初始化一个缓存动态二进制翻译结果的链表结构，以便于动态二进制翻译结果保存到内存链表中。步骤120，对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据。二进制翻译计算结果缓存文件中包括各个翻译数据块，及每个翻译数据块和整体的元数据，示例性的，所述元数据可以包括：基地址、翻译数据块的块数，以及每个翻译数据块在复制入内存后对应的首地址。步骤130，根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新。图2是本发明实施例一提供的RISC-V架构二进制转译文件复用方法中内存链表的示意图，参见图2，内存链表中每个节点对应一个翻译数据块，节点之间按照指令操作码块的顺序依次排列。其中分别记载的是每个翻译数据块对应的指令操作码块，以及一个指针，该指针为翻译计算结果在内存中的地址。由于二进制翻译计算结果缓存文件元数据中设有基地址、数据块和数据块首地址等元数据，基于读入二进制翻译计算结果的内存地址，配合基地址和数据块首地址，将基地址和数据块首地址映射为当前对应的内存地址，并可将每个指令操作码块、对应的翻译数据块和对应的指针写入每个节点。步骤140，在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址。在完成上述步骤后，可以对指令操作码按照指令操作码块顺序进行翻译，在进行每个指令操作码块执行翻译时，先查询内存链表，针对所述指令操作码块在内存链表中进行查询，由于已经进行过翻译，则可以直接采用已有的翻译结果。通过内存链表可查找到指令操作码块的翻译结果对应的内存地址。步骤150，从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。依次读取指令操作码块，重复上述步骤，依次取出翻译结果，实现所有指令操作码块完成翻译。本实施例通过通过在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。利用内存链表，可针对每块指令操作码，查询到对应该指令操作码运算结果的内存地址，并从内存地址中直接取出RISC-V架构翻译结果。实现了X86架构软件在RISC-V架构系统中动态二进制翻译结果的复用，大大降低了移植成本。在本实施例的一个优选实施方式中，所述方法还可增加如下步骤：在无法查询到指令操作码块对应的内存地址时，对无法查询到的指令操作码块进行动态二进制翻译，并将翻译计算结果更新到内存链表中。鉴于转译过程可能无法覆盖程序的所有执行路径，因此可能存在未执行及缓存的数据块。当程序执行到新的数据块时，系统会将其翻译并加入数据块链表，同时更新缓存文件。因此，可以通过在内存链表的查询结果，确定是否存在未翻译的指令操作码，在存在时，对其进行动态二进制翻译。进一步的，还可增加如下步骤：在所有指令操作码块完成翻译后，将更新后的内存链表中的计算结果存入二进制翻译计算结果缓存文件中。通过上述方式，可形成新的动态二进制翻译计算结果缓存文件。实施例二图3是本发明实施例二提供的RISC-V架构二进制转译文件复用方法的流程示意图，本实施例以上述实施例为基础进行优化，所述方法还可增加如下步骤：对X86 ELF文件进行解析，提取元数据和指令操作码；创建及初始化内存链表；对X86 ELF文件中的指令操作码逐条进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存；按照所述数据块的内存地址和对应的指令操作码的对应关系写入内存链表中；返回对X86ELF文件中的指令操作码逐条进行动态翻译步骤，直至所有的指令操作码动态翻译完成；利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，并利用内存链表生成二进制翻译计算结果缓存文件。参见图3，所述RISC-V架构转译文件复用方法，包括：步骤210，对X86 ELF文件进行解析，提取元数据和指令操作码，创建及初始化内存链表，对X86 ELF文件中的指令操作码逐条进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存。在本实施例中，可在安装完翻译环境后，实现将X86 ELF转译产生RISC-V平台的本地可执行文件。首先对X86 ELF文件进行解析，提取其中的元数据和指令操作码并创建和初始化内存链表。内存链表仍可采用前述提及的形式。对X86 ELF文件中的指令操作码按块逐条输入动态翻译器进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存。示例性的，所述对X86 ELF文件进行解析，提取元数据和指令操作码，可以包括：从X86ELF中提取头部、程序头和节元数据进行提取；利用元数据指示的位置从X86 ELF中提取指令操作码。步骤220，按照所述数据块的内存地址和对应的指令操作码的对应关系写入内存链表中。按照内存链表的形式，将每个指令指令操作码块作为一个节点，将数据块的内存首地址和指令操作码块写入内存链表中。步骤230，返回对X86 ELF文件中的指令操作码逐条进行动态翻译步骤，直至所有的指令操作码动态翻译完成。按照上述方式，依次对指令操作码按块逐条进行动态翻译，直至所有翻译完成。步骤240, 利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，并利用内存链表中数据块生成二进制翻译计算结果缓存文件。利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件。并将所述数据块以二进制文件格式持久化存储至RISC-V系统本地磁盘中。示例性的，所述利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，可以包括：通过所述X86 ELF文件提取的元数据信息、数据信息和指令操作码生成RISC-V架构ELF文件。示例性的，可按照X86 ELF文件格式，在转译后的RISC-V架构ELF文件中写入相应的元数据，指令操作码和操作数据等。步骤250, 在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表。步骤260,对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据。步骤270，根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新。步骤280，在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址，从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。本实施例通过增加如下步骤：对X86 ELF文件进行解析，提取元数据和指令操作码；创建及初始化内存链表；对X86 ELF文件中的指令操作码逐条进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存；按照所述数据块的内存地址和对应的指令操作码的对应关系写入内存链表中；返回对X86 ELF文件中的指令操作码逐条进行动态翻译步骤，直至所有的指令操作码动态翻译完成；利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，并利用内存链表生成二进制翻译计算结果缓存文件。可以将原X86架构可执行文件元数据进行解析和提取，以持久化存储方式保存在RISC-V系统本地，随后，在动态二进制翻译过程中，将数据块以二进制格式缓存在本地。使得转译后的X86程序能够直接在RISC-V平台上运行。在本实施例的一个优选实施方式中，所述方法还可增加如下步骤：对X86 ELF文件信息进行提取，并将其转存为存储在RISC-V平台本地的.c文件。并将指令翻译、CPU环境模拟和库文件工程文件进行封装，形成转译后RISC-V架构可执行ELF文件。便于后期其它在RISC-V平台复用翻译结果。实施例三图4是本发明实施例三提供的RISC-V架构转译文件复用模块的结构示意图，参见图4，所述RISC-V架构转译文件复用装置，包括：初始化模块310，用于在执行转译后的RISC-V架构ELF文件时，生利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；解析模块320，用于对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；更新模块330，用于根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；查询模块340，用于在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；取出模块350，用于从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。本实施例提供的RISC-V架构转译文件复用装置，通过在执行转译后的RISC-V架构ELF文件时，利用转译后的RISC-V架构ELF文件加载转译后生成的二进制翻译计算结果缓存文件，生成并初始化内存链表；对所述二进制翻译计算结果缓存文件进行解析，获取所述二进制翻译计算结果缓存文件的元数据；根据所述元数据在二进制翻译计算结果缓存文件中读取翻译缓存块的内存地址，并根据所述内存地址和指令操作码块对应关系对所述内存链表进行更新；在对指令操作码按指令操作码块执行翻译时，利用所述内存链表查询所述指令操作码块对应的内存地址；从所述对应的内存地址取出内容作为所述指令操作码块的翻译结果，直至所有指令操作码块完成翻译。利用内存链表，可针对每块指令操作码，查询到对应该指令操作码运算结果的内存地址，并从内存地址中直接取出RISC-V架构翻译结果。实现了X86架构软件在RISC-V架构系统中动态二进制翻译结果的复用，大大降低了移植成本。在上述各实施例的基础上，所述装置还包括：翻译模块，用于在无法查询到指令操作码块对应的内存地址时，对无法查询到的X86指令操作码块进行动态二进制翻译，并将翻译计算结果更新到内存链表中。在上述各实施例的基础上，所述装置还包括：存入模块，用于在所有指令操作码块完成翻译后，将更新后的内存链表中的计算结果存入翻译计算结果缓存文件中。在上述各实施例的基础上，所述装置还包括：解析提取模块，用于对X86 ELF文件进行解析，提取元数据和指令操作码；初始化模块，用于创建及初始化内存链表；动态翻译模块，用于对X86 ELF文件中的指令操作码逐条进行动态翻译，并将动态翻译的结果按照翻译顺序以数据块方式存储入内存；内存链表写入模块，用于按照所述数据块的内存地址和对应的指令操作码的对应关系写入内存链表中；返回模块，用于返回对X86 ELF文件中的指令操作码逐条进行动态翻译步骤，直至所有的指令操作码动态翻译完成；综合生成模块，用于利用X86 ELF文件信息生成转译后的RISC-V架构ELF文件，并利用内存链表生成二进制翻译计算结果缓存文件。在上述各实施例的基础上，所述综合生成模块用于：通过X86 ELF文件提取的元数据信息、指令操作码和数据信息生成RISC-V架构ELF文件。在上述各实施例的基础上，所述解析提取模块包括：多元数据提取单元，用于从X86 ELF中对头部、程序头和节元数据进行提取；操作码提取单元，用于利用元数据指示的位置从X86 ELF中提取指令操作码和数据信息。在上述各实施例的基础上，所述装置还包括：转存模块，用于对X86 ELF文件信息进行提取，并将其转存为存储在RISC-V平台本地的.c文件。在上述各实施例的基础上，所述装置还包括：封装模块，用于将指令翻译、CPU环境模拟和库文件工程文件进行封装，形成转译后RISC-V架构可执行ELF文件。本发明实施例所提供的RISC-V架构二进制转译文件复用装置可执行本发明任意实施例所提供的RISC-V架构二进制转译文件复用方法，具备执行方法相应的功能模块和有益效果。实施例四本发明实施例四还提供了一种包含计算机可执行指令的存储介质，所述计算机可执行指令在由计算机处理器执行时用于执行如上述实施例提供的任一所述的RISC-V架构转译文件复用方法。本发明实施例的计算机存储介质，可以采用一个或多个计算机可读的介质的任意组合。计算机可读介质可以是计算机可读信号介质或者计算机可读存储介质。计算机可读存储介质例如可以是——但不限于——电、磁、光、电磁、红外线、或半导体的系统、装置或器件，或者任意以上的组合。计算机可读存储介质的更具体的例子包括：具有一个或多个导线的电连接、便携式计算机磁盘、硬盘、随机存取存储器、只读存储器、可擦式可编程只读存储器、光纤、便携式紧凑磁盘只读存储器、光存储器件、磁存储器件、或者上述的任意合适的组合。在本文件中，计算机可读存储介质可以是任何包含或存储程序的有形介质，该程序可以被指令执行系统、装置或者器件使用或者与其结合使用。计算机可读的信号介质可以包括在基带中或者作为载波一部分传播的数据信号，其中承载了计算机可读的程序代码。这种传播的数据信号可以采用多种形式，包括但不限于电磁信号、光信号或上述的任意合适的组合。计算机可读的信号介质还可以是计算机可读存储介质以外的任何计算机可读介质，该计算机可读介质可以发送、传播或者传输用于由指令执行系统、装置或者器件使用或者与其结合使用的程序。计算机可读介质上包含的程序代码可以用任何适当的介质传输，包括——但不限于无线、电线、光缆、RF等等，或者上述的任意合适的组合。可以以一种或多种程序设计语言或其组合来编写用于执行本发明操作的计算机程序代码，所述程序设计语言包括面向对象的程序设计语言—诸如Java、Smalltalk、C++，还包括常规的过程式程序设计语言—诸如“C”语言或类似的程序设计语言。程序代码可以完全地在用户计算机上执行、部分地在用户计算机上执行、作为一个独立的软件包执行、部分在用户计算机上部分在远程计算机上执行、或者完全在远程计算机或设备上执行。在涉及远程计算机的情形中，远程计算机可以通过任意种类的网络——包括局域网或广域网—连接到用户计算机，或者，可以连接到外部计算机。注意，上述仅为本发明的较佳实施例及所运用技术原理。本领域技术人员会理解，本发明不限于这里所述的特定实施例，对本领域技术人员来说能够进行各种明显的变化、重新调整和替代而不会脱离本发明的保护范围。因此，虽然通过以上实施例对本发明进行了较为详细的说明，但是本发明不仅仅限于以上实施例，在不脱离本发明构思的情况下，还可以包括更多其他等效实施例，而本发明的范围由所附的权利要求范围决定。
