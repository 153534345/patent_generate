标题title
一种存储系统资源管理的方法、装置、设备及介质
摘要abst
本发明涉及计算机领域，提供了一种存储系统资源管理的方法、装置、设备及介质，方法包括：针对存储系统的每路的CPU和内存资源创建单独的调度域；在每个调度域中分别建立全局IO资源池和若干个本地IO资源池，并设置资源链表；响应于系统初始化，将全局IO资源池中的IO资源分配到对应的本地IO资源池中，并在资源链表中进行记录；响应于有本地IO资源池需要增加IO资源，本地IO资源池向全局IO资源池申请IO资源；响应于本地IO资源池向全局IO资源池申请IO资源成功，将IO资源分配到本地IO资源池中，并进行记录。通过使用本发明的方案，能够增加IO处理路径，提升了IO处理能力，减少资源的跨路访问，降低跨socket访问内存带来的开销，保证IO资源处在最优的配置。
权利要求书clms
1.一种存储系统资源管理的方法，其特征在于，包括以下步骤：针对存储系统的每路的CPU和内存资源创建单独的调度域；在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表；响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录；响应于有本地IO资源池需要增加IO资源，所述本地IO资源池向所述全局IO资源池申请IO资源；响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。2.根据权利要求1所述的方法，其特征在于，所述在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中设置资源链表的步骤包括：在每个调度域中分别创建一个全局IO资源池，所述全局IO资源池位于调度域所属的架构中的CPU所直连的物理内存上；在每个调度域中分别创建若干个本地IO资源池，并将每个所述本地IO资源池连接到对应的所述全局IO资源池；在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表用于记录IO资源信息。3.根据权利要求2所述的方法，其特征在于，所述响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录的步骤包括：响应于系统初始化，根据静态配额从所述全局IO资源池上申请相应数量的IO资源；将申请到的IO资源分配到对应的所述本地IO资源池中；在所述全局IO资源池和所述本地IO资源池中的资源链表中分别记录分配的IO资源的信息。4.根据权利要求1所述的方法，其特征在于，还包括：响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的所述资源链表中对调度情况进行记录。5.根据权利要求4所述的方法，其特征在于，所述响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的所述资源链表中对调度情况进行记录的步骤包括：响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源；所述其他调度域的全局IO资源池将对应的IO资源转移到发出申请的所述全局IO资源池中，并在两个所述全局IO资源池的资源链表中分别对调度情况进行记录；发出申请的所述全局IO资源池将获得到IO资源分配到发出申请的所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池中的资源链表中对分配情况进行记录。6.根据权利要求1所述的方法，其特征在于，还包括：响应于调度域的IO压力持续第一预设时间低于预设值，将每个所述本地IO资源池中的IO资源释放到所述全局IO资源池中；在所述本地IO资源池和所述全局IO资源池中的资源链表中对释放情况进行记录。7.根据权利要求6所述的方法，其特征在于，还包括：响应于所述本地IO资源池释放的IO资源是其他调度域的IO资源，所述全局IO资源池将对应的IO资源释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池中资源链表中对释放情况进行记录。8.根据权利要求1所述的方法，其特征在于，还包括：统计资源链表中所述全局IO资源池向其他调度域的全局IO资源池申请的IO资源中未分配的IO资源数量；将统计出的数量与设定阈值进行比较；响应于所述统计出的数量超过所述设定阈值，将所述未分配的IO资源在第二预设时间内释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池的资源链表中对释放情况进行记录。9.根据权利要求1所述的方法，其特征在于，还包括：统计资源链表中所述全局IO资源池向其他调度域的全局IO资源池申请的IO资源中已分配的IO资源数量；响应于统计出的所述数量持续第三预设时间低于预设值，将未分配的IO资源在第四预设时间内释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池的资源链表中对释放情况进行记录。10.根据权利要求3所述的方法，其特征在于，还包括：响应于有本地IO资源池的IO压力持续第五预设时间低于压力阈值，减小所述本地IO资源池的静态配额；所述本地IO资源池将减小的静态配额对应的IO资源释放到所述全局IO资源池中，并在所述本地IO资源池和所述全局IO资源池的资源链表中对释放情况进行记录。11.根据权利要求1所述的方法，其特征在于，每个所述IO资源池中的所述资源链表包括资源池空闲的IO资源链表、资源池已分配IO资源链表、从远端借来的IO资源中处于空闲状态的IO资源链表和从远端借来的IO资源中处于已分配状态的IO资源链表。12.根据权利要求1所述的方法，其特征在于，还包括：统计每个调度域当前的IO压力；响应于接收到新的IO任务，将所述IO任务下发到当前IO压力最小的调度域中进行处理。13.一种存储系统资源管理的装置，其特征在于，所述装置包括：创建模块，所述创建模块配置为针对存储系统的每路的CPU和内存资源创建单独的调度域；设置模块，所述设置模块配置为在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表；分配模块，所述分配模块配置为响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录；申请模块，所述申请模块配置为响应于有本地IO资源池需要增加IO资源，所述本地IO资源池向所述全局IO资源池申请IO资源；调度模块，所述调度模块配置为响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。14. 一种计算机设备，其特征在于，包括：至少一个处理器；以及存储器，所述存储器存储有可在所述处理器上运行的计算机指令，所述指令由所述处理器执行时实现权利要求1-12任意一项所述方法的步骤。15.一种计算机可读存储介质，所述计算机可读存储介质存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1-12任意一项所述方法的步骤。
说明书desc
技术领域本发明涉及计算机领域，并且更具体地涉及一种存储系统资源管理的方法、装置、设备及介质。背景技术在海量存储、大数据和AI时代背景下，各行业对存储业务的需求不断增长，存储系统的软硬件架构为了满足业务增长和性能的提升，目前也都在持续的升级优化中，硬件架构上从单路CPU架构升级到了双路甚至多路，软件业务也升级各种功能，但是软件基础架构针对硬件平台的升级也需要升级优化，否则很难充分发挥出硬件升级带来的优势，比如双路架构下，存储系统资源管理方法如果仍然采用单路架构的技术，就会很难充分发挥多处理器的优势。发明内容有鉴于此，本发明实施例的目的在于提出一种存储系统资源管理的方法、装置、设备及介质，通过使用本发明的技术方案，能够增加IO处理路径，提升了IO处理能力，减少资源的跨路访问，降低跨socket访问内存带来的开销，保证IO资源处在一个最优的配置。基于上述目的，本发明的实施例的一个方面提供了一种存储系统资源管理的方法，包括以下步骤：针对存储系统的每路的CPU和内存资源创建单独的调度域；在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表；响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录；响应于有本地IO资源池需要增加IO资源，所述本地IO资源池向所述全局IO资源池申请IO资源；响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。根据本发明的一个实施例，所述在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中设置资源链表的步骤包括：在每个调度域中分别创建一个全局IO资源池，所述全局IO资源池位于调度域所属的架构中的CPU所直连的物理内存上；在每个调度域中分别创建若干个本地IO资源池，并将每个所述本地IO资源池连接到对应的所述全局IO资源池；在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表用于记录IO资源信息。根据本发明的一个实施例，所述响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录的步骤包括：响应于系统初始化，根据静态配额从所述全局IO资源池上申请相应数量的IO资源；将申请到的IO资源分配到对应的所述本地IO资源池中；在所述全局IO资源池和所述本地IO资源池中的资源链表中分别记录分配的IO资源的信息。根据本发明的一个实施例，还包括：响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的所述资源链表中对调度情况进行记录。根据本发明的一个实施例，所述响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的所述资源链表中对调度情况进行记录的步骤包括：响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源；所述其他调度域的全局IO资源池将对应的IO资源转移到发出申请的所述全局IO资源池中，并在两个所述全局IO资源池的资源链表中分别对调度情况进行记录；发出申请的所述全局IO资源池将获得到IO资源分配到发出申请的所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池中的资源链表中对分配情况进行记录。根据本发明的一个实施例，还包括：响应于调度域的IO压力持续第一预设时间低于预设值，将每个所述本地IO资源池中的IO资源释放到所述全局IO资源池中；在所述本地IO资源池和所述全局IO资源池中的资源链表中对释放情况进行记录。根据本发明的一个实施例，还包括：响应于所述本地IO资源池释放的IO资源是其他调度域的IO资源，所述全局IO资源池将对应的IO资源释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池中资源链表中对释放情况进行记录。根据本发明的一个实施例，还包括：统计资源链表中所述全局IO资源池向其他调度域的全局IO资源池申请的IO资源中未分配的IO资源数量；将统计出的数量与设定阈值进行比较；响应于所述统计出的数量超过所述设定阈值，将所述未分配的IO资源在第二预设时间内释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池的资源链表中对释放情况进行记录。根据本发明的一个实施例，还包括：统计资源链表中所述全局IO资源池向其他调度域的全局IO资源池申请的IO资源中已分配的IO资源数量；响应于统计出的所述数量持续第三预设时间低于预设值，将未分配的IO资源在第四预设时间内释放到所述其他调度域的全局IO资源池中；在所述全局IO资源池和所述其他调度域的全局IO资源池的资源链表中对释放情况进行记录。根据本发明的一个实施例，还包括：响应于有本地IO资源池的IO压力持续第五预设时间低于压力阈值，减小所述本地IO资源池的静态配额；所述本地IO资源池将减小的静态配额对应的IO资源释放到所述全局IO资源池中，并在所述本地IO资源池和所述全局IO资源池的资源链表中对释放情况进行记录。根据本发明的一个实施例，每个所述IO资源池中的所述资源链表包括资源池空闲的IO资源链表、资源池已分配IO资源链表、从远端借来的IO资源中处于空闲状态的IO资源链表和从远端借来的IO资源中处于已分配状态的IO资源链表。根据本发明的一个实施例，还包括：统计每个调度域当前的IO压力；响应于接收到新的IO任务，将所述IO任务下发到当前IO压力最小的调度域中进行处理。本发明的实施例的另一个方面，还提供了一种存储系统资源管理的装置，装置包括：创建模块，创建模块配置为针对存储系统的每路的CPU和内存资源创建单独的调度域；设置模块，设置模块配置为在每个调度域中分别建立全局IO资源池和若干个本地IO资源池，并在全局IO资源池和每个本地IO资源池中分别设置资源链表；分配模块，分配模块配置为响应于系统初始化，将全局IO资源池中的IO资源分配到对应的本地IO资源池中，并在各自的资源链表中对分配情况进行记录；申请模块，申请模块配置为响应于有本地IO资源池需要增加IO资源，本地IO资源池向全局IO资源池申请IO资源；调度模块，响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。本发明的实施例的另一个方面，还提供了一种计算机设备，该计算机设备包括：至少一个处理器；以及存储器，存储器存储有可在处理器上运行的计算机指令，指令由处理器执行时实现上述任意一项方法的步骤。本发明的实施例的另一个方面，还提供了一种计算机可读存储介质，计算机可读存储介质存储有计算机程序，计算机程序被处理器执行时实现上述任意一项方法的步骤。本发明具有以下有益技术效果：本发明实施例提供的存储系统资源管理的方法，通过针对存储系统的每路的CPU和内存资源创建单独的调度域；在每个所述调度域中分别建立全局IO资源池和若干个本地IO资源池，并在所述全局IO资源池和每个所述本地IO资源池中分别设置资源链表；响应于系统初始化，将所述全局IO资源池中的IO资源分配到对应的所述本地IO资源池中，并在各自的所述资源链表中对分配情况进行记录；响应于有本地IO资源池需要增加IO资源，所述本地IO资源池向所述全局IO资源池申请IO资源；响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录的技术方案，能够增加IO处理路径，提升了IO处理能力，减少资源的跨路访问，降低跨socket访问内存带来的开销，保证IO资源处在一个最优的配置。附图说明为了更清楚地说明本发明实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的实施例。图1为根据本发明一个实施例的存储系统资源管理的方法的示意性流程图；图2为根据本发明一个实施例的双路处理器架构的示意图；图3为根据本发明一个实施例的双路处理器架构中的调度域的示意图；图4为根据本发明一个实施例的存储系统资源管理的装置的示意图；图5为根据本发明一个实施例的计算机设备的示意图；图6为根据本发明一个实施例的计算机可读存储介质的示意图。具体实施方式为使本发明的目的、技术方案和优点更加清楚明白，以下结合具体实施例，并参照附图，对本发明实施例进一步详细说明。本发明的方案可以用在双路处理器架构中，也可以用在更多路处理器架构中，本发明仅以双路处理器架构作为示例进行描述，双路处理器架构如图2所示，每一路都有一个多核的CPU，每一路都有自己本地的内存条与该路的CPU直接相连。这两路通过CPU之间的高速互联通道相连。双路组合提升了平台的运算能力，但是双路平台还有一个明显的特性，CPU访问本路直连的内存效率要明显要比访问远端内存的高，因为访问远端内存需要经过CPU之间的高速互联通道和远端CPU才能访问到，而且双路CPU间的缓存同步效率要比CPU内部的缓存同步效率要差。针对双路架构这一技术特征，本发明提出了一种基于双路架构的存储系统资源管理方法，旨在让存储系统在双路架构下，资源的管理既能发挥多CPU带来的算力提升，又能减小内存跨路访问开销的影响。存储系统中IO资源本质上都是内存对象，存储系统是高并发系统，对这些内存对象的访问和处理是非常频繁的，所以访问这些IO资源要尽量避免跨路访问，这是双路架构下资源管理需要解决的一个问题。存储系统在应用层有自己的调度模块，用于调度各层业务模块的IO任务，首先按照双路架构将调度域和资源池实现划分，每一路对应一个调度域和其本地的IO资源，调度域是基于socket划分的，IO资源根据其物理内存位置划分的，直连哪一路的socket，该资源就划分到哪一路。因此，每一路都有独立的任务调度和资源管理，即有相对独立的IO路径。这样既增加了IO处理路径，提升了IO处理能力，又减少了资源的跨路访问，整体上降低了跨socket访问内存带来的开销。同时为了适应双路压力不均衡的场景，本发明还提出了在双路压力不均衡时，IO资源的自适应调整策略和方法，尽量满足两边压力的不同需求，保证IO资源处在一个最优的配置。基于上述目的，本发明的实施例的第一个方面，提出了一种存储系统资源管理的方法的一个实施例。图1示出的是该方法的示意性流程图。如图1中所示，该方法可以包括以下步骤：S1针对存储系统的每路的CPU和内存资源创建单独的调度域。如图3所示，存储系统在应用层有自己的调度模块，用于调度各层业务模块的IO任务，首先将调度域按双路架构划分，每路一个schedule domain，每个schedule domain相对独立，每个schedule domain内都有一条完整的IO路径，也就是说一个IO来了，既可以在scheduledomain-0中处理，也可以在schedule domain-1中处理，并且处理过程中的任务基本不会跨schedule domain。每个schedule domain中的任务处理线程绑定到schedule domain各自所属的那路CPU核心上，IO下发到各业务模块处理时，根据当前任务处理所在的scheduledomain，将下一步要处理的任务放到相同的schedule domain执行,这样每路都有独立的IO处理路径。S2在每个调度域中分别建立全局IO资源池和若干个本地IO资源池，并在全局IO资源池和每个本地IO资源池中分别设置资源链表。IO路径按schedule domain实现了划分，IO资源也按schedule domain实现划分。然后在系统中建立一个全局的IO资源池，里面一开始都是空闲的内存资源，按照内存物理位置，划分成两个全局的IO资源池，分属于不同的schedule domain。如图3所示，有两个G_IO_Res池，分属在不同的schedule domain里。每个G_IO_Res池中的内存都位于其domain所属的那路CPU所直连的物理内存上，并且分配和使用都在各自domain的IO处理路径里。每层业务模块的IO资源是在自己的L_IO_Res池中。每层业务模块有两个L_IO_Res池，并且分配和使用都在各自domain的IO处理路径里。G_IO_Res和L_IO_Res结构基本相同，主要有4各成员：free_list、allocated_list、remote_free_list和remote_allocated_list。free_list是该池空闲的资源链表，allocated_list是该池已分配的资源链表，remote_free_list是从远端借来的资源，空闲资源链表，remote_allocated_list是从远端借来的资源，且已分配的资源链表。S3响应于系统初始化，将全局IO资源池中的IO资源分配到对应的本地IO资源池中，并在各自的资源链表中对分配情况进行记录。系统初始化阶段，各层业务模块按照各自的静态配额从G_IO_Res池上申请相应数量的IO资源放入业务模块的L_IO_Res池中。具体来讲，将一定数量的IO资源从G_IO_Res的free_list转移到业务模块L_IO_Res池的free_list中，并将这部分资源记录到G_IO_Res的allocated_list中。因为每层业务模块有两个L_IO_Res池，分属于不同的domain，所以当L_IO_Res池从G_IO_Res池申请IO资源时，总是选择与该L_IO_Res池同domain的G_IO_Res池。S4响应于有本地IO资源池需要增加IO资源，本地IO资源池向全局IO资源池申请IO资源。随着IO压力的增大，各层业务模块可能需要动态扩充其L_IO_Res池来满足更高的性能，业务模块扩充其IO资源的过程也是从G_IO_Res池上申请相应数量的IO资源放入其L_IO_Res池中的过程，但是如果本domain中G_IO_Res池的free_list上已经没有足够的IO资源，则会申请失败，因此可以尝试向另一个domain去借IO资源。S5响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。将申请的一定数量的IO资源从G_IO_Res的free_list转移到业务模块L_IO_Res池的free_list中，并将这部分资源记录到G_IO_Res的allocated_list中。通过使用本发明的技术方案，能够增加IO处理路径，提升了IO处理能力，减少资源的跨路访问，降低跨socket访问内存带来的开销，保证IO资源处在一个最优的配置。在本发明的一个优选实施例中，在每个调度域中分别建立全局IO资源池和若干个本地IO资源池，并在全局IO资源池和每个本地IO资源池中设置资源链表的步骤包括：在每个调度域中分别创建一个全局IO资源池，全局IO资源池位于调度域所属的架构中的CPU所直连的物理内存上；在每个调度域中分别创建若干个本地IO资源池，并将每个本地IO资源池连接到对应的全局IO资源池；在全局IO资源池和每个本地IO资源池中分别设置资源链表用于记录IO资源信息。在系统中建立一个全局的IO资源池，里面一开始都是空闲的内存资源，按照内存物理位置，划分成两个全局的IO资源池，分属于不同的schedule domain。如图3所示，有两个G_IO_Res池，分属在不同的schedule domain里。每个G_IO_Res池中的内存都位于其domain所属的那路CPU所直连的物理内存上，并且分配和使用都在各自domain的IO处理路径里。每层业务模块的IO资源是在自己的L_IO_Res池中。每层业务模块有两个L_IO_Res池，并且分配和使用都在各自domain的IO处理路径里。G_IO_Res和L_IO_Res结构基本相同，主要有4各成员：free_list、allocated_list、remote_free_list和remote_allocated_list。free_list是该池空闲的资源链表，allocated_list是该池已分配的资源链表，remote_free_list是从远端借来的资源，空闲资源链表，remote_allocated_list是从远端借来的资源，且已分配的资源链表。在本发明的一个优选实施例中，响应于系统初始化，将全局IO资源池中的IO资源分配到对应的本地IO资源池中，并在各自的资源链表中对分配情况进行记录的步骤包括：响应于系统初始化，根据静态配额从全局IO资源池上申请相应数量的IO资源；将申请到的IO资源分配到对应的本地IO资源池中；在全局IO资源池和本地IO资源池中的资源链表中分别记录分配的IO资源的信息。系统初始化阶段，各层业务模块按照各自的静态配额从G_IO_Res池上申请相应数量的IO资源放入业务模块的L_IO_Res池中。具体来讲，将一定数量的IO资源从G_IO_Res的free_list转移到业务模块L_IO_Res池的free_list中，并将这部分资源记录到G_IO_Res的allocated_list中。因为每层业务模块有两个L_IO_Res池，分属于不同的domain，所以当L_IO_Res池从G_IO_Res池申请IO资源时，总是选择与该L_IO_Res池同domain的G_IO_Res池。在本发明的一个优选实施例中，还包括：响应于所述本地IO资源池向所述全局IO资源池申请IO资源失败，所述全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的所述资源链表中对调度情况进行记录。在本发明的一个优选实施例中，响应于本地IO资源池向全局IO资源池申请IO资源失败，全局IO资源池向其他调度域的全局IO资源池申请IO资源并进行IO资源调度，并在各自的资源链表中对调度情况进行记录的步骤包括：响应于本地IO资源池向全局IO资源池申请IO资源失败，全局IO资源池向其他调度域的全局IO资源池申请IO资源；其他调度域的全局IO资源池将对应的IO资源转移到发出申请的全局IO资源池中，并在两个全局IO资源池的资源链表中分别对调度情况进行记录；发出申请的全局IO资源池将获得到IO资源分配到发出申请的本地IO资源池中，并在全局IO资源池和本地IO资源池中的资源链表中对分配情况进行记录。尝试从另一个domain中G_IO_Res池中获取一定的IO资源来满足本domain的资源请求，具体来讲，将一定数量的IO资源从另一个domain中G_IO_Res池的free_list转移到本domain的G_IO_Res池的remote_free_list中，并将这部分资源记录到另一个domain中G_IO_Res的allocated_list中，此时本domain中G_IO_Res池的free_list上已有足够的IO资源。然后将一定数量的IO资源从本domain中的G_IO_Res池的remote_free_list转移到请求模块在本domain 中的L_IO_Res池的remote_free_list中，并将这部分资源记录到本domian中的G_IO_Res的remote_allocated_list中。在本发明的一个优选实施例中，还包括：响应于调度域的IO压力持续第一预设时间低于预设值，将每个本地IO资源池中的IO资源释放到全局IO资源池中；在本地IO资源池和全局IO资源池中的资源链表中对释放情况进行记录。调度域的IO压力在持续一段时间内下降，下降到低于一个预设值时，业务模块会逐渐释放这些扩充的IO资源，即将自己在本domain中L_IO_Res池上扩充的IO资源释放，其实就归还到本domain中G_IO_Res的free_list或remote_free_list中。在本发明的一个优选实施例中，还包括：响应于本地IO资源池释放的IO资源是其他调度域的IO资源，全局IO资源池将对应的IO资源释放到其他调度域的全局IO资源池中；在全局IO资源池和其他调度域的全局IO资源池中资源链表中对释放情况进行记录。如果释放的是L_IO_Res的free_list上的IO资源，则转移到G_IO_Res的free_list上；如果释放的是L_IO_Res的remote_free_list上的IO资源，则转移到G_IO_Res的remote_free_list上，相应的，更新G_IO_Res的allocated_list或remote_allocated_list。在本发明的一个优选实施例中，还包括：统计资源链表中全局IO资源池向其他调度域的全局IO资源池申请的IO资源中未分配的IO资源数量；将统计出的数量与设定阈值进行比较；响应于统计出的数量超过设定阈值，将未分配的IO资源在第二预设时间内释放到其他调度域的全局IO资源池中；在全局IO资源池和其他调度域的全局IO资源池的资源链表中对释放情况进行记录。在本发明的一个优选实施例中，还包括：统计资源链表中全局IO资源池向其他调度域的全局IO资源池申请的IO资源中已分配的IO资源数量；响应于统计出的数量持续第三预设时间低于预设值，将未分配的IO资源在第四预设时间内释放到其他调度域的全局IO资源池中；在全局IO资源池和其他调度域的全局IO资源池的资源链表中对释放情况进行记录。如果G_IO_Res的remote_free_list上IO资源数量超过一定阈值，则会及时地还给另一个domain的G_IO_Res池。如果G_IO_Res的remote_allocated_list超过一定时间持续很低，则将G_IO_Res的remote_free_list上IO资源全部归还给另一个domain的G_IO_Res池。归还给另一个domain的G_IO_Res池的过程具体来讲是，将本domain中G_IO_Res池的remote_free_list上的IO资转移回另一个domain中G_IO_Res池的free_list上，并更新另一domain中G_IO_Res池的allocated_list，将这部分资源记录从allocated_list中移除。如果无法从另一domain借到足够的资源，则本业务模块只能异步等待其它模块释放了，当满足条件以后，再去本domain中的G_IO_Res池申请。在本发明的一个优选实施例中，还包括：响应于有本地IO资源池的IO压力持续第五预设时间低于压力阈值，减小本地IO资源池的静态配额；本地IO资源池将减小的静态配额对应的IO资源释放到全局IO资源池中并在本地IO资源池和全局IO资源池的资源链表中对释放情况进行记录。如果两边domain上IO路径压力在某些场景下差别较大，各层业务模块可以动态调整本层业务模块在两个domain中的L_IO_Res池静态配额。比如，将IO压力小的domain中的L_IO_Res池静态配额调小，它会释放部分IO资源到该Domain中的G_IO_Res池，这样当IO压力大的那边需要借更多内存时，IO压力小的这边有足够的内存可以快速借出。在本发明的一个优选实施例中，每个IO资源池中的资源链表包括资源池空闲的IO资源链表、资源池已分配IO资源的资源链表、从远端借来的IO资源中处于空闲状态的IO资源链表和从远端借来的IO资源中处于已分配状态的IO资源链表。在本发明的一个优选实施例中，还包括：统计每个调度域当前的IO压力；响应于接收到新的IO任务，将IO任务下发到当前IO压力最小的调度域中进行处理。本发明技术方案首先按照双路架构将调度域和资源池实现划分，每一路对应一个调度域和其本地的IO资源，因此，每一路都有独立的任务调度和资源管理，即有相对独立的IO路径，这样既增加了IO处理路径，提升了IO处理能力，又减少了资源的跨路访问，整体上降低了跨socket访问内存带来的开销。同时为了适应双路压力不均衡的场景，本发明还提出了在双路压力不均衡时，IO资源的自适应调整策略和方法，尽量满足两边压力的不同需求，保证IO资源处在一个最优的配置。需要说明的是，本领域普通技术人员可以理解实现上述实施例方法中的全部或部分流程，可以通过计算机程序来指令相关硬件来完成，上述的程序可存储于计算机可读取存储介质中，该程序在执行时，可包括如上述各方法的实施例的流程。其中存储介质可为磁碟、光盘、只读存储器或随机存取存储器等。上述计算机程序的实施例，可以达到与之对应的前述任意方法实施例相同或者相类似的效果。此外，根据本发明实施例公开的方法还可以被实现为由CPU 执行的计算机程序，该计算机程序可以存储在计算机可读存储介质中。在该计算机程序被CPU 执行时，执行本发明实施例公开的方法中限定的上述功能。基于上述目的，本发明的实施例的第二个方面，提出了一种存储系统资源管理的装置，如图4所示，装置200包括：创建模块，创建模块配置为针对存储系统的每路的CPU和内存资源创建单独的调度域；设置模块，设置模块配置为在每个调度域中分别建立全局IO资源池和若干个本地IO资源池，并在全局IO资源池和每个本地IO资源池中分别设置资源链表；分配模块，分配模块配置为响应于系统初始化，将全局IO资源池中的IO资源分配到对应的本地IO资源池中，并在各自的资源链表中对分配情况进行记录；申请模块，申请模块配置为响应于有本地IO资源池需要增加IO资源，本地IO资源池向全局IO资源池申请IO资源；调度模块，调度模块配置为响应于所述本地IO资源池向所述全局IO资源池申请IO资源成功，所述全局IO资源池将对应的IO资源分配到所述本地IO资源池中，并在所述全局IO资源池和所述本地IO资源池的资源链表中对分配情况进行记录。基于上述目的，本发明实施例的第三个方面，提出了一种计算机设备。图5示出的是本发明提供的计算机设备的实施例的示意图。如图5所示，本发明实施例包括如下装置：至少一个处理器21；以及存储器22，存储器22存储有可在处理器上运行的计算机指令23，指令由处理器执行时实现以上方法。基于上述目的，本发明实施例的第四个方面，提出了一种计算机可读存储介质。图6示出的是本发明提供的计算机可读存储介质的实施例的示意图。如图6所示，计算机可读存储介质31存储有被处理器执行时执行如上方法的计算机程序32。此外，根据本发明实施例公开的方法还可以被实现为由处理器执行的计算机程序，该计算机程序可以存储在计算机可读存储介质中。在该计算机程序被处理器执行时，执行本发明实施例公开的方法中限定的上述功能。此外，上述方法步骤以及系统单元也可以利用控制器以及用于存储使得控制器实现上述步骤或单元功能的计算机程序的计算机可读存储介质实现。本领域技术人员还将明白的是，结合这里的公开所描述的各种示例性逻辑块、模块、电路和算法步骤可以被实现为电子硬件、计算机软件或两者的组合。为了清楚地说明硬件和软件的这种可互换性，已经就各种示意性组件、方块、模块、电路和步骤的功能对其进行了一般性的描述。这种功能是被实现为软件还是被实现为硬件取决于具体应用以及施加给整个系统的设计约束。本领域技术人员可以针对每种具体应用以各种方式来实现的功能，但是这种实现决定不应被解释为导致脱离本发明实施例公开的范围。在一个或多个示例性设计中，功能可以在硬件、软件、固件或其任意组合中实现。如果在软件中实现，则可以将功能作为一个或多个指令或代码存储在计算机可读介质上或通过计算机可读介质来传送。计算机可读介质包括计算机存储介质和通信介质，该通信介质包括有助于将计算机程序从一个位置传送到另一个位置的任何介质。存储介质可以是能够被通用或专用计算机访问的任何可用介质。作为例子而非限制性的，该计算机可读介质可以包括RAM、ROM、EEPROM、CD-ROM或其它光盘存储设备、磁盘存储设备或其它磁性存储设备，或者是可以用于携带或存储形式为指令或数据结构的所需程序代码并且能够被通用或专用计算机或者通用或专用处理器访问的任何其它介质。此外，任何连接都可以适当地称为计算机可读介质。例如，如果使用同轴线缆、光纤线缆、双绞线、数字用户线路或诸如红外线、无线电和微波的无线技术来从网站、服务器或其它远程源发送软件，则上述同轴线缆、光纤线缆、双绞线、DSL或诸如红外线、无线电和微波的无线技术均包括在介质的定义。如这里所使用的，磁盘和光盘包括压缩盘、激光盘、光盘、数字多功能盘、软盘、蓝光盘，其中磁盘通常磁性地再现数据，而光盘利用激光光学地再现数据。上述内容的组合也应当包括在计算机可读介质的范围内。以上是本发明公开的示例性实施例，但是应当注意，在不背离权利要求限定的本发明实施例公开的范围的前提下，可以进行多种改变和修改。根据这里描述的公开实施例的方法权利要求的功能、步骤和/或动作不需以任何特定顺序执行。此外，尽管本发明实施例公开的元素可以以个体形式描述或要求，但除非明确限制为单数，也可以理解为多个。应当理解的是，在本文中使用的，除非上下文清楚地支持例外情况，单数形式“一个”旨在也包括复数形式。还应当理解的是，在本文中使用的“和/或”是指包括一个或者一个以上相关联地列出的项目的任意和所有可能组合。上述本发明实施例公开实施例序号仅仅为了描述，不代表实施例的优劣。本领域普通技术人员可以理解实现上述实施例的全部或部分步骤可以通过硬件来完成，也可以通过程序来指令相关的硬件完成，程序可以存储于一种计算机可读存储介质中，上述提到的存储介质可以是只读存储器，磁盘或光盘等。所属领域的普通技术人员应当理解：以上任何实施例的讨论仅为示例性的，并非旨在暗示本发明实施例公开的范围被限于这些例子；在本发明实施例的思路下，以上实施例或者不同实施例中的技术特征之间也可以进行组合，并存在如上的本发明实施例的不同方面的许多其它变化，为了简明它们没有在细节中提供。因此，凡在本发明实施例的精神和原则之内，所做的任何省略、修改、等同替换、改进等，均应包含在本发明实施例的保护范围之内。
