标题title
轻量实时应用开发方法、装置、设备及存储介质
摘要abst
本发明涉及应用开发技术领域，并公开了一种轻量实时应用开发方法、装置、设备及存储介质，该方法包括：对实时应用进行容器化，得到容器化应用；将容器化应用中包含的镜像应用分发至边缘节点中；通过边缘节点采集用户终端在使用镜像应用后输出的实时数据，并基于实时数据对容器化应用进行监控；基于监控结果判断是否对容器化应用进行实时开发。本发明通过对实时应用进行容器化后分发至边缘节点中，并通过边缘节点采集用户终端输出的实时数据，从而实现了对实时数据进行分布式采集和监控后再进行实时应用的开发，避免了现有技术需要对所有数据进行统一调度处理所带来的数据拥塞、数据处理延后等技术问题，进而能够提升实时应用的开发效率。
权利要求书clms
1.一种轻量实时应用开发方法，其特征在于，所述方法包括以下步骤：对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；基于监控结果判断是否对所述容器化应用进行实时开发。2.如权利要求1所述的轻量实时应用开发方法，其特征在于，所述对实时应用进行容器化，得到容器化应用的步骤，包括：获取用户需求数据，并基于所述用户需求数据确定目标函数，所述目标函数存储在预设函数库中；调用所述目标函数构建实时应用，并通过将所述实时应用封装为可移植容器的方式对所述实时应用进行容器化，得到容器化应用。3.如权利要求1所述的轻量实时应用开发方法，其特征在于，所述将所述容器化应用中包含的镜像应用分发至边缘节点中的步骤，包括：获取边缘节点的节点信息，并基于所述节点信息确定所述边缘节点对应的最佳应用分发方式，所述最佳应用分发方式包括云端分发方式、本地网络分发方式和存储介质分发方式；根据所述最佳应用分发方式将所述容器化应用中包含的镜像应用分发至所述边缘节点中。4.如权利要求1所述的轻量实时应用开发方法，其特征在于，所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤之前，还包括：通过所述边缘节点获取所述用户终端的终端基本要素，所述终端基本要素包括所述用户终端的用户标识和设备标识；以所述终端基本要素为关键字在异常终端库中进行搜索，并判断所述用户终端是否归属于异常终端库，所述异常终端库基于联盟链构建；若所述用户终端归属于异常终端库，则判断所述用户终端为异常终端，并终止所述边缘节点与所述用户终端的连接，输出异常报告。5.如权利要求4所述的轻量实时应用开发方法，其特征在于，所述以所述终端基本要素为关键字在异常终端库中进行搜索，并基于搜索结果判断所述用户终端是否属于异常终端的步骤之后，还包括：若所述用户终端不归属于异常终端库，则以所述终端基本要素为关键字在数据库中查询所述用户终端对应的行为数据；根据所述行为数据判断所述用户终端是否存在异常行为；若所述用户终端存在异常行为，则将所述用户终端确定为异常设备，并将所述异常设备对应的终端基本要素存储至所述异常终端库中；若所述用户终端不存在异常行为，则执行所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤。6.如权利要求1所述的轻量实时应用开发方法，其特征在于，所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据的步骤，包括：基于兼容所述边缘节点与所述用户终端的数据传输协议编写数据采集脚本；在所述边缘节点中执行所述数据采集脚本，得到所述用户终端输出的实时数据。7.如权利要求1所述的轻量实时应用开发方法，其特征在于，所述基于监控结果判断是否对所述容器化应用进行实时开发的步骤，包括：基于监控结果判断所述容器化应用是否存在可开发项目；若存在，则根据所述可开发项目对应的优先级和依赖关系构建DAG任务，所述DAG任务的编排方式为流水线编排；根据所述DAG任务对所述容器化应用进行实时开发。8.一种轻量实时应用开发装置，其特征在于，所述轻量实时应用开发装置包括：应用构建模块，用于对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；应用分发模块，用于将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；应用监控模块，用于通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；应用开发模块，用于基于监控结果判断是否对所述容器化应用进行实时开发。9.一种轻量实时应用开发设备，其特征在于，所述设备包括：存储器、处理器及存储在所述存储器上并可在所述处理器上运行的轻量实时应用开发程序，所述轻量实时应用开发程序配置为实现如权利要求1至7中任一项所述的轻量实时应用开发方法的步骤。10.一种存储介质，其特征在于，所述存储介质上存储有轻量实时应用开发程序，所述轻量实时应用开发程序被处理器执行时实现如权利要求1至7中任一项所述的轻量实时应用开发方法的步骤。
说明书desc
技术领域本发明涉及应用开发技术领域，尤其涉及一种轻量实时应用开发方法、装置、设备及存储介质。背景技术在信息技术的高速发展以及用户对于应用响应速度的高要求背景下，实时应用应运而生。实时应用是一种能够在即时或几乎即时响应事件和数据的应用程序或系统，这些应用程序通常要求在极短的时间内处理输入数据并产生相应的输出，以满足用户或系统的实时需求。现有的实时应用开发方法通常会将所有的用户需求上传至服务器中通过统一的调度处理后再进行开发，然而由于用户体量的增加，这些实时应用所产生的数据也与日俱增。因此，现有的实时应用开发方法在应用于数据量较大、数据收发频率较快等高并发的场景中时，可能会出现数据拥塞、数据处理延后的技术问题，从而造成开发效率低下。基于此，目前行业内亟需一种能够提升实时应用开发效率的方法。上述内容仅用于辅助理解本发明的技术方案，并不代表承认上述内容是现有技术。发明内容本发明的主要目的在于提供了一种轻量实时应用开发方法、装置、设备及存储介质，旨在解决现有的实时应用开发方法在数据高并发的场景下效率低下的技术问题。为实现上述目的，本发明提供了一种轻量实时应用开发方法，所述方法包括以下步骤：对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；基于监控结果判断是否对所述容器化应用进行实时开发。可选地，所述对实时应用进行容器化，得到容器化应用的步骤，包括：获取用户需求数据，并基于所述用户需求数据确定目标函数，所述目标函数存储在预设函数库中；调用所述目标函数构建实时应用，并通过将所述实时应用封装为可移植容器的方式对所述实时应用进行容器化，得到容器化应用。可选地，所述将所述容器化应用中包含的镜像应用分发至边缘节点中的步骤，包括：获取边缘节点的节点信息，并基于所述节点信息确定所述边缘节点对应的最佳应用分发方式，所述最佳应用分发方式包括云端分发方式、本地网络分发方式和存储介质分发方式；根据所述最佳应用分发方式将所述容器化应用中包含的镜像应用分发至所述边缘节点中。可选地，所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤之前，还包括：通过所述边缘节点获取所述用户终端的终端基本要素，所述终端基本要素包括所述用户终端的用户标识和设备标识；以所述终端基本要素为关键字在异常终端库中进行搜索，并判断所述用户终端是否归属于异常终端库，所述异常终端库基于联盟链构建；若所述用户终端归属于异常终端库，则判断所述用户终端为异常终端，并终止所述边缘节点与所述用户终端的连接，输出异常报告。可选地，所述以所述终端基本要素为关键字在异常终端库中进行搜索，并基于搜索结果判断所述用户终端是否属于异常终端的步骤之后，还包括：若所述用户终端不归属于异常终端库，则以所述终端基本要素为关键字在数据库中查询所述用户终端对应的行为数据；根据所述行为数据判断所述用户终端是否存在异常行为；若所述用户终端存在异常行为，则将所述用户终端确定为异常设备，并将所述异常设备对应的终端基本要素存储至所述异常终端库中；若所述用户终端不存在异常行为，则执行所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤。可选地，所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据的步骤，包括：基于兼容所述边缘节点与所述用户终端的数据传输协议编写数据采集脚本；在所述边缘节点中执行所述数据采集脚本，得到所述用户终端输出的实时数据。可选地，所述基于监控结果判断是否对所述容器化应用进行实时开发的步骤，包括：基于监控结果判断所述容器化应用是否存在可开发项目；若存在，则根据所述可开发项目对应的优先级和依赖关系构建DAG任务，所述DAG任务的编排方式为流水线编排；根据所述DAG任务对所述容器化应用进行实时开发。此外，为实现上述目的，本发明还提出一种轻量实时应用开发装置，所述轻量实时应用开发装置包括：应用构建模块，用于对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；应用分发模块，用于将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；应用监控模块，用于通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；应用开发模块，用于基于监控结果判断是否对所述容器化应用进行实时开发。此外，为实现上述目的，本发明还提出一种轻量实时应用开发设备，所述设备包括：存储器、处理器及存储在所述存储器上并可在所述处理器上运行的轻量实时应用开发程序，所述轻量实时应用开发程序配置为实现如上文所述的轻量实时应用开发方法的步骤。此外，为实现上述目的，本发明还提出一种存储介质，所述存储介质上存储有轻量实时应用开发程序，所述轻量实时应用开发程序被处理器执行时实现如上文所述的轻量实时应用开发方法的步骤。本发明通过对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；基于监控结果判断是否对所述容器化应用进行实时开发。相比于传统的实时应用开发方法，由于本发明上述方法通过对实时应用进行容器化后分发至边缘节点中，并通过边缘节点采集用户终端输出的实时数据，从而实现了对实时数据进行分布式采集和监控后再进行实时应用的开发，避免了现有技术需要对所有数据进行统一调度处理所带来的数据拥塞、数据处理延后等技术问题，进而能够提升实时应用的开发效率。附图说明图1为本发明实施例方案涉及的硬件运行环境的轻量实时应用开发设备的结构示意图；图2为本发明轻量实时应用开发方法第一实施例的流程示意图；图3为本发明轻量实时应用开发方法第二实施例的流程示意图；图4为本发明轻量实时应用开发方法第三实施例的流程示意图；图5为本发明轻量实时应用开发装置第一实施例的结构框图。本发明目的的实现、功能特点及优点将结合实施例，参照附图做进一步说明。具体实施方式应当理解，此处所描述的具体实施例仅用以解释本发明，并不用于限定本发明。参照图1，图1为本发明实施例方案涉及的硬件运行环境的轻量实时应用开发设备结构示意图。如图1所示，该轻量实时应用开发设备可以包括：处理器1001，例如中央处理器，通信总线1002、用户接口1003，网络接口1004，存储器1005。其中，通信总线1002用于实现这些组件之间的连接通信。用户接口1003可以包括显示屏、输入单元比如键盘，可选用户接口1003还可以包括标准的有线接口、无线接口。网络接口1004可选的可以包括标准的有线接口、无线接口接口）。存储器1005可以是高速的随机存取存储器，也可以是稳定的非易失性存储器，例如磁盘存储器。存储器1005可选的还可以是独立于前述处理器1001的存储装置。本领域技术人员可以理解，图1中示出的结构并不构成对轻量实时应用开发设备的限定，可以包括比图示更多或更少的部件，或者组合某些部件，或者不同的部件布置。如图1所示，作为一种存储介质的存储器1005中可以包括操作系统、网络通信模块、用户接口模块以及轻量实时应用开发程序。在图1所示的轻量实时应用开发设备中，网络接口1004主要用于与网络服务器进行数据通信；用户接口1003主要用于与用户进行数据交互；本发明轻量实时应用开发设备中的处理器1001、存储器1005可以设置在轻量实时应用开发设备中，所述轻量实时应用开发设备通过处理器1001调用存储器1005中存储的轻量实时应用开发程序，并执行本发明实施例提供的轻量实时应用开发方法。本发明实施例提供了一种轻量实时应用开发方法，参照图2，图2为本发明轻量实时应用开发方法第一实施例的流程示意图。本实施例中，所述轻量实时应用开发方法包括以下步骤：步骤S10：对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建。需要说明的是，本实施例方法的执行主体可以是具有应用构建、数据处理以及程序运行功能的终端设备，例如智能手机、智能手表等，也可以是具有相同或相似功能的电子设备，例如上述轻量实时应用开发设备。以下以轻量实时应用开发设备为例对本实施例及下述各实施例进行说明。可理解的是，上述实时应用可以是一种能够在即时或几乎即时响应事件和数据的应用程序或系统，这些应用程序通常要求在极短的时间内处理输入数据并产生相应的输出，以满足用户或系统的实时需求。具体地，上述实时应用可以包括硬实时应用和软实时应用，本实施例对此不加以限制。应理解的是，上述容器化应用是一种将应用程序及其所有依赖项打包到一个独立容器中的应用。特别地，上述容器化应用可以是独立的单元，单元中包含了应用程序及其运行所需的所有组件，这使得容器化应用可以在不同的环境中运行，而不受外部环境的影响。此外，容器化应用中包含的独立单元可以共享主机操作系统的内核，而不需要运行完整的虚拟操作系统，这使得容器化应用启动速度快，并占用较少的系统资源。步骤S20：将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接。需要说明的是，上述镜像应用可以是由容器化应用中的独立单元分化而来，每个镜像应用都包含容器化应用在运行时所对应的应用程序及其所需的所有组件。应理解的是，上述边缘节点可以是指分布在网络边缘或较远地理位置的计算设备或服务器节点，上述用户终端可以包括物联网设备、传感器、移动设备或边缘计算服务器等，本实施例对此不加以限制。步骤S30：通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控。需要说明的是，上述实时数据可以包括传感器数据、位置数据、网络数据、安全数据等，本实施例对此不加以限制。在具体实现中，在检测到用户终端使用了镜像应用后，可以通过边缘节点每隔预设时间从用户终端中采集实时数据，并将采集到的实时数据与预设阈值进行对比，从而实现对容器化应用的监控。步骤S40：基于监控结果判断是否对所述容器化应用进行实时开发。在具体实现中，若上述监控结果反馈预设占比的用户终端输出的实时数据均超过了预设阈值，那么可以判断此时需要对容器化应用进行实时开发。示例性地，假设预先设定的响应反馈时间对应的预设阈值为20ms，预设占比为50%，而在某一时刻采集到60%用户终端的响应反馈时间均超过了20ms，那么此时可以调取容器化应用中与响应反馈时间相关的参数，并基于这些参数对容器化应用进行实时开发，直至开发后的容器化应用对应的响应反馈时间小于或等于20ms，再通过边缘节点将开发后的容器化应用重新发送至用户终端。本实施例通过对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；基于监控结果判断是否对所述容器化应用进行实时开发。相比于传统的实时应用开发方法，由于本实施例上述方法通过对实时应用进行容器化后分发至边缘节点中，并通过边缘节点采集用户终端输出的实时数据，从而实现了对实时数据进行分布式采集和监控后再进行实时应用的开发，避免了现有技术需要对所有数据进行统一调度处理所带来的数据拥塞、数据处理延后等技术问题，进而能够提升实时应用的开发效率。参考图3，图3为本发明轻量实时应用开发方法第二实施例的流程示意图。基于上述第一实施例，在本实施例中，所述步骤S10，可以包括：步骤S101：获取用户需求数据，并基于所述用户需求数据确定目标函数，所述目标函数存储在预设函数库中。步骤S102：调用所述目标函数构建实时应用，并通过将所述实时应用封装为可移植容器的方式对所述实时应用进行容器化，得到容器化应用。需要说明的是，上述可移植容器指的是能够在不同的环境中平稳运行且无需对应用程序进行修改或重新编译的容器化应用。进一步地，在本实施例中，为了在面对不同的边缘节点时采取不同的应用分发方式，从而提升分发效率，所述步骤S20可以包括：步骤S201：获取边缘节点的节点信息，并基于所述节点信息确定所述边缘节点对应的最佳应用分发方式，所述最佳应用分发方式包括云端分发方式、本地网络分发方式和存储介质分发方式。需要说明的是，上述节点信息可以包括标识符、操作系统信息、网络配置、节点状态、日志信息等，本实施例对此不加以限制。应理解的是，上述本地网络分发方式可以通过FTP、SCP或HTTP服务器等进行分发，上述存储介质分发方式可以通过USB驱动器、DVD等进行分发，本实施例对此不加以限制。步骤S202：根据所述最佳应用分发方式将所述容器化应用中包含的镜像应用分发至所述边缘节点中。基于上述第一实施例，在本实施例中，为了避免边缘节点与用户终端之间出现数据传输错误，所述步骤S30，可以包括：步骤S301：基于兼容所述边缘节点与所述用户终端的数据传输协议编写数据采集脚本。应理解的是，上述数据传输协议可以包括但不限于TCP、UDP、RTP、MQTT、SMTP、FTP等。步骤S302：在所述边缘节点中执行所述数据采集脚本，得到所述用户终端输出的实时数据。基于上述第一实施例，在本实施例中，为了进一步提升容器化应用的开发效率，所述步骤S40，可以包括：步骤S401：基于监控结果判断所述容器化应用是否存在可开发项目。步骤S402：若存在，则根据所述可开发项目对应的优先级和依赖关系构建DAG任务，所述DAG任务的编排方式为流水线编排。需要说明的是，上述DAG任务可以是一种由若干可开发项目组成的任务，这些可开发项目之间存在优先级顺序和依赖关系。步骤S403：根据所述DAG任务对所述容器化应用进行实时开发。在具体实现中，可以执行上述DAG任务，从而实现对容器化应用的实时开发。本实施例通过获取用户需求数据，并基于所述用户需求数据确定目标函数，所述目标函数存储在预设函数库中；调用所述目标函数构建实时应用，并通过将所述实时应用封装为可移植容器的方式对所述实时应用进行容器化，得到容器化应用；获取边缘节点的节点信息，并基于所述节点信息确定所述边缘节点对应的最佳应用分发方式，所述最佳应用分发方式包括云端分发方式、本地网络分发方式和存储介质分发方式；根据所述最佳应用分发方式将所述容器化应用中包含的镜像应用分发至所述边缘节点中；基于兼容所述边缘节点与所述用户终端的数据传输协议编写数据采集脚本；在所述边缘节点中执行所述数据采集脚本，得到所述用户终端输出的实时数据；基于监控结果判断所述容器化应用是否存在可开发项目；若存在，则根据所述可开发项目对应的优先级和依赖关系构建DAG任务，所述DAG任务的编排方式为流水线编排；根据所述DAG任务对所述容器化应用进行实时开发。相较于传统的实时应用开发方法，本实施例上述方法在面对不同的边缘节点时采取不同的应用分发方式，从而提升了分发效率；同时本实施例还通过可开发项目对应的优先级和依赖关系来构建DAG任务，从而进一步提升了容器化应用的开发效率。参考图4，图4为本发明轻量实时应用开发方法第三实施例的流程示意图。基于上述各实施例，在本实施例中，为了在保证数据安全的前提下实现对用户终端的异常检测，在所述步骤S30之前，还可以包括：步骤S21：通过所述边缘节点获取所述用户终端的终端基本要素，所述终端基本要素包括所述用户终端的用户标识和设备标识。步骤S22：以所述终端基本要素为关键字在异常终端库中进行搜索，并判断所述用户终端是否归属于异常终端库，所述异常终端库基于联盟链构建。需要说明的是，上述联盟链是一种区块链的类型，在由联盟链构建的异常终端库中，对于非管理人员来说，上述终端基本要素通常只允许被查看，不允许被修改或删除。应理解的是，上述异常终端库中可以一种数据库，该数据库中包含了若干异常终端的终端基本要素。步骤S23：若所述用户终端归属于异常终端库，则判断所述用户终端为异常终端，并终止所述边缘节点与所述用户终端的连接，输出异常报告。可理解的是，上述异常终端可以指存在异常行为的用户终端。应理解的是，由于本实施例是通过若干边缘节点来建立用户终端与开发设备之间的连接。在过程中，如果存在异常终端，可能会对其他正常的用户终端带来数据安全的问题。因此，可以通过终止边缘节点与异常终端的连接并输出异常报告提醒管理员的方式来避免上述数据安全问题。步骤S24：若所述用户终端不归属于异常终端库，则以所述终端基本要素为关键字在数据库中查询所述用户终端对应的行为数据。步骤S25：根据所述行为数据判断所述用户终端是否存在异常行为。在具体实现中，即便某一用户终端不归属于异常终端库，但这也仅代表了该用户终端在历史的数据传输过程中不存在异常行为，并不能说明本次数据传输过程中不存在异常行为。因此，在本实施例中，可以以该用户终端的终端基本要素为关键字在数据库中查询该用户终端对应的行为数据，从而基于该行为数据来判断该用户终端是否存在异常行为。步骤S26：若所述用户终端存在异常行为，则将所述用户终端确定为异常设备，并将所述异常设备对应的终端基本要素存储至所述异常终端库中。步骤S27：若所述用户终端不存在异常行为，则执行所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤。本实施例通过所述边缘节点获取所述用户终端的终端基本要素，所述终端基本要素包括所述用户终端的用户标识和设备标识；以所述终端基本要素为关键字在异常终端库中进行搜索，并判断所述用户终端是否归属于异常终端库，所述异常终端库基于联盟链构建；若所述用户终端归属于异常终端库，则判断所述用户终端为异常终端，并终止所述边缘节点与所述用户终端的连接，输出异常报告；若所述用户终端不归属于异常终端库，则以所述终端基本要素为关键字在数据库中查询所述用户终端对应的行为数据；根据所述行为数据判断所述用户终端是否存在异常行为；若所述用户终端存在异常行为，则将所述用户终端确定为异常设备，并将所述异常设备对应的终端基本要素存储至所述异常终端库中；若所述用户终端不存在异常行为，则执行所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤。相较于传统的实时应用开发方法，本实施例上述方法通过基于联盟链构建的异常终端库来判断用户终端是否为异常终端，并断开异常终端与边缘节点的连接，从而在确保正常用户终端的隐私数据不被泄露的同时，避免了异常终端对本实施例实时应用开发方法的负面影响。此外，本发明实施例还提出一种存储介质，所述存储介质上存储有轻量实时应用开发程序，所述轻量实时应用开发程序被处理器执行时实现如上文所述的轻量实时应用开发方法的步骤。参照图5，图5为本发明轻量实时应用开发装置第一实施例的结构框图。如图5所示，本发明实施例提出的轻量实时应用开发装置包括：应用构建模块501，用于对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；应用分发模块502，用于将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；应用监控模块503，用于通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；应用开发模块504，用于基于监控结果判断是否对所述容器化应用进行实时开发。本实施例通过对实时应用进行容器化，得到容器化应用，所述实时应用根据获取到的用户需求数据构建；将所述容器化应用中包含的镜像应用分发至边缘节点中，所述边缘节点与用户终端连接；通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控；基于监控结果判断是否对所述容器化应用进行实时开发。相比于传统的实时应用开发方法，由于本实施例上述方法通过对实时应用进行容器化后分发至边缘节点中，并通过边缘节点采集用户终端输出的实时数据，从而实现了对实时数据进行分布式采集和监控后再进行实时应用的开发，避免了现有技术需要对所有数据进行统一调度处理所带来的数据拥塞、数据处理延后等技术问题，进而能够提升实时应用的开发效率。基于本发明上述轻量实时应用开发装置的第一实施例，提出本发明轻量实时应用开发装置的第二实施例。在本实施例中，所述应用构建模块501，还用于获取用户需求数据，并基于所述用户需求数据确定目标函数，所述目标函数存储在预设函数库中；调用所述目标函数构建实时应用，并通过将所述实时应用封装为可移植容器的方式对所述实时应用进行容器化，得到容器化应用。进一步地，所述应用分发模块502，还用于获取边缘节点的节点信息，并基于所述节点信息确定所述边缘节点对应的最佳应用分发方式，所述最佳应用分发方式包括云端分发方式、本地网络分发方式和存储介质分发方式；根据所述最佳应用分发方式将所述容器化应用中包含的镜像应用分发至所述边缘节点中。进一步地，所述应用分发模块502，还用于通过所述边缘节点获取所述用户终端的终端基本要素，所述终端基本要素包括所述用户终端的用户标识和设备标识；以所述终端基本要素为关键字在异常终端库中进行搜索，并判断所述用户终端是否归属于异常终端库，所述异常终端库基于联盟链构建；若所述用户终端归属于异常终端库，则判断所述用户终端为异常终端，并终止所述边缘节点与所述用户终端的连接，输出异常报告。进一步地，所述应用分发模块502，还用于若所述用户终端不归属于异常终端库，则以所述终端基本要素为关键字在数据库中查询所述用户终端对应的行为数据；根据所述行为数据判断所述用户终端是否存在异常行为；若所述用户终端存在异常行为，则将所述用户终端确定为异常设备，并将所述异常设备对应的终端基本要素存储至所述异常终端库中；若所述用户终端不存在异常行为，则执行所述通过所述边缘节点采集所述用户终端在使用所述镜像应用后输出的实时数据，并基于所述实时数据对所述容器化应用进行监控的步骤。进一步地，所述应用监控模块503，还用于基于兼容所述边缘节点与所述用户终端的数据传输协议编写数据采集脚本；在所述边缘节点中执行所述数据采集脚本，得到所述用户终端输出的实时数据。进一步地，所述应用开发模块504，还用于基于监控结果判断所述容器化应用是否存在可开发项目；若存在，则根据所述可开发项目对应的优先级和依赖关系构建DAG任务，所述DAG任务的编排方式为流水线编排；根据所述DAG任务对所述容器化应用进行实时开发。本发明轻量实时应用开发装置的其他实施例或具体实现方式可参照上述各方法实施例，此处不再赘述。需要说明的是，在本文中，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者系统不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者系统所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括该要素的过程、方法、物品或者系统中还存在另外的相同要素。上述本发明实施例序号仅仅为了描述，不代表实施例的优劣。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到上述 实施例方法可借助软件加必需的通用硬件平台的方式来实现，当然也可以通 过硬件，但很多情况下前者是更佳的实施方式。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体 现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台终端设备执行本发明各个实施例所述的方法。以上仅为本发明的优选实施例，并非因此限制本发明的专利范围，凡是利用本发明说明书及附图内容所作的等效结构或等效流程变换，或直接或间接运用在其他相关的技术领域，均同理包括在本发明的专利保护范围内。
