标题title
一种数据读写方法、系统、设备及存储介质
摘要abst
本申请提供一种数据读写方法、系统、设备及存储介质，涉及内存扩展技术领域，方法包括：通过请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令；通过地址解码模块对本地命令进行命令解析，确定进行数据读写的位置信息；请求分解模块基于位置信息，生成多个数据读写子请求；通过请求分配模块将多个数据读写子请求发送至各个目标扩展内存控制器；根据多个数据读写子请求，控制各个目标扩展内存控制器并行执行数据读写操作。旨在提高扩展内存的访问效率。
权利要求书clms
1.一种数据读写方法，其特征在于，应用于逻辑管理控制器，所述逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，所述逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块，所述方法包括：通过所述请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令；通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息；所述请求分解模块基于所述位置信息，生成多个数据读写子请求；通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器；根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作。2.根据权利要求1所述的数据读写方法，其特征在于，在所述数据读写请求为写数据子请求的情况下，所述通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息，包括：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据写入的逻辑起始地址、数据长度和数据内容。3.根据权利要求2所述的数据读写方法，其特征在于，所述请求分解模块基于所述位置信息，生成多个数据读写子请求，包括：根据所述位置信息中的数据长度，确定进行数据写入的写入次数；根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量；根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存；根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，其中，定位标识用于确定写数据子请求发送至的目标扩展内存控制器。4.根据权利要求3所述的数据读写方法，其特征在于，根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存，包括：根据所述逻辑起始地址，将所述逻辑起始地址对应的扩展内存确定为目标扩展内存；根据各个扩展内存的空闲程度和所述目标数量，将空闲程度排序靠前的多个扩展内存确定为目标扩展内存，以获得目标数量的目标扩展内存。5.根据权利要求3所述的数据读写方法，其特征在于，根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，包括：根据所述写入次数和目标数量，确定所述各个目标扩展内存各自对应的写数据子请求数量；根据目标扩展内存对应的写数据子请求数量和单次数据写入量，在所述目标扩展内存中确定与所述目标扩展内存对应的写数据子请求数量相同的多个逻辑起始地址；根据确定的所有的逻辑起始地址和单次数据写入量，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求。6.根据权利要求3所述的数据读写方法，其特征在于，通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器，包括：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器。7.根据权利要求6所述的数据读写方法，其特征在于，根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器，包括：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；在完成所有写数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的写数据子请求。8.根据权利要求3所述的数据读写方法，其特征在于，所述方法还包括：根据所述写入次数，将所述数据内容划分为数量与所述写入次数相同的多个数据片段；根据确定的所述各个目标扩展内存，将所述多个数据片段依次循环存储至所述各个目标扩展内存各自的缓存区。9.根据权利要求8所述的数据读写方法，其特征在于，根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作，包括：控制所述各个目标扩展内存控制器并行获取各自命令队列中的写数据子请求；根据获取的各自命令队列中的写数据子请求，控制所述各个目标扩展内存控制器对各自对应的缓存区中的对应数据片段并行执行写操作。10.根据权利要求3所述的数据读写方法，其特征在于，根据所述位置信息中的数据长度，确定进行数据写入的写入次数，包括：根据所述位置信息中的数据长度，确定单次数据写入量；根据所述位置信息中的数据长度和所述单次数据写入量，确定进行数据写入的写入次数。11.根据权利要求3所述的数据读写方法，其特征在于，根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量，包括：确定所述写入次数与扩展内存的总数之间的关系；在所述写入次数大于或等于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为所有扩展内存的总数；在所述写入次数小于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为与所述写入次数相等的数量。12.根据权利要求1所述的数据读写方法，其特征在于，在所述数据读写请求为读数据子请求的情况下，所述通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息，包括：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读取的逻辑起始地址和数据长度。13.根据权利要求12所述的数据读写方法，其特征在于，所述请求分解模块基于所述位置信息，生成多个数据读写子请求，包括：根据所述逻辑起始地址和所述数据长度，确定所需读取的数据所包括的所有数据片段各自所在的第一逻辑起始地址和第一数据长度；根据所有数据片段各自所在的第一逻辑起始地址和数据长度，生成具有定位标识的多个读数据子请求，其中，定位标识用于确定读数据子请求发送至的目标扩展内存控制器。14.根据权利要求13所述的数据读写方法，其特征在于，所述方法还包括：根据所有数据片段各自所在的第一逻辑起始地址，确定用于数据读取的各个目标扩展内存；所述通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器，包括：根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器。15.根据权利要求14所述的数据读写方法，其特征在于，根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器，包括：根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；在完成所有读数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的读数据子请求。16.根据权利要求13所述的数据读写方法，其特征在于，根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作，包括：控制各个目标扩展内存控制器并行获取各自命令队列中的读数据子请求；根据获取的各自命令队列中的读数据子请求，控制所述各个目标扩展内存控制器对各自对应的目标扩展内存并行执行读操作，并将读取的数据存储至各自对应的缓存区；在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据；将所述目标数据发送至CPU。17.一种数据读写系统，其特征在于，所述系统包括：CPU、逻辑管理控制器、扩展内存控制器和扩展内存，所述逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块；所述CPU，用于发起针对目标数据的数据读写请求；所述请求解析模块，用于对接收的针对目标数据的数据读写请求进行解析，获得本地命令；所述地址解码模块，用于对所述本地命令进行命令解析，确定进行数据读写的位置信息；所述请求分解模块，用于根据所述位置信息，生成多个数据读写子请求；所述请求分配模块，用于将所述多个数据读写子请求发送至各个目标扩展内存控制器；扩展内存控制器中的各个目标扩展内存控制器，用于根据各自接收的数据读写子请求，控制各自对应的目标扩展内存并行执行对应的数据读写操作。18.根据权利要求17所述的数据读写系统，其特征在于，所述逻辑管理控制器，包括：数据合成模块，用于在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据，以及用于将所述目标数据发送至CPU。19.一种电子设备，其特征在于，包括：处理器、存储器及存储在所述存储器上并在所述处理器上运行的计算机程序，所述计算机程序被所述处理器执行时实现如权利要求1至16中任一项所述的一种数据读写方法中的步骤。20.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质上存储有计算机程序，所述计算机程序被处理器执行时实现如权利要求1至16中任一项所述的一种数据读写方法中的步骤。
说明书desc
技术领域本申请涉及内存扩展技术领域，尤其涉及一种数据读写方法、系统、设备及存储介质。背景技术目前，CPU的访存瓶颈来源于CPU时钟速度与内存时钟速度无法匹配，而内存的访问带宽是造成CPU访存瓶颈的主要因素，因此如何有效提高内存的访问带宽、降低内存访问延时，从而达到提升数据读写的效率的效果是目前研究的重点。发明内容有鉴于此，本申请提供一种数据读写方法、系统、设备及存储介质。旨在提高扩展内存的访问效率。在本申请实施例的第一方面，提供了一种数据读写方法，应用于逻辑管理控制器，所述逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，所述逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块，所述方法包括：通过所述请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令；通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息；所述请求分解模块基于所述位置信息，生成多个数据读写子请求；通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器；根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作。可选的，在所述数据读写请求为写数据子请求的情况下，所述通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息，包括：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据写入的逻辑起始地址、数据长度和数据内容。可选的，所述请求分解模块基于所述位置信息，生成多个数据读写子请求，包括：根据所述位置信息中的数据长度，确定进行数据写入的写入次数；根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量；根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存；根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，其中，定位标识用于确定写数据子请求发送至的目标扩展内存控制器。可选的，根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存，包括：根据所述逻辑起始地址，将所述逻辑起始地址对应的扩展内存确定为目标扩展内存；根据各个扩展内存的空闲程度和所述目标数量，将空闲程度排序靠前的多个扩展内存确定为目标扩展内存，以获得目标数量的目标扩展内存。可选的，根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，包括：根据所述写入次数和目标数量，确定所述各个目标扩展内存各自对应的写数据子请求数量；根据目标扩展内存对应的写数据子请求数量和单次数据写入量，在所述目标扩展内存中确定与所述目标扩展内存对应的写数据子请求数量相同的多个逻辑起始地址；根据确定的所有的逻辑起始地址和单次数据写入量，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求。可选的，通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器，包括：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器。可选的，根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器，包括：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；在完成所有写数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的写数据子请求。可选的，所述方法还包括：根据所述写入次数，将所述数据内容划分为数量与所述写入次数相同的多个数据片段；根据确定的所述各个目标扩展内存，将所述多个数据片段依次循环存储至所述各个目标扩展内存各自的缓存区。可选的，根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作，包括：控制所述各个目标扩展内存控制器并行获取各自命令队列中的写数据子请求；根据获取的各自命令队列中的写数据子请求，控制所述各个目标扩展内存控制器对各自对应的缓存区中的对应数据片段并行执行写操作。可选的，根据所述位置信息中的数据长度，确定进行数据写入的写入次数，包括：根据所述位置信息中的数据长度，确定单次数据写入量；根据所述位置信息中的数据长度和所述单次数据写入量，确定进行数据写入的写入次数。可选的，根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量，包括：确定所述写入次数与扩展内存的总数之间的关系；在所述写入次数大于或等于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为所有扩展内存的总数；在所述写入次数小于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为与所述写入次数相等的数量。可选的，在所述数据读写请求为读数据子请求的情况下，所述通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息，包括：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读取的逻辑起始地址和数据长度。可选的，所述请求分解模块基于所述位置信息，生成多个数据读写子请求，包括：根据所述逻辑起始地址和所述数据长度，确定所需读取的数据所包括的所有数据片段各自所在的第一逻辑起始地址和第一数据长度；根据所有数据片段各自所在的第一逻辑起始地址和数据长度，生成具有定位标识的多个读数据子请求，其中，定位标识用于确定读数据子请求发送至的目标扩展内存控制器。可选的，所述方法还包括：根据所有数据片段各自所在的第一逻辑起始地址，确定用于数据读取的各个目标扩展内存；所述通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器，包括：根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器。可选的，根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器，包括：根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；在完成所有读数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的读数据子请求。可选的，根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作，包括：控制各个目标扩展内存控制器并行获取各自命令队列中的读数据子请求；根据获取的各自命令队列中的读数据子请求，控制所述各个目标扩展内存控制器对各自对应的目标扩展内存并行执行读操作，并将读取的数据存储至各自对应的缓存区；在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据；将所述目标数据发送至CPU。在本申请的实施例第二方面，本申请提供了一种数据读写系统，所述系统包括：CPU、逻辑管理控制器、扩展内存控制器和扩展内存，所述逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块；所述CPU，用于发起针对目标数据的数据读写请求；所述请求解析模块，用于对接收的针对目标数据的数据读写请求进行解析，获得本地命令；所述地址解码模块，用于对所述本地命令进行命令解析，确定进行数据读写的位置信息；所述请求分解模块，用于根据所述位置信息，生成多个数据读写子请求；所述请求分配模块，用于将所述多个数据读写子请求发送至各个目标扩展内存控制器；扩展内存控制器中的各个目标扩展内存控制器，用于根据各自接收的数据读写子请求，控制各自对应的目标扩展内存并行执行对应的数据读写操作。可选的，所述逻辑管理控制器，包括：数据合成模块，用于在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据，以及用于将所述目标数据发送至CPU。在本申请的实施例第三方面，本申请提供了一种电子设备，包括：处理器、存储器及存储在所述存储器上并在所述处理器上运行的计算机程序，所述计算机程序被所述处理器执行时实现如本申请第一方面所述的一种数据读写方法中的步骤。在本申请的实施例第四方面，本申请提供了一种计算机可读存储介质，所述计算机可读存储介质上存储有计算机程序，所述计算机程序被处理器执行时实现如本申请第一方面所述的一种数据读写方法中的步骤。针对在先技术，本申请具备如下优点：本申请实施例提供的一种数据读写方法，应用于逻辑管理控制器，逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块。在CPU需要将目标数据写入扩展内存的情况下，逻辑管理控制器经由CXL IP接收到CPU发送的数据写请求；根据接收到的该数据写请求，通过请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令；通过地址解码模块对该本地命令进行命令解析，确定进行数据读写的位置信息；请求分解模块基于所述位置信息，生成多个写数据子请求；通过请求分配模块将获得的多个写数据子请求发送至当前将用于进行数据写入的各个目标扩展内存控制器；该各个目标扩展内存控制器则基于各自接收到的写数据子请求并行的对目标数据执行写入操作，以实现针对目标数据的写入。由此，本申请通过引入逻辑管理控制器，由逻辑管理控制器接收由CPU发出的针对目标数据的数据读写请求，并将该数据读写请求拆分为多个数据读写子请求后分发至各个目标扩展内存控制器，然后通过该各个目标扩展内存控制器并行执行针对目标数据的读写操作，以此通过多个扩展内存并行执行针对数据的读写操作来提升扩展内存的带宽，进而提升CPU对扩展内存的访问效率。同时，逻辑管理控制器隔离CPU对扩展内存的直接管理，增加了扩展内存的安全性。上述说明仅是本申请技术方案的概述，为了能够更清楚了解本申请的技术手段，而可依照说明书的内容予以实施，并且为了让本申请的上述和其它目的、特征和优点能够更明显易懂，以下特举本申请的具体实施方式。附图说明为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍。图1为本申请实施例提供的一种数据读写方法的流程图；图2为现有的一种基于CXL协议的内存扩展系统架构图；图3为本申请实施例提供的一种数据读写方法应用于的一种内存扩展系统架构图；图4为本申请实施例提供的一种数据读写方法中的数据读写请求分发的流程图；图5为本申请实施例提供的一种数据读写方法的另一流程图；图6为本申请实施例提供的一种数据读写系统的示意图；图7为本申请实施例提供的一种电子设备的示意图。具体实施方式下面将参照附图更详细地描述本申请的实例性实施例。为便于对本申请的实施方式的理解，对后续提到的相关专业名词进行解释：FPGA：可编程逻辑器件；CXL：一种新的计算高速互连标准；CXL IP：CXL协议的知识产权核，属于实现CXL协议的一个硬件模块。在对本申请进行说明之前，对当前现有技术的背景进行说明。CXL是一种行业采用的开放标准，基于 PCI Express 规范物理和电气接口连接，包含CXL.io、CXL.cache、CXL.mem三个子协议，其中CXL.mem协议，使用加载命令和存储命令为主机CPU提供对连接设备内存的访问，其中主机CPU充当主设备，CXL设备充当从属设备，以此实现内存扩展及池化，该开放标准为处理器、内存扩展和加速器提供了高速缓存的一致性互连。对于当前基于FPGA实现的CXL内存方案中，从CPU角度看，所有通道的MEM组织为一个统一的地址空间，数据访问是按通道顺序访问，即访问某通道时，其他通道处于空闲状态，访问效率低。如CPU通过CXL向扩展内存发起任务请求，CXL对任务请求进行解析，因为扩展内存自身特点，需要进行行列选通、刷新、读延迟等因素，这个延迟时间因硬件因素无法进一步降低，而且，基于CXL扩展的内存在CPU侧是统一的地址分配，即第一个扩展内存MEM1占用地址空间BaseAddr + N1，第二个扩展内存MEM2占用地址空间BaseAddr+N1+N2，第三个扩展内存MEM3占用的地址空间BaseAddr+N1+N2+N3。同时因为CPU发起的任务请求，是一段连续的地址访问，当这段地址落在某个扩展内存中，那么本次内存请求就是按照地址的顺序依次读取该扩展内存，直到请求完成，此时其他的扩展内存处于空闲等待状态，造成同一时间只能访问一个扩展内存，降低了扩展内存的带宽，访问效率低。有鉴于此，本申请提出一种数据读写方法，通过引入逻辑管理控制器，由逻辑管理控制器接收由CPU发出的针对目标数据的数据读写请求，并将该数据读写请求拆分为多个数据读写子请求后分发至各个目标扩展内存控制器，然后通过该各个目标扩展内存控制器并行执行针对目标数据的读写操作，以此通过多个扩展内存并行执行针对数据的读写操作来提升扩展内存的带宽，进而提升CPU对扩展内存的访问效率。同时，逻辑管理控制器隔离CPU对扩展内存的直接管理，增加了扩展内存的安全性。图1为本申请实施例提供的一种数据读写方法的流程图，如图1所示，该方法应用于逻辑管理控制器，该逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，该逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块，该方法包括：步骤S1：通过所述请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令。步骤S2：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据读写的位置信息。步骤S3：所述请求分解模块基于所述位置信息，生成多个数据读写子请求。步骤S4：通过所述请求分配模块将所述多个数据读写子请求发送至各个目标扩展内存控制器。步骤S5：根据所述多个数据读写子请求，控制所述各个目标扩展内存控制器并行执行数据读写操作。在本实施例中，如图2所示，图2示出的是现有的一种基于CXL协议的内存扩展系统架构图，而本申请实施例提供的一种数据读写方法应用于的内存扩展系统架构为在该现有的内存扩展系统架构的基础上增加逻辑管理控制器，如图3所示，该逻辑管理控制器通过在内存扩展系统架构所在板卡中的可编程逻辑器件内部编程实现，通过编程在可编程逻辑器件内部增加逻辑功能来实现逻辑管理控制器的功能，该逻辑管理控制器的功能为通过可编程逻辑器件实现的软件功能。该逻辑管理控制器用于实现本申请实施例提供的一种数据读写方法中与逻辑管理控制器相关的步骤，其中，该可编程逻辑器件包括但不限于FPGA。应当理解的是，逻辑管理控制器也可以是在内存扩展系统架构所在板卡中引入定制芯片来实现逻辑管理控制器的功能。在本实施例中，如图3所示，本申请中的逻辑管理控制器与各个扩展内存控制器基于CXL协议进行通信，该逻辑管理控制器通过协议实现模块与CPU之间基于CXL协议进行通信。本申请中CPU基于CXL协议进行内存扩展，整个扩展链路中基于 PCI Express 规范物理和电气接口进行连接，该内存扩展系统中包含CXL.io、CXL.cache、CXL.mem三个子协议，其中的CXL.mem协议通过使用加载命令和存储命令为CPU提供对连接设备的访问，其中CPU 充当主设备，CXL 设备充当从属设备，以此实现内存扩展。在本实施例中，在CPU需要针对某一特定数据进行相应的读写操作的情况下，该某一特定数据即为目标数据，此时CPU将基于CXL.mem协议发出针对该目标数据的数据读写请求。此时，逻辑管理控制器通过CXL IP将接收到该数据读写请求，基于该数据读写请求，生成多个数据读写子请求，以针对目标数据进行读写。在生成多个数据读写子请求后，由逻辑管理控制器将生成的该多个数据读写子请求发送至多个目标扩展内存控制器，该多个数据读写子请求中的任意一个数据读写子请求将只会被发送至一个目标扩展内存控制器，而该多个目标扩展内存控制器中的任意一个目标扩展内存控制器将至少接收到一个数据读写子请求。其中，目标扩展内存控制器指的是当前用于控制目标数据进行对应的读写操作的扩展内存控制器，扩展内存控制器与扩展内存之间为一一对应关系，也就是一个扩展内存控制器控制相对应的一个扩展内存。例如，为CPU设置的扩展内存包括扩展内存a1至a5共5个，相对应的具有扩展内存控制器A1至A5共5个扩展内存控制器，当前将用于控制目标数据进行对应的读写操作的扩展内存控制器为扩展内存控制器A1至A3的情况下，此时扩展内存控制器A1至A3则为目标扩展内存控制器。在本实施例中，各个目标扩展内存控制器各自在接收到数据读写子请求后，该多个目标扩展内存控制器并行的基于自身接收到的数据读写子请求执行相对应的数据读写操作，以实现针对目标数据的读写。具体地，在CPU需要针对某一特定数据进行相应的写操作的情况下，该某一特定数据即为目标数据，此时CPU将基于CXL.mem协议发出针对该目标数据的写数据请求。此时，逻辑管理控制器将接收到该写数据请求，基于该写数据请求，生成多个写数据子请求，以针对目标数据进行写操作，并将该目标数据划分为与该多个写数据子请求的数量相同的多个数据片段，写数据子请求与数据片段具有一一对应的关系，也就是一个写数据子请求用于控制与该写数据子请求相对应的一个数据片段的写入。在生成多个写数据子请求后，由逻辑管理控制器将生成的该多个写数据子请求发送至多个目标扩展内存控制器，该多个写数据子请求中的任意一个写数据子请求将只会被发送至一个目标扩展内存控制器，而该多个目标扩展内存控制器中的任意一个目标扩展内存控制器将至少接收到一个写数据子请求。各个目标扩展内存控制器各自在接收到写数据子请求后，该多个目标扩展内存控制器并行的基于自身接收到的写数据子请求执行相对应的数据写入操作，以实现针对目标数据的写入。由此，在CPU需要写入目标数据时，相较于以往只能以一个扩展内存的带宽写入目标数据，本申请提供的一种提高扩展内存的方法可以在同一时刻同时以多个扩展内存的带宽进行目标数据的写入，从而明显提升对扩展内存的访问带宽。示例地，根据接收的针对目标数据的写数据请求X，生成3个写数据子请求x1、x2、x3，相应的将目标数据Y划分为3个数据片段y1、y2、y3。将写数据子请求x1确定为控制数据片段y1进行写入的写数据子请求，将写数据子请求x2确定为控制数据片段y2进行写入的写数据子请求，将写数据子请求x3确定为控制数据片段y3进行写入的写数据子请求。将写数据子请求x1发送至目标扩展内存控制器A1，写数据子请求x2发送至目标扩展内存控制器A2，写数据子请求x3发送至目标扩展内存控制器A3。此时目标扩展内存控制器A1至A3基于自身接收到的写数据子请求并行执行针对数据片段y1至y3的写入操作，从而实现针对目标数据Y的写入，也就是目标扩展内存控制器A1至A3将基于自身接收到的写数据子请求同时执行数据片段的写入操作，此时的写入为目标扩展内存控制器A1控制数据片段y1写入到自身对应的扩展内存a1中，目标扩展内存控制器A2控制数据片段y2写入到自身对应的扩展内存a2中，目标扩展内存控制器A3控制数据片段y3写入到自身对应的扩展内存a3中。相较于以往基于写数据请求在同一时刻只能向一个扩展内存进行针对目标数据的写入，本申请可以基于写数据请求划分为的多个写数据子请求，在同一时刻可以同时向多个扩展内存进行针对目标数据的写入，从而有效提升CPU对扩展内存的访问效率。具体地，在CPU需要针对某一特定数据进行相应的读操作的情况下，该某一特定数据即为目标数据，其中，该目标数据属于通过本申请提供的一种数据读写方法实现的数据写入。此时CPU将基于CXL.mem协议发出针对该目标数据的读数据请求。此时，逻辑管理控制器将接收到该读数据请求，由于目标数据是之前通过本申请提供的一种数据读写方法实现的数据写入，本申请中的逻辑管理控制器将记录有该目标数据写入到了哪些扩展内存，以及在这些扩展内存中的具体物理地址所对应的逻辑地址。此时逻辑管理控制器将基于记录的该目标数据写入的各个扩展内存和在该各个扩展内存中的具体物理地址所对应的逻辑地址，生成多个读数据子请求，以针对目标数据进行读操作。在生成多个读数据子请求后，由逻辑管理控制器将生成的该多个读数据子请求发送至对应的各个目标扩展内存控制器，该多个读数据子请求中的任意一个读数据子请求将只会被发送至一个目标扩展内存控制器，而该多个目标扩展内存控制器中的任意一个目标扩展内存控制器将至少接收到一个读数据子请求。各个目标扩展内存控制器各自在接收到读数据子请求后，该多个目标扩展内存控制器并行的基于自身接收到的读数据子请求执行相对应的数据读取操作，以实现针对目标数据的读取。由此，在CPU需要读取目标数据时，相较于以往只能以一个扩展内存的带宽对目标数据进行读取，本申请提供的一种提高扩展内存的方法可以在同一时刻同时以多个扩展内存的带宽进行目标数据的读取，从而明显提升对扩展内存的访问带宽。示例地，根据接收的针对目标数据Y的读数据请求U，生成3个读数据子请求u1、u2、u3。将读数据子请求u1发送至目标扩展内存控制器A1，读数据子请求u2发送至目标扩展内存控制器A2，读数据子请求u3发送至目标扩展内存控制器A3。此时目标扩展内存控制器A1至A3基于自身接收到的读数据子请求并行执行针对数据片段y1至y3的读取操作，从而实现针对目标数据Y的读取，也就是目标扩展内存控制器A1至A3基于自身接收到的读数据子请求同时到各自对应的扩展内存中去读取数据片段y1、y2、y3，从而实现针对目标数据Y的读取。相较于以往基于读数据请求在同一时刻只能在一个扩展内存进行针对目标数据的读取，本申请在将目标数据Y分成多个数据片段存储至不同的扩展内存后，可以基于读数据请求划分为的多个读数据子请求，在同一时刻可以同时在多个扩展内存中针对目标数据进行读取，从而有效提升CPU对扩展内存的访问效率。在本实施例中，由CPU发送的数据读写请求为一个请求数据包，而本申请在生成数据读写子请求时，只需要用到其中的关键的数据读写位置信息。因此，本申请中的逻辑管理控制器至少包括请求解析模块、地址解码模块、请求分解模块，请求分配模块。逻辑管理控制器中的请求解析模块用于对接收到的由CPU发送的数据读写请求进行数据包解析处理，获得对应的本地命令，该本地命令指的是对数据读写请求进行数据包解析处理获得的数据读写请求中的具体数据。在本实施例中，获得的本地命令中包括大量的字段，不同字段所代表的含义不同，而本申请在生成数据读写子请求时，只需要用到其中关键的数据读写位置信息。因此，本申请在逻辑管理控制器中的请求解析模块通过对数据读写请求进行数据包解析处理获得对应的本地命令后，进一步通过逻辑管理控制器中的地址解码模块对该本地命令进行命令解析，以从本地命令中所有字段中确定到进行数据读写的位置信息。在本实施例中，在确定到进行数据读写的位置信息后，通过逻辑管理控制器中的请求分配模块基于该位置信息，生成多个数据读写子请求。本申请实施例提供的一种数据读写方法，应用于逻辑管理控制器，逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，逻辑管理控制器包括请求解析模块、地址解码模块、请求分解模块，请求分配模块。在CPU需要将目标数据写入扩展内存的情况下，逻辑管理控制器经由CXL IP接收到CPU发送的数据写请求；根据接收到的该数据写请求，通过请求解析模块对接收的针对目标数据的数据读写请求进行解析，获得本地命令；通过地址解码模块对该本地命令进行命令解析，确定进行数据读写的位置信息；请求分解模块基于所述位置信息，生成多个写数据子请求；通过请求分配模块将获得的多个写数据子请求发送至当前将用于进行数据写入的各个目标扩展内存控制器；该各个目标扩展内存控制器则基于各自接收到的写数据子请求并行的对目标数据执行写入操作，以实现针对目标数据的写入。由此，本申请通过引入逻辑管理控制器，由逻辑管理控制器接收由CPU发出的针对目标数据的数据读写请求，并将该数据读写请求拆分为多个数据读写子请求后分发至各个目标扩展内存控制器，然后通过该各个目标扩展内存控制器并行执行针对目标数据的读写操作，以此通过多个扩展内存并行执行针对数据的读写操作来提升扩展内存的带宽，进而提升CPU对扩展内存的访问效率。同时，逻辑管理控制器隔离CPU对扩展内存的直接管理，增加了扩展内存的安全性。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，在所述数据读写请求为写数据子请求的情况下，步骤S2为：通过所述地址解码模块对所述本地命令进行命令解析，确定进行数据写入的逻辑起始地址、数据长度和数据内容。在本实施例中，在CPU需要针对目标数据进行相应的写入操作的情况下，本申请为了基于CPU发出的写数据请求，生成多个写数据子请求，需要用到该写数据请求中涉及的需要将目标数据写入的具体逻辑起始地址，也就是从哪个逻辑地址开始对目标数据进行写入，以及目标数据的数据长度，以及目标数据的具体数据内容。因此，在CPU需要针对目标数据进行相应的写入操作的情况下，上述步骤S2的一种实施方式为：通过逻辑管理控制器中的地址解码模块对数据包解析处理获得对应的本地命令进行命令解析，以从本地命令中所有字段中确定到目标数据写入的逻辑起始地址、确定到目标数据的数据长度和目标数据的具体数据内容。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S3可以包括步骤S31至步骤S34：步骤S31：根据所述位置信息中的数据长度，确定进行数据写入的写入次数。步骤S32：根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量。在本实施例中，在将目标数据存入扩展内存后，为保证后续CPU针对目标数据的部分数据内容进行读取时也能够实现并行的数据读取，本申请将目标数据划分为多个小的数据片段，然后并行存储至不同的扩展内存中。相应的，针对每个小的数据片段需要生成相对应的写数据子请求，也就是一个数据片段就对应一个写数据子请求。具体地，首先根据确定的需要写入的目标数据的数据长度，确定到需要进行数据写入的写入次数和用于对目标数据的数据片段进行写入的目标扩展内存的数量，该数量即为目标扩展内存的目标数量。其中，数据长度越长表示目标数据的数据内容越多，此时为保证后续CPU针对目标数据的部分数据内容进行读取时也能够实现并行的数据读取，本申请将目标数据划分为更多的数据片段，相对应的进行更多次数的数据写入。同时为保证目标数据的数据片段并行写入的访问效率，数据长度越长，本申请则让更多的扩展内存参与到对该目标数据的数据片段的写入。例如，目标数据的数据内容为z1至z300，数据长度为300，该目标数据存储至扩展内存后，为保证在CPU需要读取该目标数据的部分数据内容时，能够并行读取到该部分数据内容，将目标数据划分为长度为10的30个数据片段，也就是z1至z10，z11至z20，z21至z30，……，z291至z300共30个片段，将该30个片段分散写入至3个扩展内存中，如将第1个、第4个、……、第3n+1个数据片段写入至第1个扩展内存中，将第2个、第5个、……、第3n+2个数据片段写入至第2个扩展内存中，将第3个、第6个、……、第3n+3个数据片段写入至第3个扩展内存中，此处n取值为0至9。在CPU需要读取该目标数据的部分数据内容z1至z30时，可以从3个扩展内存中并行进行数据内容z1至z30的读取，也就是该3个扩展内存在第1次并行读取过程中将读取到z1至z3，然后在第2次并行读取过程中将读取到z4至z6，……，在第10次并行读取过程中将读取到z28至z30，最终也就是在同一时刻同时以3个扩展内存的总带宽读取到这30数据长度的z1至z30的数据内容。在目标数据的长度更长时，划分的数据片段的数量将更多，对应的写入次数也就越多。步骤S33：根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存。在本实施例中，通过上述步骤S2从CPU发出的写数据请求中可以确定到对目标数据进行写入的逻辑起始地址和数据长度，该逻辑起始地址表征的是 CPU想从哪个逻辑地址开始进行目标数据的写入以及需要写入的目标数据的数据长度。而逻辑地址与扩展内存的物理地址之间具有一一对应的映射关系，因此，基于该逻辑起始地址可以确定到该逻辑起始地址所对应的扩展内存的物理地址，基于该物理地址可以确定到该物理地址属于的扩展内存。在确定到该物理地址属于的扩展内存后，将该扩展内存确定为用于对目标数据的数据片段进行写入的第一个目标扩展内存。然后再基于确定的目标数量，从为CPU配置的所有扩展内存中选择几个扩展内存确定为用于对目标数据的数据片段进行写入的目标扩展内存，以此获得目标数量的目标扩展内存。如，确定的目标数量为3的情况下，在确定到了第一个目标扩展内存后，从为CPU配置的所有扩展内存中再选择2个扩展内存确定为用于对目标数据的数据片段进行写入的目标扩展内存。步骤S34：根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，其中，定位标识用于确定写数据子请求发送至的目标扩展内存控制器。在本实施例中，在确定到写入次数和用于对目标数据的数据片段进行写入的目标扩展内存后，生成数量和写入次数相同的具有定位标识的多个写数据子请求。其中，写数据子请求的定位标识用于确定该写数据子请求应该发送给哪个目标扩展内存对应的目标扩展内存控制器，以进行对应的数据写入操作。示例地，确定写入次数为20，目标扩展内存为a1、a2，基于确定的写入次数和各个目标扩展内存，生成具有定位标识的20个写数据子请求q1至q20，对于写数据子请求q1具有对应的定位标识p1、写数据子请求q2具有对应的定位标识p2、……、写数据子请求q20具有对应的定位标识p20。逻辑管理控制器基于内置的逻辑算法可以确定到各个定位标识所对应的具体目标扩展内存，如基于定位标识p1确定到该定位标识p1对应的目标扩展内存为a1，因此将定位标识p1对应的写数据子请求q1发送至目标扩展内存a1对应的目标扩展内存控制器A1；基于定位标识p2确定到该定位标识p2对应的目标扩展内存为a2，因此将定位标识p2对应的写数据子请求q2发送至目标扩展内存a2对应的目标扩展内存控制器A2；基于定位标识p3确定到该定位标识p3对应的目标扩展内存为a1，因此将定位标识p3对应的写数据子请求q3发送至目标扩展内存a1对应的目标扩展内存控制器A1；基于定位标识p4确定到该定位标识p4对应的目标扩展内存为a2，因此将定位标识p4对应的写数据子请求q4发送至目标扩展内存a2对应的目标扩展内存控制器A2等。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S31可以包括步骤S311至步骤S312：步骤S311：根据所述位置信息中的数据长度，确定单次数据写入量。步骤S312：根据所述位置信息中的数据长度和所述单次数据写入量，确定进行数据写入的写入次数。在本实施例中，确定对目标数据进行写入的写入次数的确定的一种实施方式为：获取到数据写入的单次数据写入量，通过将确定到的目标数据的数据长度与单次数据写入量相除，获得数据写入的写入次数。在本实施例中，单次数据写入量可以是由逻辑管理控制器预先设定的一个固定取值，如10、50、100等。同时，该单次数据写入量的取值可以是基于目标数据的数据长度进行确定，一种可选的实施方式为：在目标数据的数据长度超过某一设定阈值时，确定单次数据写入量为一个固定取值，在目标数据的数据长度未超过某一设定阈值时，确定单次数据写入量为另一个固定取值。对于基于目标数据的数据长度确定单次数据写入量的取值的优势在于，对于任意数据大小的目标数据，在CPU需要针对该目标数据的部分数据内容进行读取时，可以同时以多个扩展内存的带宽进行并行的读取，从而有效提高对扩展内存的访问效率。例如，如果将单次数据写入量确定为一个固定取值的情况下，在目标数据的数据长度为500时，在CPU需要针对该目标数据的部分数据内容进行读取时，可以同时以多个扩展内存的带宽进行并行的读取；但在目标数据的数据长度只有50时，在CPU需要针对该目标数据的部分数据内容进行读取时，由于单次数据写入量就是50，所以该目标数据将被一次写入至一个扩展内存中，因此CPU需要针对该数据长度为20的部分数据将只能从该一个扩展内存中进行读取，这样将不利于提升对扩展内存的访问效率。而如果基于目标数据的数据长度来确定单次数据写入量的取值，则可以有效避免上述出现的不利于提升对扩展内存的访问效率的问题。如目标数据的数据长度为500时，基于该目标数据的数据长度确定对应的单次数据写入量为50，对于这一单次数据写入量，在CPU需要针对该目标数据的部分数据内容进行读取时，可以同时以多个扩展内存的带宽进行并行的读取，从而有效提升对扩展内存的访问效率；在目标数据的数据长度为50时，基于该目标数据的数据长度确定对应的单次数据写入量为5，对于这一单次数据写入量，在CPU需要针对该目标数据的部分数据内容进行读取时，可以同时以多个扩展内存的带宽进行并行的读取，从而也可有效提升对扩展内存的访问效率。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S32可以包括步骤S321至步骤S323：步骤S321：确定所述写入次数与扩展内存的总数之间的关系。在本实施例中，为尽可能的提升对扩展内存的访问效率，本申请基于确定的写入次数和为CPU配置的扩展内存的总数之间的关系来确定用于对目标数据的数据片段进行写入的目标扩展内存的数量，也就是目标扩展内存的目标数量。步骤S322：在所述写入次数大于或等于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为所有扩展内存的总数。在本实施例中，在确定的写入次数大于或者等于为CPU配置的扩展内存的总数的情况下，此时将所有扩展内存都用于对目标数据的数据片段的写入也无法一次完成对目标数据的所有数据内容的写入，此时为尽可能的提升对扩展内存的访问效率，本申请在确定的写入次数大于或者等于为CPU配置的扩展内存的总数的情况下，将为CPU配置的扩展内存均确定为目标扩展内存，此时的目标扩展内存的目标数量等同于为CPU配置的扩展内存的总数。步骤S323：在所述写入次数小于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为与所述写入次数相等的数量。在本实施例中，为尽可能的提升对扩展内存的访问效率，在确定的写入次数小于为CPU配置的扩展内存的总数的情况下，本申请确定用于对目标数据的数据片段进行写入的目标扩展内存的数量为与该写入次数相同的数量，以达到通过并行的方式将目标数据的所有数据片段一次写入扩展内存中，不仅最大程度提升了对扩展内存的访问效率，同时可有效提升数据写入所需花费的时间。例如，确定的写入次数为3次，为CPU配置的扩展内存的总数为5，此时选择3个扩展内存作为目标扩展内存，在进行目标数据的3个数据片段的写入时，该3个目标扩展内存可同时进行针对各自对应的一个数据片段的写入，从而达到以三个扩展内存的总带宽并行的对目标数据进行写入。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S33可以包括步骤S331至步骤S332：步骤S331：根据所述逻辑起始地址，将所述逻辑起始地址对应的扩展内存确定为目标扩展内存。在本实施例中，通过上述步骤S2从CPU发出的写数据请求中可以确定到对目标数据进行写入的逻辑起始地址和数据长度，基于该逻辑起始地址确定到该逻辑起始地址所对应的扩展内存的物理地址，基于该物理地址确定到该物理地址属于的扩展内存。在确定到该物理地址属于的扩展内存后，将该扩展内存确定为用于对目标数据的数据片段进行写入的第一个目标扩展内存。步骤S332：根据各个扩展内存的空闲程度和所述目标数量，将空闲程度排序靠前的多个扩展内存确定为目标扩展内存，以获得目标数量的目标扩展内存。在本实施例中，为保证CPU后续发送写数据请求时，同样可以同时以多个扩展内存的带宽进行并行的写入，以有效提升对扩展内存的访问效率，本申请在进行数据的写入时，尽可能的使各个扩展内存中的剩余空间量接近，从而保证CPU后续发送写数据请求时，为CPU配置的所有扩展内存都处于接近的可用状态，避免某个或某些扩展内存的空间已占满，导致CPU后续发送写数据请求时无法同时以多个扩展内存的带宽进行并行的写入，或无法同时以更多数量的扩展内存的带宽进行并行的写入。因此，本申请为达到在进行数据的写入时，尽可能的使各个扩展内存中的剩余空间量接近的目的，本申请在确定到第一个目标扩展内存后，对于后续目标扩展内存的确定提供一种优选实施方式，具体为：确定除去确定的第一个目标扩展内存外的其他各个扩展内存的空闲程度，然后将空间程度靠前的扩展内存确定为目标扩展内存，直至确定到的所有目标扩展内存的数量达到目标数量为止。例如，需要用到的目标扩展内存的目标数量为5个，在确定到第一个目标扩展内存后，将为CPU配置的所有扩展内存中空闲程度排序最靠前的4个扩展内存确定为目标扩展内存。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S34可以包括步骤S341至步骤S343：步骤S341：根据所述写入次数和目标数量，确定所述各个目标扩展内存各自对应的写数据子请求数量。在本实施例中，在确定到进行数据写入的写入次数和确定的目标扩展内存的目标数量后，确定的所有目标扩展内存都参与目标数据的数据片段的每次并行写入过程，可使得对扩展内存的访问效率最大化。这是因为在写入次数和目标扩展内存的目标数量均确定的情况下，确定的所有目标扩展内存都参与目标数据的数据片段的每次并行写入过程可以使得每次并行写入过程所达到的带宽最大，从而使得扩展内存的访问效率最大化。例如，在写入次数为30次，对应将目标数据划分为30个数据片段，目标扩展内存的数据为3个，此时由该3个目标扩展内存每次并行的写入3个数据片段，并行写入10次即可将30个数据片段完全写入扩展内存中，同时在每次并行写入过程中均是以最大的带宽并行写入3个数据片段，该最大的带宽也就是该3个目标扩展内存的带宽总和。因此，本申请在确定的写入次数为确定的目标数量的整数倍的情况下，将确定的写入次数与确定的目标数据相除获得的取值确定为各个目标扩展内存的写数据子请求数量，此时，各个目标扩展内存的写数据子请求数量相同，例如写入次数为30次，目标扩展内存的目标数量为3，则每个目标扩展内存对应的写数据子请求数量均为10。由于本申请后续在基于实际生成的写数据子请求的定位标识进行写数据子请求的分发时，是按定位标识的顺序每次将一个写数据子请求顺序分发给各个目标扩展内存。例如，写数据子请求包括q1、q2、q3、q4、q5，目标扩展内存包括a1、a2、a3，q1对应的定位标识为p1，q2对应的定位标识为p2，q3对应的定位标识为p3，q4对应的定位标识为p4，q5对应的定位标识为p5，逻辑管理控制器在进行写数据子请求的分发时基于按定位标识的顺序每次将一个写数据子请求顺序分发给各个目标扩展内存的逻辑，知晓需要将定位标识为p1的写数据子请求q1发送至第1个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p2的写数据子请求q2发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2；需要将定位标识为p3的写数据子请求q3发送至第3个目标扩展内存a3对应的目标扩展内存控制器A3；由于定位标识为p4不再有顺序增加的目标扩展内存a4，此时知晓需要将定位标识为p4对应的写数据子请求q4发送至第1个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p5对应的写数据子请求q5发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2。在逻辑管理控制器基于按定位标识的顺序每次将一个写数据子请求顺序分发给各个目标扩展内存的逻辑，知晓了各个写数据子请求应该分发至的目标扩展内存后，将同属于一个目标扩展内存的多个写数据子请求同时发送至该目标扩展内存对应的目标扩展内存控制器。因此，本申请在确定的写入次数不为确定的目标数量的整数倍的情况下，将确定的写入次数与确定的目标数据相除获得一个取值，并将获得一个余数，此时基于该余数的取值将与该余数的取值相同的排序靠前的多个目标扩展内存的写数据子请求的数量确定为该相除获得的一个取值的基础上进行加1得到的一个取值，而对于其他的目标扩展内存则将对应的写数据子请求数量确定为该相除获得的一个取值。例如，在确定的写入次数为32，确定的目标扩展内存的目标数量为3时，将两者相除获得一个取值10和余数2，基于获得的该结果，将排序靠前的前2个目标扩展内存对应的写数据子请求数量均确定为11，对于排序最后的一个目标扩展内存的写数据子请求数量确定为10。步骤S342：根据目标扩展内存对应的写数据子请求数量和单次数据写入量，在所述目标扩展内存中确定与所述目标扩展内存对应的写数据子请求数量相同的多个逻辑起始地址。在本实施例中，由于每个目标扩展内存对应的多个物理起始地址的确定实施方式相同，在此以一个目标扩展内存对应的多个物理起始地址的确定为例进行说明，具体说明如下：对于目标数据的所有数据片段中的任意一个数据片段在进行写入时均是在连续的地址位上写入该数据片段，同时扩展内存在写入数据时均是按顺序从最开始的物理地址进行数据的写入，因此在确定到用于对目标数据的数据片段进行写入的目标扩展内存和目标扩展内存对应的写数据子请求数量后，在该目标扩展内存中按顺序找到最开始的未写入数据的物理地址，然后将该物理地址对应的逻辑地址确定为第1个逻辑起始地址；然后以该1个物理起始地址开始，在间隔单次写入数据量的数据长度对应的物理地址长度后，取第2个物理起始地址对应的逻辑地址为第2个逻辑起始地址；然后以该第2个物理起始地址开始，在间隔单次写入数据量的数据长度对应的物理地址长度后，取第3个物理起始地址对应的逻辑地址为第3个逻辑起始地址，如此循环直至获得了与该目标扩展内存对应的写数据子请求数量相同的多个逻辑起始地址为止。例如，目标扩展内存对应的写数据子请求数量为3，目标扩展内存的物理地址包括物理地址1至500，单次写入数据量为5数据长度的情况下，首先确定到目标扩展内存的物理地址从物理地址101开始未写入数据，此时将该目标扩展内存的物理地址101对应的逻辑地址确定为该目标扩展内存对应的第1个逻辑起始地址；然后间隔单次写入数据量的5数据长度后，将该目标扩展内存的物理地址106对应的逻辑地址确定为该目标扩展内存对应的第2个逻辑起始地址；然后间隔单次写入数据量的5数据长度后，将该目标扩展内存的物理地址111对应的逻辑地址确定为该目标扩展内存对应的第3个逻辑起始地址，由此获得该目标扩展内存对应的3个逻辑起始地址。在本实施例中，通过与上述相同的实施方式，每个目标扩展内存均可获得与自身对应的多个逻辑起始地址。步骤S343：根据确定的所有的逻辑起始地址和单次数据写入量，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求。在本实施例中，由于任意一个逻辑起始地址对应的定位标识的确定实施方式相同，在此以一个逻辑起始地址对应的定位标识的确定为例进行说明，具体地：首先确定该逻辑起始地址所指向的目标扩展内存在确定的所有目标扩展内存中的排序，将该排序确定为第一排序，以Q1表示；同时确定该逻辑起始地址对应的物理起始地址在该逻辑起始地址所指向的目标扩展内存对应的各个逻辑起始地址各自对应的物理起始地址中的排序，将该排序确定为第二排序，以Q2表示。然后，基于该第一排序、该第二排序和确定的目标数量，通过算法：Q=*Q3+Q1计算，以确定该逻辑起始地址对应的一个定位标识Q。由此，通过与上述相同的实施方式，针对每个逻辑起始地址均可确定到一个对应的定位标识。在本实施例中，在确定到逻辑起始地址对应的定位标识后，基于逻辑起始地址和该逻辑起始地址对应的定位标识和确定的单次数据写入量，生成与该逻辑起始地址对应的写数据子请求。由此，基于相同的实施方式，针对每个逻辑起始地址均可确定到一个对应的写数据子请求。其中，任意一个写数据子请求中将包括唯一的逻辑起始地址和定位标识和单次数据写入量。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S4可以为：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器。在本实施例中，通过上述步骤S341至步骤S343，可以确定到多个具有定位标识的写数据子请求，如图4所示，根据写数据子请求的定位标识的标识顺序，按定位标识的顺序每次将一个写数据子请求顺序分发给确定的各个目标扩展内存。例如，写数据子请求包括q1、至q3n，目标扩展内存包括a1、a2、a3，q1对应的定位标识为p1，q2对应的定位标识为p2，q3对应的定位标识为p3，……，q3n对应的定位标识为p3n，逻辑管理控制器中的请求分配模块在进行写数据子请求的分发时基于按定位标识的顺序每次将一个写数据子请求顺序分发给各个目标扩展内存的逻辑，知晓需要将定位标识为p1的写数据子请求q1发送至第1个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p2的写数据子请求q2发送至第2个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p3的写数据子请求q3发送至第3个目标扩展内存a3对应的目标扩展内存控制器A3；由于定位标识为p4不再有顺序增加的目标扩展内存a4，此时知晓需要将定位标识为p4对应的写数据子请求q4发送至第1个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p5对应的写数据子请求q5发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2；需要将定位标识为p5对应的写数据子请求q5发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2；需要将定位标识为p6对应的写数据子请求q6发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2；……；需要将定位标识为p对应的写数据子请求q发送至第1个目标扩展内存a1对应的目标扩展内存控制器A1；需要将定位标识为p对应的写数据子请求q发送至第2个目标扩展内存a2对应的目标扩展内存控制器A2；需要将定位标识为p对应的写数据子请求q发送至第3个目标扩展内存a3对应的目标扩展内存控制器A3。在逻辑管理控制器基于按定位标识的顺序每次将一个写数据子请求顺序分发给各个目标扩展内存的逻辑，知晓了各个写数据子请求应该分发至的目标扩展内存后，将同属于一个目标扩展内存的多个写数据子请求同时发送至该目标扩展内存对应的目标扩展内存控制器。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S4可以包括步骤S41至步骤S42：步骤S41：根据所述多个写数据子请求各自的定位标识，通过所述请求分配模块将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列。在本实施例中，逻辑管理控制器基于写数据子请求的定位标识确定到各个写数据子请求应该发送至的目标扩展内存控制器后，将各个写数据子请求发送至各自对应的目标扩展内存控制器的命令队列中。步骤S42：在完成所有写数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的写数据子请求。在本实施例中，在逻辑管理控制器中的请求分配模块完成所有写数据子请求的发送后，通知各个目标扩展内存控制器对自身的命令队列中的写数据子请求进行读取，以使得基于读取到的写数据子请求执行针对目标数据的数据片段的并行写入操作。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，该方法还包括：步骤S344：根据所述写入次数，将所述数据内容划分为数量与所述写入次数相同的多个数据片段。在本实施例中，根据确定的写入次数，将需要写入的目标数据的数据内容划分为数量与该写入次数相同的多个数据片段。例如，确定的写入次数为30次，则将目标数据的数据内容划分为30个片段。步骤S345：根据确定的所述各个目标扩展内存，将所述多个数据片段依次循环存储至所述各个目标扩展内存各自的缓存区。在本实施例中，本申请针对每个扩展内存划分有相对应的一个缓存区，也就是缓存区与扩展内存之间具有一一对应的关系。根据确定的各个目标扩展内存，按照该各个目标扩展内存的排序，将划分为的该多个数据片段以此循环存储至该各个目标扩展内存中。例如，目标扩展内存包括目标扩展内存a1、a2、a3，数据片段包括数据片段1至8的情况下，依次将数据片段1、4、7存储至目标扩展内存a1对应的缓存区，并依次将数据片段2、5、8发送至目标扩展内存a2对应的缓存区，并依次将数据片段3、6发送至目标扩展内存a3对应的缓存区。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S5可以包括步骤S51至步骤S52：步骤S51：控制所述各个目标扩展内存控制器并行获取各自命令队列中的写数据子请求。在本实施例中，各个目标扩展内存控制器每次同时从各自的命令队列中获取一个写数据子请求。其中，发送至同一个命令队列中的多个读数据子请求具有先后顺序，对于用于将更靠前的数据片段写入扩展内存的写数据子请求会更先被发送至该命令队列。步骤S52：根据获取的各自命令队列中的写数据子请求，控制所述各个目标扩展内存控制器对各自对应的缓存区中的对应数据片段并行执行写操作，以将所述目标数据写入扩展内存。在本实施例中，各个目标扩展内存控制器基于自身获取的各自命令队列中的写数据子请求，并行的从自身对应的缓存区获取数据片段写入至自身对应的目标扩展内存中。在完成一次并行写入后，各个目标扩展内存控制器再次同时从各自的命令队列中获取一个新的写数据子请求，并基于自身获取的各自命令队列中的新的写数据子请求，再次并行的从自身对应的缓存区获取新的数据片段写入至自身对应的目标扩展内存中，直至所有目标扩展内存控制器的命令队列中不再具有写数据子请求为止。其中，各个扩展内存的缓存区由计算终端中的RAM提供、定位标识p3、定位标识p4，然后基于定位标识p2和数据片段2所在第一逻辑起始地址和第一数据长度生成一个读数据子请求1，基于定位标识p3和数据片段3所在第一逻辑起始地址和第一数据长度生成一个读数据子请求2，基于定位标识p4和数据片段4所在第一逻辑起始地址和第一数据长度生成一个读数据子请求3，逻辑管理控制器记录有之前在进行数据写入时定位标识被发送至的目标扩展内存，而新生成的用于读取某个特定数据片段的读数据子请求所用到的定位标识与该某个特定数据片段之前进行数据写入所用到的定位标识相同，因此逻辑管理控制器中的请求分配模块基于读数据子请求中的定位标识可以知晓需要将读数据子请求发送至对应的哪个目标扩展内存控制器，由此，逻辑管理控制器中的请求分配模块可基于读数据子请求的定位标识，将各个读数据子请求发送至各自对应的目标扩展内存控制器。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，根据所述多个读数据子请求各自的定位标识，将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器，可以包括步骤S401至步骤S402：步骤S401：根据所述多个读数据子请求各自的定位标识，通过所述请求分配模块将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列。在本实施例中，逻辑管理控制器中的请求分配模块基于读数据子请求的定位标识确定到各个读数据子请求应该发送至的目标扩展内存控制器后，将各个读数据子请求发送至各自对应的目标扩展内存控制器的命令队列中。步骤S402：在完成所有读数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的读数据子请求。在本实施例中，在逻辑管理控制器中的请求分配模块完成所有读数据子请求的发送后，通知各个目标扩展内存控制器对自身的命令队列中的读数据子请求进行读取，以使得基于读取到的读数据子请求执行针对数据片段的并行读取操作。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，步骤S5可以包括步骤S501至步骤S504：步骤S501：控制各个目标扩展内存控制器并行获取各自命令队列中的读数据子请求。在本实施例中，各个目标扩展内存控制器每次同时从各自的命令队列中获取一个读数据子请求。步骤S502：根据获取的各自命令队列中的读数据子请求，控制所述各个目标扩展内存控制器对各自对应的目标扩展内存并行执行读操作，并将读取的数据存储至各自对应的缓存区。在本实施例中，各个目标扩展内存控制器基于自身获取的各自命令队列中的读数据子请求，并行的从自身对应的扩展内存中进行读数据子请求所指向的数据片段的读取，并将各自读取到的数据片段存储至自身对应的缓存区中。在完成一次并行读取后，各个目标扩展内存控制器再次同时从各自的命令队列中获取一个新的读数据子请求，并基于自身获取的各自命令队列中的新的读数据子请求，再次并行的从自身对应的扩展内存中进行读数据子请求所指向的数据片段的读取，并将各自读取到的数据片段存储至自身对应的缓存区中，直至所有目标扩展内存控制器的命令队列中不再具有读数据子请求为止。步骤S503：在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据。在本实施例中，发送至同一个命令队列中的多个读数据子请求具有先后顺序，对于需要读取更靠前的数据片段的读数据子请求会更先被发送至该命令队列，因此对于同一个扩展内存对应的缓存区中读取到的数据片段也就具有先后顺序。由于逻辑管理控制器中可确定到所需读取的具体数据片段，而这些数据片段在读取到后会被存储至对应的缓存区中，同时对于存储至同一个缓存区中的多个数据片段具有先后顺序，因此逻辑管理控制器可以基于数据片段所存储的缓存区和多个数据片段在同一个缓存区中的先后顺序，确定到当前读取到的所有数据片段的先后顺序，基于该先后顺序，逻辑管理控制器对读取到的所有数据片段进行排序打包，得到CPU所需读取到的目标数据。步骤S504：将所述目标数据发送至CPU。在本实施例中，在对所有数据片段进行打包获得目标数据后，将获得的该目标数据发送至CPU。其中，打包获得的目标数据优选为CXL.mem的完成包。结合以上实施例，在一种实施方式中，本申请实施例还提供了一种数据读写方法。在该数据读写方法中，该方法还包括：对CPU通过所述逻辑管理控制器与扩展内存控制器进行通信链路进行初始化；在完成对通信链路的初始化的情况下，CPU读取所有扩展内存的内存地址和地址长度，以实现后续CPU进行数据读写。在本实施例中，在本方法实现之前的准备工作包括：逻辑管理控制器基于CXL协议分别与CPU以及至少两个扩展内存控制器通信，CPU则基于CXL协议进行内存扩展，在完成内存扩展后，进行通信链路的初始化，以使得该内存扩展系统能够正常运行。在本实施例中，在完成对通信链路的初始化后，CPU读取配置的所有扩展内存的内存地址和地址长度，以使得后续CPU能够基于该内存地址和地址长度进行相应的数据读写操作。在本实施例中，如图5所示，首先CPU发起数据读写请求，然后由逻辑管理控制器对该数据读写请求进行解析，在确定到该数据读写请求为写数据请求的情况下，将该写数据请求划分为多个写数据子请求，然后基于写数据子请求的定位标识，将该多个写数据子请求发送至各自对应的目标扩展内存控制器的命令队列，在完成发送后，各个目标扩展内存控制器并行从各自的命令队列中获取到写数据子请求，然后并行的写入自身获取到的写数据子请求对应的数据片段至各自对应的目标扩展内存，完成数据写入操作。在确定到该数据读写请求为读数据请求的情况下，将该读数据请求划分为多个读数据子请求，然后基于读数据子请求的定位标识，将该多个读数据子请求发送至各自对应的目标扩展内存控制器的命令队列，在完成发送后，各个目标扩展内存控制器并行从各自的命令队列中获取到读数据子请求，然后并行从各自对应的目标扩展内存中读取自身获取到的读数据子请求对应的数据片段，完成数据读取操作后将读取到的所有数据片段按顺序打包后发送至CPU。通过本申请提供的一种数据读写方法，可以实现多个扩展内存并行的进行数据读写操作，从而提高扩展内存的访问效率，同时基于一个总的数据读写请求拆分为的多个数据读写子请求可以均匀分配给各个扩展内存，从而使得扩展内存的负载均衡。同时可以通过进一步增加扩展内存的数量，以此进一步提高扩展内存的带宽利用率。此外逻辑管理控制器的增加，实现统一管理各个扩展内存的地址空间，避免了CPU直接对扩展内存进行管理所造成的资源的消耗，并起到隔离作用，保障了数据的安全性。基于同一发明构思，本申请第二方面提供一种数据读写系统，如图6所示，所述系统600包括：中央处理器601、逻辑管理控制器602、扩展内存控制器603和扩展内存604，所述逻辑管理控制器602包括请求解析模块6021、地址解码模块6022、请求分解模块6023，请求分配模块6024；所述中央处理器601，用于发起针对目标数据的数据读写请求；所述逻辑管理控制器602中的所述请求解析模块6021，用于对接收的针对目标数据的数据读写请求进行解析，获得本地命令；所述逻辑管理控制器602中的所述地址解码模块6022，用于对所述本地命令进行命令解析，确定进行数据读写的位置信息；所述逻辑管理控制器602中的所述请求分解模块6023，用于根据所述位置信息，生成多个数据读写子请求；所述逻辑管理控制器602中的所述请求分配模块6024，用于将所述多个数据读写子请求发送至各个目标扩展内存控制器；扩展内存控制器603中的各个目标扩展内存控制器，用于根据各自接收的数据读写子请求，控制各自对应的目标扩展内存并行执行对应的数据读写操作。可选的，所述地址解码模块6022，包括：第一地址解码模块，用于在所述数据读写请求为写数据子请求的情况下，通过对所述本地命令进行命令解析，确定进行数据写入的逻辑起始地址、数据长度和数据内容。可选的，所述请求分解模块6023，包括：第一数据确定模块，用于根据所述位置信息中的数据长度，确定进行数据写入的写入次数；第二数据确定模块，用于根据所述写入次数和扩展内存的总数，确定用于进行数据写入的目标扩展内存的目标数量；目标扩展内存确定模块，用于根据所述逻辑起始地址和所述目标数量，确定用于进行数据写入的各个目标扩展内存；写数据子请求生成模块，用于根据所述写入次数和所述各个目标扩展内存，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求，其中，定位标识用于确定写数据子请求发送至的目标扩展内存控制器。可选的，所述目标扩展内存确定模块，包括：第一目标扩展内存确定模块，用于根据所述逻辑起始地址，将所述逻辑起始地址对应的扩展内存确定为目标扩展内存；第二目标扩展内存确定模块，用于根据各个扩展内存的空闲程度和所述目标数量，将空闲程度排序靠前的多个扩展内存确定为目标扩展内存，以获得目标数量的目标扩展内存。可选的，所述写数据子请求生成模块，包括：写数据子请求数量确定模块，用于根据所述写入次数和目标数量，确定所述各个目标扩展内存各自对应的写数据子请求数量；逻辑起始地址确定模块，用于根据目标扩展内存对应的写数据子请求数量和单次数据写入量，在所述目标扩展内存中确定与所述目标扩展内存对应的写数据子请求数量相同的多个逻辑起始地址；写数据子请求生成子模块，用于根据确定的所有的逻辑起始地址和单次数据写入量，生成数量与所述写入次数相同的具有定位标识的多个写数据子请求。可选的，所述请求分配模块6024，包括：写数据子请求分配模块，用于根据所述多个写数据子请求各自的定位标识，将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器。可选的，所述写数据子请求分配模块，包括：第一写数据子请求分配模块，用于根据所述多个写数据子请求各自的定位标识，将所述多个写数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；第二写数据子请求分配模块，用于在完成所有写数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的写数据子请求。可选的，所述系统600还包括：数据片段划分模块，用于根据所述写入次数，将所述数据内容划分为数量与所述写入次数相同的多个数据片段；数据片段缓存模块，用于根据确定的所述各个目标扩展内存，将所述多个数据片段依次循环存储至所述各个目标扩展内存各自的缓存区。可选的，所述扩展内存控制器603，包括：请求获取模块，用于并行获取命令队列中的写数据子请求；执行模块，用于根据并行获取的命令队列中的写数据子请求，对对应的缓存区中的对应数据片段并行执行写操作，以将所述目标数据写入扩展内存。可选的，所述第一数据确定模块，包括：单次数据写入量确定模块，用于根据所述位置信息中的数据长度，确定单次数据写入量；写入次数确定模块，用于根据所述位置信息中的数据长度和所述单次数据写入量，确定进行数据写入的写入次数。可选的，所述第二数据确定模块，包括：关系对比模块，用于确定所述写入次数与扩展内存的总数之间的关系；第一目标数量确定模块，用于在所述写入次数大于或等于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为所有扩展内存的总数；第二目标数据确定模块，用于在所述写入次数小于所述总数的情况下，确定用于进行数据写入的目标扩展内存的目标数量为与所述写入次数相等的数量。可选的，所述地址解码模块，包括：第二地址解码模块，用于在所述数据读写请求为读数据子请求的情况下，通过对所述本地命令进行命令解析，确定进行数据读取的逻辑起始地址和数据长度。可选的，所述请求分解模块，包括：第三数据确定模块，用于根据所述逻辑起始地址和所述数据长度，确定所需读取的数据所包括的所有数据片段各自所在的第一逻辑起始地址和第一数据长度；读数据子请求生成模块，用于根据所有数据片段各自所在的第一逻辑起始地址和数据长度，生成具有定位标识的多个读数据子请求，其中，定位标识用于确定读数据子请求发送至的目标扩展内存控制器。可选的，所述系统600还包括：目标扩展内存确定子模块，用于根据所有数据片段各自所在的第一逻辑起始地址，确定用于数据读取的各个目标扩展内存；所述请求分配模块6024，包括：读数据子请求分配模块，用于根据所述多个读数据子请求各自的定位标识，将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器。可选的，所述读数据子请求分配模块，包括：第一读数据子请求分配模块，用于根据所述多个读数据子请求各自的定位标识，将所述多个读数据子请求分别发送至各自对应的目标扩展内存控制器的命令队列；第二读数据子请求分配模块，用于在完成所有读数据子请求的发送情况下，通知各个目标扩展内存控制器读取各自命令队列中的读数据子请求。可选的，所述扩展内存控制器603，包括：请求获取模块，用于并行获取各自命令队列中的读数据子请求；执行模块，用于根据获取的各自命令队列中的读数据子请求，控制所述各个目标扩展内存控制器对各自对应的目标扩展内存并行执行读操作，并将读取的数据存储至各自对应的缓存区；所述逻辑管理控制器中的数据合成模块，用于在完成所有读数据操作的情况下，基于读取的数据片段组成目标数据的顺序，对读取的所有数据片段进行排序打包，获得目标数据，以及用于将所述目标数据发送至CPU。在本实施例中，如图3所示，图3示出了本申请提供的一种数据读写系统的硬件架构图，主要涉及的模块包括中央处理器用于发起数据读写请求，协议实现模块用于实现CXL协议，逻辑管理控制器用于实现本申请提供的一种数据读写方法中的相关步骤，多个扩展内存控制器用于控制各自对应的扩展内存执行对应的数据读写操作。其中逻辑管理控制器包括至少四分部的核心模块，分别为请求解析模块，用于基于CXL协议对基于CXL.mem发起的数据读写请求进行数据包解析，得到内部的具体数据内容，也就是获得对应的本地命令；地址解析模块和请求分解模块则用于对本地命令进行命令解析得到本地命令中核心的用于生成大量数据读写子请求的核心数据信息，并基于获得的该核心数据信息生成多个数据读写子请求；请求分配模块由上述的读数据子请求分配模块和写数据子请求分配模块组成，用于对生成的多个数据读写子请求分配至相对应的扩展内存控制器中；数据合成模块，用于在完成所有读数据操作的情况下，对读取的所有数据片段进行排序打包，获得CPU需要读取的目标数据。基于同一发明构思，在本申请实施例的第三方面，如图7所示，本申请提供一种电子设备，该电子设备700包括：处理器701、存储器702及存储在所述存储器上并在所述处理器上运行的计算机程序，所述计算机程序被所述处理器执行时实现如本申请第一方面所述的数据读写方法中的步骤。基于同一发明构思，在本申请实施例的第四方面，本申请提供一种计算机可读存储介质，所述计算机可读存储介质上存储有计算机程序，所述计算机程序被处理器执行时实现本申请第一方面所述的数据读写方法中的步骤。在本实施例中，上述本申请提供的一种计算机可读存储介质可以是非易失性计算机可读存储介质，也可以是易失性计算机可读存储介质。在上述实施例中，可以全部或部分地通过软件、硬件、固件或者其任意组合来实现。当使用软件实现时，可以全部或部分地以计算机程序产品的形式实现。所述计算机程序产品包括一个或多个计算机指令。在计算机上加载和执行所述计算机程序指令时，全部或部分地产生按照本申请实施例所述的流程或功能。所述计算机可以是通用计算机、专用计算机、计算机网络、或者其他可编程装置。所述计算机指令可以存储在计算机非易失性可读存储介质中，或者从一个计算机非易失性可读存储介质向另一个计算机非易失性可读存储介质传输，例如，所述计算机指令可以从一个网站站点、计算机、服务器或数据中心通过有线）或无线方式向另一个网站站点、计算机、服务器或数据中心进行传输。所述计算机非易失性可读存储介质可以是计算机能够存取的任何可用介质或者是包含一个或多个可用介质集成的服务器、数据中心等数据存储设备。所述可用介质可以是磁性介质，、光介质、或者半导体介质等。需要说明的是，在本文中，诸如第一和第二等之类的关系术语仅仅用来将一个实体或者操作与另一个实体或操作区分开来，而不一定要求或者暗示这些实体或操作之间存在任何这种实际的关系或者顺序。而且，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、物品或者设备中还存在另外的相同要素。本说明书中的各个实施例均采用相关的方式描述，各个实施例之间相同相似的部分互相参见即可，每个实施例重点说明的都是与其他实施例的不同之处。尤其，对于系统实施例而言，由于其基本相似于方法实施例，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。以上所述仅为本申请的较佳实施例而已，并非用于限定本申请的保护范围。凡在本申请的精神和原则之内所作的任何修改、等同替换、改进等，均包含在本申请的保护范围内。
