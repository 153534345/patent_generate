标题title
RISC-V的可视化向量编程方法、系统及相关设备
摘要abst
本发明适用于RISC‑V向量编程技术领域，尤其涉及一种RISC‑V的可视化向量编程方法、系统及相关设备，所述方法包括：初始化RISC‑V的向量指令集的计算组件；通过用户界面窗口获取用户输入的编程指令；通过计算组件后台执行编程指令，并获取执行结果；根据所述执行结果对所述计算组件的使用状态进行标记；将所述使用状态和所述执行结果输出。本发明的方法通过对向量计算特有的执行结果对参与向量计算的寄存器等计算单元在可视界面下进行标记并显示，能够直观地对开发人员展示向量编程的结果，并提供各个计算单元性能反馈，从而降低向量计算软件开发的难度，并提升向量计算软件开发的效率。
权利要求书clms
1.一种RISC-V的可视化向量编程方法，所述可视化向量编程方法用于RISC-V的向量指令集RVV的编程，其特征在于，所述可视化向量编程方法包括以下步骤：初始化RISC-V的向量指令集的计算组件；通过用户界面窗口获取用户输入的编程指令；通过所述计算组件后台执行所述编程指令，并获取执行结果；根据所述执行结果对所述计算组件的使用状态进行标记；将所述使用状态和所述执行结果输出。2.如权利要求1所述的RISC-V的可视化向量编程方法，其特征在于，所述编程指令为汇编语言指令。3.如权利要求1所述的RISC-V的可视化向量编程方法，其特征在于，所述编程指令为基于RVV Intrinsic编程接口的编程语言指令。4.如权利要求1所述的RISC-V的可视化向量编程方法，其特征在于，所述计算组件包括指令组件和硬件寄存器组件。5.如权利要求4所述的RISC-V的可视化向量编程方法，其特征在于，根据所述执行结果对所述计算组件的使用状态进行标记的步骤，包括以下子步骤：将所述执行结果表示为寄存器地址；根据所述寄存器地址，对参与所述执行结果的运算的所述指令组件进行标记；对参与所述执行结果的运算的所述硬件寄存器组件进行标记。6.如权利要求1所述的RISC-V的可视化向量编程方法，其特征在于，将所述使用状态和所述执行结果输出的方式为通过所述用户界面窗口进行的可视化输出。7.一种RISC-V的可视化向量编程系统，所述可视化向量编程系统用于RISC-V的向量指令集RVV的编程，其特征在于，所述可视化向量编程系统包括：初始化模块，用于初始化RISC-V的向量指令集的计算组件；用户界面模块，用于通过用户界面窗口获取用户输入的编程指令；执行模块，用于通过所述计算组件后台执行所述编程指令，并获取执行结果；标记模块，用于根据所述执行结果对所述计算组件的使用状态进行标记；输出模块，用于将所述使用状态和所述执行结果输出。8.一种计算机设备，其特征在于，包括：存储器、处理器及存储在所述存储器上并可在所述处理器上运行的RISC-V的可视化向量编程程序，所述处理器执行所述RISC-V的可视化向量编程程序时实现如权利要求1-6中任意一项所述的RISC-V的可视化向量编程方法中的步骤。9.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质上存储有RISC-V的可视化向量编程程序，所述RISC-V的可视化向量编程程序被处理器执行时实现如权利要求1-6中任意一项所述的RISC-V的可视化向量编程方法中的步骤。
说明书desc
技术领域本发明适用于RISC-V向量编程技术领域，尤其涉及一种RISC-V的可视化向量编程方法、系统及相关设备。背景技术向量处理器是处理器通过数据并行提升性能的一种设计，RISC-V是一个基于精简指令集原则的开源指令集架构，RISC-V指令集已经发布RVV SEPC用以支持RISC-V指令集的处理器做向量计算。然而，相对于传统处理器技术中的标量计算，向量计算有着更高的抽象逻辑，表现为一个汇编语句，包含了一系列的操作，例如：数据的在确定顺序下进行存取、数据掩码的操作和使用，这些操作使得向量指令相对于现有的标量指令来直接确定运算结果的方式要困难很多，需要编程人员牢记向量模块的控制配置、寄存器数据状态、掩码的操作和使用等全局信息，因此向量指令的使用难度比标量指令的使用难度高出很多；同时，相对于标量计算，向量计算指令数与实际的机器周期数存在很大差异，这不利于在开发过程中计算一段汇编指令的性能。在人工智能兴起、传统数据处理加强的技术潮流下，向量计算的应用必将占据较大的市场份额，这就导致向量计算的广泛应用与向量指令使用难度之间存在着矛盾。因此，有必要提出一种更方便快捷的向量编程方法来解决上述问题。发明内容本发明提供一种RISC-V的可视化向量编程方法、系统及相关设备，旨在解决现有技术对于RISC-V的向量编程较难、使得编程人员工作效率低的问题。第一方面，本发明提供一种RISC-V的可视化向量编程方法，所述可视化向量编程方法用于RISC-V的向量指令集RVV的编程，所述可视化向量编程方法包括以下步骤：初始化RISC-V的向量指令集的计算组件；通过用户界面窗口获取用户输入的编程指令；通过所述计算组件后台执行所述编程指令，并获取执行结果；根据所述执行结果对所述计算组件的使用状态进行标记；将所述使用状态和所述执行结果输出。更进一步地，所述编程指令为汇编语言指令。更进一步地，所述编程指令为基于RVV Intrinsic编程接口的编程语言指令。更进一步地，所述计算组件包括指令组件和硬件寄存器组件。更进一步地，根据所述执行结果对所述计算组件的使用状态进行标记的步骤，包括以下子步骤：将所述执行结果表示为寄存器地址；根据所述寄存器地址，对参与所述执行结果的运算的所述指令组件进行标记；对参与所述执行结果的运算的所述硬件寄存器组件进行标记。更进一步地，将所述使用状态和所述执行结果输出的方式为通过所述用户界面窗口进行的可视化输出。第二方面，本发明还提供一种RISC-V的可视化向量编程系统，所述可视化向量编程系统用于RISC-V的向量指令集RVV的编程，所述可视化向量编程系统包括：初始化模块，用于初始化RISC-V的向量指令集的计算组件；用户界面模块，用于通过用户界面窗口获取用户输入的编程指令；执行模块，用于通过所述计算组件后台执行所述编程指令，并获取执行结果；标记模块，用于根据所述执行结果对所述计算组件的使用状态进行标记；输出模块，用于将所述使用状态和所述执行结果输出。第三方面，本发明还提供一种计算机设备，包括：存储器、处理器及存储在所述存储器上并可在所述处理器上运行的RISC-V的可视化向量编程程序，所述处理器执行所述RISC-V的可视化向量编程程序时实现如上述实施例中任意一项所述的RISC-V的可视化向量编程方法中的步骤。第四方面，本发明还提供一种计算机可读存储介质，所述计算机可读存储介质上存储有RISC-V的可视化向量编程程序，所述RISC-V的可视化向量编程程序被处理器执行时实现如上述实施例中任意一项所述的RISC-V的可视化向量编程方法中的步骤。本发明所达到的有益效果，在于提出了一种针对RISC-V的向量编程环境下的可视化编程方法，该方法通过对向量计算特有的执行结果对参与向量计算的寄存器等计算单元在可视界面下进行标记并显示，能够直观地对开发人员展示向量编程的结果，并提供各个计算单元性能反馈，从而降低向量计算软件开发的难度，并提升向量计算软件开发的效率。附图说明图1是本发明实施例提供的RISC-V的可视化向量编程方法的步骤流程框图；图2是现有技术中向量编程由RISC-V处理器通过向量计算执行得到的结果示例；图3是本发明实施例提供的指令组件的标记示意图；图4是本发明实施例提供的寄存器地址计算示意图；图5是本发明实施例提供的用户界面窗口的示意图；图6是本发明实施例提供的RISC-V的可视化向量编程系统的结构示意图；图7是本发明实施例提供的计算机设备的结构示意图。具体实施方式为了使本发明的目的、技术方案及优点更加清楚明白，以下结合附图及实施例，对本发明进行进一步详细说明。应当理解，此处所描述的具体实施例仅仅用以解释本发明，并不用于限定本发明。请参照图1，图1是本发明实施例提供的RISC-V的可视化向量编程方法的步骤流程框图，所述可视化向量编程方法用于RISC-V的向量指令集RVV的编程，所述可视化向量编程方法包括以下步骤：S101、初始化RISC-V的向量指令集的计算组件。本发明实施例中，所述计算组件包括指令组件和硬件寄存器组件。具体的，所述计算组件主要指的是RISC-V提供的RVV SPEC中的组件，根据指令组件和硬件寄存器组件的来进行分类，所述指令组件包括vreg、vmask，所述硬件寄存器组件包括vlen、elen、vl、vstart、EEW、SEW、VLMAX、AVL、EMUL、LMUL。S102、通过用户界面窗口获取用户输入的编程指令。本发明实施例中，所述编程指令为汇编语言指令。由于向量编程更具体的是指RISC-V指令集处理器所执行程序的编程，对于该编程环境下的语言要求为汇编语言。此外，本发明实施例还可以基于RVV Intrinsic的函数设计来实现编程语言的输入，RVVIntrinsic是一种在RISC-V环境下使用高级编程语言，如C或C++来直接调用汇编语言的接口或映射，通过该接口可以在编程时以引入头文件的方式，使用高级语言来直接访问需要汇编语言实现的向量编程指令，从而降低向量编程的复杂度。S103、通过所述计算组件后台执行所述编程指令，并获取执行结果。本发明实施例中涉及的所述计算组件对于用户，即编程人员来说是不可见的，而本发明实施例构建了用户界面窗口给用户作为指令输入窗口，并采用传入后台的计算组件即时执行的方式来获取编程的执行结果。S104、根据所述执行结果对所述计算组件的使用状态进行标记。本发明实施例中，根据所述执行结果对所述计算组件的使用状态进行标记的步骤，包括以下子步骤：S1041、将所述执行结果表示为寄存器地址；S1042、根据所述寄存器地址，对参与所述执行结果的运算的所述指令组件进行标记；S1043、对参与所述执行结果的运算的所述硬件寄存器组件进行标记。具体的，请参照图2，图2是现有技术中向量编程由RISC-V处理器通过向量计算执行得到的结果示例，可以看出，向量计算的结果由多组寄存器地址组成，其表示上述计算组件的寄存器的具体取值，然而，这样的执行结果是不利于编程人员观察所编写程序的执行效果的，即对于其中执行的计算组件不能直观地反馈出来。对此，本发明实施例在步骤S104中将所述执行结果表示为寄存器地址，并根据RISC-V中RVV SPEC的标准对执行结果进行分析。更具体的，请参照图3，图3是本发明实施例提供的指令组件的标记示意图，由于在RVV SPEC的中的指令组件和硬件寄存器组件通过特殊的运算过程得到如图2所示的寄存器地址。实施过程中，可以通过分析具体的寄存器地址来得到具体的参与了向量计算的组件，如图4所示，图4中所示的寄存器地址分为三个部分，包括头部、中部、尾部，这些部分是可以根据上述实施例中的硬件寄存器组件的值来确定的，例如，对于一个确定的寄存器地址元素x，其寄存器地址头部由0开始、vstart的值结束，中部由vstart的值开始、vl的值结束，尾部由vl的值开始、VLMAX/VLEN/SEW的最大值结束。其中，寄存器地址的中部可以由掩码mask来进行对应计算，对于一个寄存器地址元素x，其掩码mask可以由其元素中的非掩码部分或对预先设置的掩码部分进行赋值来确定，然后根据掩码，通过将元素中参与向量计算的部分和不参与向量计算的部分进行区分，再通过先后排列就可以得到中部的值。也就是说，本发明实施例在基于指令组件和硬件寄存器组件的情况下，可以根据需要选择运算方法对参与向量计算的组件进行确定。示例性的，上述各值的计算过程，根据其定义，可以用以下表达式进行表示：prestart = ；body =；tail = )；mask = unmasked || v0.mask == 1；active = body&amp;&amp;mask；inactive = body&amp;&amp;!mask。S105、将所述使用状态和所述执行结果输出。本发明实施例中，将所述使用状态和所述执行结果输出的方式为通过所述用户界面窗口进行的可视化输出。本发明实施例的一种用户界面窗口的实现方式如图5所示，为了提高数据的可见程度，并利于用户使用，可以将包含输入窗口、组件展示窗口和性能监测窗口等在内的窗口组件设置在所述用户界面窗口中，其中，输入窗口还可以设计集成控制数据的计算过程的可拖拽窗口功能、以及给出推荐的汇编指令和执行顺序的功能；性能监测窗口可以提供包含执行结果在内的多个扩展的分析结果，包括但不限于：运行的指令数，实际运行周期数，实际运行的最高频率，实际运行的功耗，实际运行的内存占用预估等，例如图5中的vreg值、内存值等窗口。由于本发明实施例中的编程指令的执行是后台进行的，因此本发明实施例中的所述用户界面窗口也可以通过如客户端程序等方式来实现。本发明所达到的有益效果，在于提出了一种针对RISC-V的向量编程环境下的可视化编程方法，该方法通过对向量计算特有的执行结果对参与向量计算的寄存器等计算单元在可视界面下进行标记并显示，能够直观地对开发人员展示向量编程的结果，并提供各个计算单元性能反馈，从而降低向量计算软件开发的难度，并提升向量计算软件开发的效率。本发明实施例还提供一种RISC-V的可视化向量编程系统，请参照图6，图6是本发明实施例提供的RISC-V的可视化向量编程系统的结构示意图，所述RISC-V的可视化向量编程系统200用于RISC-V的向量指令集RVV的编程，所述RISC-V的可视化向量编程系统200包括：初始化模块201，用于初始化RISC-V的向量指令集的计算组件；用户界面模块202，用于通过用户界面窗口获取用户输入的编程指令；执行模块203，用于通过所述计算组件后台执行所述编程指令，并获取执行结果；标记模块204，用于根据所述执行结果对所述计算组件的使用状态进行标记；输出模块205，用于将所述使用状态和所述执行结果输出。所述RISC-V的可视化向量编程系统200能够实现如上述实施例中的RISC-V的可视化向量编程方法中的步骤，且能实现同样的技术效果，参上述实施例中的描述，此处不再赘述。本发明实施例还提供一种计算机设备，请参照图7，图7是本发明实施例提供的计算机设备的结构示意图，所述计算机设备300包括：存储器302、处理器301及存储在所述存储器302上并可在所述处理器301上运行的RISC-V的可视化向量编程程序。所述处理器301调用所述存储器302存储的RISC-V的可视化向量编程程序，执行本发明实施例提供的RISC-V的可视化向量编程方法中的步骤，请结合图1，具体包括以下步骤：S101、初始化RISC-V的向量指令集的计算组件。所述计算组件包括指令组件和硬件寄存器组件。S102、通过用户界面窗口获取用户输入的编程指令。本发明实施例中，所述编程指令为汇编语言指令。S103、通过所述计算组件后台执行所述编程指令，并获取执行结果。S104、根据所述执行结果对所述计算组件的使用状态进行标记。本发明实施例中，根据所述执行结果对所述计算组件的使用状态进行标记的步骤，包括以下子步骤：S1041、将所述执行结果表示为寄存器地址；S1042、根据所述寄存器地址，对参与所述执行结果的运算的所述指令组件进行标记；S1043、对参与所述执行结果的运算的所述硬件寄存器组件进行标记。S105、将所述使用状态和所述执行结果输出。本发明实施例中，将所述使用状态和所述执行结果输出的方式为通过所述用户界面窗口进行的可视化输出。本发明实施例提供的计算机设备300能够实现如上述实施例中的RISC-V的可视化向量编程方法中的步骤，且能实现同样的技术效果，参上述实施例中的描述，此处不再赘述。本发明实施例还提供一种计算机可读存储介质，所述计算机可读存储介质上存储有RISC-V的可视化向量编程程序，该RISC-V的可视化向量编程程序被处理器执行时实现本发明实施例提供的RISC-V的可视化向量编程方法中的各个过程及步骤，且能实现相同的技术效果，为避免重复，这里不再赘述。本领域普通技术人员可以理解实现上述实施例方法中的全部或部分流程，是可以通过RISC-V的可视化向量编程程序来指令相关的硬件来完成，所述的程序可存储于一计算机可读取存储介质中，该程序在执行时，可包括如上述各方法的实施例的流程。其中，所述的存储介质可为磁碟、光盘、只读存储记忆体或随机存取存储器等。需要说明的是，在本文中，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者装置不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者装置所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括该要素的过程、方法、物品或者装置中还存在另外的相同要素。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到上述实施例方法可借助软件加必需的通用硬件平台的方式来实现，当然也可以通过硬件，但很多情况下前者是更佳的实施方式。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台终端执行本发明各个实施例所述的方法。上面结合附图对本发明的实施例进行了描述，所揭露的仅为本发明较佳实施例而已，但是本发明并不局限于上述的具体实施方式，上述的具体实施方式仅仅是示意性的，而不是限制性的，本领域的普通技术人员在本发明的启示下，在不脱离本发明宗旨和权利要求所保护的范围情况下，还可做出很多形式用等同变化，均属于本发明的保护之内。
