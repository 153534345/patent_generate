标题title
一种数据处理方法、装置、电子设备及存储介质
摘要abst
本申请示出了一种数据处理方法、装置、电子设备及存储介质。将JS语言的目标代码需要引用或者依赖的公共基础类库单独设置，不将公共基础类库嵌入JS语言的目标代码中，例如，将公共基础类库设置在开发环境中，开发人员在开发JS语言的目标代码或者从其他语言的代码转译JS语言的目标代码的情况下，得到的JS语言的目标代码可以不具备公共基础类库，在需要对JS语言的目标代码编译得到可执行文件的情况下，可以根据JS语言的目标代码与事先基于JS语言开发的公共基础类库获取可执行文件，这样，可执行文件中既有JS语言的目标代码的功能也具有公共基础类库的功能，如此可以降低JS语言的目标代码的体积以及冗余度。
权利要求书clms
1.一种数据处理方法，其特征在于，所述方法包括：生成DART语言的源代码的抽象语法树；在所述抽象语法树中筛选目标节点，所述目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点；对所述目标节点的代码转译，得到JAVASCRIPT语言的目标代码；根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。2.根据权利要求1所述的方法，其特征在于，在所述抽象语法树中筛选目标节点，包括：在所述抽象语法树中查找具有UI属性的节点，并在所述抽象语法树中查找所述具有UI属性的节点级联的所有上级节点；根据所述具有UI属性的节点以及所述上级节点获取所述UI相关节点。3.根据权利要求2所述的方法，其特征在于，在所述抽象语法树中查找具有UI属性的节点，包括：在所述抽象语法树中查找属性中具有预设UI关键词的节点。4.根据权利要求3所述的方法，其特征在于，所述预设UI关键词至少包括State。5.根据权利要求1所述的方法，其特征在于，在所述抽象语法树中筛选目标节点，包括：在抽象语法树中查找具有数据处理逻辑属性的库文件；获取所述库文件中定义的所述库文件级别的变量和函数，获取所述库文件中定义的类，获取所述库文件中定义的类所依赖的类；至少根据所述变量、所述函数、所述库文件中定义的类以及所述库文件中定义的类所依赖的类获取数据处理逻辑相关节点。6.根据权利要求5所述的方法，其特征在于，在抽象语法树中查找具有数据处理逻辑属性的库文件，包括：在抽象语法树中查找属性中具有预设数据处理逻辑的关键词的节点。7.根据权利要求6所述的方法，其特征在于，所述预设数据处理逻辑的关键词至少包括part of。8.根据权利要求5所述的方法，其特征在于，获取所述库文件中定义的类所依赖的类，包括：根据预设关联指令获取所述库文件的关联文件；获取所述关联文件中的依赖指令；在所述依赖指令中包括被依赖的类的类名的情况下，根据所述类名获取所述被依赖的类的路径信息；根据所述路径信息获取所述库文件中定义的类所依赖的类。9.根据权利要求8所述的方法，其特征在于，所述预设关联指令包括part指令；所述关联文件包括part文件；所述依赖指令包括import指令。10.根据权利要求8所述的方法，其特征在于，根据所述类名获取所述被依赖的类的路径信息，包括：根据“.packages”文件将所述类名转换为所述路径信息。11.根据权利要求1所述的方法，其特征在于，所述公共基础类库至少包括以下至少一种：Date类、Duration类、Iterable类、List类、Map类、Regex类、Set类、与类的继承相关的辅助库以及对象基类Object上的公共函数。12.一种数据处理装置，其特征在于，所述装置包括：生成模块，用于生成DART语言的源代码的抽象语法树；筛选模块，用于在所述抽象语法树中筛选目标节点，所述目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点；转译模块，用于对所述目标节点的代码转译，得到JAVASCRIPT语言的目标代码；获取模块，用于根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。13.一种电子设备，其特征在于，所述电子设备包括：处理器；用于存储处理器可执行指令的存储器；其中，所述处理器被配置为执行如权利要求1-11任一项所述的数据处理方法。14.一种非临时性计算机可读存储介质，当所述存储介质中的指令由电子设备的处理器执行时，使得电子设备能够执行如权利要求1-11任一项所述的数据处理方法。
说明书desc
技术领域本申请涉及计算机技术领域，特别是涉及一种数据处理方法、装置、电子设备及存储介质。背景技术开发人员在为某一任务编写计算机程序代码时，有时候可以编写DART语言的源代码，然而，有时候由于业务需求，还需要为该任务编写其他语言的代码，例如，JAVASCRIPT的代码等。在这种情况下，为了节省开发人员的工作量，可以自动化地将DART语言的源代码转译成JAVASCRIPT语言的目标代码，例如，可以通过DART语言的SDK中的自带工具DART2JAVASCRIPT来将DART语言的源代码转译成JAVASCRIPT语言的目标代码。其中，DART2JAVASCRIPT可以将DART语言的源代码转换为字节码，然后根据字节码生成JAVASCRIPT语言的目标代码。然而，发明人发现，上述流程存在如下缺陷：一方面，DART2JAVASCRIPT会根据DART语言的源代码中main入口函数检测DART语言的源代码中的被依赖的公共基础类，生成的JAVASCRIPT语言的目标代码中包括被依赖的公共基础类中的被使用的函数，而不包括被依赖的公共基础类中的未被使用的函数，这样使得JAVASCRIPT语言的目标代码执行更高效，但是由于生成的JAVASCRIPT语言的目标代码中包括被依赖的公共基础类中的被使用的函数，从而会导致生成的JAVASCRIPT语言的目标代码的冗余且体积大。又一方面，如果DART语言的源代码中依赖了库，但是如果依赖的库与JAVASCRIPT语言不兼容，则会导致在根据字节码生成JAVASCRIPT语言的目标代码的过程中报错，且最终无法生成可用的JAVASCRIPT语言的目标代码。发明内容本申请示出了一种数据处理方法、装置、电子设备及存储介质。第一方面，本申请示出了一种数据处理方法，所述方法包括：生成DART语言的源代码的抽象语法树；在所述抽象语法树中筛选目标节点，所述目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点对所述目标节点的代码转译，得到JAVASCRIPT语言的目标代码；根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。在一个可选的实现方式中，在所述抽象语法树中筛选目标节点，包括：在所述抽象语法树中查找具有UI属性的节点，并在所述抽象语法树中查找所述具有UI属性的节点级联的所有上级节点；根据所述具有UI属性的节点以及所述上级节点获取所述UI相关节点。在一个可选的实现方式中，在所述抽象语法树中查找具有UI属性的节点，包括：在所述抽象语法树中查找属性中具有预设UI关键词的节点。在一个可选的实现方式中，所述预设UI关键词至少包括State。在一个可选的实现方式中，在所述抽象语法树中筛选目标节点，包括：在抽象语法树中查找具有数据处理逻辑属性的库文件；获取所述库文件中定义的所述库文件级别的变量和函数，获取所述库文件中定义的类，获取所述库文件中定义的类所依赖的类；至少根据所述变量、所述函数、所述库文件中定义的类以及所述库文件中定义的类所依赖的类获取数据处理逻辑相关节点。在一个可选的实现方式中，在抽象语法树中查找具有数据处理逻辑属性的库文件，包括：在抽象语法树中查找属性中具有预设数据处理逻辑的关键词的节点。在一个可选的实现方式中，所述预设数据处理逻辑的关键词至少包括part of。在一个可选的实现方式中，获取所述库文件中定义的类所依赖的类，包括：根据预设关联指令获取所述库文件的关联文件；获取所述关联文件中的依赖指令；在所述依赖指令中包括被依赖的类的类名的情况下，根据所述类名获取所述被依赖的类的路径信息；根据所述路径信息获取所述库文件中定义的类所依赖的类。在一个可选的实现方式中，所述预设关联指令包括part指令；所述关联文件包括part文件；所述依赖指令包括import指令。在一个可选的实现方式中，根据所述类名获取所述被依赖的类的路径信息，包括：根据“.packages”文件将所述类名转换为所述路径信息。在一个可选的实现方式中，所述公共基础类库至少包括以下至少一种：Date类、Duration类、Iterable类、List类、Map类、Regex类、Set类、与类的继承相关的辅助库以及对象基类Object上的公共函数。第二方面，本申请示出了一种数据处理装置，所述装置包括：生成模块，用于生成DART语言的源代码的抽象语法树；筛选模块，用于在所述抽象语法树中筛选目标节点，所述目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点；转译模块，用于对所述目标节点的代码转译，得到JAVASCRIPT语言的目标代码；获取模块，用于根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。在一个可选的实现方式中，筛选模块包括：第一查找单元，用于在所述抽象语法树中查找具有UI属性的节点，第二查找单元，用于在所述抽象语法树中查找所述具有UI属性的节点级联的所有上级节点；第一获取单元，用于根据所述具有UI属性的节点以及所述上级节点获取所述UI相关节点。在一个可选的实现方式中，第一查找单元具体用于：在所述抽象语法树中查找属性中具有预设UI关键词的节点。在一个可选的实现方式中，所述预设UI关键词至少包括State。在一个可选的实现方式中，筛选模块包括：第三查找单元，用于在抽象语法树中查找具有数据处理逻辑属性的库文件；第二获取单元，用于获取所述库文件中定义的所述库文件级别的变量和函数，第三获取单元，用于获取所述库文件中定义的类，第四获取单元，用于获取所述库文件中定义的类所依赖的类；第五获取单元，用于至少根据所述变量、所述函数、所述库文件中定义的类以及所述库文件中定义的类所依赖的类获取数据处理逻辑相关节点。在一个可选的实现方式中，第三查找单元具体用于：在抽象语法树中查找属性中具有预设数据处理逻辑的关键词的节点。在一个可选的实现方式中，所述预设数据处理逻辑的关键词至少包括part of。在一个可选的实现方式中，所述第四获取单元包括：第一获取子单元，用于根据预设关联指令获取所述库文件的关联文件；第二获取子单元，用于获取所述关联文件中的依赖指令；第三获取子单元，用于在所述依赖指令中包括被依赖的类的类名的情况下，根据所述类名获取所述被依赖的类的路径信息；第四获取子单元，用于根据所述路径信息获取所述库文件中定义的类所依赖的类。在一个可选的实现方式中，所述预设关联指令包括part指令；所述关联文件包括part文件；所述依赖指令包括import指令。在一个可选的实现方式中，所述第三获取子单元具体用于：根据“.packages”文件将所述类名转换为所述路径信息。在一个可选的实现方式中，所述公共基础类库至少包括以下至少一种：Date类、Duration类、Iterable类、List类、Map类、Regex类、Set类、与类的继承相关的辅助库以及对象基类Object上的公共函数。第三方面，本申请示出了一种电子设备，所述电子设备包括：处理器；用于存储处理器可执行指令的存储器；其中，所述处理器被配置为执行如第一方面所述的数据处理方法。第四方面，本申请示出了一种非临时性计算机可读存储介质，当所述存储介质中的指令由电子设备的处理器执行时，使得电子设备能够执行如第一方面所述的数据处理方法。第五方面，本申请示出了一种计算机程序产品，当所述计算机程序产品中的指令由电子设备的处理器执行时，使得电子设备能够执行如第一方面所述的数据处理方法。本申请提供的技术方案可以包括以下有益效果：公共基础类库是基于JAVASCRIPT语言开发的，如果在JAVASCRIPT语言的目标代码中嵌入公共基础类库，则会增加JAVASCRIPT语言的目标代码的冗余度以及体积。因此，为了避免增加的JAVASCRIPT语言的目标代码的冗余度以及体积，可以将JAVASCRIPT语言的目标代码需要引用或者依赖的公共基础类库单独设置，不将公共基础类库嵌入JAVASCRIPT语言的目标代码中，例如，将公共基础类库设置在开发环境中，开发人员在开发JAVASCRIPT语言的目标代码或者从其他语言的代码转译JAVASCRIPT语言的目标代码的情况下，得到的JAVASCRIPT语言的目标代码可以不具备公共基础类库，在需要对JAVASCRIPT语言的目标代码编译得到可执行文件的情况下，可以根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件，例如，在开发环境中，将JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库合并起来编译，得到可执行文件。这样，可执行文件中既有JAVASCRIPT语言的目标代码的功能也具有公共基础类库的功能，也即，使得根据JAVASCRIPT语言的目标代码生成的可执行文件具有公共基础类库的功能，例如，使得可执行文件可以引用公共基础类库的功能等。如此可以降低JAVASCRIPT语言的目标代码的体积以及冗余度。另外，由于公共基础类库是基于JAVASCRIPT语言开发的，因此，公共基础类库适用于JAVASCRIPT语言，又由于JAVASCRIPT语言可以应用于web领域，因此，公共基础类库可以应用于web领域。这样，无论DART语言的源代码是否依赖了公共基础类库对应的DART语言的库，在对DART语言的源代码转译的过程中，都可以忽略DART语言的源代码依赖的公共基础类库对应的DART语言的库，直接对DART语言的源代码中的除依赖的公共基础类库对应的DART语言的库以外的代码转译即可，在转译得到JAVASCRIPT语言的目标代码之后，可以再根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。如此，即使DART语言的源代码依赖了公共基础类库对应的DART语言的库，也可以避免在对DART语言的源代码转译的过程中报错，且最终转译得到的JAVASCRIPT语言的目标代码可用以及生成的可执行文件可用。以及，对于DART语言的源代码而言，只要其语法正确，即使DART语言的源代码中未依赖公共基础类库对应的DART语言的库而导致DART语言的源代码无法被正常编译，也可以对DART语言的源代码转译得到JAVASCRIPT语言的目标代码，可见，本申请的转译方案的适应面广，适应性强。以及，由于单独基于JAVASCRIPT语言开发了公共基础类库，因此，在对DART语言的源代码转译的过程中，可以不查找DART语言的源代码中的上述公共基础类库对应的DART语言的库，从而可以减少查找次数，进而提高转译效率。其次，由于JAVASCRIPT语言的目标代码中可以没有公共基础类库，使得JAVASCRIPT语言的目标代码与DART语言的源代码之间具有良好的参照性，便于开发人员对JAVASCRIPT语言的目标代码与DART语言的源代码对照检查以及二次开发等。附图说明图1是本申请的一种数据处理方法的步骤流程图。图2是本申请的一种数据处理装置的结构框图。图3是本申请示出的一种电子设备的框图。图4是本申请示出的一种电子设备的框图。具体实施方式为使本申请的上述目的、特征和优点能够更加明显易懂，下面结合附图和具体实施方式对本申请作进一步详细的说明。参照图1，示出了本申请的一种数据处理方法的步骤流程图，应用于电子设备，该方法具体可以包括如下步骤：在步骤S101中，生成DART语言的源代码的抽象语法树。在本申请中，在需要将DART语言的源代码转译的情况下，可以获取DART语言的源代码，然后生成DART语言的源代码的抽象语法树。其中，可以使用当前已存在的抽象语法树的生成方式生成DART语言的源代码的抽象语法树，本申请对生成抽象语法树的生成方法不做限定。在步骤S102中，在抽象语法树中筛选目标节点，目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点。在一个可能的场景中，开发人员开发的DART语言的源代码往往是为应用程序开发的，应用程序中的内容涉及至少两方面内容，与UI相关的内容以及底层的对数据处理的逻辑内容，因此，在转译时，可以在抽象语法树中筛选UI相关节点以及筛选数据处理逻辑相关节点。在本申请一个实施例中，在抽象语法树中筛选UI相关节点时，可以通过如下流程实现，包括：11)、在抽象语法树中查找具有UI属性的节点，并在抽象语法树中查找具有UI属性的节点级联的所有上级节点。其中，在抽象语法树中查找具有UI属性的节点时，可以在抽象语法树中查找属性中具有预设UI关键词的节点，预设UI关键词至少包括State等。在一个实施例中，抽象语法树中的节点的属性中包括节点本身的名称、节点级联的上级节点的名称以及节点级联的下级节点的名称等，因此，可以根据抽象语法树中的节点的属性中的节点级联的上级节点的名称，在抽象语法树中查找具有UI属性的节点级联的所有上级节点。或者，在另一个实施例中，抽象语法树中记录有节点之间的级联关系，因此，在抽象语法树中查找到具有UI属性的节点之后，可以根据抽象语法树中记录的节点之间的级联关系，在抽象语法树中查找具有UI属性的节点级联的所有上级节点。12)、根据具有UI属性的节点以及具有UI属性的节点级联的所有上级节点获取UI相关节点。在本申请一个实施例中，可以将具有UI属性的节点以及具有UI属性的节点级联的所有上级节点作为UI相关节点等。在本申请另一个实施例中，在抽象语法树中筛选数据处理逻辑相关节点时，可以通过如下流程实现，包括：21)、在抽象语法树中查找具有数据处理逻辑属性的库文件。获取库文件中定义的库文件级别的变量和函数，获取库文件中定义的类，获取库文件中定义的类所依赖的类。其中，在抽象语法树中查找具有数据处理逻辑属性的库文件时，可以在抽象语法树中查找属性中具有预设数据处理逻辑的关键词的节点。预设数据处理逻辑的关键词至少包括part of等，如此，库文件可以为part of文件等。以及，在获取库文件中定义的类所依赖的类时，可以根据预设关联指令获取库文件的关联文件。然后获取关联文件中的依赖指令。在依赖指令中包括被依赖的类的类名的情况下，根据该类名获取被依赖的类的路径信息，例如根据“.packages”文件将该类名转换为被依赖的类的路径信息。然后根据被依赖的类的路径信息获取库文件中定义的类所依赖的类。其中，在一个实施例中，预设关联指令可以包括part指令等。关联文件包括part文件等。依赖指令包括import指令等。22)、至少根据变量、函数、库文件中定义的类以及库文件中定义的类所依赖的类获取数据处理逻辑相关节点。在一个实施例中，可以将变量、函数、库文件中定义的类以及库文件中定义的类所依赖的类确定为数据处理逻辑相关节点。其中，在步骤S102中得到节点包括类定义节点，在步骤S102中得到节点的代码包括类定义的代码等。在步骤S103中，对目标节点的代码转译，得到JAVASCRIPT语言的目标代码。UI相关节点的代码以及数据处理逻辑相关节点的代码包括类的代码，在类的代码中，至少具有数据以及函数，数据可以包括变量等，函数用于在对变量赋值后，对赋的值按照特定的方式处理，得到处理结果。本申请中的对目标节点的代码转译的其中一种理解方式可以为：对UI相关节点的代码以及数据处理逻辑相关节点的代码中包括类的代码中的函数的代码转译等。对于类中的函数而言，其包括单条语句或者有多个语句组成的语句块等。在其包括语句块的情况下，可以将函数分别为多个语句，并对多个语句分别转译。函数的语句包括函数结构体以及函数表达式。结构体包括声明结构体、赋值结构体、循环结构体以及控制结构体等。不同的函数结构体对应的各自的语法规则往往不同，如此，对于任意一个函数而言，可以识别该函数的结构体以及函数表达式，根据该函数的结构体的语法规则对该函数的结构体进行转译，得到JAVASCRIPT语言的结构体，以及，对该函数的函数表达式转译，得到JAVASCRIPT语言的表达式，从而得到JAVASCRIPT语言的函数表示。对于其他每一个函数而言，同样如此。其中，针对具体的转译方式，可以参见当前已存在的方式，本申请对具体的转译方式不做限定。例如，在一个例子中，在转译的过程中，可以根据目标节点生成新的抽象语法树，根据DART语言的语法以及JAVASCRIPT语言的语法之间的差异，修改新的抽象语法树中的节点的代码，根据修改后的抽象语法树以及预设的JAVASCRIPT文件模板生成JAVASCRIPT语言的目标代码。其中，在一种方式中，DART2JAVASCRIPT在将DART语言的源代码转换为字节码的过程中，DART2JAVASCRIPT会对DART语言的源代码进行优化，例如，将常量表达式合并、代码内联、对寄存器优化以及删除DART语言的源代码中的未使用代码等，以使得最终得到的JAVASCRIPT语言的目标代码执行更高效，但是这样会导致最终得到的JAVASCRIPT语言的目标代码的语言逻辑结构与DART语言的源代码的语言逻辑结构之间差异较大，属于不利于人解读的结构，因此，JAVASCRIPT语言的目标代码的可读性较差，不利于开发人员对JAVASCRIPT语言的目标代码进行二次开发。在本申请中，在转译过程中，DART语言的源代码中的变量的名称等元素在JAVASCRIPT语言的目标代码中保留。且按照上述对函数的结构以及表达式分别转译的方式，可以降低最终得到的JAVASCRIPT语言的目标代码的语言逻辑结构与DART语言的源代码的语言逻辑结构之间的差异，由于DART语言是由开发人员编写的，则DART语言的源代码的语言逻辑结构往往是利于人解读的结构，如此，转译得到的JAVASCRIPT语言的目标代码的语言逻辑结构往往也是利于人解读的结构，JAVASCRIPT语言的目标代码的可读性较好，便于开发人员对JAVASCRIPT语言的目标代码的理解以及二次开发。在一个例子中，针对同一作用而言的字符串而言，在DART语言中支持使用的字符串与在JAVASCRIPT语言中支持使用的字符串不同。如此，可将DART语言的源代码中的特定的字符串转译为对应的JAVASCRIPT语言支持使用的字符串。例如，将dynamic转译为let、将var转译为let、将string转译为var、将int转译为var以及将void转译为function等。在另一个例子中，在DART语言的源代码中，如果存在索引值，则在索引值之前加入索引方法，索引方法包括“__op_idx__”等。在又一个例子中，在DART语言的源代码中，如果存在对对象字面量的定义，则在对象字面量的定义之前加入对象字面量的类型转译语句，以将对象字面量的类型转译为JAVASCRIPT语言支持的类型，对象字面量的类型转译语句包括“convertObjectLiteralToSetOrMap”。在又一个例子中，在DART语言的源代码中，如果存在定义的可选参数，则删除定义的可选参数之前的参数类型定义的字符串，例如，int、bool以及double等，以及，删除囊括可选参数的中括号等。在又一个例子中，在Dart语言的源代码中，if表达式通常用于数组对象声明时，动态控制数据对象的元素以及长度，此时需要把数组变量的值转译成立即执行函数；并在立即执行函数中把数组对象中的if表达式转译成三元操作符“？:”，如果if表达式的判定条件为假，使用特殊占位对象填充；之后对数组对象执行过滤操作，去除特殊占位对象；然后返回过滤后的结果。在又一个例子中，在创建对象的场景中，在Dart语言的源代码中，把class类定义转译成函数对象，类名称作为函数名称，在定义的函数对象上通过固定名称定义函数，其作用：实现类中定义的非静态成员变量。设置函数对象的原型链对象prototype为空对象，在函数对象的原型链对象上通过固定名称定义函数，其作用：对定义的非静态成员变量进行初始化，在函数定义中，检测函数执行上下文this是否与__global__相等，如果函数执行上下文this与__global__相等，则通过new关键字创建函数对象；创建时，通过arguments关键字获取函数参数并使用特殊键值标识。如果函数执行上下文this与__global__不相等，则检查函数参数是否包含定义的特殊键值标识。如果函数参数包含定义的特殊键值标识，则通过定义的特殊键值标识取出原始函数参数。如果函数参数包含定义的特殊键值标识，则使用arguments关键字作为原始函数参数。调用定义的函数，传入函数上下文this以及确定的原始函数参数。其中__global__由公共基础类库提供，其作用为__global__-JavaScript执行环境的全局对象。在又一个例子中，在子类调用父类的场景中，子类上定义的该函数需要首先调用父类上定义的该相同函数，传入执行上下文this作为参数。在子类对应的函数对象转译完成之后，调用inherit，传入父类和子类对应的函数对象。对于调用super关键字的成员函数，访问父类对应函数对象的原型链对象prototype中定义的同名方法，传入函数上下文this以及该成员函数的参数。如果类没有明确指定父类，则其父类为基础对象Object；需要对Object定义的非静态成员变量进行初始化，在公共基础类库中实现。其中，__global__、inherit均由公共基础类库提供，其作用为__global__-JavaScript执行环境的全局对象。inherit-指定类之间的继承关系。在又一个例子中，在定义类的静态成员变量和静态成员函数的场景中，类的静态成员变量以及方法直接定义在“class类定义转译成的函数对象”上。先定义类的静态成员函数，再定义类的静态成员变量。将类的静态成员变量转译成立即执行函数的形式。将立即执行函数执行上下文通过with关键字切换成class类定义转译成的函数对象。在又一个例子中，在涉及MAP基础类型的场景中，通过convertObjectLiteralToSetOrMap实用函数把字面量对象转译成基础类型库中定义的Map类型。通过索引操作符访问关联键值的语句转译成Map类型上的__op_idx__方法调用，调用参数为索引键。通过赋值操作符＝修改Map对象上关联键值的语句转译成Map类型上的__op_eq__方法调用，调用参数为索引键以及其关联值。其中，Map对象上的操作均在公共基础类库中实现，convertObjectLiteralToSetOrMap在基础类型库中实现。__op_idx__、__op_eq__以及Map支持的其它方法均在基础类型库中实现。在步骤S104中，根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。在本申请中，通常情况下，开发人员如果需要开发JAVASCRIPT语言的目标代码，则开发的JAVASCRIPT语言的目标代码往往需要引用或者依赖公共基础类库。其中，基于JAVASCRIPT语言开发的公共基础类库可以至少包括以下至少一种：Date类、Duration类、Iterable类、List类、Map类、Regex类、Set类、与类的继承相关的辅助库以及对象基类Object上的公共函数等。当然，根据实际情况还可以包括其他类型的类或者函数等，本申请对此不加以限定。在一个可能的情况中，JAVASCRIPT语言的目标代码可以包括公共基础类库中的部分内容，也可以不包括公共基础类库中的内容。公共基础类库是基于JAVASCRIPT语言开发的，如果在JAVASCRIPT语言的目标代码中嵌入公共基础类库，则会增加JAVASCRIPT语言的目标代码的冗余度以及体积。因此，为了避免增加的JAVASCRIPT语言的目标代码的冗余度以及体积，可以将JAVASCRIPT语言的目标代码需要引用或者依赖的公共基础类库单独设置，不将公共基础类库嵌入JAVASCRIPT语言的目标代码中，例如，将公共基础类库设置在开发环境中，开发人员在开发JAVASCRIPT语言的目标代码或者从其他语言的代码转译JAVASCRIPT语言的目标代码的情况下，得到的JAVASCRIPT语言的目标代码可以不具备公共基础类库，在需要对JAVASCRIPT语言的目标代码编译得到可执行文件的情况下，可以根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件，例如，在开发环境中，将JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库合并起来编译，得到可执行文件。这样，可执行文件中既有JAVASCRIPT语言的目标代码的功能也具有公共基础类库的功能，也即，使得根据JAVASCRIPT语言的目标代码生成的可执行文件具有公共基础类库的功能，例如，使得可执行文件可以引用公共基础类库的功能等。如此可以降低JAVASCRIPT语言的目标代码的体积以及冗余度。另外，由于公共基础类库是基于JAVASCRIPT语言开发的，因此，公共基础类库适用于JAVASCRIPT语言，又由于JAVASCRIPT语言可以应用于web领域，因此，公共基础类库可以应用于web领域。这样，无论DART语言的源代码是否依赖了公共基础类库对应的DART语言的库，在对DART语言的源代码转译的过程中，都可以忽略DART语言的源代码依赖的公共基础类库对应的DART语言的库，直接对DART语言的源代码中的除依赖的公共基础类库对应的DART语言的库以外的代码转译即可，在转译得到JAVASCRIPT语言的目标代码之后，可以再根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。如此，即使DART语言的源代码依赖了公共基础类库对应的DART语言的库，也可以避免在对DART语言的源代码转译的过程中报错，且最终转译得到的JAVASCRIPT语言的目标代码可用以及生成的可执行文件可用。以及，对于DART语言的源代码而言，只要其语法正确，即使DART语言的源代码中未依赖公共基础类库对应的DART语言的库而导致DART语言的源代码无法被正常编译，也可以对DART语言的源代码转译得到JAVASCRIPT语言的目标代码，可见，本申请的转译方案的适应面广，适应性强。以及，由于单独基于JAVASCRIPT语言开发了公共基础类库，因此，在对DART语言的源代码转译的过程中，可以不查找DART语言的源代码中的上述公共基础类库对应的DART语言的库，从而可以减少查找次数，进而提高转译效率。其次，由于JAVASCRIPT语言的目标代码中可以没有公共基础类库，使得JAVASCRIPT语言的目标代码与DART语言的源代码之间具有良好的参照性，便于开发人员对JAVASCRIPT语言的目标代码与DART语言的源代码对照检查以及二次开发等。需要说明的是，对于方法实施例，为了简单描述，故将其都表述为一系列的动作组合，但是本领域技术人员应该知悉，本申请并不受所描述的动作顺序的限制，因为依据本申请，某些步骤可以采用其他顺序或者同时进行。其次，本领域技术人员也应该知悉，说明书中所描述的实施例均属于可选实施例，所涉及的动作并不一定是本申请所必须的。参照图2，示出了本申请的一种数据处理装置的结构框图，该装置具体可以包括如下模块：生成模块11，用于生成DART语言的源代码的抽象语法树；筛选模块12，用于在所述抽象语法树中筛选目标节点，所述目标节点至少包括用户界面UI相关节点和/或数据处理逻辑相关节点；转译模块13，用于对所述目标节点的代码转译，得到JAVASCRIPT语言的目标代码；获取模块14，用于根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。在一个可选的实现方式中，筛选模块包括：第一查找单元，用于在所述抽象语法树中查找具有UI属性的节点，第二查找单元，用于在所述抽象语法树中查找所述具有UI属性的节点级联的所有上级节点；第一获取单元，用于根据所述具有UI属性的节点以及所述上级节点获取所述UI相关节点。在一个可选的实现方式中，第一查找单元具体用于：在所述抽象语法树中查找属性中具有预设UI关键词的节点。在一个可选的实现方式中，所述预设UI关键词至少包括State。在一个可选的实现方式中，筛选模块包括：第三查找单元，用于在抽象语法树中查找具有数据处理逻辑属性的库文件；第二获取单元，用于获取所述库文件中定义的所述库文件级别的变量和函数，第三获取单元，用于获取所述库文件中定义的类，第四获取单元，用于获取所述库文件中定义的类所依赖的类；第五获取单元，用于至少根据所述变量、所述函数、所述库文件中定义的类以及所述库文件中定义的类所依赖的类获取数据处理逻辑相关节点。在一个可选的实现方式中，第三查找单元具体用于：在抽象语法树中查找属性中具有预设数据处理逻辑的关键词的节点。在一个可选的实现方式中，所述预设数据处理逻辑的关键词至少包括part of。在一个可选的实现方式中，所述第四获取单元包括：第一获取子单元，用于根据预设关联指令获取所述库文件的关联文件；第二获取子单元，用于获取所述关联文件中的依赖指令；第三获取子单元，用于在所述依赖指令中包括被依赖的类的类名的情况下，根据所述类名获取所述被依赖的类的路径信息；第四获取子单元，用于根据所述路径信息获取所述库文件中定义的类所依赖的类。在一个可选的实现方式中，所述预设关联指令包括part指令；所述关联文件包括part文件；所述依赖指令包括import指令。在一个可选的实现方式中，所述第三获取子单元具体用于：根据“.packages”文件将所述类名转换为所述路径信息。在一个可选的实现方式中，所述公共基础类库至少包括以下至少一种：Date类、Duration类、Iterable类、List类、Map类、Regex类、Set类、与类的继承相关的辅助库以及对象基类Object上的公共函数。公共基础类库是基于JAVASCRIPT语言开发的，如果在JAVASCRIPT语言的目标代码中嵌入公共基础类库，则会增加JAVASCRIPT语言的目标代码的冗余度以及体积。因此，为了避免增加的JAVASCRIPT语言的目标代码的冗余度以及体积，可以将JAVASCRIPT语言的目标代码需要引用或者依赖的公共基础类库单独设置，不将公共基础类库嵌入JAVASCRIPT语言的目标代码中，例如，将公共基础类库设置在开发环境中，开发人员在开发JAVASCRIPT语言的目标代码或者从其他语言的代码转译JAVASCRIPT语言的目标代码的情况下，得到的JAVASCRIPT语言的目标代码可以不具备公共基础类库，在需要对JAVASCRIPT语言的目标代码编译得到可执行文件的情况下，可以根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件，例如，在开发环境中，将JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库合并起来编译，得到可执行文件。这样，可执行文件中既有JAVASCRIPT语言的目标代码的功能也具有公共基础类库的功能，也即，使得根据JAVASCRIPT语言的目标代码生成的可执行文件具有公共基础类库的功能，例如，使得可执行文件可以引用公共基础类库的功能等。如此可以降低JAVASCRIPT语言的目标代码的体积以及冗余度。另外，由于公共基础类库是基于JAVASCRIPT语言开发的，因此，公共基础类库适用于JAVASCRIPT语言，又由于JAVASCRIPT语言可以应用于web领域，因此，公共基础类库可以应用于web领域。这样，无论DART语言的源代码是否依赖了公共基础类库对应的DART语言的库，在对DART语言的源代码转译的过程中，都可以忽略DART语言的源代码依赖的公共基础类库对应的DART语言的库，直接对DART语言的源代码中的除依赖的公共基础类库对应的DART语言的库以外的代码转译即可，在转译得到JAVASCRIPT语言的目标代码之后，可以再根据JAVASCRIPT语言的目标代码与事先基于JAVASCRIPT语言开发的公共基础类库获取可执行文件。如此，即使DART语言的源代码依赖了公共基础类库对应的DART语言的库，也可以避免在对DART语言的源代码转译的过程中报错，且最终转译得到的JAVASCRIPT语言的目标代码可用以及生成的可执行文件可用。以及，对于DART语言的源代码而言，只要其语法正确，即使DART语言的源代码中未依赖公共基础类库对应的DART语言的库而导致DART语言的源代码无法被正常编译，也可以对DART语言的源代码转译得到JAVASCRIPT语言的目标代码，可见，本申请的转译方案的适应面广，适应性强。以及，由于单独基于JAVASCRIPT语言开发了公共基础类库，因此，在对DART语言的源代码转译的过程中，可以不查找DART语言的源代码中的上述公共基础类库对应的DART语言的库，从而可以减少查找次数，进而提高转译效率。其次，由于JAVASCRIPT语言的目标代码中可以没有公共基础类库，使得JAVASCRIPT语言的目标代码与DART语言的源代码之间具有良好的参照性，便于开发人员对JAVASCRIPT语言的目标代码与DART语言的源代码对照检查以及二次开发等。对于装置实施例而言，由于其与方法实施例基本相似，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。图3是本申请示出的一种电子设备800的框图。例如，电子设备800可以是移动电话，计算机，数字广播终端，消息收发设备，游戏控制台，平板设备，医疗设备，健身设备，个人数字助理等。参照图3，电子设备800可以包括以下一个或多个组件：处理组件802，存储器804，电源组件806，多媒体组件808，音频组件810，输入/输出的接口812，传感器组件814，以及通信组件816。处理组件802通常控制电子设备800的整体操作，诸如与显示，电话呼叫，数据通信，相机操作和记录操作相关联的操作。处理组件802可以包括一个或多个处理器820来执行指令，以完成上述方法的全部或部分步骤。此外，处理组件802可以包括一个或多个模块，便于处理组件802和其他组件之间的交互。例如，处理组件802可以包括多媒体模块，以方便多媒体组件808和处理组件802之间的交互。存储器804被配置为存储各种类型的数据以支持在设备800的操作。这些数据的示例包括用于在电子设备800上操作的任何应用程序或方法的指令，联系人数据，电话簿数据，消息，图像，视频等。存储器804可以由任何类型的易失性或非易失性存储设备或者它们的组合实现，如静态随机存取存储器，电可擦除可编程只读存储器，可擦除可编程只读存储器，可编程只读存储器，只读存储器，磁存储器，快闪存储器，磁盘或光盘。电源组件806为电子设备800的各种组件提供电力。电源组件806可以包括电源管理系统，一个或多个电源，及其他与为电子设备800生成、管理和分配电力相关联的组件。多媒体组件808包括在所述电子设备800和用户之间的提供一个输出接口的屏幕。在一些实施例中，屏幕可以包括液晶显示器和触摸面板。如果屏幕包括触摸面板，屏幕可以被实现为触摸屏，以接收来自用户的输入信号。触摸面板包括一个或多个触摸传感器以感测触摸、滑动和触摸面板上的手势。所述触摸传感器可以不仅感测触摸或滑动动作的边界，而且还检测与所述触摸或滑动操作相关的持续时间和压力。在一些实施例中，多媒体组件808包括一个前置摄像头和/或后置摄像头。当设备800处于操作模式，如拍摄模式或视频模式时，前置摄像头和/或后置摄像头可以接收外部的多媒体数据。每个前置摄像头和后置摄像头可以是一个固定的光学透镜系统或具有焦距和光学变焦能力。音频组件810被配置为输出和/或输入音频信号。例如，音频组件810包括一个麦克风，当电子设备800处于操作模式，如呼叫模式、记录模式和语音识别模式时，麦克风被配置为接收外部音频信号。所接收到的音频信号可以被进一步存储在存储器804或经由通信组件816发送。在一些实施例中，音频组件810还包括一个扬声器，用于输出音频信号。I/O接口812为处理组件802和外围接口模块之间提供接口，上述外围接口模块可以是键盘，点击轮，按钮等。这些按钮可包括但不限于：主页按钮、音量按钮、启动按钮和锁定按钮。传感器组件814包括一个或多个传感器，用于为电子设备800提供各个方面的状态评估。例如，传感器组件814可以检测到设备800的打开/关闭状态，组件的相对定位，例如所述组件为电子设备800的显示器和小键盘，传感器组件814还可以检测电子设备800或电子设备800一个组件的位置改变，用户与电子设备800接触的存在或不存在，电子设备800方位或加速/减速和电子设备800的温度变化。传感器组件814可以包括接近传感器，被配置用来在没有任何的物理接触时检测附近物体的存在。传感器组件814还可以包括光传感器，如CMOS或CCD图像传感器，用于在成像应用中使用。在一些实施例中，该传感器组件814还可以包括加速度传感器，陀螺仪传感器，磁传感器，压力传感器或温度传感器。通信组件816被配置为便于电子设备800和其他设备之间有线或无线方式的通信。电子设备800可以接入基于通信标准的无线网络，如WiFi，运营商网络，或它们的组合。在一个示例性实施例中，通信组件816经由广播信道接收来自外部广播管理系统的广播信号或广播操作信息。在一个示例性实施例中，所述通信组件816还包括近场通信模块，以促进短程通信。例如，在NFC模块可基于射频识别技术，红外数据协会技术，超宽带技术，蓝牙技术和其他技术来实现。在示例性实施例中，电子设备800可以被一个或多个应用专用集成电路、数字信号处理器、数字信号处理设备、可编程逻辑器件、现场可编程门阵列、控制器、微控制器、微处理器或其他电子元件实现，用于执行上述方法。在示例性实施例中，还提供了一种包括指令的非临时性计算机可读存储介质，例如包括指令的存储器804，上述指令可由电子设备800的处理器820执行以完成上述方法。例如，所述非临时性计算机可读存储介质可以是ROM、随机存取存储器、CD-ROM、磁带、软盘和光数据存储设备等。图4是本申请示出的一种电子设备1900的框图。例如，电子设备1900可以被提供为一服务器。参照图4，电子设备1900包括处理组件1922，其进一步包括一个或多个处理器，以及由存储器1932所代表的存储器资源，用于存储可由处理组件1922的执行的指令，例如应用程序。存储器1932中存储的应用程序可以包括一个或一个以上的每一个对应于一组指令的模块。此外，处理组件1922被配置为执行指令，以执行上述方法。电子设备1900还可以包括一个电源组件1926被配置为执行电子设备1900的电源管理，一个有线或无线网络接口1950被配置为将电子设备1900连接到网络，和一个输入输出接口1958。电子设备1900可以操作基于存储在存储器1932的操作系统，例如Windows ServerTM，Mac OS XTM，UnixTM,LinuxTM，FreeBSDTM或类似。本说明书中的各个实施例均采用递进的方式描述，每个实施例重点说明的都是与其他实施例的不同之处，各个实施例之间相同相似的部分互相参见即可。本领域内的技术人员应明白，本申请的实施例可提供为方法、装置、或计算机程序产品。因此，本申请可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本申请可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本申请是参照根据本申请的方法、终端设备、和计算机程序产品的流程图和/或方框图来描述的。应理解可由计算机程序指令实现流程图和/或方框图中的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理终端设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理终端设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理终端设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理终端设备上，使得在计算机或其他可编程终端设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程终端设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的步骤。尽管已描述了本申请的优选实施例，但本领域内的技术人员一旦得知了基本创造性概念，则可对这些实施例做出另外的变更和修改。所以，所附权利要求意欲解释为包括优选实施例以及落入本申请范围的所有变更和修改。最后，还需要说明的是，在本文中，诸如第一和第二等之类的关系术语仅仅用来将一个实体或者操作与另一个实体或操作区分开来，而不一定要求或者暗示这些实体或操作之间存在任何这种实际的关系或者顺序。而且，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者终端设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者终端设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、物品或者终端设备中还存在另外的相同要素。以上对本申请所提供的一种数据处理方法及装置，进行了详细介绍，本文中应用了具体个例对本申请的原理及实施方式进行了阐述，以上实施例的说明只是用于帮助理解本申请的方法及其核心思想；同时，对于本领域的一般技术人员，依据本申请的思想，在具体实施方式及应用范围上均会有改变之处，综上所述，本说明书内容不应理解为对本申请的限制。
