标题title
一种软件部署方法、系统、存储介质及设备
摘要abst
本发明提供了一种软件部署方法、系统、存储介质及设备，方法包括：将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块合并；通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发；将开发完成的分布式服务框架和接口打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口打包以得到单体式服务部署包；基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。本发明提高了分布式服务及单体式服务应用场景的开发效率。
权利要求书clms
1.一种软件部署方法，其特征在于，包括以下步骤：将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；通过调用所述接口中的若干分布式应用模块以及外部服务模块进行所述分布式服务框架的开发，并通过调用所述接口中的若干单体式应用模块进行所述单体式服务框架的开发；将开发完成的所述分布式服务框架和所述接口进行打包以得到分布式服务部署包，并将开发完成的所述单体式服务框架和所述接口进行打包以得到单体式服务部署包；基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。2.根据权利要求1所述的方法，其特征在于，所述若干分布式应用模块包括分布式注册中心模块、远程代理方法调用模块、分布式缓存模块、第一用户登录状态维持模块以及消息中间件模块。3.根据权利要求2所述的方法，其特征在于，所述若干单体式应用模块包括单体式注册中心模块、本地方法调用模块、本地缓存模块、第二用户登录状态维持模块以及本地消息队列模块。4.根据权利要求3所述的方法，其特征在于，在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并包括：在所述接口中将所述分布式注册中心模块与所述单体式注册中心模块合并为注册中心模块，并将所述远程代理方法调用模块和所述本地方法调用模块合并为方法调用模块，且将所述分布式缓存模块和所述本地缓存模块合并为缓存模块，并将所述第一用户登录状态维持模块和所述第二用户登录状态维持模块合并为用户登录状态维持模块，以及将所述消息中间件模块和所述本地消息队列模块合并为消息队列模块。5.根据权利要求4所述的方法，其特征在于，通过调用所述接口中的若干分布式应用模块以及外部服务模块进行所述分布式服务框架的开发，并通过调用所述接口中的若干单体式应用模块进行所述单体式服务框架的开发包括：从所述方法调用模块的第一容器中获取所述远程代理方法调用模块，并从所述外部服务模块中获取远程调用框架，且从所述注册中心模块中获取远程代理服务端的信息，并基于所述远程代理方法调用模块、远程调用框架和远程代理服务端的信息进行所述分布式服务框架的开发；从所述方法调用模块的第二容器中获取所述本地方法调用模块进行所述单体式服务框架的开发。6.根据权利要求4所述的方法，其特征在于，通过调用所述接口中的若干分布式应用模块以及外部服务模块进行所述分布式服务框架的开发还包括：从所述缓存模块中获取所述分布式缓存模块，并从所述外部服务模块中获取远程字典服务，基于所述分布式缓存模块和所述远程字典服务进行所述分布式服务框架的开发。7.根据权利要求4所述的方法，其特征在于，所述消息队列模块中包括序列化的对象。8.一种软件部署系统，其特征在于，包括：合并模块，配置用于将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；开发模块，配置用于通过调用所述接口中的若干分布式应用模块以及外部服务模块进行所述分布式服务框架的开发，并通过调用所述接口中的若干单体式应用模块进行所述单体式服务框架的开发；打包模块，配置用于将开发完成的所述分布式服务框架和所述接口进行打包以得到分布式服务部署包，并将开发完成的所述单体式服务框架和所述接口进行打包以得到单体式服务部署包；以及部署模块，配置用于基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。9.一种计算机可读存储介质，其特征在于，存储有计算机程序指令，所述计算机程序指令被执行时实现如权利要求1-7任意一项所述的方法。10.一种计算机设备，包括存储器和处理器，其特征在于，所述存储器中存储有计算机程序，所述计算机程序被所述处理器执行时执行如权利要求1-7任意一项所述的方法。
说明书desc
技术领域本发明涉及软件技术领域，尤其涉及一种软件部署方法、系统、存储介质及设备。背景技术软件根据不同的场景，可以分为单体式架构和分布式架构，单体式服务是将所有的业务运行在一个进程中，对于部署和维护要求相对简单，但是仅能纵向扩展而无法横向扩展，但纵向扩展对硬件要求较高。分布式服务是将业务按照一定的规则划分为多部分业务，每个业务独占一个进程，各进程之间通过远程的方式通讯，配合良好的软件架构可以进行横向扩展以满足业务需要。当以分布式的方式设计并规划进程后，面临资源较为紧张的部署机配置，资源会相对浪费，尤其是分布式架构中一般会有其他的中间件，如用于服务治理的注册中心、用于远程异步事件的消息中间件、用于缓存的分布式缓存等，在这些场景下，分布式部署无法满足，但是如果业务是一样的话，为应对单体式部署的场景，又需要再实现一遍业务代码，这对于开发、部署和后期的维护都有挑战。发明内容有鉴于此，本发明的目的在于提出一种软件部署方法、系统、存储介质及设备，用以解决现有技术中分布式服务和单体式服务需要根据场景来单独进行不同代码的编写以进行部署，导致开发效率低的问题。基于上述目的，本发明提供了一种软件部署方法，包括以下步骤：将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发；将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包；基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。在一些实施例中，若干分布式应用模块包括分布式注册中心模块、远程代理方法调用模块、分布式缓存模块、第一用户登录状态维持模块以及消息中间件模块。在一些实施例中，若干单体式应用模块包括单体式注册中心模块、本地方法调用模块、本地缓存模块、第二用户登录状态维持模块以及本地消息队列模块。在一些实施例中，在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并包括：在接口中将分布式注册中心模块与单体式注册中心模块合并为注册中心模块，并将远程代理方法调用模块和本地方法调用模块合并为方法调用模块，且将分布式缓存模块和本地缓存模块合并为缓存模块，并将第一用户登录状态维持模块和第二用户登录状态维持模块合并为用户登录状态维持模块，以及将消息中间件模块和本地消息队列模块合并为消息队列模块。在一些实施例中，通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发包括：从方法调用模块的第一容器中获取远程代理方法调用模块，并从外部服务模块中获取远程调用框架，且从注册中心模块中获取远程代理服务端的信息，并基于远程代理方法调用模块、远程调用框架和远程代理服务端的信息进行分布式服务框架的开发；从方法调用模块的第二容器中获取本地方法调用模块进行单体式服务框架的开发。在一些实施例中，通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发还包括：从缓存模块中获取分布式缓存模块，并从外部服务模块中获取远程字典服务，基于分布式缓存模块和远程字典服务进行分布式服务框架的开发。在一些实施例中，消息队列模块中包括序列化的对象。本发明的另一方面，还提供了一种软件部署系统，包括：合并模块，配置用于将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；开发模块，配置用于通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发；打包模块，配置用于将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包；以及部署模块，配置用于基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。本发明的又一方面，还提供了一种计算机可读存储介质，存储有计算机程序指令，该计算机程序指令被执行时实现上述任意一项方法。本发明的再一方面，还提供了一种计算机设备，包括存储器和处理器，存储器中存储有计算机程序，该计算机程序被处理器执行时执行上述任意一项方法。本发明至少具有以下有益技术效果：1.本发明通过将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并，可以将分布式服务和单体式服务的相似功能通过一套代码进行合并；2.通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发，可以使得分布式服务和单体式服务各取所需而独立进行开发，避免了相互之间的业务干扰；3.通过将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包，且基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署，可以通过一整套业务代码实现不同场景的部署，减少不同场景下的开发和维护成本，提高开发效率。附图说明为了更清楚地说明本发明实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的实施例。图1为根据本发明实施例提供的软件部署方法的示意图；图2为根据本发明实施例提供的软件部署系统的示意图；图3为根据本发明实施例提供的实现软件部署方法的计算机可读存储介质的示意图；图4为根据本发明实施例提供的执行软件部署方法的计算机设备的硬件结构示意图。具体实施方式为使本发明的目的、技术方案和优点更加清楚明白，以下结合具体实施例，并参照附图，对本发明实施例进一步详细说明。需要说明的是，本发明实施例中所有使用“第一”和“第二”的表述均是为了区分两个相同名称的非相同的实体或者非相同的参量，可见“第一”“第二”仅为了表述的方便，不应理解为对本发明实施例的限定。此外，术语“包括”和“具有”以及他们的任何变形，意图在于覆盖不排他的包含，例如，包含了一系列步骤或单元的过程、方法、系统、产品或设备固有的其他步骤或单元。基于上述目的，本发明实施例的第一个方面，提出了一种软件部署方法的实施例。图1示出的是本发明提供的软件部署方法的实施例的示意图。如图1所示，本发明实施例包括如下步骤：步骤S10、将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；步骤S20、通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发；步骤S30、将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包；步骤S40、基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。本发明实施例中，在分布式服务场景和单体式服务场景中，解决的应用问题大多数不相同，但是对于分布式服务场景中的一些应用模块，在单体式服务场景中具有相对应的应用模块，因此，可以抽象出一层相同的API接口，使得分布式服务和单体式服务各取所需来完成业务，并在部署时根据应用场景进行相应的选择。本发明实施例通过将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并，可以将分布式服务和单体式服务的相似的功能进行合并；通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发，可以使得分布式服务和单体式服务各取所需而独立进行开发，避免了相互之间的业务干扰；通过将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包，且基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署，可以通过一整套业务代码实现不同场景的部署，减少不同场景下的开发和维护成本，提高开发效率。在一些实施例中，若干分布式应用模块包括分布式注册中心模块、远程代理方法调用模块、分布式缓存模块、第一用户登录状态维持模块以及消息中间件模块。在一些实施例中，若干单体式应用模块包括单体式注册中心模块、本地方法调用模块、本地缓存模块、第二用户登录状态维持模块以及本地消息队列模块。在一些实施例中，在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并包括：在接口中将分布式注册中心模块与单体式注册中心模块合并为注册中心模块，并将远程代理方法调用模块和本地方法调用模块合并为方法调用模块，且将分布式缓存模块和本地缓存模块合并为缓存模块，并将第一用户登录状态维持模块和第二用户登录状态维持模块合并为用户登录状态维持模块，以及将消息中间件模块和本地消息队列模块合并为消息队列模块。在一些实施例中，消息队列模块中包括序列化的对象。上述实施例中，接口用MOD-API表示。MOD-API需要定义五类模块：a)MOD-API-registry注册中心模块，该模块用于定义统一的注册中心，其抽象出服务提供者、服务消费者模型，负责维护各方信息，注册中心主要提供注册服务节点、消费服务节点、查询服务节点、监听某服务节点变动并通知，监听节点变动信息可帮助消费方提供变动通知，减少轮询，提高信息传递效率；b)MOD-API-invocation方法调用模块，该模块具有两个容器，容器可以是IOC容器，支持从容器中获取本地方法或者远程代理方法；c)MOD-API-cache缓存模块，定义缓存接口，可提供注解、接口的使用方式，提供set/get方法，以及缓存驱逐策略、过期策略等等；其不支持无法序列化的对象，如文件描述符、套接字，因为这些无法序列化的对象需要业务方的额外处理；d)MOD-API-session用户登录状态维持模块，该模块依赖缓存模块，缓存模块提供用户登录状态的获取、更新以及验证等功能；e)MOD-API-queue消息队列模块，该模块定义统一的消息队列接口及生成，提供消息的offer、poll、take、remove等操作方法；并且，无法序列化的对象也不能交给消息队列模块，由于分布式消息中间件提供消息的持久化，能够处理较多的消息，但是单体式存储的消息占用本地内存，可以通过额外的策略处理消息的堆积，如抛弃、阻塞、临时保存文件等。在一些实施例中，通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发包括：从方法调用模块的第一容器中获取远程代理方法调用模块，并从外部服务模块中获取远程调用框架，且从注册中心模块中获取远程代理服务端的信息，并基于远程代理方法调用模块、远程调用框架和远程代理服务端的信息进行分布式服务框架的开发；从方法调用模块的第二容器中获取本地方法调用模块进行单体式服务框架的开发。在一些实施例中，通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发还包括：从缓存模块中获取分布式缓存模块，并从外部服务模块中获取远程字典服务，基于分布式缓存模块和远程字典服务进行分布式服务框架的开发。上述实施例中，分布式服务框架的开发典型地包括：a)MOD-Distribute-registry分布式注册中心模块，依赖注册中心中间件，实现MOD-API-registry的接口及方法，在内部调用注册中心中间件，依靠中间件的能力进行开发；b)MOD-Distribute-invocation远程代理方法调用模块，该模块需要配合IOC容器和远程调用框架，如Java的Spring Context和Dubbo，通过注册中心获取提供者的信息，代理远程提供者，并放到IOC容器中，调用时从容器中获取提供者的远程代理对象，并发起远程调用；c)MOD-Distribute-cache分布式缓存模块，该模块依赖分布式缓存中间件，如redis，实现MOD-API-cache，在实现中通过调用redis的接口，将对象放到分布式缓存中，并提供序列化和反序列化的功能。单体式服务框架的开发典型地包括：a)MOD-Monolith-registry单体式注册中心模块，实现MOD-API-registry的接口及方法，在本地开发，可利用IOC容器的能力实现内部的注册；b)MOD-Monolith-invocation本地方法调用模块，该模块需要配合IOC容器，如Java的Spring Context，通过注册中心维护提供者的信息，调用时从容器中获取提供者对象，并发起方法调用；c)MOD-Monolith-cache本地缓存模块，利用本地内存进行开发。由此，开发阶段主要利用MOD-API中的接口来实现分布式服务框架和单体式服务框架的开发。在打包时，可以根据不同的应用场景选择开发好的分布式服务框架和/或单体式服务框架并结合接口来完成打包。本发明实施例的第二个方面，还提供了一种软件部署系统。图2示出的是本发明提供的软件部署系统的实施例的示意图。如图2所示，一种软件部署系统包括：合并模块10，配置用于将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并；开发模块20，配置用于通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发；打包模块30，配置用于将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包；以及部署模块40，配置用于基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署。本发明实施例的软件部署系统，通过将分布式服务框架所需的若干分布式应用模块与单体式服务框架所需的若干单体式应用模块分别一一对应，并在创建的接口中分别将相对应的分布式应用模块和单体式应用模块进行合并，可以将分布式服务和单体式服务的相似的功能进行合并；通过调用接口中的若干分布式应用模块以及外部服务模块进行分布式服务框架的开发，并通过调用接口中的若干单体式应用模块进行单体式服务框架的开发，可以使得分布式服务和单体式服务各取所需而独立进行开发，避免了相互之间的业务干扰；通过将开发完成的分布式服务框架和接口进行打包以得到分布式服务部署包，并将开发完成的单体式服务框架和接口进行打包以得到单体式服务部署包，且基于软件应用场景选择分布式服务部署包或单体式服务部署包进行部署，可以通过一整套业务代码实现不同场景的部署，减少不同场景下的开发和维护成本，提高开发效率。本发明实施例的第三个方面，还提供了一种计算机可读存储介质，图3示出了根据本发明实施例提供的实现软件部署方法的计算机可读存储介质的示意图。如图3所示，计算机可读存储介质3存储有计算机程序指令31，该计算机程序指令31可以被处理器执行。该计算机程序指令31被执行时实现上述任意一项实施例的方法。应当理解，在相互不冲突的情况下，以上针对根据本发明的软件部署方法阐述的所有实施方式、特征和优势同样地适用于根据本发明的软件部署系统和存储介质。本发明实施例的第四个方面，还提供了一种计算机设备，包括存储器402和处理器401，该存储器中存储有计算机程序，该计算机程序被该处理器执行时实现上述任意一项实施例的方法。如图4所示，为本发明提供的执行软件部署方法的计算机设备的一个实施例的硬件结构示意图。以如图4所示的计算机设备为例，在该计算机设备中包括一个处理器401以及一个存储器402，并还可以包括：输入装置403和输出装置404。处理器401、存储器402、输入装置403和输出装置404可以通过总线或者其他方式连接，图4中以通过总线连接为例。输入装置403可接收输入的数字或字符信息，以及产生与软件部署系统的用户设置以及功能控制有关的键信号输入。输出装置404可包括显示屏等显示设备。存储器402作为一种非易失性计算机可读存储介质，可用于存储非易失性软件程序、非易失性计算机可执行程序以及模块，如本申请实施例中的软件部署方法对应的程序指令/模块。存储器402可以包括存储程序区和存储数据区，其中，存储程序区可存储操作系统、至少一个功能所需要的应用程序；存储数据区可存储软件部署方法的使用所创建的数据等。此外，存储器402可以包括高速随机存取存储器，还可以包括非易失性存储器，例如至少一个磁盘存储器件、闪存器件、或其他非易失性固态存储器件。在一些实施例中，存储器402可选包括相对于处理器401远程设置的存储器，这些远程存储器可以通过网络连接至本地模块。上述网络的实例包括但不限于互联网、企业内部网、局域网、移动通信网及其组合。处理器401通过运行存储在存储器402中的非易失性软件程序、指令以及模块，从而执行服务器的各种功能应用以及数据处理，即实现上述方法实施例的软件部署方法。最后需要说明的是，本文的计算机可读存储介质可以是易失性存储器或非易失性存储器，或者可以包括易失性存储器和非易失性存储器两者。作为例子而非限制性的，非易失性存储器可以包括只读存储器、可编程ROM、电可编程ROM、电可擦写可编程ROM或快闪存储器。易失性存储器可以包括随机存取存储器，该RAM可以充当外部高速缓存存储器。作为例子而非限制性的，RAM可以以多种形式获得，比如同步RAM、动态RAM、同步DRAM、双数据速率SDRAM、增强SDRAM、同步链路DRAM、以及直接Rambus RAM。所公开的方面的存储设备意在包括但不限于这些和其它合适类型的存储器。本领域技术人员还将明白的是，结合这里的公开所描述的各种示例性逻辑块、模块、电路和算法步骤可以被实现为电子硬件、计算机软件或两者的组合。为了清楚地说明硬件和软件的这种可互换性，已经就各种示意性组件、方块、模块、电路和步骤的功能对其进行了一般性的描述。这种功能是被实现为软件还是被实现为硬件取决于具体应用以及施加给整个系统的设计约束。本领域技术人员可以针对每种具体应用以各种方式来实现的功能，但是这种实现决定不应被解释为导致脱离本发明实施例公开的范围。结合这里的公开所描述的各种示例性逻辑块、模块和电路可以利用被设计成用于执行这里功能的下列部件来实现或执行：通用处理器、数字信号处理器、专用集成电路、现场可编程门阵列或其它可编程逻辑器件、分立门或晶体管逻辑、分立的硬件组件或者这些部件的任何组合。通用处理器可以是微处理器，但是可替换地，处理器可以是任何传统处理器、控制器、微控制器或状态机。处理器也可以被实现为计算设备的组合，例如，DSP和微处理器的组合、多个微处理器、一个或多个微处理器结合DSP和/或任何其它这种配置。以上是本发明公开的示例性实施例，但是应当注意，在不背离权利要求限定的本发明实施例公开的范围的前提下，可以进行多种改变和修改。根据这里描述的公开实施例的方法权利要求的功能、步骤和/或动作不需以任何特定顺序执行。此外，尽管本发明实施例公开的元素可以以个体形式描述或要求，但除非明确限制为单数，也可以理解为多个。应当理解的是，在本文中使用的，除非上下文清楚地支持例外情况，单数形式“一个”旨在也包括复数形式。还应当理解的是，在本文中使用的“和/或”是指包括一个或者一个以上相关联地列出的项目的任意和所有可能组合。上述本发明实施例公开实施例序号仅仅为了描述，不代表实施例的优劣。所属领域的普通技术人员应当理解：以上任何实施例的讨论仅为示例性的，并非旨在暗示本发明实施例公开的范围被限于这些例子；在本发明实施例的思路下，以上实施例或者不同实施例中的技术特征之间也可以进行组合，并存在如上的本发明实施例的不同方面的许多其它变化，为了简明它们没有在细节中提供。因此，凡在本发明实施例的精神和原则之内，所做的任何省略、修改、等同替换、改进等，均应包含在本发明实施例的保护范围之内。
