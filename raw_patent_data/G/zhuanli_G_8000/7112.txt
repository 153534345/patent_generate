标题title
一种应用程序运行方法、计算设备及存储介质
摘要abst
本发明公开了一种应用程序运行方法，计算设备及存储介质，并包括步骤：根据应用文件生成应用程序的可执行文件；根据应用程序的可执行文件，确定应用程序在内部存储器中存储的第一存储信息；根据第一区段信息和模块文件生成堆区段的第二区段信息；根据第二区段信息和第一存储信息生成第二存储信息；根据第二存储信息将应用程序的可执行文件和模块文件加载到内部存储器；根据内部存储器中的可执行文件和模块文件运行应用程序，并构建功能模块。本发明能够需要在应用程序中插入的模块文件需要获取和存储新数据，而所需要存储的新数据是随着应用运行时不断增加的，将模块文件插入到堆区段中。
权利要求书clms
1.一种应用程序运行方法，适于在计算设备中执行，所述计算设备中包括内部存储器和外部存储器，所述外部存储器中存储有应用文件和模块文件，所述方法包括步骤：根据所述应用文件生成应用程序的可执行文件；根据所述应用程序的可执行文件，确定应用程序在所述内部存储器中存储的第一存储信息，所述第一存储信息包括在所述内部存储器中所分配的堆区段的第一区段信息；根据所述第一区段信息和所述模块文件生成所述堆区段的第二区段信息；根据所述第二区段信息和所述第一存储信息生成第二存储信息；根据所述第二存储信息将所述应用程序的可执行文件和模块文件加载到所述内部存储器；根据所述内部存储器中的可执行文件和模块文件运行所述应用程序，并在所述应用程序中构建功能模块，以实现所述应用程序的附加功能。2.如权利要求1所述的方法，其中，所述根据所述应用程序的可执行文件，确定应用程序在所述内部存储器中存储的第一存储信息包括步骤：根据所述可执行文件的数据大小，确定在所述内部存储器中分配的堆区段的第一区段大小，所述第一区段大小大于所述可执行文件的数据大小；根据所述第一区段大小生成所述堆区段的第一区段信息；根据所述第一区段信息生成第一存储信息。3.如权利要求2所述的方法，其中，所述根据所述第一区段信息和所述模块文件生成第二区段信息包括步骤：根据所述可执行文件的数据大小和所述第一区段信息生成剩余空间大小；判断所述剩余空间大小是否大于所述模块文件的大小；若大于，则将所述第一区段大小作为第二区段大小；根据所述第二区段大小生成第二区段信息。4.如权利要求3所述的方法，其中，所述根据所述可执行文件的数据大小和所述第一区段信息生成剩余空间大小包括步骤：将所述第一区段大小与所述可执行文件的数据大小相减，得到所述剩余空间大小。5.如权利要求3或4所述的方法，其中，所述根据所述第二存储信息将所述应用程序的可执行文件和模块文件加载到所述内部存储器包括步骤：根据所述第二存储信息在所述内部存储器中分配堆区段；获取所分配的堆区段的顶部指针和底部指针；根据所述底部指针将所述可执行文件加载到所述堆区段；根据所述顶部指针和所述模块文件确定所述模块文件存储的起始位置；根据所述模块文件存储的起始位置将所述模块文件加载到所述内部存储器。6.如权利要求5所述的方法，其中，所述根据所述顶部指针和所述模块文件确定所述模块文件存储的起始位置包括步骤：将所述顶部指针与所述模块文件的大小相减得到所述模块文件存储的起始位置。7.如权利要求6所述的方法，其中，在所述应用程序中构建功能模块包括步骤：根据分配的堆栈区段的顶部指针，确定所述模块文件读取的起始位置；根据所述模块文件读取的起始位置，调取所述模块文件，构建所述功能模块。8.如权利要求5-7中任一项所述的方法，其中，所述方法还包括步骤：当所述模块文件需要新的存储空间时，计算所述模块文件的当前大小；根据所述顶部指针与计算的模块文件的当前大小重新确定所述模块文件存储的起始位置；根据重新确定的模块文件存储的起始位置将所述模块文件加载到所述内部存储器。9.一种计算设备，包括：一个或多个处理器；存储器；以及一个或多个装置，所述一个或多个装置包括用于执行根据权利要求1-8中任一项所述的方法的指令。10.一种存储一个或多个程序的计算机可读存储介质，所述一个或多个程序包括指令，所述指令当由计算设备执行时，使得所述计算设备执行根据权利要求1-8中任一项所述的方法。
说明书desc
技术领域本发明涉及操作系统领域，特别涉及一种应用程序运行方法、计算设备及存储介质。背景技术随着计算机技术的不断发展，开发出越来越多的应用程序。相应的，应用的数据也越来越多，数据结构也越来越复杂。在使用应用程序的过程中，有时需要在应用程序的基础上实现额外的附加功能，或了解应用的运行情况等。在现有技术中，应用程序在加载时，经过编译等一些列操作得到二进制文件，无法对该二进制文件进行处理。因此，要实现应用程序的附加功能必须要在应用程序还未编译时，修改其源代码，向其中添加所需要的功能，之后再重新进行编译。这种方式不仅较为复杂，并且不适用于一些特殊场景，如没有源代码文件或者无法对源代码进行修改的时候，就无法实现在应用程序中添加附加功能。为此，需要一种新的应用程序运行方法。发明内容为此，本发明提供一种应用程序运行方法，以力图解决或者至少缓解上面存在的问题。根据本发明的一个方面，提供一种应用程序运行方法，适于在计算设备中执行，计算设备中包括内部存储器和外部存储器，外部存储器中存储有应用文件和模块文件，方法包括步骤：根据应用文件生成应用程序的可执行文件；根据应用程序的可执行文件，确定应用程序在所述内部存储器中存储的第一存储信息，第一存储信息包括在内部存储器中所分配的堆区段的第一区段信息；根据第一区段信息和模块文件生成堆区段的第二区段信息；根据第二区段信息和第一存储信息生成第二存储信息；根据第二存储信息将应用程序的可执行文件和模块文件加载到内部存储器；根据内部存储器中的可执行文件和模块文件运行应用程序，并在应用程序中构建功能模块，以实现应用程序的附加功能。可选地，在根据本发明的方法中，根据应用程序的可执行文件，确定应用程序在内部存储器中存储的第一存储信息包括步骤：根据可执行文件的数据大小，确定在内部存储器中分配的堆区段的第一区段大小，第一区段大小大于可执行文件的数据大小；根据第一区段大小生成堆区段的第一区段信息；根据第一区段信息生成第一存储信息。可选地，在根据本发明的方法中，根据第一区段信息和模块文件生成第二区段信息包括步骤：根据可执行文件的数据大小和第一区段信息生成剩余空间大小；判断剩余空间大小是否大于模块文件的大小；若大于，则将第一区段大小作为第二区段大小；根据第二区段大小生成第二区段信息。可选地，在根据本发明的方法中，根据可执行文件的数据大小和第一区段信息生成剩余空间大小包括步骤：将第一区段大小与可执行文件的数据大小相减，得到剩余空间大小。可选地，在根据本发明的方法中，根据第二存储信息将应用程序的可执行文件和模块文件加载到内部存储器包括步骤：根据第二存储信息在内部存储器中分配堆区段；获取所分配的堆区段的顶部指针和底部指针；根据底部指针将可执行文件加载到堆区段；根据顶部指针和模块文件确定模块文件存储的起始位置；根据模块文件存储的起始位置将模块文件加载到内部存储器。可选地，在根据本发明的方法中，根据顶部指针和模块文件确定模块文件存储的起始位置包括步骤：将顶部指针与模块文件的大小相减得到模块文件存储的起始位置。可选地，在根据本发明的方法中，在应用程序中构建功能模块包括步骤：根据分配的堆栈区段的顶部指针，确定模块文件读取的起始位置；根据模块文件读取的起始位置，调取模块文件，构建功能模块。可选地，在根据本发明的方法中，还包括步骤：当模块文件需要新的存储空间时，计算模块文件的当前大小；根据顶部指针与计算的模块文件的当前大小重新确定模块文件存储的起始位置；根据重新确定的模块文件存储的起始位置将模块文件加载到内部存储器。根据本发明的另一方面，提供了一种计算设备，包括：一个或多个处理器；存储器；以及一个或多个程序，其中一个或多个程序存储在存储器中并被配置为由一个或多个处理器执行，一个或多个程序包括用于执行根据本发明的一种应用程序运行方法的指令。根据本发明的再一个方面，提供了一种存储一个或多个程序的计算机可读存储介质，一个或多个程序包括指令，该指令当由计算设备执行时，使得计算设备执行根据本发明的一种应用程序运行方法中的方法。本发明中的应用程序运行方法，适于在计算设备中执行，计算设备包括外部存储器和内部存储器，外部存储器中存储有应用文件和模块文件。首先根据应用文件生成应用程序的可执行文件，在对应用进行加载时，需要将外部存储器中的应用文件进行处理得到二进制类型文件的可执行文件，才能将其存入内部存储器中。随后根据应用程序的可执行文件，确定应用程序在内部存储器中存储的第一存储信息，第一存储信息包括在内部存储器中所分配的堆区段的第一区段信息。在内部存储器中加载应用程序的可执行文件时，在内部存储器中划分有多个区段，在每个区段加载可执行文件的相应数据。内部存储器的其中一个区段为堆区段，若需要在应用程序中插入的模块文件需要获取和存储新数据，而所需要存储的新数据是随着应用运行时不断增加的，则需要将模块文件插入到堆区段中，因为堆区段可以向模块文件动态分配存储空间，其他数据区段一旦存储模块文件后无法更改为模块文件分配的存储空间，无法动态增加。为了将模块文件加载到堆区段，需要根据堆区段的第一区段信息和模块文件，重新生成堆区段的第二区段信息。再根据第二区段信息和第一存储信息生成第二存储信息，以便根据第二存储信息将应用程序的可执行文件和模块文件加载到内部存储器。在将应用程序的可执行文件和模块文件一起加载到内部存储器后，即可在应用程序中构建功能模块，以实现应用程序的附加功能。附图说明为了实现上述以及相关目的，本文结合下面的描述和附图来描述某些说明性方面，这些方面指示了可以实践本文所公开的原理的各种方式，并且所有方面及其等效方面旨在落入所要求保护的主题的范围内。通过结合附图阅读下面的详细描述，本发明公开的上述以及其它目的、特征和优势将变得更加明显。遍及本公开，相同的附图标记通常指代相同的部件或元素。图1示出了根据本发明一个示范性实施例的外部存储器和内部存储器的结构示意图；图2示出了根据本发明一个示范性实施例的计算设备200的结构框图；图3示出了根据本发明一个示范性实施例的应用程序运行方法300的流程示意图；以及图4示出了根据本发明一个示范性实施例的向堆区段插入模块文件的示意图。具体实施方式下面将参照附图更详细地描述本公开的示例性实施例。虽然附图中显示了本公开的示例性实施例，然而应当理解，可以以各种形式实现本公开而不应被这里阐述的实施例所限制。相反，提供这些实施例是为了能够更透彻地理解本公开，并且能够将本公开的范围完整的传达给本领域的技术人员。相同的附图标记通常指代相同的部件或元素。图1示出了根据本发明一个示范性实施例的外部存储器和内部存储器的结构示意图。如图1所示，计算设备200中包括内部存储器230和外部存储器210，并运行有操作系统220。本发明对操作系统220的种类不做限制。外部存储器210中存储有应用文件111和模块文件112。图1所示的外部存储器210所存储应用文件111和模块文件112的方式仅为示例性的，本发明对外部存储器210中所存储应用文件和模块文件的数量不做限制。应用文件111可实现为任一种应用程序的应用文件，本发明对应用程序的种类及其应用文件的类型不做限制。根据本发明的一个实施例，应用文件111适于由操作系统220进行编译，汇编，链接等步骤得到应用程序的可执行文件，最终加载到内部存储器230中。模块文件112可实现为任一种功能模块的模块文件，功能模块可实现应用程序的附加功能，本发明对模块文件112的文件类型，以及实现的应用程序附加功能的种类不做限制。模块文件112可以是未经过编译的文件，在加载到内部存储器230时预先进行处理，得到可以加载到内部存储器230中的功能模块的可执行文件。模块文件112还可以实现为二进制类型文件，方便直接加载到内部存储器230中的相应位置。模块文件112由开发人员预先进行构建，为了在应用程序中实现附加功能，需要将模块文件112加载到内部存储器230中，具体的需要存储到内部存储器230存储应用程序的可执行文件的相应位置。模块文件112在部署到相应位置后，模块文件112对应用程序透明，应用程序并不感知和使用模块文件112，直接由操作系统220调用模块文件112构建功能模块，实现应用程序的附加功能。内部存储器230在存储应用程序的可执行文件时，为可执行文件分配存储空间。内部存储器230所分配的存储空间包括多个不同的内存区段，将可执行文件以内存区段的形式在内部存储器230中进行存储。内部存储器230将存储空间所划分的内存区段包括堆区段、堆栈区段、初始化数据区段和未初始化数据区段。内存区段由操作系统在创建进程时，根据应用程序可执行文件的文件信息确定第一存储信息，根据第一存储器信息在内部存储器230中进行划分。其中，堆区段用来存放应用程序中引用类型的对象，可进行动态分配。若需要在应用程序中插入的模块文件112需要获取和存储新数据，而所需要的和存储的新数据是随着应用运行时不断增加的；例如，新数据用于统计与不对界指令相关的信号，每发现新的不对界指令，就需要增加新数据时，则需要将模块文件插入到堆栈区段中，因为堆区段可以向模块文件动态分配存储空间，其他数据区段一旦存储模块文件后无法更改为模块文件分配的存储空间，无法动态增加；从而保证能够对模块文件112中有足够空间，存储和处理相关数据，实现应用程序的附加功能。图1中的计算设备200的具体结构如图2所示。图2示出了根据本发明一个示范性实施例的计算设备200的结构框图。如图2所示，在基本的配置202中，计算设备200典型地包括系统存储器206和一个或者多个处理器204。存储器总线208可以用于在处理器204和系统存储器206之间的通信。取决于期望的配置，处理器204可以是任何类型的处理，包括但不限于：微处理器、微控制器、数字信息处理器或者它们的任何组合。处理器204可以包括诸如一级高速缓存210和二级高速缓存212之类的一个或者多个级别的高速缓存、处理器核心214和寄存器216。示例的处理器核心214可以包括运算逻辑单元、浮点数单元、数字信号处理核心或者它们的任何组合。示例的存储器控制器218可以与处理器204一起使用，或者在一些实现中，存储器控制器218可以是处理器204的一个内部部分。取决于期望的配置，系统存储器206可以是任意类型的存储器，包括但不限于：易失性存储器、非易失性存储器或者它们的任何组合。系统存储器206可以包括操作系统220、一个或者多个程序222以及程序数据228。在一些实施方式中，程序222可以布置为在操作系统上由一个或者多个处理器204利用程序数据228执行根据本发明的方法300的指令223。计算设备200还可以包括储存接口总线234。储存接口总线234实现了从储存设备232经由总线/接口控制器230到基本配置202的通信。操作系统220、程序222以及数据224的至少一部分可以存储在可移除储存器236和/或不可移除储存器238上，并且在计算设备200上电或者要执行程序222时，经由储存接口总线234而加载到系统存储器206中，并由一个或者多个处理器204来执行。计算设备200还可以包括有助于从各种接口设备到基本配置202经由总线/接口控制器230的通信的接口总线240。示例的输出设备242包括图形处理单元248和音频处理单元250。它们可以被配置为有助于经由一个或者多个A/V端口252与诸如显示器或者扬声器之类的各种外部设备进行通信。示例外围接口244可以包括串行接口控制器254和并行接口控制器256，它们可以被配置为有助于经由一个或者多个I/O端口258和诸如输入设备或者其他外设之类的外部设备进行通信。示例的通信设备246可以包括网络控制器260，其可以被布置为以便经由一个或者多个通信端口264与一个或者多个其他计算设备262通过网络通信链路的通信。网络通信链路可以是通信介质的一个示例。通信介质通常可以体现为在诸如载波或者其他传输机制之类的调制数据信号中的计算机可读指令、数据结构、程序模块，并且可以包括任何信息递送介质。“调制数据信号”可以这样的信号，它的数据集中的一个或者多个或者它的改变可以在信号中编码信息的方式进行。作为非限制性的示例，通信介质可以包括诸如有线网络或者专线网络之类的有线介质，以及诸如声音、射频、微波、红外或者其它无线介质在内的各种无线介质。这里使用的术语计算机可读介质可以包括存储介质和通信介质二者。在根据本发明的计算设备200中，程序222包括应用程序运行方法300的多条程序指令，这些程序指令可以指示处理器204执行本发明的计算设备200中运行的应用程序运行方法300中的部分步骤，以便计算设备200中的各部分通过执行本发明的应用程序运行方法300来运行应用程序。计算设备200可以实现为服务器，例如文件服务器240、数据库250、服务器、应用程序服务器等，这些电子设备可以是诸如个人数字助理、无线网络浏览设备、应用专用设备、或者可以包括上面任何功能的混合设备。可以实现为包括桌面计算机和笔记本计算机配置的个人计算机，也在一些实施例中，计算设备200被配置为应用程序运行方法300。图3示出了根据本发明一个示范性实施例的应用程序运行方法300的流程示意图。本发明中的应用程序运行方法300适于在计算设备中执行，并进一步的适于在如图1所示的计算设备200中执行。如图3所示，指令执行方法300始于步骤S310，根据应用文件111生成应用程序的可执行文件。在外部存储器210中存储的应用文件111未进行预处理，不能直接加载到内部存储器230中。根据本发明的一个实施例，应用文件111需要由操作系统220对其进行编译、汇编和链接等步骤得到应用程序的可执行文件。本发明对操作系统220对应用文件111进行预处理的步骤和方法不做限制。随后，执行步骤S320，根据应用程序的可执行文件，确定应用程序在内部存储器230中存储的第一存储信息，第一存储信息包括在内部存储器230中所分配的堆区段的第一区段信息。应用程序在内部存储器230中存储的第一存储信息包括多个内存区段的区段信息。内部存储器230中所划分的内存区段包括堆区段、堆栈区段、代码区段、初始化数据区段和未初始化数据区段。内存区段由操作系统220在创建进程时，根据应用程序可执行文件的文件信息确定第一存储信息，根据第一存储器信息在内部存储器230中进行划分的。其中，堆区段存储应用程序中引用类型的对象，可进行动态分配。根据应用程序的可执行文件，确定应用程序在内部存储器230中存储的第一存储信息时，根据可执行文件的数据大小，确定在内部存储器230中分配的堆区段的第一区段大小。具体的根据可执行文件中的引用类型的对象多少，以及可进行分配的内存空间确定第一区段大小。第一区段大小需要大于可执行文件的数据大小，以便给模块文件112预留存储空间。接着根据第一区段大小和其他信息生成初始化数据区段的第一区段信息，其他信息包括在第一区段的数据存储格式等。接着根据第一区段信息生成第一存储信息，将堆区段的第一区段信息和其他数据区段的区段信息作为第一存储信息。其他数据区段包括堆栈区段、代码区段、初始化数据区段和未初始化数据区段。随后，执行步骤S330，根据第一区段信息和模块文件112生成堆区段的第二区段信息。图4示出了根据本发明一个示范性实施例的向堆区段插入模块文件的示意图。如图4所示，将模块文件112插入堆栈区段412，堆栈区段412的区段信息为根据步骤S310和S320计算得到的第一区段信息。在内部存储器230中加载可执行文件时，为模块文件112预留存储空间。预留存储空间在所设置的堆区段412中，通过预留存储空间，即可实现在堆区段412中插入模块文件112。模块文件421与图1中的模块文件112相同，但若模块文件112不能直接存储到内部存储器230中时，需要将模块文件112进行预处理得到模块文件421。将模块文件112插入堆栈区段412后，得到实际存储可执行文件的堆栈区段422，但由于模块文件421并不被应用程序感知，因此应用程序仍然将模块文件421与堆栈区段422共同占用的存储空间作为堆栈区段。而实际存储可执行文件的堆栈区段422相比堆栈区段412大小和存储结束位置均发生变化，在后续读取可执行文件时，需要重新计算读取可执行文件的起始位置。根据第一区段信息和模块文件112生成第二区段信息时，首先根据可执行文件的数据大小和第一区段信息生成剩余空间大小。生成剩余空间大小时，将第一区段大小与可执行文件的数据大小相减，得到剩余空间大小。以便根据剩余空间大小，判断剩余空间大小是否大于模块文件大小。具体的，可通过堆区段的顶部指针与可执行文件在堆区段中存储的尾部指针相减，得到剩余空间大小。若大于，则将第一区段大小作为第二区段大小。避免存储模块文件112和可执行文件时，堆区段412的空间不够，导致内存空间溢出。随后根据第二区段大小生成第二区段信息。若剩余控件大小小于或等于模块文件大小，则在存储模块文件112和可执行文件时，可能会导致内容空间溢出，此时插入模块文件失败，无法插入模块文件。随后，执行步骤S340，根据第二区段信息和第一存储信息生成第二存储信息。生成第二存储信息时，将堆栈区段的第二区段信息，与第一存储信息中的其他数据区段的区段信息进行组合，得到第二存储信息。其他数据区段包括堆栈区段、代码区段、初始化数据区段和未初始化数据区段。随后，执行步骤S350，根据第二存储信息将应用程序的可执行文件和模块文件112加载到内部存储器230。将应用程序的可执行文件和模块文件112加载到内部存储器230时，首先根据第二存储信息在内部存储器中分配堆区段。分配堆区段时，根据第二区段大小确定堆区段的大小。如图4所示，分配的堆区段的区段大小为堆区段412的区段大小。实际用于存储初始化文件的堆栈区段422相对于计算的堆区段412大小减小，所减小存储空间用于存储模块文件421。将原本堆栈区段412所要存储的引用类型的对象依旧在堆区段422中进行存储。随后，获取所分配的堆区段的顶部指针和底部指针。顶部指针为堆区段的结束位置，底部指针为堆区段的起始位置，顶部指针和底部指针中间为堆区段的存储空间。在内存中分配堆栈区段后，会自动生成顶部指针和底部指针，用于定位堆区段的起始位置和结束位置。接着，根据底部指针将可执行文件加载到堆区段，将底部指针所指向的存储区域作为可执行文件存储的起始位置。随后，根据顶部指针和模块文件112确定模块文件112存储的起始位置。计算模块文件存储的起始位置时，将顶部指针与模块文件112的大小相减得到模块文件存储的起始位置。由于在堆区段中进行存储时，堆区段的底部存储数据，因此在堆区段的顶部为模块文件112预留存储空间，并据此计算模块文件112存储的起始位置。接着根据模块文件存储的起始位置将模块文件加载到内部存储器。先加载可执行文件，再加载模块文件112，完成对应用程序数据的存储。最后，执行步骤S360，根据内部存储器230中的可执行文件和模块文件112运行应用程序，并在应用程序中构建功能模块，以实现应用程序的附加功能。内部存储器230中的包括可直接调用执行的可执行文件和模块文件112，由操作系统220可直接调用执行可执行文件以运行应用。调用可执行文件时，根据模块文件112存储的起始位置，确定得到读取可执行文件的起始位置，对可执行文件进行读取。在应用程序中构建功能模块时，根据其中分配的堆区段的顶部指针，确定模块文件112读取的起始位置。。随后再根据模块文件112读取的起始位置，调取模块文件112，构建功能模块。当随着应用运行，需要存储更多数据时，需要调整模块文件112的存储空间，以便更好的实现应用程序的附加功能。根据本发明的一个实施例，本发明所分配的模块文件112的存储空间可动态进行调整。当模块文件需要新的存储空间时，计算模块文件112的当前大小。随后根据顶部指针与计算的模块文件112的当前大小重新确定模块文件112存储的起始位置，从而重新分配模块文件112的存储空间。最后根据重新确定的模块文件112存储的起始位置将模块文件112加载到内部存储器，功能模块即可使用新分配的存储空间执行相应附加功能。本发明中的应用程序运行方法，适于在计算设备中执行，计算设备包括外部存储器和内部存储器，外部存储器中存储有应用文件和模块文件。首先根据应用文件生成应用程序的可执行文件，在对应用进行加载时，需要将外部存储器中的应用文件进行处理得到二进制类型文件的可执行文件，才能将其存入内部存储器中。随后根据应用程序的可执行文件，确定应用程序在内部存储器中存储的第一存储信息，第一存储信息包括在内部存储器中所分配的堆区段的第一区段信息。在内部存储器中加载应用程序的可执行文件时，在内部存储器中划分有多个区段，在每个区段加载可执行文件的相应数据。内部存储器的其中一个区段为堆区段，若需要在应用程序中插入的模块文件需要获取和存储新数据，而所需要存储的新数据是随着应用运行时不断增加的，则需要将新数据插入到堆区段中，因为堆区段可以向模块文件动态分配存储空间，其他数据区段一旦存储模块文件后无法更改为模块文件分配的存储空间，无法动态增加。为了将模块文件加载到堆区段，需要根据堆区段的第一区段信息和模块文件，重新生成堆区段的第二区段信息。再根据第二区段信息和第一存储信息生成第二存储信息，以便根据第二存储信息将应用程序的可执行文件和模块文件加载到内部存储器。在将应用程序的可执行文件和模块文件一起加载到内部存储器后，即可在应用程序中构建功能模块，以实现应用程序的附加功能。在此处所提供的说明书中，说明了大量具体细节。然而，能够理解，本发明的实施例可以在没有这些具体细节的情况下被实践。在一些实例中，并未详细示出公知的方法、结构和技术，以便不模糊对本说明书的理解。类似地，应当理解，为了精简本公开并帮助理解各个发明方面中的一个或多个，在上面对本发明的示例性实施例的描述中，本发明的各个特征有时被一起分组到单个实施例、图、或者对其的描述中。然而，并不应将该公开的方法解释成反映如下意图：即所要求保护的本发明要求比在每个权利要求中所明确记载的特征更多特征。更确切地说，如下面的权利要求书所反映的那样，发明方面在于少于前面公开的单个实施例的所有特征。因此，遵循具体实施方式的权利要求书由此明确地并入该具体实施方式，其中每个权利要求本身都作为本发明的单独实施例。本领域那些技术人员应当理解在本文所公开的示例中的设备的模块或单元或组间可以布置在如该实施例中所描述的设备中，或者可替换地可以定位在与该示例中的设备不同的一个或多个设备中。前述示例中的模块可以组合为一个模块或者此外可以分成多个子模块。本领域那些技术人员可以理解，可以对实施例中的设备中的模块进行自适应性地改变并且把它们设置在与该实施例不同的一个或多个设备中。可以把实施例中的模块或单元或组间组合成一个模块或单元或组间，以及此外可以把它们分成多个子模块或子单元或子组间。除了这样的特征和/或过程或者单元中的至少一些是相互排斥之外，可以采用任何组合对本说明书中公开的所有特征以及如此公开的任何方法或者设备的所有过程或单元进行组合。除非另外明确陈述，本说明书中公开的每个特征可以由提供相同、等同或相似目的的替代特征来代替。此外，本领域的技术人员能够理解，尽管在此所述的一些实施例包括其它实施例中所包括的某些特征而不是其它特征，但是不同实施例的特征的组合意味着处于本发明的范围之内并且形成不同的实施例。例如，在下面的权利要求书中，所要求保护的实施例的任意之一都可以以任意的组合方式来使用。此外，所述实施例中的一些在此被描述成可以由计算机系统的处理器或者由执行所述功能的其它装置实施的方法或方法元素的组合。因此，具有用于实施所述方法或方法元素的必要指令的处理器形成用于实施该方法或方法元素的装置。此外，装置实施例的在此所述的元素是如下装置的例子：该装置用于实施由为了实施该发明的目的的元素所执行的功能。这里描述的各种技术可结合硬件或软件，或者它们的组合一起实现。从而，本发明的方法和设备，或者本发明的方法和设备的某些方面或部分可采取嵌入有形媒介，例如软盘、CD-ROM、硬盘驱动器或者其它任意机器可读的存储介质中的程序代码的形式，其中当程序被载入诸如计算机之类的机器，并被所述机器执行时，所述机器变成实践本发明的设备。在程序代码在可编程计算机上执行的情况下，计算设备一般包括处理器、处理器可读的存储介质，至少一个输入装置，和至少一个输出装置。其中，存储器被配置用于存储程序代码；处理器被配置用于根据该存储器中存储的所述程序代码中的指令，执行本发明的应用程序运行方法。以示例而非限制的方式，计算机可读介质包括计算机存储介质和通信介质。计算机可读介质包括计算机存储介质和通信介质。计算机存储介质存储诸如计算机可读指令、数据结构、程序模块或其它数据等信息。通信介质一般以诸如载波或其它传输机制等已调制数据信号来体现计算机可读指令、数据结构、程序模块或其它数据，并且包括任何信息传递介质。以上的任一种的组合也包括在计算机可读介质的范围之内。如在此所使用的那样，除非另行规定，使用序数词“第一”、“第二”、“第三”等等来描述普通对象仅仅表示涉及类似对象的不同实例，并且并不意图暗示这样被描述的对象必须具有时间上、空间上、排序方面或者以任意其它方式的给定顺序。尽管根据有限数量的实施例描述了本发明，但是受益于上面的描述，本技术领域内的技术人员明白，在由此描述的本发明的范围内，可以设想其它实施例。此外，应当注意，本说明书中使用的语言主要是为了可读性和教导的目的而选择的，而不是为了解释或者限定本发明的主题而选择的。因此，在不偏离所附权利要求书的范围和精神的情况下，对于本技术领域的普通技术人员来说许多修改和变更都是显而易见的。对于本发明的范围，对本发明所做的公开是说明性的，而非限制性的，本发明的范围由所附权利要求书限定。
