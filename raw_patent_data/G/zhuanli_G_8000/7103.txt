标题title
Kubernetes集群调度方法、系统、设备及介质
摘要abst
本公开提供一种Kubernetes集群调度方法、系统、终端设备及计算机可读存储介质，其中，所述方法包括：分别获取Kubernetes集群中各个节点的安全配置信息；基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点；以及，将待调度Pod调度至所述调入节点中。本公开实施例考虑了Kubernetes集群调度中节点的安全配置情况，进而根据安全评分选择合适的节点完成调度，至少可以解决目前Kubernetes集群调度过程中所产生的安全可靠性问题。
权利要求书clms
1.一种Kubernetes集群调度方法，其特征在于，包括：分别获取Kubernetes集群中各个节点的安全配置信息；基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；基于所述安全评分结果从各个节点中选择出待调度Pod的调入节点；以及，将待调度Pod调度至所述调入节点中。2.根据权利要求1所述的方法，其特征在于，所述安全配置信息包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。3.根据权利要求2所述的方法，其特征在于，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述基于所述安全配置信息分别计算各个节点的安全评分，包括：基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。4.根据权利要求1所述的方法，其特征在于，所述基于所述安全评分结果从各个节点中选择出待调度Pod的调入节点，包括：基于所述安全评分结果从各个节点中选择出安全评分达到安全阈值的所有节点，作为若干预选节点；分别获取所述若干预选节点的第一资源配置信息；基于所述第一资源配置信息分别计算所述若干预选节点的第一资源配置评分，得到第一资源配置评分结果；以及，基于所述第一资源配置评分结果选择出资源配置评分最高的预选节点作为待调度Pod的调入节点。5.根据权利要求1所述的方法，其特征在于，所述基于所述安全评分结果从各个节点中选择出待调度Pod的调入节点，包括：分别获取各个节点的第二资源配置信息；基于所述第二资源配置信息分别计算各个节点的第二资源配置评分，得到第二资源配置评分结果；基于所述安全评分结果和所述第二资源配置评分结果按照预设规则计算各个设备节点的综合评分，得到综合评分结果；基于所述综合评分结果选择出评分最高的节点作为待调度Pod的调入节点。6.一种Kubernetes集群调度系统，其特征在于，包括：获取模块，其设置为分别获取Kubernetes集群中各个节点的安全配置信息；评分模块，其设置为基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；选择模块，其设置为基于所述安全评分结果从各个节点中选择出待调度Pod的调入节点；以及，调度模块，其设置为将待调度Pod调度至所述调入节点中。7.根据权利要求6所述的系统，其特征在于，所述安全配置信息包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。8.根据权利要求7所述的系统，其特征在于，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述评分模块，包括：第一计算单元，其设置为基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，第二计算单元，其设置为基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。9.一种终端设备，其特征在于，包括存储器和处理器，所述存储器中存储有计算机程序，当所述处理器运行所述存储器存储的计算机程序时，所述处理器执行根据权利要求1至5中任一项所述的Kubernetes集群调度方法。10.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时，所述处理器执行根据权利要求1至5中任一项所述的Kubernetes集群调度方法。
说明书desc
技术领域本公开涉及通信技术领域，尤其涉及一种Kubernetes集群调度方法、一种Kubernetes集群调度系统、一种终端设备以及一种计算机可读存储介质。背景技术Kubernetes集群是一个开源的，用于管理云平台中多个主机上的容器化的应用，主要用于自动化部署、扩展和管理容器应用，提供了资源调度、部署管理、服务发现、扩容缩容、监控等一整套功能。在Kubernetes中创建、调度和管理的最小单位是Pod，一个Pod中可以包含一个或多个运行的容器，这些容器运行在同一个节点上，共享节点的资源。Node作为Kubernetes的操作单元，用来分配给Pod进行绑定，Pod最终运行在Node上，Node可以认为是Pod的宿主机。在Kubernetes集群中，调度是指将Pod放置到合适的Node节点上，然后对应的Node上的Kubelet组件才能运行这些pod，目前的Pod调度通常考虑的是节点的资源占用情况，而随着网络安全越来越为重要，仅仅考虑节点的资源占用情况可能导致服务的安全可靠性得不到保障。发明内容本公开提供了一种Kubernetes集群调度方法、系统、终端设备及计算机可读存储介质，以至少解决目前Kubernetes集群调度过程中无法保障调度节点的安全可靠性问题。根据本公开的一方面，提供一种Kubernetes集群调度方法，包括：分别获取Kubernetes集群中各个节点的安全配置信息；基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点；以及，将待调度Pod调度至所述调入节点中。在一种实施方式中，所述安全配置信息包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。在一种实施方式中，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述基于所述安全配置信息分别计算各个节点的安全评分，包括：基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。在一种实施方式中，所述基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点，包括：基于所述安全评分结果从各个节点中选择出安全评分达到安全阈值的所有节点，作为若干预选节点；分别获取所述若干预选节点的第一资源配置信息；基于所述第一资源配置信息分别计算所述若干预选节点的第一资源配置评分，得到第一资源配置评分结果；以及，基于所述第一资源配置评分结果选择出资源配置评分最高的预选节点作为待调度Pod的调入节点。在一种实施方式中，所述基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点，包括：分别获取各个节点的第二资源配置信息；基于所述第二资源配置信息分别计算各个节点的第二资源配置评分，得到第二资源配置评分结果；基于所述安全评分结果和所述第二资源配置评分结果按照预设规则计算各个设备节点的综合评分，得到综合评分结果；基于所述综合评分结果选择出评分最高的节点作为待调度Pod的调入节点。根据本公开的另一方面，提供一种Kubernetes集群调度系统，包括：获取模块，其设置为分别获取Kubernetes集群中各个节点的安全配置信息；评分模块，其设置为基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；选择模块，其设置为基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点；以及，调度模块，其设置为将待调度Pod调度至所述调入节点中。在一种实施方式中，所述安全配置信息包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。在一种实施方式中，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述计算模块，包括：第一计算单元，其设置为基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，第二计算单元，其设置为基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。根据本公开的又一方面，提供一种终端设备，包括存储器和处理器，所述存储器中存储有计算机程序，当所述处理器运行所述存储器存储的计算机程序时，所述处理器执行所述的Kubernetes集群调度方法。根据本公开的再一方面，提供一种计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时，所述处理器执行所述的Kubernetes集群调度方法。根据本公开提供的Kubernetes集群调度方法、系统、终端设备及计算机可读存储介质，通过分别获取Kubernetes集群中各个节点的安全配置信息；基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点；以及，将待调度Pod调度至所述调入节点中。在进行Kubernetes集群调度时，考虑了各个节点的安全配置情况，进而根据安全评分选择合适的节点完成调度，至少可以解决目前Kubernetes集群调度过程中无法保障调度节点的安全可靠性问题。本公开的其它特征和优点将在随后的说明书中阐述，并且，部分地从说明书中变得显而易见，或者通过实施本公开而了解。本公开的目的和其他优点可通过在说明书、权利要求书以及附图中所特别指出的结构来实现和获得。附图说明附图用来提供对本公开技术方案的进一步理解，并且构成说明书的一部分，与本公开的实施例一起用于解释本公开的技术方案，并不构成对本公开技术方案的限制。图1为相关技术中的Kubernetes集群调度流程图；图2为本公开实施例提供的一种Kubernetes集群调度方法的流程示意图；图3为本公开实施例提供的另一种Kubernetes集群调度方法的流程示意图；图4为本公开实施例提供的又一种Kubernetes集群调度方法的流程示意图；图5为本公开实施例提供的一种Kubernetes集群调度系统的结构示意图；图6为本公开实施例提供的一种终端设备结构示意图。具体实施方式为使本公开实施例的目的、技术方案和优点更加清楚，以下结合附图对本公开的具体实施方式进行详细说明。应当理解的是，此处所描述的具体实施方式仅用于说明和解释本公开，并不用于限制本公开。需要说明的是，本公开的说明书和权利要求书及上述附图中的术语“第一”、“第二”等是用于区别类似的对象，而不必用于描述特定的顺序或先后次序；并且，在不冲突的情况下，本公开中的实施例及实施例中的特征可以相互任意组合。在后续的描述中，使用用于表示元件的诸如“模块”、“部件”或“单元”的后缀仅为了有利于本公开的说明，其本身没有特定的意义。因此，“模块”、“部件”或“单元”可以混合地使用。为便于理解，Kubernetes集群调度通常利用Kubernetes Scheduler完成，其中Kubernetes Scheduler的作用是将待调度的Pod按照一定的调度算法和策略绑定到集群中一个合适的Node节点上，并将绑定信息写入到etcd中，之后目标Node中kubelet服务通过API Server监听到Scheduler产生的Pod绑定事件获取Pod信息，然后下载镜像启动容器。在选择合适的Node时，涉及到的三个重要的对象是Podqueue、Nodelist和调度算法/调度策略。其中Podqueue是指用户创建且待调度的Pod集合，而Nodelist指的是在集群中所有可用的Node的集合。调度算法/调度策略指的是一种选择策略，它为调度Pod列表的每个待调度Pod从Node列表中选择一个最合适的Node。其中，调度流程如图1所示。相关技术中，Kubernetes Scheduler提供的默认调度流程分为以下两步：1)首先遍历所有目标Node，筛选出符合要求的候选节点，此处，Kubernetes内容多种预选策略供用户选择；2)确定最优Node过程，在第一步的基础上，采用优选策略计算出每个候选节点的积分，积分最高的节点即为最优Node。其中，筛选出候选节点主要通过以下策略获得：PodFitsHostPorts策略：检查Pod容器所需的HostPort是否已被节点上其它容器或服务占用。如果已被占用，则禁止Pod调度到该节点。PodFitsHost策略：检查Pod指定的NodeName是否匹配当前节点；PodFitsResources策略：检查节点是否有足够空闲资源来满足Pod的要求；PodMatchNodeSelector策略：检查Pod的节点选择器是否与节点Node的标签匹配；NoVolumeZoneConflict策略：对于给定的某块区域，判断如果在此区域的节点上部署Pod是否存在卷冲突；NoDiskConflict策略：根据节点请求的卷和已经挂载的卷，评估Pod是否适合该节点；MaxCSIVolumeCount策略：决定应该附加多少CSI卷，以及该卷是否超过配置的限制；CheckNodeMemoryPressure策略：如果节点报告内存压力，并且没有配置异常，那么将不会往那里调度Pod；CheckNodePIDPressure策略：如果节点报告进程id稀缺，并且没有配置异常，那么将不会往那里调度Pod；CheckNodeDiskPressure策略：如果节点报告存储压力，并且没有配置异常，那么将不会往那里调度Pod；CheckNodeCondition策略：节点可以报告它们有一个完全完整的文件系统，然而网络不可用，或者kubelet没有准备好运行Pods。如果为节点设置了这样的条件，并且没有配置异常，那么将不会往那里调度Pod。在经过上述调度算法选择出候选节点后，Node需要满足所有的策略才可以通过，如果有多个节点满足条件，就继续确定最优Node过程，最后按照优先级大小对节点排序，优选策略包括：SelectorSpreadPriority策略：对于属于同一服务、有状态集或副本集的Pods，会将Pods尽量分散到不同主机上；InterPodAffinityPriority策略：策略有podAffinity和podAntiAffinity两种配置方式。简单来说，就是根据Node上运行的Pod的Label菜单来进行调度匹配的规则，匹配的表达式有：In,NotIn,Exists,DoesNotExist，通过该策略，可以更灵活地对Pod进行调度；LeastRequestedPriority策略：偏向使用较少请求资源的节点。换句话说，放置在节点上的Pod越多，这些Pod使用的资源越多，此策略给出的排名就越低；MostRequestedPriority策略：偏向具有最多请求资源的节点。这个策略将把计划的Pods放到整个工作负载集所需的最小节点上运行；RequestedToCapacityRatioPriority策略：使用默认的资源评分函数模型创建基于ResourceAllocationPriority的requestedToCapacity。BalancedResourceAllocation策略：偏向具有平衡资源使用的节点。NodePreferAvoidPodsPriority策略：根据节点注释scheduler.alpha.kubernet.io/preferAvoidPods为节点划分优先级。可以使用它来示意两个不同的Pod不应在同一Node上运行；NodeAffinityPriority：根据preferredduringschedulingignoredingexecution中所示的节点关联调度偏好来对节点排序；ImageLocalityPriority策略：偏向已经拥有本地缓存Pod容器镜像的节点；ServiceSpreadingPriority策略：对于给定的服务，此策略旨在确保Service服务器的Pods运行在不同的节点上。总的结果是，Service对单个节点故障变得更有弹性；EqualPriority策略：赋予所有节点相同的权值1；EvenPodsSpreadPriority策略：实现择优pod的拓扑扩展约束。最后，系统通过上述所开启的优选策略计算Node的得分，如果开启多个优选策略，不同优选策略得分相加。系统将从优选步骤选出的节点绑定，如果存在多个Node，那么就随机取一个。通过上述Kubernetes完成调度的过程中所使用的调度策略，可以看出，其调度策略主要基于资源维度，而一些策略考虑了自定义标签维度，其中资源维度包括计算资源：CPU、内存、GPU等；存储资源：磁盘空间、磁盘IO、固态磁盘SSD等；网络资源：网络带宽、IP地址、端口等；镜像资源：节点本地缓存镜像等。上述相关技术中，在基于资源维度的Pod调度，虽然保证了服务的可用性以及资源的有效利用，但是在网络安全越来越为重要的大背景下，由于没有考虑节点的安全性可能导致最终的调度结果难以提供安全可靠的服务。而针对上述问题，本公开实施例提出了一种基于安全规范的Kubernetes集群调度策略，通过在进行Kubernetes集群调度时，对各个节点进行安全评分，进而根据安全评分选择合适的节点完成调度，其至少可以有效保障Kubernetes集群调度能够至少满足服务的安全可靠性。请参照图2，图2为本公开实施例提供的一种Kubernetes集群调度方法的流程示意图，如图2所示，所述方法包括步骤S201-S204。在步骤S201中，分别获取Kubernetes集群中各个节点的安全配置信息。具体地，所述安全配置信息可以包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。可以理解的是，其中操作系统、容器、Kubernetes组件均是在对应节点上所安装的，其安全配置信息可以反映节点的安全状态，在一些实施例中，对于节点的安全配置信息还可以考虑节点的安全漏洞信息。在步骤S202中，基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果。本实施例中，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述基于所述安全配置信息分别计算各个节点的安全评分，具体为：基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。具体地，安全配置规范可以采用CISBenchmarks的标准，基于CIS Benchmarks对于检查对象设置一系列的核查标准，如果配置符合CIS Benchmarks的标准，则获得该项目的分数，如果配置不符合CIS Benchmarks的标准，则无法获得该项目的分数。比如，CIS Docker Benchmark v1.2.0制定了标准中，得分项目共有89项，则总分为89分。在一些实施例中，还可以使用docker-bench-security-master的开源工具，对所有得分项目进行扫描核查，如果核查相关的Docker容器配置满足规范则得一分，不满足规范则不得分。其中安全优选策略的计算方式以下作为示例：安全优选策略计算公式如下：其中SystemSecurity指的是Node节点的操作系统安全配置评分，ContainerSecurity指的Node节点安装容器的安全配置评分，KubernetesSecurity指的是Node节点上安装的Kubernetes组件安全配置得分，int函数用于取整函数，SecurityPriority是安全优选策略最终评分，也即Node节点的安全评分。进一步地，操作系统安全配置评分采用CIS Operating Systems Benchmark来计算，计算公式如下：其中SystemSecurityScore为核查脚本基于CIS Operating Systems Benchmark核查的Node操作系统安全配置得分，SystemSecurityTotalScore为Node操作系统CISOperating Systems Benchmark安全配置总分，SystemSecurity为计算获得的Node操作系统安全配置评分。进一步地，容器安全配置评分通过CIS Docker Benchmark来计算，计算公式如下：其中ContainerSecurityScore为核查脚本基于CIS Docker Benchmark核查的Docker安全配置得分，ContainerSecurityTotalScore为Docker安全配置的总分，ContainerSecurity为计算获得的Node容器安全配置评分。进一步地，Kubernetes组件安全配置评分通过CIS Kubernetes Benchmark来计算，计算公式如下：其中KubernetesSecurityScore为核查脚本基于CIS Kubernetes Benchmark核查的Kubernetes安全配置得分，KubernetesSecurityTotalScore为Kubernetes安全配置的总分，Kubernetes Security为计算获得的节点的Kubernetes组件安全评分。以实际数据作为示例，我们以计算容器的安全配置得分为例来简单说明，核查工具docker-bench-security-master结果显示，所有得分的核查项目中，有70条项目的核查结果是复合规范的要求，其余19条项目核查结果不满足规范要求，则容器的安全配置得分为：在一些实施方式中，为提高安全评分的精准性，除了上述操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息之外，还可以增加更多的安全评价因素，比如对于Node节点的系统漏洞的安全信息等，需进一步计算Node节点的系统漏洞的安全评分，针对不同安全评价因素，Node节点安全评分的参考计算方法：其中αi为用户根据不同安全因素的重要程度，设定的比例系数。SecurityFactors为需要纳入考虑的不同的安全因素的测量得分。在步骤S203中，基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点。可以理解的是，待调度Pod为某节点中需要调出的Pod，例如，当前节点的资源不足需要将Pod调入至其他节点。在步骤S204中，将待调度Pod调度至所述调入节点中。本实施例中，通过计算每个Node的SystemSecurity、ContainerSecurity和KubernetesSecurity，我们可以最终获取所有Node节点的SecurityPriority。Kubernetes在调度时，基于节点的SecurityPrority得分选择调入节点进而完成Pod调度，例如，在节点的初选阶段，只有SecurityPrority达到某值的节点才能进入候选环节，进而根据节点的资源配置进一步选择出合适的节点；或者，优先选择SecurityPrority得分高的节点作为Pod调入节点，如果多个Node节点得分相同，则可以进一步基于节点的资源配置等信息进行选择，等等。请参照图3，图3为本公开实施例提供的另一种Kubernetes集群调度方法的流程示意图，在上一实施例的基础上，本实施例将节点的安全配置评分作为基础，节点的资源配置信息作为优选条件，选择出合适的节点作为调入节点，以提供安全可靠同时满足资源有效利用的服务，与上一实施例相比，本实施例将步骤S203进一步划分为以下步骤S301-S304。在步骤S301中，基于所述安全评分结果从各个节点中选择出安全评分达到安全阈值的所有节点，作为若干预选节点。本实施例中，Kubernetes集群调度根据节点的安全评分对节点进行预选，可以保证所选择出的节点至少是可以满足服务的安全可靠性要求的。可以理解的是，本领域技术人员可以结合现有技术和实际应用对安全阈值进行适应性设定，其中安全阈值表示保证服务安全可靠性的最低评分。在步骤S302中，分别获取所述若干预选节点的第一资源配置信息。在步骤S303中，基于所述第一资源配置信息分别计算所述若干预选节点的第一资源配置评分，得到第一资源配置评分结果；以及，在步骤S304中，基于所述第一资源配置评分结果选择出资源配置评分最高的预选节点作为待调度Pod的调入节点。具体地，可以根据待调入Pod的资源需求筛选掉一部分不满足资源要求的预选节点，获得预选节点集合，再在该预选节点集合中选择出资源配置评分最高的节点作为调入节点。在实际应用中，可能存在所有预选节点均不满足资源要求的情况，也即，资源配置评分最高的预选节点也不满足资源要求，为解决类似问题，系统不直接基于该选择出的调入节点进行Pod调入，可以提示用户重新对各个节点进行资源配置然后重新执行上述步骤S301-S304，或者等待若干时长重新执行上述步骤S301-S304计算各个节点的资源配置情况，直到选择出满足资源要求且最优的节点作为待调度Pod的调入节点。与相关技术相比，本实施例不需要获取所有节点的资源配置信息，只需要获取经过安全评分筛选通过的预选节点的资源配置信息，并对这些预选节点的资源配置进行评分判断，进而选择出最优节点，可以在保证服务的安全可靠性的同时，满足资源的有效利用。需要说明的是，本实施例中第一资源配置信息以及后述的第二资源配置信息包含了节点的资源以及自定义标签两个维度，其中自定义标签即表示该节点能够实现Pod的调度。请参照图4，图4为本公开实施例提供的又一种Kubernetes集群调度方法的流程示意图，与上一实施例不同的是，本实施例基于安全配置评分和资源配置评分按照一定规则计算出综合得分，然后基于综合评分选择出合适的节点，使得最终选择的节点在服务安全性和资源可用性之间达到有效平衡，具体地，将步骤S203进一步地划分为步骤S401-S404。在步骤S401中，分别获取各个节点的第二资源配置信息；在步骤S402中，基于所述第二资源配置信息分别计算各个节点的第二资源配置评分，得到第二资源配置评分结果；在步骤S403中，基于所述安全评分结果和所述第二资源配置评分结果按照预设规则计算各个设备节点的综合评分，得到综合评分结果；在步骤S404中，基于所述综合评分结果选择出评分最高的节点作为待调度Pod的调入节点。相应地，本实施例可以根据节点的安全评分结果和资源配置评分结果首先筛选掉一些不满足最低安全和资源条件的节点，获得节点集合，进而根据上述步骤S401-S404对该节点集合中的节点进行选择。考虑到实际应用中即使节点的综合评分最高仍然不能满足条件，则可以暂时不对Pod进行调度，保持当前状态，经过一段时间再根据上述步骤选择节点，直到所选择出的节点满足条件时完成调度。基于相同的技术构思，本公开实施例相应还提供一种Kubernetes集群调度系统，如图5所示，所述系统包括获取模块51、评分模块52、选择模块53以及调度模块54，其中，获取模块51，其设置为分别获取Kubernetes集群中各个节点的安全配置信息；评分模块52，其设置为基于所述安全配置信息分别计算各个节点的安全评分，得到各个节点的安全评分结果；选择模块53，其设置为基于所述安全评分结果从所述各个节点中选择出待调度Pod的调入节点；以及，调度模块54，其设置为将待调度Pod调度至所述调入节点中。在一种实施方式中，所述安全配置信息包括以下之一或者任意组合：操作系统安全配置信息、容器安全配置信息以及Kubernetes组件安全配置信息。在一种实施方式中，所述安全配置信息包括操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息，所述计算模块，包括：第一计算单元，其设置为基于各个节点的操作系统安全配置信息、容器安全配置信息和Kubernetes组件安全配置信息分别计算各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分；以及，第二计算单元，其设置为基于各个节点的操作系统安全配置评分、容器安全配置评分和Kubernetes组件安全配置评分分别计算各个节点的安全评分。在一种实施方式中，所述选择模块53，包括：预选单元，其设置为基于所述安全评分结果从各个节点中选择出安全评分达到安全阈值的所有节点，作为若干预选节点；第一获取单元，其设置为分别获取所述若干预选节点的第一资源配置信息；第三计算单元，其设置为基于所述资源配置信息分别计算所述若干预选节点的第一资源配置评分，得到第一资源配置评分结果；以及，第一选择单元，其设置为基于所述第一资源配置评分结果选择出资源配置评分最高的预选节点作为待调度Pod的调入节点。在一种实施方式中，所述选择模块53，包括：第二获取单元，其设置为分别获取各个节点的第二资源配置信息；第四计算单元，其设置为基于所述第二资源配置信息分别计算各个节点的第二资源配置评分，得到第二资源配置评分结果；第五计算单元，其设置为基于所述安全评分结果和所述第二资源配置评分结果按照预设规则计算各个设备节点的综合评分，得到综合评分结果；第二选择单元，其设置为基于所述综合评分结果选择出评分最高的节点作为待调度Pod的调入节点。基于相同的技术构思，本公开实施例相应还提供一种终端设备，如图6所示可，所述终端设备包括存储器61和处理器62，所述存储器61中存储有计算机程序，当所述处理器62运行所述存储器61存储的计算机程序时，所述处理器62执行所述的Kubernetes集群调度方法。基于相同的技术构思，本公开实施例相应还提供一种计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时，所述处理器执行所述的Kubernetes集群调度方法。本领域普通技术人员可以理解，上文中所公开方法中的全部或某些步骤、系统、装置中的功能模块/单元可以被实施为软件、固件、硬件及其适当的组合。在硬件实施方式中，在以上描述中提及的功能模块/单元之间的划分不一定对应于物理组件的划分；例如，一个物理组件可以具有多个功能，或者一个功能或步骤可以由若干物理组件合作执行。某些物理组件或所有物理组件可以被实施为由处理器，如中央处理器、数字信号处理器或微处理器执行的软件，或者被实施为硬件，或者被实施为集成电路，如专用集成电路。这样的软件可以分布在计算机可读介质上，计算机可读介质可以包括计算机存储介质和通信介质。如本领域普通技术人员公知的，术语计算机存储介质包括在用于存储信息的任何方法或技术中实施的易失性和非易失性、可移除和不可移除介质。计算机存储介质包括但不限于RAM、ROM、EEPROM、闪存或其他存储器技术、CD-ROM、数字多功能盘或其他光盘存储、磁盒、磁带、磁盘存储或其他磁存储装置、或者可以用于存储期望的信息并且可以被计算机访问的任何其他的介质。此外，本领域普通技术人员公知的是，通信介质通常包含计算机可读指令、数据结构、程序模块或者诸如载波或其他传输机制之类的调制数据信号中的其他数据，并且可包括任何信息递送介质。最后应说明的是：以上各实施例仅用以说明本公开的技术方案，而非对其限制；尽管参照前述各实施例对本公开进行了详细的说明，本领域的普通技术人员应当理解：其依然可以对前述各实施例所记载的技术方案进行修改，或者对其中部分或者全部技术特征进行等同替换；而这些修改或者替换，并不使相应技术方案的本质脱离本公开各实施例技术方案的范围。
