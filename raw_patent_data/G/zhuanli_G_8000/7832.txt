标题title
转屏处理方法、装置、介质及电子设备
摘要abst
本申请实施例提供了一种转屏处理方法、装置、介质及电子设备，有利于提升转屏的快速性，并避免误触发转屏流程。在电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，其中电子设备的屏幕处于第一屏幕显示状态；在屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值的情况下，基于转屏资源完成转屏操作，在转屏操作完成后屏幕切换为第二屏幕显示状态。
权利要求书clms
1.一种转屏处理方法，应用于电子设备，其特征在于，包括：在所述电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，其中所述电子设备的屏幕处于第一屏幕显示状态；在所述屏幕的旋转角度在预设时长内从所述第一角度阈值增加至第二角度阈值的情况下，基于所述转屏资源完成转屏操作，在所述转屏操作完成后所述屏幕切换为第二屏幕显示状态。2.根据权利要求1所述的方法，其特征在于，所述方法还包括：在所述屏幕的旋转角度在所述预设时长内未从所述第一角度阈值增加至所述第二角度阈值的情况下，控制所述屏幕持续处于所述第一屏幕显示状态。3.根据权利要求1或2所述的方法，其特征在于，所述方法还包括：在所述屏幕的旋转角度在所述预设时长内未从所述第一角度阈值增加至所述第二角度阈值的情况下，删除预加载的所述转屏资源。4.根据权利要求1至3中任一项所述的方法，其特征在于，所述转屏资源包括以下至少一项：对所述屏幕当前显示的目标界面执行截屏操作得到的截屏图像；根据所述截屏图像生成的转屏动画；用于暂时屏蔽所述屏幕上的输入的资源。5.根据权利要求1至4中任一项所述的方法，其特征在于，在所述屏幕切换为所述第二屏幕显示状态的情况下，所述屏幕上显示的界面的布局为与所述第二屏幕显示状态对应的布局；在所述屏幕切换为所述第二屏幕显示状态之前，所述屏幕上显示的界面的布局为与所述第一屏幕显示状态对应的布局。6.根据权利要求1所述的方法，其特征在于，所述方法还包括：所述在所述电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，包括：获取第一Sensor事件，并根据第一Sensor事件预加载转屏资源；其中，所述第一Sensor事件用于指示所述屏幕的旋转角度达到所述第一角度阈值并用于触发预加载所述转屏资源。7.根据权利要求1所述的方法，其特征在于，所述在所述屏幕的旋转角度在预设时长内从所述第一角度阈值增加至第二角度阈值的情况下，基于所述转屏资源完成转屏操作，包括：获取第二Sensor事件，并根据所述第二Sensor事件基于所述转屏资源完成所述转屏操作；其中，所述第二Sensor事件用于指示所述屏幕的旋转角度在所述预设时长内从所述第一角度阈值增加至所述第二角度阈值，并触发执行所述转屏操作。8.一种转屏处理装置，应用于电子设备，其特征在于，包括：加载模块，用于在所述电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，其中所述电子设备的屏幕处于第一屏幕显示状态；执行模块，用于在所述屏幕的旋转角度在预设时长内从所述第一角度阈值增加至第二角度阈值的情况下，基于所述加载模块加载的所述转屏资源完成转屏操作，在所述转屏操作完成后所述屏幕切换为第二屏幕显示状态。9.根据权利要求8所述的装置，其特征在于，所述执行模块，还用于在所述屏幕的旋转角度在所述预设时长内未从所述第一角度阈值增加至所述第二角度阈值的情况下，控制所述屏幕持续处于所述第一屏幕显示状态。10.根据权利要求8或9所述的装置，其特征在于，所述执行模块，还用于在所述屏幕的旋转角度在所述预设时长内未从所述第一角度阈值增加至所述第二角度阈值的情况下，删除预加载的所述转屏资源。11.根据权利要求8至10中任一项所述的装置，其特征在于，所述转屏资源包括以下至少一项：对所述屏幕当前显示的目标界面执行截屏操作得到的截屏图像；根据所述截屏图像生成的转屏动画；用于暂时屏蔽所述屏幕上的输入的资源。12.根据权利要求8至11中任一项所述的装置，其特征在于，在所述屏幕切换为所述第二屏幕显示状态的情况下，所述屏幕上显示的界面的布局为与所述第二屏幕显示状态对应的布局；在所述屏幕切换为所述第二屏幕显示状态之前，所述屏幕上显示的界面的布局为与所述第一屏幕显示状态对应的布局。13.根据权利要求8所述的装置，其特征在于，所述执行模块，具体用于获取第一Sensor事件，并根据第一Sensor事件预加载转屏资源；其中，所述第一Sensor事件用于指示所述屏幕的旋转角度达到所述第一角度阈值并用于触发预加载所述转屏资源。14.根据权利要求8所述的装置，其特征在于，所述执行模块，具体用于获取第二Sensor事件，并根据所述第二Sensor事件基于所述转屏资源完成所述转屏操作；其中，所述第二Sensor事件用于指示所述屏幕的旋转角度在所述预设时长内从所述第一角度阈值增加至所述第二角度阈值，并触发执行所述转屏操作。15.一种可读介质，其特征在于，所述可读介质上存储有指令，所述指令在电子设备上执行时使所述电子设备执行权利要求1至7中任一项所述的转屏处理方法。16.一种电子设备，其特征在于，包括：存储器，用于存储由电子设备的一个或多个处理器执行的指令，以及处理器，是所述电子设备的处理器之一，用于执行权利要求1至7中任一项所述的转屏处理方法。
说明书desc
技术领域本申请涉及屏幕显示技术领域，特别涉及一种转屏处理方法、装置、介质及电子设备。背景技术随着手机、平板电脑等电子设备的屏幕的尺寸越来越大，这些电子设备通常都支持屏幕旋转，以支持用户根据喜好或者运行应用程序的显示需求随时切换横屏显示或者竖屏显示，即横竖屏旋转。当前，电子设备进行横竖屏旋转的转屏流程比较固定。如图1所示，当前屏幕旋转的主要流程为：在屏幕需旋转到60度时，电子设备对屏幕当前显示的原始界面进行截屏操作，得到截屏图层，并加载截屏图像、转屏动画、环境构建等转屏所需的所有资源，以实现渐变旋转这一转屏过程。然而，在当前横竖屏旋转的过程中，用户必须将电子设备旋转到足够的角度 才会触发电子设备开启转屏流程，即电子设备达到该旋转角度之后才会开始加载转屏资源，而整个转屏流程中需要加载完成的转屏资源较多，并且涉及操作系统中交互的模块较多，从而导致该转屏流程整体耗时较长。这样一来，将导致用户将电子设备旋转到60度之后，需要经过较长时间才能看到转屏动画 以及转屏完成后的图像画面。如此，用户感知到转屏前的图像画面切换到转屏完成后的图像画面的过程的动效比较卡顿和生硬，不够自然流畅。此外，用户一旦用户触发电子设备旋转到60度这一触发角度，电子设备就会立即开始上述转屏流程，并没有用户反悔机制。发明内容本申请实施例提供了一种转屏处理方法、装置、介质及电子设备，可以提升转屏的快速性，并避免误触发转屏流程。第一方面，本申请实施例提供了一种转屏处理方法，应用于电子设备，包括：在电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，其中电子设备的屏幕处于第一屏幕显示状态；在屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值的情况下，基于转屏资源完成转屏操作，在转屏操作完成后屏幕切换为第二屏幕显示状态。如此，可以提升转屏的快速性，并避免误触发转屏流程。在上述第一方面的一种可能的实现中，上述方法还包括：在屏幕的旋转角度在预设时长内未从第一角度阈值增加至第二角度阈值的情况下，控制屏幕持续处于第一屏幕显示状态，即不开始执行转屏操作。在上述第一方面的一种可能的实现中，上述方法还包括：在屏幕的旋转角度在预设时长内未从第一角度阈值增加至第二角度阈值的情况下，删除预加载的转屏资源，即执行下文中的回滚操作。在上述第一方面的一种可能的实现中，上述转屏资源包括以下至少一项：对屏幕当前显示的目标界面执行截屏操作得到的截屏图像；根据截屏图像生成的转屏动画；用于暂时屏蔽屏幕上的输入的资源。在上述第一方面的一种可能的实现中，在屏幕切换为第二屏幕显示状态的情况下，屏幕上显示的界面的布局为与第二屏幕显示状态对应的布局；在屏幕切换为第二屏幕显示状态之前，屏幕上显示的界面的布局为与第一屏幕显示状态对应的布局。即转屏的过程中电子设备可以调整屏幕上显示的内容的布局。在上述第一方面的一种可能的实现中，上述在电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，包括：获取第一Sensor事件，并根据第一Sensor事件预加载转屏资源；其中，第一Sensor事件用于指示屏幕的旋转角度达到第一角度阈值并用于触发预加载转屏资源。在上述第一方面的一种可能的实现中，上述在屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值的情况下，基于转屏资源完成转屏操作，包括：获取第二Sensor事件，并根据第二Sensor 事件基于转屏资源完成转屏操作；其中，第二Sensor事件用于指示屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值，并触发执行转屏操作。第二方面，本申请实施例提供了一种转屏处理装置，应用于电子设备，包括：加载模块，用于在电子设备的屏幕的旋转角度达到第一角度阈值的情况下，预加载转屏资源，其中电子设备的屏幕处于第一屏幕显示状态；执行模块，用于在屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值的情况下，基于加载模块加载的转屏资源完成转屏操作，在转屏操作完成后屏幕切换为第二屏幕显示状态。在上述第二方面的一种可能的实现中，上述执行模块，还用于在屏幕的旋转角度在预设时长内未从第一角度阈值增加至第二角度阈值的情况下，控制屏幕持续处于第一屏幕显示状态。在上述第二方面的一种可能的实现中，上述执行模块，还用于在屏幕的旋转角度在预设时长内未从第一角度阈值增加至第二角度阈值的情况下，删除预加载的转屏资源。在上述第二方面的一种可能的实现中，上述转屏资源包括以下至少一项：对屏幕当前显示的目标界面执行截屏操作得到的截屏图像；根据截屏图像生成的转屏动画；用于暂时屏蔽屏幕上的输入的资源。在上述第二方面的一种可能的实现中，在屏幕切换为第二屏幕显示状态的情况下，屏幕上显示的界面的布局为与第二屏幕显示状态对应的布局；在屏幕切换为第二屏幕显示状态之前，屏幕上显示的界面的布局为与第一屏幕显示状态对应的布局。在上述第二方面的一种可能的实现中，上述执行模块，具体用于获取第一 Sensor事件，并根据第一Sensor事件预加载转屏资源；其中，第一Sensor事件用于指示屏幕的旋转角度达到第一角度阈值并用于触发预加载转屏资源。在上述第二方面的一种可能的实现中，上述执行模块，具体用于获取第二 Sensor事件，并根据第二Sensor事件基于转屏资源完成转屏操作；其中，第二 Sensor事件用于指示屏幕的旋转角度在预设时长内从第一角度阈值增加至第二角度阈值，并触发执行转屏操作。第三方面，本申请实施里提供了一种可读介质，该可读介质上存储有指令，所述指令在电子设备上执行时使所述电子设备执行上述第一方面所述的转屏处理方法。第四方面，本申请实施里提供了一种电子设备，包括：存储器，用于存储由电子设备的一个或多个处理器执行的指令，以及处理器，是该电子设备的处理器之一，用于执行如上述第一方面所述的转屏处理方法。附图说明图1为现有技术提供的一种转屏处理方法的流程示意图；图2根据本申请的一些实施例，示出了一种电子设备的结构示意图；图3为相关技术提供的一种Sensor事件上报的流程示意图；图4根据本申请的一些实施例，示出了一种Sensor事件上报的流程示意图；图5根据本申请的一些实施例，示出了一种转屏处理方法的流程示意图；图6根据本申请的一些实施例，示出了一种转屏处理过程中屏幕显示内容的示意图；图7根据本申请的一些实施例，示出了一种转屏处理过程中屏幕显示内容的示意图；图8根据本申请的一些实施例，示出了一种电子设备的结构示意图；图9根据本申请的一些实施例，示出了一种电子设备的软件结构框图。具体实施方式本申请的说明性实施例包括但不限于转屏处理方法、装置及电子设备。本申请实施例提供的转屏处理方法，电子设备在检测到屏幕的旋转角度达到较小的第一阈值时，可以预加载转屏资源，而不是立即切换屏幕显示状态。直至预设定时时长内屏幕的旋转角度持续增大到较大的第二阈值时，才基于预加载的转屏资源完成转屏操作，以切换屏幕显示状态，如将横屏显示状态切换为竖屏显示状态，或者将竖屏显示状态切换为横屏显示状态。如果在预设定时时长内屏幕的旋转角度未增加至第二阈值，那么电子设备将不会执行转屏操作以切换屏幕显示状态，并会删除预加载的转屏资源。如此，可以提升转屏的快速性，并避免误触发转屏的可能性。需要说明的是，本申请实施例提供的转屏处理方法，执行主体可以为电子设备，或者，该电子设备的中央处理器，或者该电子设备中的用于执行转屏处理的控制模块或装置。以下实施例中，以电子设备为执行主体，说明本申请实施例提供的转屏处理方法。可以理解的是，适用于本申请的电子设备可包括但不限于：手机、平板电脑、摄像机、相机、桌面型计算机、膝上型计算机、手持计算机、笔记本电脑、台式电脑、超级移动个人计算机、上网本，以及蜂窝电话、个人数字助理、增强现实 虚拟现实设备、媒体播放器、智能电视、智能音箱、智能手表等。具体地，本申请提供的电子设备为具有屏幕，且支持屏幕旋转的电子设备。以下实施例中，以电子设备为手机为例进行说明。下面将结合附图对本申请的实施例作进一步地详细描述。如图2所示，为本申请提供的电子设备的结构组成示意图。图2中电子设备 100包括应用层11、框架层12、本地层13和硬件层14。其中，硬件层14中包括传感器141,用于检测电子设备100的屏幕的旋转角度和旋转方向等Sensor参数，即Sensor事件，并将 Sensor事件上报给Native层13。例如，上述Sensor 141包括但不限于陀螺仪、加速度传感器等。可以理解的是，屏幕的旋转角度指的是：电子设备转动过程中，保持其屏幕所处的平面不变或者屏幕所处的不同平面之间的角度差处于一定阈值范围内时，屏幕沿着其所在屏幕的旋转角度。此外，对屏幕的旋转方向的详细与旋转角度的描述类似，此处不再赘述。Native层13，也可以称为服务层，包括Sensorhub131 和图层合成管理服务132。其中，Sensorhub 131用于获取Sensor 141采集的屏幕旋转角度，并判断旋转角度是否达到阈值，进而将旋转角度达到阈值的Sensor 事件上报至框架层12，以实现向框架层12通知横竖屏旋转的消息。例如，第一阈值或第二阈值，如第一阈值为45度，第二阈值为60度。图层合成管理服务 132可以用于从框架层12获取截屏图像，并基于截屏图像生成转屏动画等转屏资源。框架层12包括Sensor管理服务121、窗口管理服务122和转屏模块123。其中，sensor管理服务121用于获取Native层13上报的通知横竖屏旋转的消息，并根据该消息向窗口管理服务122上报Sensor事件，即上报通知横竖屏旋转的消息。窗口管理服务122用于根据从Sensor管理服务121 获取通知横竖屏旋转的消息，向转屏模块123发送启动转屏的消息，以及用于向应用层11中的系统用户界面111上报通知横竖屏旋转的消息，并接收System UI 111反馈的结束转屏动画的消息。转屏模块123，用于根据启动转屏的消息，运行转屏动画对应的流程，该流程包括截屏、加载转屏动画、暂时屏蔽屏幕输入等动作。具体地，转屏模块123用于将截屏得到的截屏发送给Native层13中的图层合成管理服务132，并从图层合成管理服务 132获取与该截屏图像对应的转屏动画。应用层11包括System UI 111和发射层112。其中，System UI 111用于根据从窗口管理服务122获取的通知横竖屏旋转的消息，对横竖屏旋转时运行的应用程序的界面进行重新布局，还用于在对应用程序的界面在横竖屏旋转时重新布局完成后，向窗口管理服务122发送结束转屏动画的消息，以指示窗口管理服务122结束当前横竖屏旋转的流程。Launcher 112为系统桌面启动器，用于触发在屏幕上显示桌面界面，如包括一个或多个应用程序图像的主界面或者负一屏界面。其中，本申请主要以横竖屏旋转时System UI111调整应用程序的界面为例进行说明，对横竖屏旋转时Launcher 112调整桌面界面的描述可以参照System UI 111调整界面的相关描述，本申请实施例对此不做赘述。在相关技术方案中，如图3所示，电子设备100的Native层13中的 Sensorhub 131将屏幕旋转角度为60度的Sensor事件上报给框架层12中的窗口管理服务122，立刻触发窗口管理服务122直接启动转屏动画对应的流程执行横竖屏转换。即现有技术中只要屏幕的旋转角度为60度就会立即触发横竖屏旋转，用户没有反悔机制，容易导致用户误触发电子设备的转屏流程。此外，由于电子设备的屏幕旋转角度到达60度时就需要同时加载并运行所有转屏资源，导致转屏过程中电子设备的性能较差，并且从屏幕旋转角度到达触发转屏的60度起到转屏流程结束的耗时较长。为了解决上述相关技术方案存在的问题，本申请通过增加上报的旋转角度对应的Sensor事件，实现预处理转屏流程，以将转屏流程分为预处理的阶段和实际执行转屏操作的阶段，实现分阶段的转屏处理流程。例如，在图4所示的实施例中，本申请实施例中转屏处理的流程中， Sensorhub131在屏幕的旋转角度为45度时上报的Sensor事件为45度预转屏事件，并增加在屏幕的旋转角度为60度时上报60度转屏事件。具体地，Sensorhub 131上报45度预转屏事件和60度转屏事件之间存在预设定时时长，例如，图4 示出的时长time1。以下将参考图3和图4示出Sensor的上报的流程，列举出图2示出的电子设备100中的各个部件之间执行本申请提供的转屏处理的流程，与执行现有技术的转屏处理的流程相比存在的区别：1、在本申请的一些实施例中，Sensorhub 131上报的Sensor事件里增加了一个标识信息，用于标识45度预转屏，此时该Sensor事件可以称为45度预转屏事件。具体地，45度预转屏事件用于触发电子设备100在屏幕旋转角度为45度时预加载转屏资源，但不立即执行旋转屏幕的转屏操作。此外，在Sensorhub 131上报的Sensor事件里还可以增加另一个标识信息，用于标识 60度转屏，此时该Sensor事件可以称为60度转屏事件。具体地，60度转屏事件用于触发电子设备100在屏幕的旋转角度为60度时开始执行旋转屏幕的转屏操作。2、在本申请的一些实施例中，窗口管理服务122中增加预截屏和超时回滚流程函数，并提供给转屏旋转动画123调用。3、在本申请的一些实施例中，转屏模块123中收到45度转屏事件时，调用窗口管理服务122中的预截屏和超时回滚流程函数，实现预加载转屏资源，同时启动线程用于超时回滚。其中，转屏旋转动画123调用该函数可以先对屏幕当前显示的界面执行截屏操作得到截屏图像，以及将截屏图像发送给图层合成管理服务132以获取转屏动画，但是不会立即运行转屏动画等转屏动画资源。其中，超时回滚流程指的是:启动预设定时器，并在定时器定时时长超时的情况下,转屏模块123取消转屏流程，并删除已经预加载的转屏资源，即对转屏流程进行回滚操作。具体地，预设定时器的定时时长为上述预定定时时长。作为一种示例，转屏模块123中可以设置有回滚标志位，在转屏模块123 开启超时回滚流程时可以修改该回滚标志位，如将回滚标志位的数值由0修改为 1，表示当前转屏模块123已经预截屏得到截图图像并启用超时回滚流程。4、在本申请的一些实施例中，转屏模块中收到60度转屏事件时，调用窗口管理服务122执行正式转屏流程，窗口管理服务122判读如果有预截屏操作得到的截图图像，则跳过截屏流程，同时控制截屏标志位还原，如将截屏标志位的数值由1还原为0。5、在本申请的一些实施例中，转屏旋转动画123中如果在设定时间阈值内未收到60度转屏事件，则调用窗口管理服务122执行转屏状态回滚流程，以保持当前的横屏显示状态或者竖屏显示状态不变。作为一种示例，如图6中的-所示，以电子设备为手机为例，示出手机100的屏幕的状态的示意图。其中，图6中的-示出的屏幕分别为正向竖屏显示状态、正向横屏显示状态、反向竖屏显示状态和反向横屏显示状态。并且，图6示出的屏幕的旋转方向均为逆时针方向。可以理解的是，图6中的-示出的屏幕可以是沿着逆时针方向持续旋转，使得屏幕的旋转角度依次增大。假定图6中的 示出的屏幕的状态为未转屏之前的初始屏幕显示状态，即图6中的示出的屏幕的旋转角度α1为0度，则图6中的-中的屏幕示出的屏幕的旋转角度α2、α3和α4依次为90度，180度和270度。此外，在其他实施例中，用户可以触发电子设备100的屏幕按照顺时针方向旋转，例如以图6中的 示出的屏幕的状态为未转屏之前的初始屏幕显示状态，按照顺时针方向持续旋转电子设备100中的屏幕，可以依次得到如图6中的、、依次示出的屏幕显示状态。需要说明的是，图6中坐标平面XOY用于表示电子设备100的屏幕所在的平面，直线M为屏幕的横向中轴线。其中，屏幕的旋转角度可以通过图6中示出的坐标平面XOY中的坐标轴Y的正方向与直线M的正方向之间的角度表示，但不限于此。具体地，本申请实施例中提供的转屏处理方法，可以针对图6中相邻的两个屏幕显示状态之间的转屏处理过程为例进行说明。其中，相邻的两个屏幕显示状态之间的转屏处理具体包括旋转角度由0度增大至45度时电子设备100执行预转屏流程，由45度增大至60度时电子设备100正式开始执行转屏流程。可以理解的是，旋转角度为0到60度时，电子设备100控制屏幕保持为转屏之前的初始屏幕显示状态；旋转角度大于60度之后，电子设备100控制屏幕开始转屏流程，并在转屏流程执行完成后切换屏幕显示状态。一般而言，用户通常习惯在正向竖屏显示状态和正向横屏显示状态下使用电子设备100。以下实施例中，将以图6中的示出的屏幕的正向竖屏显示状态为未转屏之前的初始状态，用户沿着逆时针方向控制电子设备100的屏幕旋转得到图6中的示出的屏幕的正向横屏显示状态之间的转屏处理过程为例，描述本申请实施例提供的转屏处理方法。在一些实施例中，结合图6，如图7所示，假定图7中的示出的屏幕的正向竖屏显示状态为未转屏之前的初始屏幕显示状态，即图7中的示出的屏幕的旋转角度β1为0度。随后，用户触发电子设备100中的屏幕按照逆时针方向旋转，使得旋转角度持续增大。如图7中的和所示，电子设备 100的屏幕的旋转角度β2和β3分别为45度和60度，并且屏幕的显示状态均保持为正向竖屏显示状态。随后，如图7中的所示，电子设备100的屏幕的旋转角度β4大于60度时，屏幕的显示状态切换为正向横屏显示状态。此外,如图6和图7所示，随着电子设备100的屏幕显示状态发生变化，屏幕上显示的界面中的内容也随之变化。例如，如图6中的示出的屏幕上以正向竖屏显示状态显示的应用程序1的界面，图6中的示出的屏幕上以正向横屏显示状态下显示的应用程序1的界面，这两个界面在屏幕上的布局不同。以下将根据本申请的一些实施例，结合上述图2中对电子设备100的描述，以及图4中对转屏相关的Sensor事件的相关描述，描述电子设备100执行转动处理的工作流程。上述针对图2和图4描述的技术细节在此流程中依然适用，为了避免重复，有些在此次不再赘述。如图5所示，为本申请实施例提供的一种转屏处理方法的流程示意图，该方法包括：步骤501：电子设备100通过硬件层14中的Sensor 141识别屏幕的旋转。例如，在屏幕的旋转过程中，Sensor 141可以检测出屏幕的旋转角度等参数。在一些实施例中，上述Sensor事件中还可以包括屏幕的旋转方向，以确定后续电子设备100需要将屏幕旋转至哪个方向，如顺时针方向还是逆时针方向。步骤502：电子设备100通过Sensor 141检测到屏幕的旋转角度达到45度时生成45度Sensor事件，该45度Sensor事件中包括预转屏标识信息，用于标识45度预转屏的流程。需要说明的是，步骤502中检测的旋转角度包括但不限于45度，还可以为任意较小的角度，如43度或47度等，本申请实施例对此不作具体限定。另外，可以理解的是，步骤502中Sensor 141检测到屏幕的旋转角度小于 45度，即旋转角度为0-45度之间的角度时，电子设备100将不会硬件层14中的Sensor 141生成Sensor事件，或者虽然生成Sensor事件但是不会向Native 层13上报该Sensor事件。步骤503：电子设备100通过Sensor 141向Native层13中的Sensorhub 131 上报45度Sensor事件，以实现硬件层14向Native层13通知横竖屏旋转的流程。步骤504：电子设备100通过Native层13中的Sensorhub 131，向框架层 12中的sensor管理服务121上报45度Sensor事件，以实现Native层13向框架层12通知横竖屏旋转的流程。步骤505：电子设备100通过框架层12中的sensor管理服务121向窗口管理服务122上报45度Sensor事件，以实现通知横竖屏旋转的流程。步骤506：电子设备100通过框架层12中的窗口管理服务122根据45度 Sensor事件，向转屏模块123发送预转屏的消息，指示转屏模块123开始执行预加载转屏资源的流程。可以理解的是，预转屏的流程指的是预加载转屏资源的流程。在一些实施例中，窗口管理服务122收到45度Sensor事件，就获知了该 45度Sensor事件中的预转屏标识信息，从而开始执行预转屏的流程，如预截屏等，而不是立即开始转屏。步骤507：电子设备100通过框架层12中的转屏模块123调用窗口管理服务122中的预截屏和超时回滚流程函数，对屏幕当前显示的界面进行截屏得到截屏图像，并启用用于转屏超时回滚流程的线程。在一些实施例中，转屏模块123调用超时回滚流程函数的情况下，可以修改超时回滚流程函数对应的回滚标志位，如将该标志位的数值由0修改为1。可以理解的是，转屏超时回滚流程的定时时长time1为预设定时时长，如 500ms。此时，上述转屏超时回滚流程中的超时指的是计时时长超过该定时时长time1。步骤508：电子设备100通过框架层12中的转屏模块123向Native层13 中的图层合成管理服务132发送截屏图像。步骤509：电子设备100通过Native层13中的图层合成管理服务132生成与获取的截屏图像对应的转屏动画，并向转屏模块123发送生成的转屏动画。步骤510：电子设备100通过框架层12中的转屏模块123预加载获取的转屏动画。步骤511：电子设备100通过窗口管理服务122判断在超时回滚流程的定时时长内是否接收到60度Sensor事件，该60度Sensor事件中包括转屏标识信息，用于指示60度转屏的流程。在一些实施例中，窗口管理服务122收到60度Sensor事件，就可以获知该 60度Sensor事件中的转屏标识信息，从而触发开始执行转屏的流程，如加载转屏动画和暂时屏蔽屏幕的输入等操作。如果超时回滚流程的定时时长内接收到60度Sensor事件，则电子设备100 执行下述步骤512，以开始正式的转屏流程；反之，如果超时未接收到60度Sensor 事件，则电子设备100执行下述步骤518，以取消转屏流程。可以理解的是，电子设备100通过窗口管理服务122接收到60度Sensor 事件，说明用户需求旋转屏幕，而非误触发转屏流程。此外，步骤511中判断接收的旋转角度包括但不限于60度，还可以为任意较大的角度，如59度或63度等，本申请实施例对此不作具体限定。另外，可以理解的是，步骤511中Sensor 141检测到屏幕的旋转角度小于 60度，即旋转角度为45-60度之间的角度时，电子设备100将不会通过硬件层 14中的Sensor 141生成Sensor事件，或者虽然生成Sensor事件但是不会向 Native层13上报该Sensor事件。步骤512a：电子设备100通过窗口管理服务122向框架层12中的转屏模块 123发送启动转屏的消息。步骤512b：电子设备100通过窗口管理服务122向应用层11中的System UI 111发送通知应用旋转的消息。作为一种示例，图5示出的上述步骤512a和步骤512b可以同时执行，在其他一些实现方式中，步骤512a和步骤512b还可以为其他执行顺序，此处不再赘述。在一些实施例中，转屏模块123结束用于转屏超时回滚流程的线程的情况下，可以还原超时回滚流程函数对应的回滚标志位，如将该标志位的数值由1还原为 0。此外，在上述步骤512中窗口管理服务122可以判断是否存在预截屏得到的截屏图像。如果存在预截屏得到的截屏图像，则跳过截屏流程；反之，则触发转屏模块123执行截屏操作得到截屏图像，进而获取转屏动画。步骤513：电子设备100通过框架层12中的转屏模块123运行转屏动画，并结束用于转屏超时回滚流程的线程。可以理解的是，转屏模块123运行转屏动画，具体可以包括在屏幕上显示转屏动画和暂时屏蔽屏幕输入等操作。步骤514：电子设备100通过应用层11中的System UI 111按照转屏后的屏幕显示状态，将当前运行的应用程序的界面在屏幕上进行重新布局。步骤515：电子设备100通过应用层11中的System UI 111对当前运行的应用程序的界面进行重新布局完成的情况下，向框架层12中的窗口管理服务122 发送结束转屏消息，用于指示结束运行转屏动画。示例性的，如图6和图7所示，在屏幕由正向竖屏显示状态切换为正向横屏显示状态的情况下，电子设备100可以通过System UI 111对当前运行的应用程序1的界面中的进行重新布局，例如包括但不限于调整界面中的文字和图片等内容的显示方向和显示尺寸等布局。步骤516：电子设备100通过框架层12中的窗口管理服务122，根据结束旋转消息，向转屏模块123发送结束转屏动画消息。步骤517：电子设备100通过框架层12中的转屏模块123根据结束转屏消息，结束运行转屏动画。步骤518：电子设备100通过框架层12中的窗口管理服务122执行转屏回滚。在一些实施例中，上述步骤518中执行转屏回滚可以包括以下至少一项：删除预加载的截屏图像、删除预加载的转屏动画、还原与超时回滚流程函数对应的回滚标志位的数值以及停止屏蔽屏幕上的输入。本申请实施例中，电子设备通过设定触发预转屏的旋转角度以及触发正式转屏的旋转角度，实现窗口管理服务分阶段加载转屏动画，提前对屏幕进行截屏。同时增加回滚保护机制，保证用户在转屏时，横竖屏45 度和60度的原子操作，防止用户反复转屏时出现异常。具体地，由于本申请在屏幕的旋转角度到达较大的实际触发转屏的旋转角度之前，已经预加载完成了转屏资源，因此在屏幕的旋转角度到达实际触发转屏的旋转角度时，可以立即运行已经加载的转屏资源完成转屏操作，快速完成转屏流程。如此，本申请提供转屏处理方法，相比与现有技术在较小的旋转角度开始触发转屏流程，可以减少转屏时长约40ms，提升屏幕旋转性能，并避免用户转屏误触。图8示出了电子设备100的结构示意图。电子设备100可以包括处理器110，外部存储器接口120，内部存储器121，通用串行总线接口130，充电管理模块140，电源管理模块141，电池142，天线1，天线 2，移动通信模块150，无线通信模块160，音频模块170，扬声器170A，受话器 170B，麦克风170C，耳机接口170D，传感器模块180，按键190，马达191，指示器192，摄像头193，显示屏194，以及用户标识模块卡接口195等。其中传感器模块180可以包括压力传感器180A，陀螺仪传感器180B，气压传感器180C，磁传感器180D，加速度传感器180E，距离传感器180F，接近光传感器180G，指纹传感器180H，温度传感器180J，触摸传感器180K，环境光传感器180L，骨传导传感器180M等。可以理解的是，本申请实施例示意的结构并不构成对电子设备100的具体限定。在本申请另一些实施例中，电子设备100可以包括比图示更多或更少的部件，或者组合某些部件，或者拆分某些部件，或者不同的部件布置。图示的部件可以以硬件，软件或软件和硬件的组合实现。处理器110可以包括一个或多个处理单元，其中，不同的处理单元可以是独立的器件，也可以集成在一个或多个处理器中。处理器110中还可以设置存储器，用于存储指令和数据。在一些实施例中，处理器110中的存储器为高速缓冲存储器。该存储器可以保存处理器110刚用过或循环使用的指令或数据。如果处理器110需要再次使用该指令或数据，可从所述存储器中直接调用。避免了重复存取，减少了处理器110的等待时间，因而提高了系统的效率。例如，处理器110用于支持电子设备100执行上述方法实施例中的转屏方法，在屏幕的旋转角度为45度时预加载转屏资源，在旋转角度持续增大至60度时，根据预加载的转屏资源进行横竖屏旋转。可以理解的是，本申请实施例示意的各模块间的接口连接关系，只是示意性说明，并不构成对电子设备100的结构限定。在本申请另一些实施例中，电子设备100也可以采用上述实施例中不同的接口连接方式，或多种接口连接方式的组合。电子设备100的无线通信功能可以通过天线1，天线2，移动通信模块150，无线通信模块160，调制解调处理器以及基带处理器等实现。例如，电子设备100 可以通过无线通信功能与管理设备200建立无线通信。无线通信模块160可以提供应用在电子设备100上的包括无线局域网  网络)，蓝牙，全球导航卫星系统，调频，近距离无线通信技术，红外技术等无线通信的解决方案。电子设备100通过GPU，显示屏194，以及应用处理器等实现显示功能，例如显示上述示例中的驱动管理界面。GPU为图像处理的微处理器，连接显示屏194 和应用处理器。GPU用于执行数学和几何计算，用于图形渲染。处理器110可包括一个或多个GPU，其执行程序指令以生成或改变显示信息。电子设备100可以通过ISP，摄像头193，视频编解码器，GPU，显示屏194 以及应用处理器等实现拍摄功能，如显示屏194用于在竖屏显示状态或横屏状态下显示应用程序的界面或者桌面界面。外部存储器接口120可以用于连接外部存储卡，例如Micro SD卡，实现扩展电子设备100的存储能力。外部存储卡通过外部存储器接口120与处理器110 通信，实现数据存储功能。例如将音乐，视频保存在外部存储卡中。内部存储器121可以用于存储计算机可执行程序代码，所述可执行程序代码包括指令。处理器110通过运行存储在内部存储器121的指令，从而执行电子设备100的各种功能应用以及数据处理。内部存储器121可以包括存储程序区和存储数据区。其中，存储程序区可存储操作系统，至少一个功能所需的应用程序等。电子设备100的软件系统可以采用分层架构，事件驱动架构，微核架构，微服务架构，或云架构。本申请实施例以分层架构的Android系统为例，示例性说明电子设备100的软件结构。图9是本申请实施例的。分层架构将软件分成若干个层，每一层都有清晰的角色和分工。层与层之间通过软件接口通信。在一些实施例中，将Android系统分为四层，从上至下分别为应用程序层，应用程序框架层，安卓运行时和系统库，以及内核层。应用程序层可以包括一系列应用程序包。如图9所示，应用程序包可以包括相机，图库，日历，通话，地图，导航， WLAN，蓝牙，音乐，视频，短信息等应用程序。在一些实施例中，图2示出的电子设备中的应用层11可以为图9示出的应用程序层，具体地应用程序层还包括 System UI 111和Launcher 112。应用程序框架层为应用程序层的应用程序提供应用编程接口和编程框架。应用程序框架层包括一些预先定义的函数。如图9所示，应用程序框架层可以包括窗口管理器，内容提供器，视图系统，电话管理器，资源管理器，通知管理器等。在一些实施例中，图2示出的电子设备中的框架层12可以为图9示出的应用程序框架层，例如图2示出的Sensor 管理服务121和窗口管理服务122和转屏模块123可以通过图9示出的应用程序框架层中窗口管理器和视图系统实现。窗口管理器用于管理窗口程序。窗口管理器可以获取显示屏大小，判断是否有状态栏，锁定屏幕，截取屏幕等。内容提供器用来存放和获取数据，并使这些数据可以被应用程序访问。所述数据可以包括视频，图像，音频，拨打和接听的电话，浏览历史和书签，电话簿等。视图系统包括可视控件，例如显示文字的控件，显示图片的控件等。视图系统可用于构建应用程序。显示界面可以由一个或多个视图组成的。例如，包括短信通知图标的显示界面，可以包括显示文字的视图以及显示图片的视图，如显示上述应用编排设计器中用户穿件图形化的深度学习模型的UI界面。电话管理器用于提供电子设备100的通信功能。例如通话状态的管理。资源管理器为应用程序提供各种资源，比如本地化字符串，图标，图片，布局文件，视频文件等等。通知管理器使应用程序可以在状态栏中显示通知信息，可以用于传达告知类型的消息，可以短暂停留后自动消失，无需用户交互。比如通知管理器被用于告知下载完成，消息提醒等。通知管理器还可以是以图表或者滚动条文本形式出现在系统顶部状态栏的通知，例如后台运行的应用程序的通知，还可以是以对话窗口形式出现在屏幕上的通知。例如在状态栏提示文本信息，发出提示音，电子设备振动，指示灯闪烁等。Android Runtime包括核心库和虚拟机。Android runtime负责安卓系统的调度和管理。核心库包含两部分：一部分是java语言需要调用的功能函数，另一部分是安卓的核心库。应用程序层和应用程序框架层运行在虚拟机中。虚拟机将应用程序层和应用程序框架层的java文件执行为二进制文件。虚拟机用于执行对象生命周期的管理，堆栈管理，线程管理，安全和异常的管理，以及垃圾回收等功能。系统库可以包括多个功能模块。例如：表面管理器，媒体库，三维图形处理库，2D图形引擎等。表面管理器用于对显示子系统进行管理，并且为多个应用程序提供了2D和 3D图层的融合。媒体库支持多种常用的音频，视频格式回放和录制，以及静态图像文件等。媒体库可以支持多种音视频编码格式，例如:MPEG4，H.264，MP3，AAC，AMR， JPG，PNG等。三维图形处理库用于实现三维图形绘图，图像渲染，合成，和图层处理等。2D图形引擎是2D绘图的绘图引擎。内核层是硬件和软件之间的层。内核层至少包含显示驱动，摄像头驱动，音频驱动，传感器驱动。在一些实施例中，图2示出的电子设备中的Native层13 可以为图9示出的内核层，例如图2示出的Sensorhub131可以通过图9示出的传感器驱动实现，图2示出的图层合成管理服务132可以通过图9示出的显示驱动实现。本申请公开的机制的各实施例可以被实现在硬件、软件、固件或这些实现方法的组合中。本申请的实施例可实现为在可编程系统上执行的计算机程序或程序代码，该可编程系统包括至少一个处理器、存储系统、至少一个输入设备以及至少一个输出设备。可将程序代码应用于输入指令，以执行本申请描述的各功能并生成输出信息。可以按已知方式将输出信息应用于一个或多个输出设备。为了本申请的目的，处理系统包括具有诸如例如数字信号处理器、微控制器、专用集成电路 或微处理器之类的处理器的任何系统。程序代码可以用高级程序化语言或面向对象的编程语言来实现，以便与处理系统通信。在需要时，也可用汇编语言或机器语言来实现程序代码。事实上，本申请中描述的机制不限于任何特定编程语言的范围。在任一情形下，该语言可以是编译语言或解释语言。在一些情况下，所公开的实施例可以以硬件、固件、软件或其任何组合来实现。所公开的实施例还可以被实现为由一个或多个暂时或非暂时性机器可读 存储介质承载或存储在其上的指令，其可以由一个或多个处理器读取和执行。例如，指令可以通过网络或通过其他计算机可读介质分发。因此，机器可读介质可以包括用于以机器可读的形式存储或传输信息的任何机制，包括但不限于，软盘、光盘、光碟、只读存储器、磁光盘、只读存储器、随机存取存储器、可擦除可编程只读存储器 、电可擦除可编程只读存储器、磁卡或光卡、闪存、或用于利用因特网以电、光、声或其他形式的传播信号来传输信息的有形的机器可读存储器。因此，机器可读介质包括适合于以机器可读的形式存储或传输电子指令或信息的任何类型的机器可读介质。在附图中，可以以特定布置和/或顺序示出一些结构或方法特征。然而，应该理解，可能不需要这样的特定布置和/或排序。而是，在一些实施例中，这些特征可以以不同于说明性附图中所示的方式和/或顺序来布置。另外，在特定图中包括结构或方法特征并不意味着暗示在所有实施例中都需要这样的特征，并且在一些实施例中，可以不包括这些特征或者可以与其他特征组合。需要说明的是，本申请各设备实施例中提到的各单元/模块都是逻辑单元/ 模块，在物理上，一个逻辑单元/模块可以是一个物理单元/模块，也可以是一个物理单元/模块的一部分，还可以以多个物理单元/模块的组合实现，这些逻辑单元/模块本身的物理实现方式并不是最重要的，这些逻辑单元/模块所实现的功能的组合才是解决本申请所提出的技术问题的关键。此外，为了突出本申请的创新部分，本申请上述各设备实施例并没有将与解决本申请所提出的技术问题关系不太密切的单元/模块引入，这并不表明上述设备实施例并不存在其它的单元/模块。需要说明的是，在本专利的示例和说明书中，诸如第一和第二等之类的关系术语仅仅用来将一个实体或者操作与另一个实体或操作区分开来，而不一定要求或者暗示这些实体或操作之间存在任何这种实际的关系或者顺序。而且，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个”限定的要素，并不排除在包括所述要素的过程、方法、物品或者设备中还存在另外的相同要素。虽然通过参照本申请的某些优选实施例，已经对本申请进行了图示和描述，但本领域的普通技术人员应该明白，可以在形式上和细节上对其作各种改变，而不偏离本申请的精神和范围。
