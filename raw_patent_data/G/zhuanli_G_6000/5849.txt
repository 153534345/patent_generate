标题title
一种通用的信息物理融合系统组件模型框架实现方法
摘要abst
本发明涉及一种通用的信息物理融合系统组件模型框架实现方法，以“组件框架+组件模型”的方式搭建信息物理融合系统软件，通过对信息物理融合系统的特性分析，抽取出各种不同领域的信息物理融合系统中的共性流程；其次，根据对共性流程的分析，提取出各种信息物理融合系统的通用功能；而后，使用C++编程语言设计了信息物理融合系统的组件框架，在其中封装了组件注册、管理功能和组件间的各种交互机制以及组件调度机制；最后，采用抽象类设计了五种通用组件模型，供应用程序开发人员实现具体的组件功能并快速搭建各种不同的信息物理融合系统软件，形成了信息物理融合系统组件模型和组件框架。
权利要求书clms
1.一种通用的信息物理融合系统组件模型框架实现方法，其特征在于：包括CPS系统软件共性流程抽取、CPS系统软件通用功能分析、CPS系统软件组件框架设计、CPS系统软件组件模型设计，具体实施步骤如下：CPS系统软件共性流程抽取通过对各种信息物理融合系统进行分析，提取了CPS系统的共性流程，将计算嵌入到物理过程中，能够实时感知和控制物理过程，通过计算进程与物理进程相互影响的实时反馈循环，形成一个闭环系统，CPS 无缝集成了传感器、网络、计算单元和执行器，通过计算、通信、控制技术的有机融合与深度协作，实现大型工程系统的实时感知、动态控制和信息服务，信息物理融合系统包括感知组件、通信组件、显示组件、计算决策组件、控制组件、物理环境；CPS系统软件通用功能分析1）感知组件：高度抽取各类传感器，提取各类传感器的共性特征，保证对物理环境的中各类信息正确的感知；2）通信组件：根据信息物理融合系统的通信特点，设计一种基于发布订阅数据分发服务，用以满足各组件间的正常通信与交互；3）计算决策组件：负责对数据的分析、筛选、判断、归纳、演算、推理，通过对数据的处理，产生一些重要的结论，根据所产生的结论诞生出了一些指令的下发；4）显示组件：将感知到的外界环境信息不断的以界面形式呈现给用户；5）控制组件：根据计算决策组件下发的命令使对应的执行器开始工作，达到对环境调节的作用，实现信息物理融合能力；CPS系统软件组件框架设计在通用性设计原则的指导下，采用软件体系结构方法和软件产品线方法，设计了一种可扩展的、支持重用的信息物理融合系统软件架构，综合各信息物理融合系统的共同特性，设计了CPS系统软件组件框架，组件框架内包含数据显示块、通信块、核心抽象层、数据感知块、数据分析计算块、控制块，核心抽象层抽取了各种信息物理融合系统的共性流程，实现了模块的通用性，在框架中实现了数据的感知、传输、计算、显示、控制和通用功能组件的管理、交互和调度；组件框架又分为组件管理和调度设计、组件间通信机制设计两部分，组件管理和调度设计包括核心数据结构设计、组件的注册与管理、组件模型调度器设计、周期性任务管理设计；组件间通信机制设计包含事件服务机制设计和消息循环机制设计，事务服务机制设计包含了CPS事件的定义和事件服务设计，事件服务机制用于应对信息物理系统中产生的不确定性情况，作为事件触发的对象，根据触发的不同事件去执行不同的功能，实现信息物理融合系统面对突发情况的正常处理；消息循环机制用于处理信息物理融合系统中的各类消息，先捕获系统中产生的所有消息，再筛选出所感兴趣的消息，同时将该消息下发至需要响应的组件上，进而准确的完成系统中消息的处理与响应；CPS系统软件通用组件模型设计根据信息物理融合系统的通用功能，分为五大类通用组件模型，包括数据感知组件接口、数据通信组件接口、数据分析计算组件接口、数据显示组件接口、控制组件接口，数据感知组件接口：信息物理融合系统中的各类数据感知组件均以数据感知模型类SensorModel为基类，感知模型类SensorModel提供了一个统一的数据采集接口，用户只需将数据感知组件的数据采集接口进行相应的改写，即可完成对不同数据的采集；数据通信组件接口：信息物理融合系统中的所有通信关系都依托于通信组件的创建，数据通信组件以数据通信模型类CommModel为基类，在创建通信组件之前，需先解析用户配置文件，数据通信组件可以根据用户配置创建并初始化所有的发布者与订阅者，数据通信组件的成功创建标志着系统中各组件间建立发布订阅关系的成功建立；数据分析计算组件接口：所有的计算分析组件都以数据分析计算模型类CalcModel为基类，数据分析计算组件是根据数据通信组件和数据感知组件建立起通信关系，数据分析计算组件订阅数据感知组件发布的数据，通过对订阅过来的数据进行分析、计算、推理等操作完成对数据的处理，并且还需将数据分析的结果发送给控制组件；数据显示组件接口：信息物理融合系统中包含着大量的数据，为了使用户可以很直观的看到数据的变化，数据显示组件结合信息物理融合系统中对数据的要求可视化处理，每一个数据显示组件都以数据显示模型类DisplayModel为基类，数据显示组件根据数据感知组件传过来的数据在Windows应用程序窗口上显示，进而检测整个系统的状态，数据显示组件能够显示了折线图、文本框、图片信息；控制组件接口：信息物理融合系统中的控制组件用于动态的调节外界物理环境，所有的控制组件都必须以控制模型类ControlModel为基类，控制组件接收计算分析组件发出的消息，根据计算分析组件得出的结果控制组件去改变外界物理环境，完成对外界物理环境的动态改变。2.根据权利要求1所述的一种通用的信息物理融合系统组件模型框架实现方法，其特征在于：所述步骤CPS系统软件通用组件模型设计为用户制定了自定义组件需要遵守的开发规范，为用户定制了统一的组件模型和外部接口，用户在使用组件框架进行开发时可以根据模型提供的接口定制专用组件，用户也可通过继承本模型，实现模型提供的外部接口，实现用户自定义的组件。3.根据权利要求1所述的一种通用的信息物理融合系统组件模型框架实现方法，其特征在于：所述步骤CPS系统软件组件框架设计是以C++语言设计组件容器，完成组件管理、组件间通信及组件的周期性调度。
说明书desc
技术领域本发明属于计算机应用技术领域，具体涉及一种通用的信息物理融合系统组件模型框架实现方法。背景技术信息物理融合系统是一个综合计算、网络和物理环境的多维复杂系统，将计算过程嵌入到物理过程中，能够实时感知和控制物理过程，通过计算进程与物理进程相互协作构成一个实时反馈循环，从而完成信息系统对物理系统的控制。CPS在智慧交通、智慧工厂、医疗等众多领域已有了大量的应用案例，然而这些应用领域所开发的信息物理融合系统软件存在着大量的重复工作，造成了人力和资源的浪费，需要开发一种通用的信息物理融合系统软件框架，提升CPS软件开发效率，降低开发成本。现有的CPS软件专利，多是采用各种建模语言建立某个特定领域的信息物理融合系统的模型，并对其进行关键特性仿真和验证，鲜少有对信息物理融合系统软件的通用开发框架和应用组件进行研究的案例。国内已有专利《一种用于工业的cps控制系统及其实现方法》公开了一种用于工业的CPS控制系统及其实现方法，将CPS控制软件分为控制模块、感测模块、语义建模模块，动态连接模块，数据库模块，以及输入输出模块，采用模块化的方法设计了一个工业控制CPS的软件，但针对性过强，缺乏通用性。而本发明是针对整个CPS领域的各种软件的共性需求，提供了一个封装信息感知、信息传输、信息处理、数据显示和信息应用的通用组件框架，在此基础上可以方便地搭建各种应用领域的信息物理融合系统软件。发明内容本发明的目的是为解决上述问题，提供一种通用的信息物理融合系统组件模型框架实现方法，利用“组件+框架”的方法建立一个能够适用于各种不同领域的信息物理融合系统及软件开发的应用程序开发框架，提供信息感知、信息传输、信息处理和信息显示及应用的通用流程，使用软件框架技术将通用流程封装在框架中，并提取各种通用组件模型，供应用开发人员使用；从而为快速开发各种不同领域的信息物理融合系统软件提供开发平台。为实现上述目的，本发明提供以下技术方案：一种通用的信息物理融合系统组件模型框架实现方法，包括CPS系统软件共性流程抽取、CPS系统软件通用功能分析、CPS系统软件组件框架设计、CPS系统软件组件模型设计，具体实施步骤如下：CPS系统软件共性流程抽取通过对各种信息物理融合系统进行分析，提取了CPS系统的共性流程，将计算嵌入到物理过程中，能够实时感知和控制物理过程，通过计算进程与物理进程相互影响的实时反馈循环，形成一个闭环系统，CPS 无缝集成了传感器、网络、计算单元和执行器，通过计算、通信、控制技术的有机融合与深度协作，实现大型工程系统的实时感知、动态控制和信息服务，信息物理融合系统包括感知组件、通信组件、显示组件、计算决策组件、控制组件、物理环境；CPS系统软件通用功能分析1）感知组件：高度抽取各类传感器，提取各类传感器的共性特征，保证对物理环境的中各类信息正确的感知；2）通信组件：根据信息物理融合系统的通信特点，设计一种基于发布订阅数据分发服务，用以满足各组件间的正常通信与交互；3）计算决策组件：负责对数据的分析、筛选、判断、归纳、演算、推理，通过对数据的处理，产生一些重要的结论，根据所产生的结论诞生出了一些指令的下发；4）显示组件：将感知到的外界环境信息不断的以界面形式呈现给用户；5）控制组件：根据计算决策组件下发的命令使对应的执行器开始工作，达到对环境调节的作用，实现信息物理融合能力；CPS系统软件组件框架设计在通用性设计原则的指导下，采用软件体系结构方法和软件产品线方法，设计了一种可扩展的、支持重用的信息物理融合系统软件架构，综合各信息物理融合系统的共同特性，设计了CPS系统软件组件框架，组件框架内包含数据显示块、通信块、核心抽象层、数据感知块、数据分析计算块、控制块，核心抽象层抽取了各种信息物理融合系统的共性流程，实现了模块的通用性，在框架中实现了数据的感知、传输、计算、显示、控制和通用功能组件的管理、交互和调度；组件框架又分为组件管理和调度设计、组件间通信机制设计两部分，组件管理和调度设计包括核心数据结构设计、组件的注册与管理、组件模型调度器设计、周期性任务管理设计；组件间通信机制设计包含事件服务机制设计和消息循环机制设计，事务服务机制设计包含了CPS事件的定义和事件服务设计，事件服务机制用于应对信息物理系统中产生的不确定性情况，作为事件触发的对象，根据触发的不同事件去执行不同的功能，实现信息物理融合系统面对突发情况的正常处理；消息循环机制用于处理信息物理融合系统中的各类消息，先捕获系统中产生的所有消息，再筛选出所感兴趣的消息，同时将该消息下发至需要响应的组件上，进而准确的完成系统中消息的处理与响应；CPS系统软件通用组件模型设计根据信息物理融合系统的通用功能，分为五大类通用组件模型，包括数据感知组件接口、数据通信组件接口、数据分析计算组件接口、数据显示组件接口、控制组件接口，数据感知组件接口：信息物理融合系统中的各类数据感知组件均以数据感知模型类SensorModel为基类，感知模型类SensorModel提供了一个统一的数据采集接口，用户只需将数据感知组件的数据采集接口进行相应的改写，即可完成对不同数据的采集；数据通信组件接口：信息物理融合系统中的所有通信关系都依托于通信组件的创建，数据通信组件以数据通信模型类CommModel为基类，在创建通信组件之前，需先解析用户配置文件，数据通信组件可以根据用户配置创建并初始化所有的发布者与订阅者，数据通信组件的成功创建标志着系统中各组件间建立发布订阅关系的成功建立；数据分析计算组件接口：所有的计算分析组件都以数据分析计算模型类CalcModel为基类，数据分析计算组件是根据数据通信组件和数据感知组件建立起通信关系，数据分析计算组件订阅数据感知组件发布的数据，通过对订阅过来的数据进行分析、计算、推理等操作完成对数据的处理，并且还需将数据分析的结果发送给控制组件；数据显示组件接口：信息物理融合系统中包含着大量的数据，为了使用户可以很直观的看到数据的变化，数据显示组件结合信息物理融合系统中对数据的要求可视化处理，每一个数据显示组件都以数据显示模型类DisplayModel为基类，数据显示组件根据数据感知组件传过来的数据在Windows应用程序窗口上显示，进而检测整个系统的状态，数据显示组件能够显示了折线图、文本框、图片信息；控制组件接口：信息物理融合系统中的控制组件用于动态的调节外界物理环境，所有的控制组件都必须以控制模型类ControlModel为基类，控制组件接收计算分析组件发出的消息，根据计算分析组件得出的结果控制组件去改变外界物理环境，完成对外界物理环境的动态改变。进一步的：所述步骤CPS系统软件通用组件模型设计为用户制定了自定义组件需要遵守的开发规范，为用户定制了统一的组件模型和外部接口，用户在使用组件框架进行开发时可以根据模型提供的接口定制专用组件，用户也可通过继承本模型，实现模型提供的外部接口，实现用户自定义的组件。进一步的：所述步骤CPS系统软件组件框架设计是以C++语言设计组件容器，完成组件管理、组件间通信及组件的周期性调度。与现有技术相比，本发明的有益效果在于：一种通用的信息物理融合系统组件模型框架实现方法，解决了当前信息物理融合系统软件通用性和可重用性差的问题，采用“组件+框架”的方法进行了通用性设计，能够满足各种不同领域的信息物理融合系统软件的开发需求。利用该框架和组件模型，用户在编写信息物理融合系统软件时可以方便的进行自定义的组件装配和系统搭建。信息物理融合系统组件框架的设计屏蔽了CPS底层的复杂流程，在不同层次对CPS进行组件抽象，各组件向外提供了统一接口，在该框架中各组件不仅可以相互协作，而且组件间数据可以进行交互，最终形成一个反馈闭环，以此应对不同信息物理融合系统之间的多样性。用户通过XML文件配置系统属性，并根据所需的功能对组件接口进行选择性实现，方便、快捷地完成一个信息物理融合系统的开发与设计，该框架能在缩短项目开发周期、降低开发成本和开发难度的同时，增强信息物理融合系统的可扩展性和可维护性。附图说明为了更清楚地说明本发明实施例技术方案，下面将对实施例描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是为了更清楚地说明本发明实施例或现有技术中的技术方案，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本发明的整体结构框架图；图2为本发明信息物理融合系统数据流向图；图3为本发明信息物理融合系统组件模型框架架构图；图4为本发明核心数据结构设计图；图5为本发明组件工厂工作流程图；图6为本发明组件的注册与管理流程图；图7为本发明组件模型调度器设计图；图8为本发明周期性组件工作图；图9为本发明周期性任务管理设计图；图10为本发明事件服务信道设计图；图11为本发明消息的捕获图；图12为本发明消息的下发与响应图；图13为本发明数据感知组件模型结构示意图；图14为本发明通信组件模型接口示意图；图15为发布订阅创建示意图；图16为数据分析计算组件模型图；图17为数据显示组件模型图；图18为数据显示组件关系图；图19为控制组件模型定义接口图；图20与图21为系统仿真运行效果图。具体实施方式为了使本领域技术人员更好地理解本发明的技术方案能予以实施，下面结合具体实施例对本发明作进一步说明，但所举实施例只作为对本发明的说明，不作为对本发明的限定。一种通用的信息物理融合系统组件模型框架实现方法，通过对信息物理融合系统的特性分析，抽取出各种不同领域的信息物理融合系统中的共性流程。其次，根据对共性流程的分析，提取出各种信息物理融合系统的通用功能；而后，使用C++编程语言设计了信息物理融合系统的组件框架，在其中封装了组件注册、管理功能和组件间的各种交互机制以及组件调度机制；最后，采用抽象类设计了五种通用组件模型，供应用程序开发人员实现具体的组件功能并快速搭建各种不同的信息物理融合系统软件。总体框架如图1所示：利用框架图形成了信息物理融合系统组件模型和组件框架，CPS系统组件框架负责完成通用的信息物理融合系统的共性流程，即信息感知、信息传输、信息处理、信息显示和对物理世界的控制；CPS系统组件模型提供了组件框架管理组件的接口和组件间交互的接口，组件框架使用组件的管理类接口完成组件的初始化、加载、注册和销毁等管理功能；组件间交互接口用来完成组件间的同步交互和异步交互。具体实施步骤如下：CPS系统软件共性流程抽取通过对各种信息物理融合系统进行分析，提取了CPS系统的共性流程：CPS系统是一个综合计算、网络和物理环境的多维复杂系统，将计算嵌入到物理过程中，能够实时感知和控制物理过程，通过计算进程与物理进程相互影响的实时反馈循环，形成一个闭环系统。CPS 无缝集成了传感器、网络、计算单元和执行器，通过计算、通信、控制技术的有机融合与深度协作，实现大型工程系统的实时感知、动态控制和信息服务。信息物理融合系统的共性流程如图2所示。信息物理融合系通过在环境的感知基础上，深度融合了计算、通信和控制能力的大型复杂系统。工作过程：通过传感器感知外界物理环境的变化信息，将感知的信息通过通信模块传递给相应的处理单元，处理单元通过对感知的数据进行分析判断，达到智能决策的目的。控制单元根据处理单元智能决策的结果将指令下发至各个执行器，最终执行器实时的对物理环境做出调整。以此不断的反馈循环实现了信息世界与物理世界的深度融合。CPS系统软件通用功能分析通常一个信息物理融合系统都包含着各种不同的功能，但是在不同的信息物理融合系统中这些功能大都相似，因此我们就可将功能相似的模块抽象成通用功能模型，各种通用功能及其细节描述如下：1）感知组件：高度抽取各类传感器，提取各类传感器的共性特征，保证对物理环境的中各类信息正确的感知；2）通信组件：根据信息物理融合系统的通信特点，设计一种基于发布订阅数据分发服务，用以满足各组件间的正常通信与交互；3）计算决策组件：负责对数据的分析、筛选、判断、归纳、演算、推理，通过对数据的处理，产生一些重要的结论，根据所产生的结论诞生出了一些指令的下发；4）显示组件：将感知到的外界环境信息不断的以界面形式呈现给用户；5）控制组件：根据计算决策组件下发的命令使对应的执行器开始工作，达到对环境调节的作用，实现信息物理融合能力；CPS系统软件组件框架设计在通用性设计原则的指导下，采用软件体系结构方法和软件产品线方法，设计了一种可扩展的、支持重用的信息物理融合系统软件架构，综合各信息物理融合系统的共同特性，设计了CPS系统软件组件框架，组件框架内包含数据显示块、通信块、核心抽象层、数据感知块、数据分析计算块、控制块，核心抽象层抽取了各种信息物理融合系统的共性流程，实现了模块的通用性，在框架中实现了数据的感知、传输、计算、显示、控制和通用功能组件的管理、交互和调度，信息物理融合系统组件模型框架架构图如图3所示；组件框架又分为组件管理和调度设计、组件间通信机制设计两部分，CPS组件框架以C++语言设计组件容器，完成组件管理、组件间通信及组件的周期性调度，组件管理和调度设计包括核心数据结构设计、组件的注册与管理、组件模型调度器设计、周期性任务管理设计；组件间通信机制设计包含事件服务机制设计和消息循环机制设计，事务服务机制设计包含了CPS事件的定义和事件服务设计，事件服务机制用于应对信息物理系统中产生的不确定性情况，作为事件触发的对象，根据触发的不同事件去执行不同的功能，实现信息物理融合系统面对突发情况的正常处理；消息循环机制用于处理信息物理融合系统中的各类消息，先捕获系统中产生的所有消息，再筛选出所感兴趣的消息，同时将该消息下发至需要响应的组件上，进而准确的完成系统中消息的处理与响应。1）组件管理和调度设计针对各类信息物理融合系统开发流程的研究，抽象出一套符合信息物理融合系统的组件模型框架，该组件模型框架的功能是对用户组件进行管理，用户完成自定义组件的设计和开发后，组件会以插件的形式被加入到调度框架中，由调度框架完成对其管理、驱动运行及卸载工作，调度框架根据接口识别组件，因此用户编写的组件必须按照接口规范进行设计。①核心数据结构设计信息物理融合系统在启动时首先根据用户配置文件创建系统核心数据表，该表根据配置表信息动态开辟内存，并将用户配置表解析出的相关信息存入到此表中，该系统表共分为3张表，核心数据结构设计图如图4所示。②组件的注册与管理通过对信息物理融合系统各组件模型分析，本文设计了一个通用的组件工厂，各类组件都可通过该组件工厂进行注册，组件工厂工作流程如图5所示，通过定义宏函数实现组件的注册，用户在自定义组件时必须使用该宏函数完成替换，并给宏函数MODEL_CLASS传入组件的基类类型，使用“#”将ClassName参数转为字符串，并与用户自定义组件类型比较，如果两字符串相同，则直接在内存中将此对象实例化并返回基类型的一个指针。根据读取系数系统配置表SystemTable信息，遍历计时器列表、通信列表、数据分析计算列表、控制组件列表，依次找到每个列表下所挂载的组件，根据每个组件节点中存放的组件工厂方法，完成对每个组件的注册，为了使组件模型框架更加方便的对每个组件进行调度和卸载，将实例化的每个组件都加入到对应的组件列表中，实现了对各类组件的统一管理，组件的注册与管理如图6所示。③组件模型调度器设计根据对信息物理融合系统开发流程的特性分析，抽象出一个通用的开发流程，形成信息物理融合系统组件模型调度框架，设计组件模型调度器类Scheduler，该调度器为各组件创建运行环境，以及对组件进行操作和控制，组件模型调度器设计如图7所示。组件模型调度器类Schedule被创建时，首先读取用户配置文件信息到系统内存数据表SystemTable中，遍历系统内存数据表，创建数据表中各个组件为系统运行做准备，通过调用CreateTimerInstance函数创建计时器对象，并将其加入到TimerList容器中，调用InstanceSensorModel函数创建计时器对象，并将其加入到SensorList容器中，调用InstanceCalcModel函数创建计时器对象，并将其加入到CalcList容器中，调用InstanceCommModel函数创建通信对象，为了能够满足事件生产者与事件消费者之间的正常交互，通过CreateEventChannel函数创建一个事件服务信道，并通过InitCPSEventChannel函数对事件服务信道初始化。当所有的初始化工作完成之后，可通过调用StartTask函数启动各容器中组件的任务，并发的开始执行各自的任务，最后调用TriggerTimer函数触发计时器开始工作，确保周期性任务正常执行。当组件模型调度器框架成功运行后，针对不用运行模式的组件将用不同的方法进行处理，每个组件内部都包含至少一个工作线程，在处理非周期性组件时，根据每个组件工作线程事先规定好的业务逻辑顺序执行；对于周期性的组件，组件工作线程会根据计时器发出的信号周期性的执行任务，当计时器没有发出信号时，此时组件工作线程将一直处于阻塞状态，周期性组件工作如图8所示。④周期性任务管理设计根据信息物理融合系统组件周期性运行的特征，设计了一个定时器类Timer，可以根据组件的周期大小为此定时器设置一个定时时长，同时需要为此定时器绑定一个特定的事件，定时器每到一次定时时间便触发出一次信号，组件每得到一次此信号便执行一次任务，从而达到了组件周期性运行的效果，周期性任务管理图如图9所示：在本设计中根据系统要求精度的不同将定时器分为：毫秒级定时器和纳秒级定时器，在信息物理融合系统中，有的任务只需在一个特定的时间点被执行一次，而还有部分任务是需要周期性被执行，所以又根据定时器工作方式的不同，又将定时器分为：单发定时器和循环定时器。在类Timer中，使用GetNows方法获取系统当前所经历的毫秒数，如果是毫秒级定时器则使用GetTickCount函数来获取当前系统的毫秒数，如果是纳秒级定时器需先使用QueryPerformanceFrequency函数获取CPU晶振的频率，根据周期等于频率的倒数，计算当前系统所经历的纳秒数。在类Timer中，可使用startOneShot方法做单发定时，在该函数内部首先通过GetNow方法获取一个开始时间，在使用一个循环不停的调用GetNow方法获取系统此时时间，并用获取的当前时间减去开始时间，差值小于等于用户传入的定时时长，即完成一次定时，通过fired方法触发当前定时器完成定时的信号。循环定时器与单发定时器主要的不同点是：循环定时器需根据周期反复触发定时器完成定时的信号，因此在循环定时器的内部，实现了一个循环定时工作线程LoopTimerThread，在该线程中根据用户传入的定时时长，反复调用单发定时函数startOneShot来完成循环定时的功能。用户在使用此定时器做周期任务调度时，只需对定时器类Timer做实例化，定时器作为事件的生产者，通过Init方法创建一个事件，并将该事件与定时器进行绑定，事件被创建完成后，作为事件的生产者需要通过push方法主动将事件推送到事件服务信道，当定时器成功初始化之后，调用startPeriodicAt方法创建工作线程LoopTimerThread，用来启动定时器完成周期性定时。定时器各功能接口如表1所示，周期组属性如表2所示：表1 定时器接口功能表表2 周期组属性对照表2）组件间通信机制设计①事件服务机制设计为了满足事件生产者和事件消费者之间事件的交互，在事件生产者和事件消费者之间的建立了一个事件信道，通过提取信息物理融合系统中事件的特性，设计了一种基于Windows的信息物理融合系统事件CPS_Event，事件生产者无论在何时产生的任何事件都需要加入到事件的信道，同时事件的消费者在消费事件时，也必须通过此信道来获取。l CPS事件的定义为了使事件在信息物理融合系统中简单易用，定制了一个满足信息物理融合系统的事件类CPS_Event，在类CPS_Event中，根据信息物理融合系统事件的特性，设计了用于等待事件对象触发的方法wait，用于触发事件对象的方法signal，用于自动重置事件对象的方法reset，用于手动重置事件对象的方法pulse，用户销毁事件对象的方法remove，同时在该类中，将等号做了运算符重载操作，给用户在做事件对比时提供了方便。用户在使用CPS_Event时，只需将类CPS_Event实例化，通过调用Windows底层API创建事件函数CreateEvent完成信息物理融合系统事件的创建。用户在触发CPS_Event事件对象时，可通过调用触发事件对象方法signal将该CPS_Event事件从无信号状态转变为有信号状态，在本设计中等待事件被触发共做了两种处理，分别是通过对事件触发函数wait重载实现的：一种是无限等待事件的触发，在事件没有被触发时将一直阻塞程序的运行，另一种是根据用户传入的一个时间片等待事件被触发，事件片在用完之前事件被触发，程序正常运行情况，而事件在时间片用完后还没有被触发，此时函数会立即返回，不在对程序进行阻塞。每当事件被触发，并使事件阻塞函数wait成功返回，此时需要调用事件重置方法reset，将此CPS_Event事件从有信号状态转变为无信号状态，等待下一次的触发；当此事件不在需要被触发时，需通过调用事件销毁方法remove，将此事件句柄资源进行销毁，从而防止资源被泄露，影响操作系统的稳定性。CPS_Event方法功能如表3所示，属性如表4所示：表3 CPS_Event方法功能表表4 CPS_Event属性表事件服务设计事件服务利用事件信道支持事件的生产者与事件的消费者之间的交互，通常将创建CPS_Event事件并主动加入到事件信道中的对象作为事件的生产者，而将主动从事件信道中获取感兴趣的对象作为事件的消费者，事件信道作为事件生产者与事件消费者之间的中介，一个信道可同时连接多个事件生产者和多个事件的消费者，事件的生产者即使不知晓事件消费者的身份也可产生事件，消费者也可在不了解事件生产者身份的情况下接收事件，事件的消费者只需根据感兴趣事件的名字，在事件信道便可获取到感兴的事件，事件服务信道设计如图10所示。在事件服务信道设计中包含了一个事件信道类EventChannel，该类作为事件服务机制中的事件信道，在该信道中提供了一个事件加入信道的方法EventAdd，每当有新的事件要加入到此信道时，该方法首先检查一次是否和信道中已有的事件重复，如重复则认为已加入到此信道，此次加入失败；事件查询接口EventQuery，每当事件消费者需要从事件信道中获取事件时，该方法遍历事件信道中的所有事件，并与事件消费者所感兴趣的事件对比，查询出事件消费者感兴趣的事件，并将此事件返回给时间的消费者。事件释放方法EventRelase通过遍历事件信道，找到要删除事件对象的句柄，并将此事件对象移除事件信道。本设计将事件的生产者和事件的消费者之间通过事件信道完全分离，事件生产者和事件消费者可以分别获得事件信道，从而与事件信道建立通信，事件的生产者通过自己的push方法，将事件推送出去，并调用事件信道的EventAdd方法将此事件动态的加入到事件信道中，事件的消费者可通过自己的acquireCustomerEvent方法，告知事件信道所需的事件，并调用事件信道的EventQuery方法，在事件信道中获取去到该事件消费者所感兴趣事件，进而对该事件产生消费，事件信道接口功能表如表5所示：表5 事件信道接口功能表②消息机制设计信息物理融合系统的消息机制依托于Windows的消息机制实现，消息机制对于信息物理融合系统来说十分重要，驱使着整个系统的正常运行，信息物理融合系统中的消息提供了各组件之间、组件与信息物理融合系统之间进行通信的手段，组件想要实现的功能由消息来触发，并且靠对消息的响应和处理来完成。在信息物理融合系统中从消息的发送途径来看，将消息消息分为了2种：队列消息和非队列消息，消息队列又分成系统消息队列和线程消息队列，系统消息队列由信息物理融合系统维护，线程消息队列则由用户线程自己进行维护，队列消息送到系统消息队列，然后到线程消息队列；非队列消息将发送到目的窗口过程函数中直接被处理。信息物理融合系统组件模型框架中的消息循环，通过GetMessage函数不断地从消息队列中获取消息，并通过DispatchMessage将消息分发出去，消息队列是在信息物理融合系统中定义的，对于每一个正在执行的信息物理融合系统程序，系统为其建立一个“消息队列”，用来存放该程序可能创建的各种消息。DispatchMessage会将消息传给窗口处理函数，窗口处理函数捕获到消息，并做出相应的处理。在信息物理融合系统中，用户自定义的消息，往往是通过SendMessage函数直接发送到窗口处理函数，而不经过消息队列，在窗口处理函数中直接对消息进行捕获，并做相应的处理，消息的捕获如图11所示。在信息物理融合系统中，一部分消息通过GetMessage函数从消息队列中获取，通过DispatchMessage函数发送到消息处理函数，另一部分消息通过SendMessage函数直接发送到消息处理函数，在该框架中只存在唯一一个消息处理函数，并且所有的消息都必须汇聚到此进行统一处理。系统发送消息给窗口过程处理函数，并将消息数据作为参数传递给窗口过程处理函数，消息到来之后，按照消息类型排序进行处理，其中的参数则用来区分不同的消息，在消息处理函数中，通过switch结构区分出不同的消息，将不同的消息下发至相应的组件上进行响应，在组件上产生合适的行为，消息的下发与响应如图12所示。CPS系统软件通用组件模型设计根据信息物理融合系统的通用功能，分为五大类通用组件模型，包括数据感知组件接口、数据通信组件接口、数据分析计算组件接口、数据显示组件接口、控制组件接口。①数据感知组件接口的设计通过对信息物理融合系统中数据感知模块的特性分析，设计了数据感知组件模型标准类SensorModel，在SensorModel类中设计一个事件槽接口、一个数据发布接口、两个所提供的接口和一个可共子类重写的外部接口，模型接口如图13所示。数据感知组件作为整个信息物理融合系统的数据源，用户在自定义数据感知组件时必须继承数据感知模型类SensorModel，用户按照其需求对数据感知模型类中提供的外部接口Collection进行编写，即可完成对数据的采集。数据感知组件通过事件槽接口函数acquireCustomerEvent获取到周期性触发的事件，在工作线程TaskThread中通过对该组件所感兴趣的组件进行阻塞，每成功阻塞一次都会调用一次Collection函数从而完成数据采集工作，每采集到一次数据后会使用组件所提供的接口getData将数据获取到数据发布接口DataWrite上，工作线程TaskThread会通过数据发布接口DataWrite将数据发布出去，实现了周期性数据的采集与发布。数据感知组件共有两种工作状态，分别是“START”和“STOP”，获取组件工作状态可通过组件所提供的接口GetStatus得到，当获取到的状态为“START”时表明组件正在正常工作，当获取到的状态为“STOP”时表明组件已经停止工作或组件运行出错，数据感知组件模型各接口功能如表6所示，属性如表7所示：表6 通用组件模型接口功能表表7通用组件模型属性表②通信接口组件设计信息物理融合系统中每个数据发布对象只关心能否将数据发布，而不会关心数据接收者是谁，而数据接收只会接收感兴趣的数据，也不会关心数据的发布者是谁，在信息物理融合系统中通常一个数据的发布可能会被多个接收者同时订阅，这样的通信关系恰好满足发布订阅式通信的特点。根据发布订阅数据通信的特点，设计一个适用于信息物理融合系统数据发布订阅的通信组件模型CommModel类，在CommModel类中设计了六个组件所提供的接口，分别是创建数据发布者接口Creat_Publisher、创建数据订阅者接口Creat_Subscriber、获取数据发布者接口GetPublisher、获取数据订阅者接口GetSubscriber、建立发布订阅关系接口BuildCommRelationship、将订阅者加入订阅者队列接口Add_ Subscriber、将发布者加入发布者队列接口Add_Publisher。模型定义的接口如图14所示。用户在开发时，只需将此通信组件实例，此时通信组件会根据用户编辑的系统配置表分别调用创建数据订阅者接口Creat_Subscriber和创建数据发布者接口Creat_Publisher完成系统中所有的发布者与订阅者的创建，每当成功创建一个发布者和一个订阅者时，都调用相应的加入发布者队列接口Add_Publisher和加入订阅者队列接口Add_ Subscriber，完成发布者和订阅者的入队操作。当所有的订阅者和发布者都成功被创建并且都加入各自的队列后，建立发布订阅关系接口BuildCommRelationship根据发布者和订阅者各自携带的主题完成主题间的匹配，最终完成信息物理融合系统中发布订阅关系的建立。发布订阅创建如图15所示，通用组件模型各接口功能如表8所示，属性如表9所示：表8 通用组件模型接口功能表表9 通用组件模型属性表③数据分析计算组件接口设计在信息物理融合系统中，数据分析模块通过对各类传感器传来的各种数据进行分析、计算等处理，从而得到信息物理融合系统的整个状态，针对此特性抽象出了一个数据分析计算组件模型类CalcModel，在CalcModel类中共设计了三个所提供的接口、一个可供用户改写的接口、一个数据发布接口、一个数据订阅接口，数据分析计算组件模型定义的接口如图16所示：用户在使用该数据分析计算组件模型自定义组件时，必须继承该组件模型类CalcModel，并按照用户各自的需求对数据分析计算组件所提供的可供用户重写的外部接口calc进行编写，通过对此接口的重写即可完成数据分析计算组件对数据的分析、计算等工作。该组件在工作时，首先会根据数据订阅接口DataRead对感知组件从传过来的数据进行订阅，并存储到采样区，调用启动任务接口函数ExecuteTask创一个工作线程，在该工作线程中每当采样区有新的数据加入时，将会调用获取采样数据接口函数GetData获取此采样数据，每当拿到新的采样数据后，将会根据用户自定义的外部接口函数calc对数据进行分析、计算处理，得到此信息物理融合系统当前的状态，对数据完成分析、计算处理后，会将数据分析计算组件得出的结果转换成相应的控制命令，通过数据发布接口DataWrite下发给相应的控制部分。在本设计中数据分析计算组件共有三种工作状态，分别是“START”、“STOP”和“BLOCK”，获取组件工作状态可通过组件所提供的接口GetStatus得到，当获取到的状态为“START”时表明组件正在正常工作，当获取到的状态为“STOP”时表明组件已经停止工作或组件运行出错，当获取到的状态为“BLOCK”时表明组件在接收到新的采样数据时，还没有完成对上一次数据的分析与计算，数据分析计算组件模型各接口功能如表10所示，属性如表11所示：表10 数据分析计算组件模型接口功能表表11 数据分析计算组件模型属性表④数据显示组件接口设计为了将信息物理融合系统中各类复杂数据更加直观的体现给同户，结合Windows底层API实现了数据的可视化，根据信息物理融合系统数据可视化的要求，设计了一个数据显示组件模型类DisplayModel，在DisplayModel类中共设计了四个组件所提供的接口：分别是初始化接口Init、开始绘图接口Start、停止绘图接口Stop、界面显示接口Display，数据显示组件模型定义的接口如图17所示。用户在使用该组件时，直接对该组件进行实例即可，该组件结合一个数据接收类Receive和创建窗口类CDuiFrameWnd共同完成数据显示的功能，数据显示组件类关系图如图18所示。在类Receive中，首先根据用户配置文件使用BuildComm方法完成发布订阅关系的建立，当系统中发布订阅关系建立完成后，使用QuerySubscriberNum方法统计数据显示组件同时需要订阅多少条数据，同时在系统中为所有订阅者开辟一块接收一次数据所占空间大小的消息缓冲区m_pMsgBuffer，并将数据的订阅者对象使用AddSubscriberList加入到vector容器m_SubscriberList列表中，数据接收方法ReadData 遍历m_SubscriberList容器列表，并依次调用每个订阅者的DataReader方法完成一次数据的接收，将每个订阅者接收到的数据依次放入到事先开辟好的消息缓存区中。在类CDuiFrameWnd中，根据用户配置文件并结合Windows底层创建窗口API，创建如折线图、文本框、按钮等图形界面，通过重写该窗口的消息过程处理函数Notify，并在系统中系统中定义了一个新的消息“WM_SEND”，每当有消息缓冲区被更新一次，就调用一次SendMessage函数，将“WM_SEND”消息发送至消息过程处理函数Notify，从而完成数据的动态显示与更新。数据分析计算组件模型各接口功能如表12所示，属性如表13所示：表12 数据分析计算组件模型接口功能表表13 数据分析计算组件模型属性表⑤控制组件接口设计控制组件主要根据数据分析计算组件发出的指令控制执行器，最终实现调节外界物理环境的效果，在该设计中结合控制模块的共同特性设计了一个通用控制组件模型类ControlModel，在类ControlModel中设计了一个组件所提供的接口，一个数据订阅接口，一个可供用户重写的接口，控制组件模型定义的接口如图19所示。用户在使用该控制组件模型自定义组件时，必须继承该组件模型类ControlModel，并按照用户各自的需求对控制组件所提供的可供用户重写的外部接口Control 进行编写，通过对此接口的重写完成对相应执行器的控制，该组件在工作时会通过数据订阅接口DataRead订阅数据分析计算组件发布的控制指令，当没有订阅到任何指令时，此时组件一直处于阻塞状态，用户可通过获取状态接口GetStatus来获取组件此时运行状态。控制组件模型各接口功能如表14所示，属性如表15所示：表14 控制组件模型接口功能表表15 控制组件模型属性表使用本发明所提出的组件框架和组件模型搭建了一个信息物理融合系统的仿真系统, 首先通过数据感知模块获取到整个系统的各种数据，再通过通信模块将数据下发至数据分析处理模块和数据显示模块，数据显示模块根据收到的数据进行可视化处理，直观地呈现给用户，数据分析处理模块对收集到的数据进行分析处理，对系统目前的状态做一个准确的处理，并将处理的结果以指令的形式下发至各控制模块，各控制模块根据指令控制各物理机对系统状态做出一个准确的调节。为了测试本框架能够满足信息物理融合系统的基本要求，针对各模块分别设计了几个对应的组件，用于测试信息物理融合系统组件模型框架中，组件是否能够正常运行，以及该框架能否成功的调度各组件。设计了2个温度感知组件、1个湿度感知组件、1个灯状态感知组件；设计了一个名为Comm的通信组件、2个数据分析组件、1个控制组件和显示组件，系统最终的仿真运行效果如图20和图21所示。本发明中未做详细描述的内容均为现有技术。以上所述仅为本发明的较佳实施例而已，并不用以限制本发明，凡在本发明的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本发明的保护范围之内。
