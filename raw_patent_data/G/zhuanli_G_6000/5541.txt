标题title
一种服务接口的动态管理方法及系统
摘要abst
本发明提出了一种服务接口的动态管理方法及系统，方法包括：基于预设用户请求，通过预设可视化界面配置接口的数据源，并创建脚本；基于可视化界面获取接口的配置信息，根据配置信息创建出一个初始的服务接口；基于初始的服务接口定义每个脚本的响应参数和请求参数，并配置响应参数和请求参数；定义一个接口服务对服务接口的可访问性进行配置，以使调用方可通过外部网络访问服务接口；构建在线文档并配置记录日志，并在可视化界面中调试该服务接口以确保服务接口可用，得到基于用户请求所构建的服务接口。本方案基于可视化平台即可简单、高效的构建出服务接口，无需额外进行编程操作，避免资源成本的重复浪费，提高了服务接口的构建效率。
权利要求书clms
1.一种服务接口的动态管理方法，其特征在于，包括如下：基于预设用户请求，通过预设可视化界面配置接口的数据源，并创建至少一个可访问该数据源并执行相关请求的脚本；基于所述可视化界面获取接口的第一配置信息和第二配置信息，所述第一配置信息涉及接口的基本架构，根据所述第一配置信息创建出一个初始的服务接口；基于初始的服务接口定义每个脚本的响应参数和请求参数，根据所述第二配置信息配置响应参数和请求参数；并定义一个独立的接口服务对服务接口的可访问性进行配置，基于所述第二配置信息将服务接口注册到所述接口服务中，以使预设调用方可通过外部网络访问服务接口；完成可访问性配置后，根据所述第二配置信息构建一个在线文档以展示和描述服务接口的相关信息，配置日志以记录服务接口的处理过程；在所述可视化界面中调试该服务接口以确保服务接口可用，最终得到基于用户请求所构建的服务接口。2.根据权利要求1所述的动态管理方法，其特征在于，所述第二配置信息包括涉及用于生成服务接口URL的路由信息和涉及接口请求方式的请求信息；选择一个脚本，根据查询结果生成该脚本响应参数，根据查询条件生成该脚本的请求参数，直至得到所有脚本的响应参数和请求参数；编辑每一个请求参数和响应参数的包括数据类型、数据验证规则、别名在内的参数属性；配置响应参数的传输格式以及响应超时时间；基于第二配置信息配置服务接口的权限认证策略。3.根据权利要求1所述的动态管理方法，其特征在于，在预设接口服务系统中定义一个独立的接口服务；读取第二配置信息，基于第二配置信息将服务接口的路由注册到所述接口服务的路由注册模块中，以使调用方可通过URL访问到此服务接口；完成路由注册后，根据第二配置信息自动生成此服务接口的在线文档，并注册到所述接口服务的接口文档模块，以展示和描述服务接口包括接口名称、请求方式、请求参数、响应参数在内的相关信息。4.根据权利要求1所述的动态管理方法，其特征在于，服务接口配置有多套数据连接模式，每套数据连接模式对应一种服务接口所处的环境；每套数据连接模式集成有服务接口在对应阶段所有的数据传输路径；服务接口所处的环境包括服务接口在开发阶段所处的开发环境、服务接口在测试阶段所处的测试环境以及服务接口在实际应用阶段所处的生产环境。5.根据权利要求1所述的动态管理方法，其特征在于，所述动态管理方法还包括：调用方向服务接口URL发起请求，请求中附带服务接口所需的请求参数；接口服务接收到请求，开始通过记录日志进行记录；通过接口服务中的路由解析模块解析URL并转发到预设处理函数中；通过接口服务中的权限认证模块进行该请求的权限校验；若未通过校验，则直接返回禁止访问状态并终止本次请求；若通过校验，则该处理函数基于配置信息选择相应的数据源，通过脚本访问该数据源并执行相应指令得到访问结果，并将该访问结果返回给调用方；结束记录日志的记录并完成本次请求。6.根据权利要求1所述的动态管理方法，其特征在于，还包括：筛选出记录日志中所记载的、调用方频繁访问的数据源；分析该数据源被访问的时间节点是否符合预设时间条件：若符合关于访问次数的预设时间条件1，则于所述可视化界面构建第一链接，调用方可通过点击该第一链接直接完成相应数据源的访问，得到访问结果；若符合关于访问频率的预设时间条件2，则分析该数据源相邻两次访问的时间间隔计算出访问频率，于所述可视化界面构建第二链接，该第二链接按照该访问频率自动完成对相应数据源的访问，得到每次的访问结果；若符合关于访问时长的预设时间条件3，则于所述可视化界面构建第三链接，该第三链接保存有调用方在该服务接口中的操作数据。7.根据权利要求6所述的动态管理方法，其特征在于，所述预设时间条件1为在限定时间段内，调用方访问某一数据源的次数超过预设次数；所述预设时间条件2为在限定时间段内，调用方以同一频率访问某一数据源数次；所述预设时间条件3为针对同一数据源，调用方持续访问预设时长。8.根据权利要求1所述的动态管理方法，其特征在于，统计各种脚本功能的使用频率，按照使用频率从大到小的次序依次对脚本功能进行排序；筛选出多个脚本功能分别构建脚本模板，每个脚本模板对应一种脚本功能、且未匹配数据源；从所有脚本模板中选择可实现用户请求的一个或多个脚本模板，并连接相应的数据源。9.根据权利要求1所述的动态管理方法，其特征在于，基于请求参数筛选出服务接口中可更改参数的项目，得到可调整项；每当有一个或多个可调整项的参数发生改变时，生成一个版本的历史数据，创建一个备份文档，以备份可调整项各个版本的历史数据；调用方在具备预设恢复权限时，可从备份文档中调用任一版本历史数据对服务接口进行恢复，以得到在该版本历史数据下的服务接口。10.一种服务接口的动态管理系统，其特征在于，用于实现权利要求1-9任一项所述的一种服务接口的动态管理方法；所述动态管理系统包括配置管理服务；所述配置管理服务包括：数据源适配器模块，用于管理各种数据源；脚本解析模块，用于对脚本进行解析，通过执行脚本对数据源进行指令所对应的操作并获得相应的执行结果；脚本编辑器模块，作为编写脚本的编辑器，可对编写的脚本进行实时的语法检测、智能提示，并可存储关键词形式的脚本片段；参数生成模块，用于根据脚本或存储过程生成相应的参数和数据类型；路由配置模块，用于配置服务接口的URL路由，以提供公开于外部网络的URL；参数配置模块，用于配置和管理由参数生成模块生成的参数，配置参数的包括数据类型、别名映射、数据验证规则在内的数据属性；接口基本信息模块用于配置和管理服务接口的包括接口名称、参数类型、请求方式、所属范围组在内的基本信息；导入导出模块，用于对预设配置项以文件的形式导出和导入，包括将数据源的配置以文件的形式导出和导入、将脚本的配置以文件的形式导出和导入、将服务接口的配置以文件的形式导出和导入。11.根据权利要求10所述的动态管理系统，其特征在于，还包括接口服务，所述接口服务具备包括：路由注册模块，用于将已上线的服务接口根据路由配置模块中配置的路由信息将URL路由注册到路由管理器中以提供外部访问服务；路由解析模块，用于按路由规则解析调用方请求的URL并转发到匹配的方法中执行并返回响应结果给调用方；日志记录模块，用于记录服务接口的全链路请求日志、脚本执行日志和数据审计日志；权限认证模块，用于对服务接口进行访问权限的控制，确保只有拥有相应权限的调用方才可访问该服务接口，向未拥有权限的调用方返回401未授权状态码；服务网关模块，用于对服务接口请求进行转发、接口聚合、流量限制、服务熔断、权限控制、负载均衡，保护、增强和控制对于服务接口的访问；接口调试模块，用于在线实时对服务接口进行调用，以测试服务接口的可用性，保证被创建的服务接口可以得到及时有效的可用性验证；接口文档模块，用于自动生成已上线服务接口的在线文档，以展示和描述服务接口的相关信息。
说明书desc
技术领域本发明涉及编程接口开发领域，特别涉及一种服务接口的动态管理方法及系统。背景技术服务接口，又称“应用编程接口”，是一些预先定义的函数，主要目的是提供应用程序与开发人员以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。提供服务接口所定义的功能的软件称作此服务接口的实现。服务接口是一种接口，故而是一种抽象。此文中的服务接口指“Web服务接口”，例如WebApi，WebService等，以下统称为“服务接口”。传统的服务接口开发方式，需要针对每一个服务接口进行编程开发，现有技术中，若要新增服务接口，必须依赖编程的方法，这导致每个服务接口都必须重新编程。而且每个服务接口的用途较为单一，如发生需求变更，需要重新对服务接口进行编码、测试、发布、上线等一系列流程，从而造成大量资源成本的重复浪费。发明内容有鉴于此，本发明提出了一种服务接口的动态管理方法及系统，具体方案如下：一种服务接口的动态管理方法，包括如下：基于预设用户请求，通过预设可视化界面配置接口的数据源，并创建至少一个可访问该数据源并执行相关请求的脚本；基于所述可视化界面获取接口的第一配置信息和第二配置信息，所述第一配置信息涉及接口的基本架构，根据所述第一配置信息创建出一个初始的服务接口；基于初始的服务接口定义每个脚本的响应参数和请求参数，根据所述第二配置信息配置响应参数和请求参数；并定义一个独立的接口服务对服务接口的可访问性进行配置，基于所述第二配置信息将服务接口注册到所述接口服务中，以使预设调用方可通过外部网络访问服务接口；完成可访问性配置后，根据所述第二配置信息构建一个在线文档以展示和描述服务接口的相关信息，配置日志以记录服务接口的处理过程；在所述可视化界面中调试该服务接口以确保服务接口可用，最终得到基于用户请求所构建的服务接口。在一个具体实施例中，所述第二配置信息包括涉及用于生成服务接口URL的路由信息和涉及接口请求方式的请求信息；选择一个脚本，根据查询结果生成该脚本响应参数，根据查询条件生成该脚本的请求参数，直至得到所有脚本的响应参数和请求参数；编辑每一个请求参数和响应参数的包括数据类型、数据验证规则、别名在内的参数属性；配置响应参数的传输格式以及响应超时时间；基于第二配置信息配置服务接口的权限认证策略。在一个具体实施例中，在预设接口服务系统中定义一个独立的接口服务；读取第二配置信息，基于第二配置信息将服务接口的路由注册到所述接口服务的路由注册模块中，以使调用方可通过URL访问到此服务接口；完成路由注册后，根据第二配置信息自动生成此服务接口的在线文档，并注册到所述接口服务的接口文档模块，以展示和描述服务接口包括接口名称、请求方式、请求参数、响应参数在内的相关信息。在一个具体实施例中，服务接口配置有多套数据连接模式，每套数据连接模式对应一种服务接口所处的环境；每套数据连接模式集成有服务接口在对应阶段所有的数据传输路径；服务接口所处的环境包括服务接口在开发阶段所处的开发环境、服务接口在测试阶段所处的测试环境以及服务接口在实际应用阶段所处的生产环境。在一个具体实施例中，所述动态管理方法还包括：调用方向服务接口URL发起请求，请求中附带服务接口所需的请求参数；接口服务接收到请求，开始通过记录日志进行记录；通过接口服务中的路由解析模块解析URL并转发到预设处理函数中；通过接口服务中的权限认证模块进行该请求的权限校验；若未通过校验，则直接返回禁止访问状态并终止本次请求；若通过校验，则该处理函数基于配置信息选择相应的数据源，通过脚本访问该数据源并执行相应指令得到访问结果，并将该访问结果返回给调用方；结束记录日志的记录并完成本次请求。在一个具体实施例中，还包括：筛选出记录日志中所记载的、调用方频繁访问的数据源；分析该数据源被访问的时间节点是否符合预设时间条件：若符合关于访问次数的预设时间条件1，则于所述可视化界面构建第一链接，调用方可通过点击该第一链接直接完成相应数据源的访问，得到访问结果；若符合关于访问频率的预设时间条件2，则分析该数据源相邻两次访问的时间间隔计算出访问频率，于所述可视化界面构建第二链接，该第二链接按照该访问频率自动完成对相应数据源的访问，得到每次的访问结果；若符合关于访问时长的预设时间条件3，则于所述可视化界面构建第三链接，该第三链接保存有调用方在该服务接口中的操作数据。在一个具体实施例中，所述预设时间条件1为在限定时间段内，调用方访问某一数据源的次数超过预设次数；所述预设时间条件2为在限定时间段内，调用方以同一频率访问某一数据源数次；所述预设时间条件3为针对同一数据源，调用方持续访问预设时长。在一个具体实施例中，统计各种脚本功能的使用频率，按照使用频率从大到小的次序依次对脚本功能进行排序；筛选出多个脚本功能分别构建脚本模板，每个脚本模板对应一种脚本功能、且未匹配数据源；从所有脚本模板中选择可实现用户请求的一个或多个脚本模板，并连接相应的数据源。在一个具体实施例中，基于请求参数筛选出服务接口中可更改参数的项目，得到可调整项；每当有一个或多个可调整项的参数发生改变时，生成一个版本的历史数据，创建一个备份文档，以备份可调整项各个版本的历史数据；调用方在具备预设恢复权限时，可从备份文档中调用任一版本历史数据对服务接口进行恢复，以得到在该版本历史数据下的服务接口。一种服务接口的动态管理系统，用于实现上述任一项所述的一种服务接口的动态管理方法；所述动态管理系统包括配置管理服务；所述配置管理服务包括：数据源适配器模块，用于管理各种数据源；脚本解析模块，用于对脚本进行解析，通过执行脚本对数据源进行指令所对应的操作并获得相应的执行结果；脚本编辑器模块，作为编写脚本的编辑器，可对编写的脚本进行实时的语法检测、智能提示，并可存储关键词形式的脚本片段；参数生成模块，用于根据脚本或存储过程生成相应的参数和数据类型；路由配置模块，用于配置服务接口的URL路由，以提供公开于外部网络的URL；参数配置模块，用于配置和管理由参数生成模块生成的参数，配置参数的包括数据类型、别名映射、数据验证规则在内的数据属性；接口基本信息模块用于配置和管理服务接口的包括接口名称、参数类型、请求方式、所属范围组在内的基本信息；导入导出模块，用于对预设配置项以文件的形式导出和导入，包括将数据源的配置以文件的形式导出和导入、将脚本的配置以文件的形式导出和导入、将服务接口的配置以文件的形式导出和导入。在一个具体实施例中，还包括接口服务，所述接口服务具备包括：路由注册模块，用于将已上线的服务接口根据路由配置模块中配置的路由信息将URL路由注册到路由管理器中以提供外部访问服务；路由解析模块，用于按路由规则解析调用方请求的URL并转发到匹配的方法中执行并返回响应结果给调用方；日志记录模块，用于记录服务接口的全链路请求日志、脚本执行日志和数据审计日志；权限认证模块，用于对服务接口进行访问权限的控制，确保只有拥有相应权限的调用方才可访问该服务接口，向未拥有权限的调用方返回401未授权状态码；服务网关模块，用于对服务接口请求进行转发、接口聚合、流量限制、服务熔断、权限控制、负载均衡，保护、增强和控制对于服务接口的访问；接口调试模块，用于在线实时对服务接口进行调用，以测试服务接口的可用性，保证被创建的服务接口可以得到及时有效的可用性验证；接口文档模块，用于自动生成已上线服务接口的在线文档，以展示和描述服务接口的相关信息。有益效果：本发明提出了一种服务接口的动态管理方法及系统，基于可视化平台即可简单、高效的构建出服务接口，无需额外进行编程操作，避免资源成本的重复浪费。可视化平台内部的编程逻辑较为固定，当面对不同的功能或对接不同的数据库时，则通过在可视化界面填充不同的参数，连接不同的数据库，以及在所连接的不同数据库上执行不同的操作，依次实现服务接口的构建。基于一个界面即可完成不同服务接口的构建，且不需要每个服务接口都重新编程，提高了服务接口的构建效率。附图说明图1为本发明实施例的动态管理方法流程示意图；图2为本发明实施例的用户与系统之间的交互示例图；图3为本发明实施例的动态管理系统模块示意图；图4为本发明实施例的动态管理系统中部分模块所属服务示意图。为了更清楚地说明本发明实施例的技术方案，下面将对实施例中所需要使用的附图作简单地介绍，应当理解，以下附图仅示出了本发明的某些实施例，因此不应被看作是对范围的限定，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他相关的附图。附图标记：1-数据源适配器模块；2-数据源主从配置模块；3-服务环境配置模块；4-脚本解析模块；5-脚本编辑器模块；6-参数生成模块；7-路由配置模块；8-参数配置模块；9-接口基本信息模块；10-导入导出模块；11-路由注册模块；12-路由解析模块；13-日志记录模块；14-权限认证模块；15-服务网关模块；16-接口调试模块；17-接口文档模块；18-路由转发模块。具体实施方式在下文中，将更全面地描述本发明公开的各种实施例。本发明公开可具有各种实施例，并且可在其中做出调整和改变。然而，应理解：不存在将本发明公开的各种实施例限于在此公开的特定实施例的意图，而是应将本发明公开理解为涵盖落入本发明公开的各种实施例的精神和范围内的所有调整、等同物和/或可选方案。在本发明公开的各种实施例中使用的术语仅用于描述特定实施例的目的并且并非意在限制本发明公开的各种实施例。如在此所使用，单数形式意在也包括复数形式，除非上下文清楚地另有指示。除非另有限定，否则在这里使用的所有术语具有与本发明公开的各种实施例所属领域普通技术人员通常理解的含义相同的含义。所述术语将被解释为具有与在相关技术领域中的语境含义相同的含义并且将不被解释为具有理想化的含义或过于正式的含义，除非在本发明公开的各种实施例中被清楚地限定。实施例1本发明实施例1公开了一种服务接口的动态管理方法，在可视化界面中，通过填充相应的参数来连接不同的数据库，并在数据库上执行相应的操作，即可得到一个服务接口的构建，大大简化了服务接口的构建。动态管理方法流程框图说明书附图1所示，具体方案如下：一种服务接口的动态管理方法，包括如下步骤：101、基于预设用户请求，通过预设可视化界面配置接口的数据源，创建至少一个可访问该数据源并执行相关请求的脚本；102、基于可视化界面获取接口的第一配置信息和第二配置信息，第一配置信息涉及接口的基本架构，根据第一配置信息创建出一个初始的服务接口；103、基于初始的服务接口定义每个脚本的响应参数和请求参数，根据第二配置信息配置响应参数和请求参数；并定义一个独立的接口服务对服务接口的可访问性进行配置，基于第二配置信息将服务接口注册到接口服务中，以使预设调用方可通过外部网络访问服务接口；104、完成可访问性配置后，根据所述第二配置信息构建一个在线文档以展示和描述服务接口的相关信息，配置日志以记录服务接口的处理过程；105、构建完记录日志后，在可视化界面中调试该服务接口以确保服务接口可用，最终得到基于用户请求构建的服务接口。本实施例的方案由配置管理服务和接口服务构成，附图2提供了用户与系统之间的交互示例图。用户请求中涉及所需的数据库以及对数据库执行何种指令。配置管理服务用于进行数据源、脚本、服务接口的配置，接口服务是一个独立运行的Web服务，用来公开服务接口到网络。首先，定义一种或多种数据源，数据源包括但不限于关系型数据库、非关系型数据库、外部提供的服务接口等。在可视化界面的数据源配置界面上，从程序预定义的几种数据源类型中选择一类数据库，并配置数据库的连接信息，具体如IP、端口、数据库名、数据库用户名、数据库密码等。在可视化界面上进行连接测试，成功后即完成一个数据源的配置。通过上述方法，可以预先或即时生成含有数据库的数据源。其中，可以通过连接数据源的方式来实现连接不同的数据库。例如，在服务接口中输入待处理的数据库或数据源的参数，可以实现连接数据库。数据源可以理解为一个数据库连接，服务接口独立于数据源，但通过设置相应的参数，即可使服务接口与数据源存在对应关系。以此，当需要查询数据库A的数据时，相应的流程如下：调用方发起请求--＞服务接口接收请求--＞根据配置匹配数据源--＞数据源提供数据库A连接--＞执行脚本查询方法--＞返回结果。假设现存在多个数据源，每个数据源是一个数据库连接，对应一种数据库。数据源1--＞database1--＞SQLServer数据源2--＞database2--＞MySQL数据源3--＞database3--＞Oracle现在有一个需求，从database1中查询表table1的数据。则在配置脚本的可视化界面上选择数据源1，创建或调用查询脚本select*from table1；在执行这个脚本的时候，就可以连接上数据源1查询database1数据库中table1表的数据。构建完数据源后，需要基于该数据源配置相应的脚本，以执行相关函数的操作。通过可视化界面的脚本配置界面，选择待配置的数据源，在脚本编辑器中编写涉及查询、新增、修改、删除等功能的SQL脚本或存储过程。在界面上进行脚本执行测试，成功后即完成脚本的配置。可以预先或在需要的时候创建脚本，不同的脚本对应不同的功能，例如可包含查询、新增、修改、删除等功能。这些脚本类似于插件，在需要的时候从服务接口调用即可。在连接上数据库之后，则可以调用预先建立的脚本，或者当时自动生成的脚本，对数据源执行脚本对应的功能，如查看数据库中的数据，删除数据库终的数据，或修改数据库中的数据等等。脚本功能包括查询、新增、修改、删除、替换、调用等等，不同脚本功能的使用频率不同，常见的如查询、新增、修改、删除等对应的脚本使用频率较高，因此本实施例筛选出使用频率较高的多个脚本功能，来构建脚本模板，以实现脚本的快速构建。每个脚本都需要匹配数据源，而脚本模板的通用性较强，未确定数据源。统计各种脚本功能的使用频率，按照使用频率从大到小的次序依次对脚本功能进行排序；筛选出多个脚本功能分别构建脚本模板，每个脚本模板对应一种脚本功能、且未匹配数据源；从所有脚本模板中选择可实现用户请求的一个或多个脚本模板，并连接相应的数据源，即可完成脚本的构建，便于用户快速构建出自己所需要的脚本。在具体领域中，可根据具体需求构建脚本模板。通过可视化界面的服务接口配置界面可以执行以下步骤：1.填写创建一个服务接口所需的基本信息：接口名称、路由、请求方式。2.选择上一个配置的脚本。3.通过选择的脚本，根据查询结果自动生成响应参数；根据查询条件自动生成请求参数。4.编辑每一个请求参数和响应参数的数据类型、数据验证规则、别名等属性。5.配置响应参数通过HTTP传输的格式、响应超时时间等信息。6.基于第二配置信息配置服务接口的权限认证策略，完成了一个服务接口的配置。在本实施例中，服务接口的配置信息包括第一配置信息和第二配置信息。其中，第一配置信息包括服务接口的名称等基本信息，第二配置信息包括涉及用于生成服务接口URL的路由信息和涉及接口请求方式的请求信息。请求参数可理解为入参，响应参数可理解为出参。入参和出参都是参数，每个参数有对应的数据类型，比如，整数类型、字符串类型、日期类型等，可通过配置改变其数据类型。参数的来源是脚本查询后的结果。每个参数有一个名字，此时可能在数据库中此参数对应的字段名为Column1，但实际存储的是标题，为了明确参数的含义，将Column1的别名设置为Title。数据验证规则：例如，Title最多允许20个字符，为避免调用方传入超过20个字符造成程序错误，故需要配置Title的验证规则为小于等于20个字符。服务接口可以对应有权限，不同的权限可以对应不同功能的脚本，由此服务接口可以有多个，各自有各自的权限。此外，还可以对服务接口的调用方进行权限认证。例如仅涉及查看功能的脚本，用户所需调用的权限就比较低，而涉及删除功能的脚本对应的脚本权限就比较高。优选地，不同的脚本可以对应不同的权限；也可以在进行权限认证时，确认调用方的权限，权限不以高低论。权限包括哪些可以操作的脚本，例如用户1的权限是权限1，权限1就包括可以执行查看的脚本和删除的脚本的操作。完成服务接口的配置后，通过接口服务完成服务接口的注册、运行、接收、转发等操作。在预设接口服务系统中定义一个独立的接口服务；读取第二配置信息，基于第二配置信息将服务接口的路由注册到接口服务的路由注册模块中，以使调用方可通过URL访问到此服务接口；完成路由注册后，根据第二配置信息自动生成此服务接口的在线文档，并注册到接口文档模块，用于展示和描述一个接口的相关信息，包括接口名称、请求方式、请求参数、响应参数等信息，在线文档只是用来列明服务端可以提供什么接口，每个接口需要什么请求方式、请求参数、返回什么信息等。构建关于服务接口的日志，用于记录服务接口的处理和调用过程。每当调用方调用一个接口，API服务接收到该请求后至返回响应信息之间由API服务记录内部程序的处理过程。完成服务接口所有部分的构建后，可在配置管理服务的接口调试界面进行接口的测试调用以确保服务接口可用。此外，本实施例的服务接口还兼具备份恢复功能。具体地，基于请求参数筛选出服务接口中可更改参数的项目，得到可调整项；每当有一个或多个可调整项的参数发生改变时，生成一个版本的历史数据，创建一个备份文档，以备份可调整项各个版本的历史数据；调用方在具备预设的恢复权限时，可在备份文档中调用任一版本历史数据对服务接口进行恢复，以得到在该版本历史数据下的服务接口。备份文档能够记录每次可调整项的更改，并保存预设时间段内版本的历史数据，方便用户恢复某一版本的历史数据。恢复功能要求调用方具有较高的权限，服务接口也会校验调用方的权限。优选地，服务接口配置有多套数据连接模式，每套数据连接模式对应一种服务接口所处的环境；每套数据连接模式集成有服务接口在对应阶段所有的数据传输路径。服务接口所处的环境包括服务接口在开发阶段所处的开发环境、服务接口在测试阶段所处的测试环境以及服务接口在实际应用阶段所处的生产环境等。而不同的应用领域又可能存在不同的生产环境，例如，在领域A仅需要普通的功能，则领域B则需要恢复等高级功能，领域A和领域B就配置有不同的数据连接模式。在每套数据连接模式下，会有不同的如接口、传输路径、设备需要连接。服务接口在开发阶段和实际应用阶段，可能会存在不同的数据连接，比如在开发阶段需要进行调试，需要连接调试设备，而在应用阶段可能不需要调试，无需连接调试设备。因环境不同而频繁的更改数据连接，是非常麻烦的。本实施例的方案专门设置了环境配置功能，只需在不同的环境设置不同数据连接模式，在服务接口上线前后，直接切换环境对应的数据连接模式即可。服务接口可以发布到外部网络上，调用方后续可以通过互联网连接上服务接口，再通过服务接口对待处理的数据库进行操作。由操作人员通过可视化界面的系统管理面板进行简单的配置，即可生成一个用于提供数据接口服务的服务接口，有助于减少由绝大多数软件需求的增加或变更引起的服务接口开发造成的大量资源成本的重复浪费，同时有助于降低企业对相关技术人员岗位需求的成本。调用服务接口具体包括：调用方向服务接口URL发起请求，请求中附带服务接口所需的请求参数；接口服务接收到请求，开始通过记录日志记录全链路日志；通过接口服务中的路由解析模块解析URL并转发到相应的处理函数中；通过接口服务中的权限认证模块进行该请求的权限校验；若未通过校验，则直接返回禁止访问状态并终止本次请求；若通过校验，则该处理函数基于配置信息选择相应的数据源，通过脚本访问该数据源并执行相应指令得到访问结果，并将该访问结果返回给调用方；结束记录日志的记录并完成本次请求。其中，服务端接收到请求后，需要对该请求的参数，以及该接口应该执行的操作进行处理，把这个处理的过程包装起来，即为处理函数。在一个具体实施例中，为提高服务接口的处理效率，方案还包括：可以记录同一用户的历史操作记录，筛选出记录日志中所记载的、调用方频繁访问的数据源；分析该数据源被访问的时间节点是否符合预设时间条件1：若符合关于访问次数的预设时间条件，则于可视化界面构建第一链接，调用方可通过点击该第一链接直接完成相应数据源的访问，得到访问结果；若符合关于访问频率的预设时间条件2，则分析该数据源相邻两次访问的时间间隔计算出访问频率，于可视化界面构建第二链接，该第二链接按照该访问频率自动完成对相应数据源的访问，得到每次的访问结果；若符合关于访问时长的预设时间条件3，则于可视化界面构建第三链接，该第三链接保存有调用方在该服务接口中的操作数据。链接可以通过图标的形式呈现在可视化界面中。第一链接、第二链接和第三链接可理解为一种快捷方式。其中，预设时间条件1为在限定时间段内，调用方访问某一数据源的次数超过预设次数；预设时间条件2为在限定时间段内，调用方以同一频率访问某一数据源数次；预设时间条件3为针对同一数据源，调用方持续访问预设时长。此外，若发现同一用户在一定时间内频繁对数据源1中进行操作，操作可能有各种不同的步骤或参数，则可以将操作暂停或结束后，将该服务接口的流程设置成一个图标进行保存，后续用户点击该图标后，则可以不用再输入连接数据源1的信息，直接进入到数据源1中进行操作之前的界面，保留上次访问之后的数据和界面，便于用户延续之间的操作。本实施例提供了一种服务接口的动态管理方法，基于可视化平台即可简单、高效的构建出服务接口，无需额外进行编程操作，避免资源成本的重复浪费。可视化平台内部的编程逻辑较为固定，当面对不同的功能或对接不同的数据库时，则通过在可视化界面填充不同的参数，连接不同的数据库，以及在所连接的不同数据库上执行不同的操作，依次实现服务接口的构建。基于一个界面即可完成不同服务接口的构建，且不需要每个服务接口都重新编程，提高了服务接口的构建效率。实施例2本发明实施例2公开了一种服务接口的动态管理系统，可实现实施例1的一种服务接口的动态管理方法，系统的具体结构如说明书附图3所示，具体方案如下：动态管理系统包括配置管理服务和接口服务。其中配置管理服务用于服务接口的创建及配置相关参数的功能。其由如下模块组成：数据源适配器模块1、数据源主从配置模块2、服务环境配置模块3、脚本解析模块4、脚本编辑器模块5、参数生成模块6、路由配置模块7、参数配置模块8、接口基本信息模块9、导入导出模块10等。配置管理服务具体包括：数据源适配器模块1是用于管理各种数据提供者，例如：MySQL、SQL Server、Oracle、MongoDB、WebAPI、Webservice等。其抽象为一个统一的接口，举例中的各种数据源各自实现该接口，以插件的形式注入到抽象接口中。在脚本解析模块需要时根据指定的数据提供者通过工厂的方式创建相应的实例供脚本解析模块使用。数据源主从配置模块2是用于管理和配置一主多从的数据连接，以供对数据的读写分离使用，有效提升数据吞吐性能。服务环境配置模块3是用于管理和配置服务接口在上线前后的环境区分，一个服务接口在不同的阶段会处于不同的环境中，比如开发环境、测试环境、生产环境，通常不同的环境有不同的数据连接。因环境不同而频繁的更改数据连接，是非常麻烦的。使用环境配置功能，只需在不同的环境设置不同数据连接，在服务接口上线前后，直接切换环境即可。脚本解析模块4用于手工编写的脚本进行解析执行，以执行对数据库类数据源的增删查改操作并获得相应的执行结果。脚本编辑器模块5用于在Web页面进行编写SQL脚本的编辑器，可对编写的脚本进行实时的语法检测、智能提示，并可存储关键词形式的脚本片段，编写者再次使用时只需输入关键词即可生成对应的脚本片段，极大提高编写效率。参数生成模块6用于根据编写的SQL脚本或存储过程生成相应的参数和数据类型，包含入参和出参。自动生成参数既节省了人工录入的工作量，也避免了人工录入易出错的问题。路由配置模块7用于配置URL路由以提供公开于外部网络的服务接口URL。根据路由解析器的规则配置符合RESTful规范的服务接口URL。配置参数需提供资源名称、操作名称、PATH类型的参数等。参数配置模块8用于配置和管理由参数生成模块6生成的参数，配置参数的数据类型、别名映射、数据验证规则等属性。接口基本信息模块9用于配置和管理服务接口的接口名称、参数类型、请求方式、所属范围组等基本信息。导入导出模块10用于将数据源的配置以文件的形式导出和导入、将脚本的配置以文件的形式导出和导入、将服务接口的配置以文件的形式导出和导入，以及其他配置项的导出和导入。接口服务用于将服务接口公开于外部网络，提供给调用方访问服务接口，并用于追踪记录请求访问等功能。其由如下模块组成：路由注册模块11、路由解析模块12、日志记录模块13、权限认证模块14、服务网关模块15、接口调试模块16、接口文档模块17、路由转发模块18等。接口服务具体包括：路由注册模块11用于将已上线的服务接口根据路由配置模块7中配置的路由信息将URL路由注册到路由管理器中以提供外部访问服务。路由解析模块12用于按路由规则解析调用方请求的URL并转发到匹配的方法中执行并返回响应结果给调用方。日志记录模块13用于记录服务接口的全链路请求日志、脚本执行日志和数据审计日志。记录日志有助于服务接口访问的统计、程序运行异常信息的排查、分析定位调用方对数据的更改等。权限认证模块14使用ApiKey、OAuth2.0等方式对服务接口进行访问权限的控制，只有拥有相应权限的调用方才可访问该服务接口，向未拥有权限的调用方返回401未授权状态码，有效的保证服务接口的安全性。服务网关模块15用于对服务接口请求进行转发、接口聚合、流量限制、服务熔断、权限控制、负载均衡等等非业务性功能，用来保护、增强和控制对于服务接口的访问，接口网关是一个处于应用程序或服务之前的系统，用来管理授权、访问控制和流量限制等，这样服务接口就会被服务网关保护起来，对所有的调用者透明。接口调试模块16用于在线实时对服务接口进行调用，以测试服务接口的可用性，保证被创建的服务接口可以得到及时有效的可用性验证。接口文档模块17，用于自动生成已上线服务接口的在线文档，以展示和描述服务接口的相关信息。创建一个新的服务接口或对一个服务接口进行修改后即自动生成该服务接口的相关文档，免除了人工维护接口文档的麻烦及避免人工维护接口文档易出错的问题。路由转发模块18，用于将路由解析模块解析出的URL转发到相应的处理函数中。说明书附图4提供了部分模块所属的业务。本实施例提供了一种服务接口的动态管理系统，可实现实施例1的动态管理方法本发明提出了一种服务接口的动态管理方法及系统，基于可视化平台即可简单、高效的构建出服务接口，无需额外进行编程操作，避免资源成本的重复浪费。可视化平台内部的编程逻辑较为固定，当面对不同的功能或对接不同的数据库时，则通过在可视化界面填充不同的参数，连接不同的数据库，以及在所连接的不同数据库上执行不同的操作，依次实现服务接口的构建。基于一个界面即可完成不同服务接口的构建，且不需要每个服务接口都重新编程，提高了服务接口的构建效率。本领域技术人员可以理解附图只是一个优选实施场景的示意图，附图中的模块或流程并不一定是实施本发明所必须的。本领域技术人员可以理解实施场景中的装置中的模块可以按照实施场景描述进行分布于实施场景的装置中，也可以进行相应变化位于不同于本实施场景的一个或多个装置中。上述实施场景的模块可以合并为一个模块，也可以进一步拆分成多个子模块。上述本发明序号仅仅为了描述，不代表实施场景的优劣。以上公开的仅为本发明的几个具体实施场景，但是，本发明并非局限于此，任何本领域的技术人员能思之的变化都应落入本发明的保护范围。
