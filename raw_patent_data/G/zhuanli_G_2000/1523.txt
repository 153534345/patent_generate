标题title
一种基于网络化结构特征的微服务拆分方法
摘要abst
本发明公开了一种基于网络化结构特征的微服务拆分方法，其步骤为：采用静态代码分析方法获取系统中的类与方法之间的静态关联信息；利用动态链路追踪方法获取业务操作的执行链路信息，包括业务操作与业务操作、业务操作与数据库之间的交互信息；根据获得的业务类与方法之间的静态关联信息以及业务操作的执行链路信息构建参数矩阵；根据参数矩阵，构建网络模型;采用基于改进的K‑means算法进行聚类，完成微服务拆分。本发明不仅仅能够解决人工拆分中拆分成本高、拆分粒度大等问题，而且相较于其他微服务拆分方法，其拆分效率也有很大的提高。
权利要求书clms
1.一种基于网络化结构特征的微服务拆分方法，其特征在于，包括以下步骤：S1，采用静态代码分析方法获取系统中类与方法之间的静态关联信息，进而获取单个服务其内部业务操作与数据库之间的交互信息，以及外部服务与服务之间的交互所产生的数据信息；S2，利用动态链路追踪方法获取业务操作的执行链路信息，包括业务操作与业务操作、业务操作与数据库之间的交互信息；S3，根据步骤S1获得的业务类与方法之间的静态关联信息以及步骤S2获取业务操作的执行链路信息构建参数矩阵；S4，根据步骤S3所构建的参数矩阵来构建网络模型：其中以对业务功能所进行的操作与各服务所包含的数据库作为网络中的节点，以业务操作之间以及业务操作与数据库之间所交互次数的倒数作为网络中边的权值；S5，根据步骤S4所构建网络模型中边的权值，以此权值作为聚合过程中的聚合因子，采用改进K-means算法进行聚类，k设定为固定的值，参考节点之间的交互频率来设定其之间距离，选取网络结构中距离最远的点作为初始聚类中心，将剩余的其余节点按照其与聚类中心的距离，划分到相应的簇中，寻找此时距离当前聚类中心最远的节点作为新的聚类中心参与聚类，更新聚类中心，经过数次迭代之后得到聚类结果，即微服务的拆分方案。2.根据权利要求1所述的基于网络化结构特征的微服务拆分方法，其特征在于：所述步骤S1中静态代码分析方法采用Understand对结构代码进行分析。3.根据权利要求1所述的基于网络化结构特征的微服务拆分方法，其特征在于：所述步骤S2中采用Zipkin进行动态链路追踪。4.根据权利要求1所述的基于网络化结构特征的微服务拆分方法，其特征在于：所述步骤S3中的参数矩阵为具有m个参数的矩阵W，W为一个×的矩阵， i为业务操作节点个数，j为数据库个数， 取业务操作之间、业务操作与数据库之间交互次数的倒数作为节点边的权值，故矩阵中元素Wij的值即表示第i号节点与第j号节点之间边的权值，值为0则表示其间不存在交互。5.根据权利要求1所述的基于网络化结构特征的微服务拆分方法，其特征在于：所述步骤S4中以单个业务操作与数据库作为网络中的节点，以矩阵中的元素值作为网络中边权值构建网络模型。6.根据权利要求1所述的基于网络化结构特征的微服务拆分方法，其特征在于：所述步骤S5中采用基于改进的K-means算法进行聚类，完成微服务拆分，具体步骤如下：初始有n个聚类中心Un，2≤n≤k，k表示最终将划分成k个簇，根据步骤S1，S2中获取的信息，确定微服务拆分个数为k个，且设：d=Wxy ； d表示网络结构图中节点x与节点y之间的距离，Wxy表示节点x与y之间边的权值；选取网络结构中d值最大的两个节点，将这两个节点作为聚类中心，根据中心与周围各节点的接近程度来划分成两个集合；分别计算出两个集合中的dmin，dmin表示聚类集合中聚类中心节点与其余节点距离的最小值，求出两个集合中距离周围邻居节点最近的节点，设为b1，b2，作为新的聚类中心，进行下一轮聚类；；dnew表示当前一轮的聚类过程中，距离当前聚类中心节点最远的节点到聚类中心节点之间的距离，并以此节点作为下一聚类过程中的聚类中心，m表示矩阵中的参数个数，μ表示在聚类过程中所参与计算的节点，根据式计算出距离b1、b2最远的节点，记为c1；根据这几个节点与周围节点的距离划分成3个集合，再次求出三个集合的dmin，以此来确定c1、 c2、 c3作为新的聚类中心，进一步聚类形成3个簇；；同理当需要聚类成4个簇时，按照式选取距离上述步骤中3个聚类中心最远的节点作为新的聚类中心，同样按照与周围各个节点距离长度来进行集合的划分，最终分为4个集合；当集合划分个数等于微服务最终划分个数k时，停止继续添加新的聚类节点，确定此k个节点作为聚类的中心节点，将整个网络划分成k个集合，每个集合最终形成一个微服务的候选集。
说明书desc
技术领域本发明属于微服务技术领域，具体涉及一种基于网络化结构特征的微服务拆分方法。背景技术近年来，随着互联网架构的不断完善与发展，用户对于系统功能的需求越来越多，由此使得软件系统的架构也越来越复杂，内容越来越繁重，因此，以往的单体架构与SOA架构在面对需要处理多个业务功能时，会出现效率低、资源浪费大等一系列问题。许多企业正逐渐追求一个灵活、高效、业务功能丰富的软件架构。微服务架构作为单体架构与面向服务架构之后新兴的软件系统架构，其主要思想在于“分而自治”，即将传统的架构划分成更细粒度的单位，每个服务具备自己的组件与数据库，能够独立的完成业务功能的实现，服务与服务之间通过API接口进行交互，各个微服务在进行需求设计、开发、测试、部署、交付时，互不影响，技术异构。由此开发出来的软件架构，业务功能更加丰富，架构更加灵活，处理效率更加迅速。因此已经有越来越多的企业开始向微服务架构进行转型。微服务架构能够如此灵活高效，在很大程度上取决于其拆分的结果是否足够优秀，如拆分的粒度是否足够小，拆分方案的效率是否足够高，所拆分出来的微服务是否能够尽可能多的实现客户的需求等等。因此一种合理的拆分方案在微服务的拆分过程中就显得尤为重要。Baresi等人通过对系统接口语义相似度进行分析，通过接口文档、测试用例等方法完成微服务的拆分。此类方法虽然能够有完整的测试用例描述以及对于系统各阶段的开发文档的分析报告，但是由于此方法较大程度上取决开发者的经验以及一个开发文档的完整性，故在拆分过程中会存在开发文档丢失，服务划分粒度过大等障碍。Ding D等针对微服务拆分依赖于人工分析、拆分成本高、拆分周期长等问题，提出了一种场景驱动、自低向上的微服务拆分方法。此方法作为半自动化的拆分方法在用于较为大型的、业务逻辑较为复杂的、数据表较多的软件系统架构中，在较大程度上减轻了软件系统开发的工作量与开发成本。然而此方法在数据的粒度拆分上还存在局限性。Li 等人针对以往基于数据流驱动的微服务拆分方法进行优化，此方法在微服务拆分的效率以及灵活性方面都有着较大的提升。但这种通过拆分算法来进行微服务拆分的方法对于信息收集、过程分析、以及拆分算法的优化方面都有着较高的要求。信息收集不完整、过程分析不充分，算法效率不高等都会对微服务拆分的结果造成较大影响。传统的k-means算法主要通过欧式距离来作为聚类的一个关键指标，找出距离聚类中心最近的节点放入一个簇中，在不断的迭代中完成聚类过程。这种方法虽然简单便捷，但是其分类的结果严重依赖于簇中心的初始化且聚类结果并不能保证全局最优，而且使用欧式距离作为聚类的中心对于某些特殊点可能不具有鲁棒性，容易造成聚类结果陷入局部最优的情况。专利CN202211416435公开了一种基于系统特征的微服务拆分方法，该专利中以相关节点放入一个簇的方法随机性比较大，由此带来的随机性结果会加重后续的工作量，并影响后续微服务拆分的效率。发明内容为了解决现有微服务拆分存在的上述技术问题，本发明提供一种基于网络化结构特征的微服务拆分方法。本发明不仅仅能够解决人工拆分中拆分成本高、拆分粒度大等问题，而且相较于其他微服务拆分方法，其拆分效率也有很大的提高。本发明解决上述技术问题的技术方案是：一种基于网络化结构特征的微服务拆分方法，包括以下步骤：S1，采用静态代码分析方法获取系统中类与方法之间的静态关联信息，进而获取单个服务其内部业务操作与数据库之间的交互信息，以及外部服务与服务之间的交互所产生的数据信息；S2，利用动态链路追踪方法获取业务操作的执行链路信息，包括业务操作与业务操作、业务操作与数据库之间的交互信息；S3，根据步骤S1获得的业务类与方法之间的静态关联信息以及步骤S2获取业务操作的执行链路信息构建参数矩阵；S4，根据步骤S3所构建的参数矩阵来构建网络模型：其中以对业务功能所进行的操作与各服务所包含的数据库作为网络中的节点，以业务操作之间以及业务操作与数据库之间所交互次数的倒数作为网络中边的权值；S5，根据步骤S4所构建网络模型中边的权值，以此权值作为聚合过程中的聚合因子，采用改进K-means算法进行聚类，k设定为固定的值，参考节点之间的交互频率来设定其之间距离，选取网络结构中距离最远的点作为初始聚类中心，将剩余的其余节点按照其与聚类中心的距离，划分到相应的簇中，寻找此时距离当前聚类中心最远的节点作为新的聚类中心参与聚类，更新聚类中心，经过数次迭代之后得到聚类结果，即微服务的拆分方案。进一步的，所述步骤S1中静态代码分析方法中采用Understand对结构代码进行分析。进一步的，所述步骤S2中采用Zipkin进行动态链路追踪。进一步的，所述步骤S3中的参数矩阵为具有m个参数的矩阵W，W为一个×的矩阵， i为业务操作节点个数，j为数据库个数， 取业务操作之间、业务操作与数据库之间交互次数的倒数作为节点边的权值，故矩阵中元素Wij的值即表示第i号节点与第j号节点之间边的权值，值为0则表示其间不存在交互。进一步的，所述步骤S4中以单个业务操作与数据库作为网络中的节点，以矩阵中的元素值作为网络中边权值构建网络模型。进一步的，所述步骤S5中采用基于改进的K-means算法进行聚类，完成微服务拆分，具体步骤如下：初始有n个聚类中心Un，2≤n≤k，k表示最终将划分成k个簇，根据步骤S1，S2中获取的信息，确定微服务拆分个数为k个，且设：d=Wxy ；d表示网络结构图中节点x与节点y之间的距离，Wxy表示节点x与y之间边的权值；选取网络结构中d值最大的两个节点，将这两个节点作为聚类中心，根据中心与周围各节点的距离来划分成两个集合；分别计算出两个集合中的dmin，dmin表示聚类集合中聚类中心节点与其余节点距离的最小值，求出两个集合中距离周围邻居节点最近的节点，设为b1，b2，作为新的聚类中心，进行下一轮聚类；；dnew表示当前一轮的聚类过程中，距离当前聚类中心节点最远的节点到聚类中心节点之间的距离，并以此节点作为下一聚类过程中的聚类中心，m表示矩阵中的参数个数，μ表示在聚类过程中参与计算的节点，根据式计算出距离b1、b2最远的节点，记为c1；根据这几个节点与周围节点的距离划分成3个集合，再次求出三个集合的dmin，以此来确定c1、 c2、 c3作为新的聚类中心，进一步聚类形成3个簇；；同理当需要聚类成4个簇时，根据公式选取距离上述步骤中3个聚类中心最远的节点作为新的聚类中心，同样按照与周围各个节点距离长度来进行集合的划分，最终分为4个集合；当集合划分个数等于微服务最终划分个数k时，停止继续添加新的聚类节点，确定此k个节点作为聚类的中心节点，将整个网络划分成k个集合，每个集合最终形成一个微服务的候选集。本发明的有益效果：1)本发明通过前期的测试用例编写与网络模型的构建，为后期通过K-means算法自动化拆分提供数据信息。以此种测试驱动的方法进行的拆分模式，能够根据用户的需求将整个架构划分成若干个微服务。在充分满足用户需求的同时，利用K-means算法的高效性，能够迅速的完成划分。区别于传统的k-means算法，本发明将k设定为固定的值，参考节点之间的交互频率来设定其之间距离，选取网络结构中距离最远的点作为初始聚类中心，将剩余的其余节点按照其与聚类中心的距离，划分到相应的簇中，寻找此时距离当前聚类中心最远的节点作为新的聚类中心参与聚类，更新聚类中心。通过循环上述过程直至聚类中心数等于k值，此时就表示通过聚类过程得到了k个簇，完成了节点聚类过程。在一定程度降低了服务划分的成本，减少了拆分过程所花的时间。2)本发明将业务操作与数据库设为网络中的节点来进行模型构建并聚类，而业务操作与数据库是构成一个业务功能中最基本的单位，因此，所拆分出的各个微服务在足够细的同时，同样也能完整的实现各自对应的业务功能。此外，由于通过使用改进的K-means算法来进行拆分，对于所拆分微服务的个数，可以根据用户的需求，灵活的进行设置，大大优化了整个系统的灵活性。3)本发明充分考虑了高内聚低耦合准则，以节点交互的频率作为划分准则，将交互频繁的业务操作与数据库划进同一个微服务，能够确保实现业务功能时尽可能在服务内部完成，避免过多的外部交互。不仅能够极大程度上降低了业务功能实现所花成本，而且能够避免由于某个服务的崩溃引起整个系统宕机。附图说明图1为本发明的流程图。图2为本发明中业务操作节点与数据库节点关系示意图。图3为本发明中为微服务模型下多重网络任务驱动的组件调度示意图。图4 为本发明中基于改进的K-means算法流程图。图5、图6、图7为本发明中改进的K-means算法聚类图。具体实施方式下面结合附图和具体实施例对本发明做进一步的详细说明。如图1所示，本发明的基于网络化结构特征的微服务拆分方法包括以下步骤：S1，采用静态代码分析方法获取系统中的类与方法之间的静态关联信息。完成静态代码分析的工作主要借助于Understand，通过将单体架构的代码导入其中，就可以生成图形化分析结果，比如模块与模块之间的调用，函数的调用流程等等。通过图形化的分析，可以很清楚的获取代码中各个参数之间的逻辑关系，能很便捷、准确的获取其中有关指标，这些指标可以实现我们对于软件架构中各组件之间交互关系的理解，有助于实现高内聚低耦合的微服务拆分原则。S2，利用动态链路追踪方法获取业务操作的执行链路信息，包括业务操作与业务操作、业务操作与数据库之间的交互信息。本发明中通过Zipkin来完成动态链路追踪问题。Zipkin在通常情况下主要用于对服务产生的定时数据进行收集，从而用来解决微服务架构中存在的延迟问题。核心组件能够很好的满足我们对于系统链路信息收集的需求，比如Collector、Storage组件，我们通过Collector处理从系统外部发送的追踪信息，通过Storage存储其追踪信息，而RESTful API则为外部的访问提供了接口，向外部展示追踪信息，所以我们在借此组件的基础上，再结合UI组件就可以方便、直观地查询和分析跟踪信息。S3，根据步骤S1获得的类与方法之间的静态关联信息，以及步骤S2获取业务操作的执行链路信息构建参数矩阵，设存在i个业务操作节点，j个数据库节点。以此条件构建一个具有m个参数的矩阵W，W为一个×的矩阵，取业务操作之间、业务操作与数据库之间交互次数的倒数作为节点边的权值，故矩阵中元素Wij的值即表示第i号节点与第j号节点之间边的权值，值为0则表示其间不存在交互。S4，根据参数矩阵，以业务操作与数据库作为网络中的节点，构建网络模型。根据步骤S3构建的参数矩阵，构建初始网络结构图G，v表示业务操作节点与数据库节点的个数之和，e表示业务操作与业务操作、业务操作与数据库之间存在的关联数之和，如图2所示。图2中，P指的是带拆分架构中的业务操作，D代表数据库，W表示两者之间的交互频率。在一个待拆分的单体架构中，设存在i个业务操作节点P={P1,P2…Pi}，，j个数据库节点D={Di+1,Di+2,…Dj}，，通过步骤S1，S2中获取的信息，将业务操作与业务操作、业务操作与数据库之间的交互次数的倒数，作为网络中边的权值W={W11,W12…Wij}，权值越小，表示两者之间的交互越频繁，耦合度越低。反之权值越大，表示两者之间的交互频率越低，耦合度越大。以此来构建整个网络结构，其示意图如图3所示。S5，在S4步骤构建的网络结构中，为了获得最优的微服务划分结果，我们对传统的K-Means算法进行优化。根据实际应用与业务需求，我们设定初始有n个聚类中心Un，2≤n≤k，k表示最终将划分成k个簇，也即最终拆分成k个微服务M={M1,M2…Mk}。通过对步骤S1，S2中信息的获取进行分析，确定微服务拆分个数为k个。且设：d=Wxy ；d表示网络结构图中节点x与节点y之间的距离，Wxy表示节点x与y之间边的权值。选择网络结构中d值最大的两个节点，然后将这两个节点作为聚类中心，根据中心与周围各节点的距离来划分成两个集合。根据式分别计算出两个集合中dmin，dmin表示聚类集合中聚类中心节点与其余节点距离的最小值，以此来求出两个集合中距离周围邻居节点最近的节点，设为b1，b2，作为新的聚类中心，进行下一轮聚类，如图5所示。；上式dnew表示当前一轮的聚类过程中，距离当前聚类中心节点最远的节点到聚类中心节点之间的距离，并以此节点作为下一聚类过程中的聚类中心，m为参数矩阵中的参数个数，μ表示在聚类过程中所参与计算的节点 ，即选取聚类集合中第μ个节点；根据式，求出距离b1，b2最远的节点，设为c1，如图6所示。根据这几个节点与周围节点的距离划分成3个集合，再次求出三个集合的dmin，以此来确定c1、 c2、 c3作为新的聚类中心，进一步聚类形成3个簇，如图7所示。；同理当需要聚类成4个簇时，按照式选取距离上述步骤中3个聚类中心最远的节点作为新的聚类中心，同样按照与周围各个节点距离长度来进行集合的划分，最终分为4个集合。当集合划分个数等于微服务最终划分个数k时，停止继续添加新的聚类节点。确定此k个节点作为聚类的中心节点，将整个网络划分成k个集合，每个集合最终形成一个微服务的候选集。
