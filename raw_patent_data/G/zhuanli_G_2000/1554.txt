标题title
业务查询信息的获取方法、业务数据查询方法以及装置
摘要abst
本发明实施例提供业务查询信息的获取方法，业务数据查询方法以及装置、设备及介质，其中所述业务查询信息的获取方法包括：接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带目标业务的业务标识；调用驱动托管单元，获取所述业务标识对应的目标业务查询信息，其中，所述驱动托管单元设置于数据库编程接口与数据库驱动单元之间，所述驱动托管单元记录的业务查询信息包括：在业务数据查询过程中所述驱动托管单元从所述数据库编程接口获得的业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果；将所述目标业务查询信息发送至所述请求方。
权利要求书clms
1.一种业务查询信息的获取方法，其特征在于，包括：接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带目标业务的业务标识；调用驱动托管单元，获取所述业务标识对应的目标业务查询信息，其中，所述驱动托管单元设置于数据库编程接口与数据库驱动单元之间，所述驱动托管单元记录的业务查询信息包括：在业务数据查询过程中所述驱动托管单元从所述数据库编程接口获得的业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果；将所述目标业务查询信息发送至所述请求方。2.根据权利要求1所述的方法，其特征在于，所述将所述目标业务查询信息发送至所述请求方，包括：将所述目标业务查询信息缓存至异步队列；利用所述异步队列，将所述目标业务查询信息转发至所述请求方。3.根据权利要求1所述的方法，其特征在于，在所述接收请求方发送的业务查询信息的获取请求之前，还包括：获取样本业务查询请求，其中，所述样本业务查询请求携带样本业务的业务标识和业务查询语句；调用数据库编程接口，转发所述样本业务查询请求；调用驱动托管单元，获得所述数据库编程接口转发的所述样本业务查询请求，对所述样本业务查询请求解析得到所述样本业务的业务标识和业务查询语句，并记录所述样本业务的业务标识和业务查询语句。4.根据权利要求3所述的方法，其特征在于，在所述记录所述样本业务的业务标识和业务查询语句之前，还包括：响应于针对所述样本业务的业务查询语句的处理指令，调用驱动托管单元，对所述样本业务的业务查询语句进行处理，获得处理后的所述样本业务的业务查询语句；所述记录所述样本业务的业务标识和业务查询语句，包括：记录所述样本业务的业务标识和处理后的所述样本业务的业务查询语句。5.根据权利要求3所述的方法，其特征在于，在所述调用驱动托管单元，获得所述数据库编程接口转发的所述样本业务查询请求之后，还包括：调用所述驱动托管单元，基于所述样本业务查询请求，确定目标数据库驱动单元；调用所述目标数据库驱动单元，执行所述样本业务查询语句，从所述目标数据库驱动单元对应的目标数据库获得所述样本业务的数据查询结果；调用所述驱动托管单元，获得所述目标数据库驱动单元得到的所述数据查询结果，并记录所述数据查询结果。6.根据权利要求5所述的方法，其特征在于，在所述调用所述目标数据库驱动单元，获得所述目标数据库驱动单元得到的所述数据查询结果，并记录所述数据查询结果之前，还包括：调用所述驱动托管单元，经所述目标数据库驱动单元，构建与目标数据库的访问链路。7.根据权利要求1-6中任一项所述的方法，其特征在于，在所述接收请求方发送的业务查询信息的获取请求之前，还包括：接收所述数据库驱动单元的注册信息；调用所述驱动托管单元，基于所述数据库驱动单元的注册信息，对所述数据库驱动单元进行注册操作。8.根据权利要求7所述的方法，其特征在于，在所述接收所述数据库驱动单元的注册信息之前，还包括：获取所述驱动托管单元的注册信息；将所述驱动托管单元的注册信息发送至注册管理端，以使所述注册管理端基于所述驱动托管单元的注册信息，对所述驱动托管单元进行注册操作。9.一种业务数据查询方法，其特征在于，包括：接收查询方发起的目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句；调用数据库编程接口，转发所述目标业务查询请求；调用驱动托管单元，获得所述数据库编程接口转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元，其中，所述驱动托管单元设置于所述数据库编程接口与数据库驱动单元之间；调用所述目标数据库驱动单元，执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果；调用所述驱动托管单元，获得所述目标数据库驱动单元得到的所述数据查询结果，将所述数据查询结果反馈至所述查询方。10.一种业务数据查询装置，其特征在于，包括：数据库编程接口、驱动托管单元和数据库驱动单元，其中，所述驱动托管单元设置于所述数据库编程接口与所述数据库驱动单元之间；所述数据库编程接口，被配置为接收查询方发起的目标业务查询请求，并转发所述目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句；所述驱动托管单元，被配置为获得所述数据库编程接口转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元；所述数据库驱动单元，被配置为执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果；所述驱动托管单元，还被配置为获得所述目标数据库驱动单元得到的所述数据查询结果，并将所述数据查询结果反馈至所述查询方。11.根据权利要求10所述的装置，其特征在于，所述驱动托管单元，还被配置为对所述目标业务查询请求解析得到所述目标业务的业务标识和业务查询语句，并记录所述目标业务的业务标识和业务查询语句。12.根据权利要求10所述的装置，其特征在于，所述驱动托管单元，还被配置为记录所述数据查询结果。13.根据权利要求11或12所述的装置，其特征在于，所述驱动托管单元，还被配置为接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带所述目标业务的业务标识；获取所述业务标识对应的目标业务查询信息，将所述目标业务查询信息发送至所述请求方。14.一种计算设备，其特征在于，包括：存储器和处理器；所述存储器用于存储计算机可执行指令，所述处理器用于执行所述计算机可执行指令，该计算机可执行指令被处理器执行时实现权利要求1-8任意一项所述业务查询信息的获取方法或者权利要求9所述业务数据查询方法的步骤。15.一种计算机可读存储介质，其特征在于，其存储有计算机可执行指令，该计算机可执行指令被处理器执行时实现权利要求1-8任意一项所述业务查询信息的获取方法或者权利要求9所述业务数据查询方法的步骤。
说明书desc
技术领域本发明实施例涉及计算机技术领域，特别涉及一种业务查询信息的获取方法，一种业务数据查询方法。本发明同时涉及一种业务数据查询装置，一种计算设备，以及一种计算机可读存储介质。背景技术随着各行业业务需求的增长，在实际的业务中企业往往需要在访问数据库时获取完整的业务SQL，以达到业务监控的目的，如数据库SQL适配扫描、动态SQL的执行监控、SQL拦截以及SQL执行统计等。相关技术中，通过ORM框架进行数据查询，在查询过程中进行拦截SQL的操作。然而，ORM框架的类型多样，不同的ORM框架的实现方式各有不同，在企业不同业务使用不同ORM框架的情况下获取SQL的通用性较差，并且通常情况下，由于ORM框架面向对象的特性，通过ORM框架获取的SQL并不是完整的SQL语句，如果需要获取完整的SQL，一般需要对代码进行修改，造成了代码侵入问题。因此，亟需一种能够的访问处理方法，提高获取SQL的通用性，并解决因修改代码带来的代码侵入问题。发明内容有鉴于此，本发明实施例提供了一种业务查询信息的获取方法，一种业务数据查询方法。本发明一个或者多个实施例同时涉及一种业务数据查询装置，一种计算设备，一种计算机可读存储介质以及一种计算机程序，以解决现有技术中存在的技术缺陷。根据本发明实施例的第一方面，提供了一种业务查询信息的获取方法，包括：接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带目标业务的业务标识；调用驱动托管单元，获取所述业务标识对应的目标业务查询信息，其中，所述驱动托管单元设置于数据库编程接口与数据库驱动单元之间，所述驱动托管单元记录的业务查询信息包括：在业务数据查询过程中所述驱动托管单元从所述数据库编程接口获得的业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果；将所述目标业务查询信息发送至所述请求方。根据本发明实施例的第二方面，提供了一种业务数据查询方法，包括：接收查询方发起的目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句；调用数据库编程接口，转发所述目标业务查询请求；调用驱动托管单元，获得所述数据库编程接口转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元，其中，所述驱动托管单元设置于所述数据库编程接口与数据库驱动单元之间；调用所述目标数据库驱动单元，执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果；调用所述驱动托管单元，获得所述目标数据库驱动单元得到的所述数据查询结果，将所述数据查询结果反馈至所述查询方。根据本发明实施例的第三方面，提供了一种业务数据查询装置，包括：数据库编程接口、驱动托管单元和数据库驱动单元，其中，所述驱动托管单元设置于所述数据库编程接口与所述数据库驱动单元之间；所述数据库编程接口，被配置为接收查询方发起的目标业务查询请求，并转发所述目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句；所述驱动托管单元，被配置为获得所述数据库编程接口转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元；所述数据库驱动单元，被配置为执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果；所述驱动托管单元，还被配置为获得所述目标数据库驱动单元得到的所述数据查询结果，并将所述数据查询结果反馈至所述查询方。根据本发明实施例的第四方面，提供了一种计算设备，包括：存储器和处理器；所述存储器用于存储计算机可执行指令，所述处理器用于执行所述计算机可执行指令，该计算机可执行指令被处理器执行时实现上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。根据本发明实施例的第五方面，提供了一种计算机可读存储介质，其存储有计算机可执行指令，该指令被处理器执行时实现上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。根据本发明实施例的第六方面，提供了一种计算机程序，其中，当所述计算机程序在计算机中执行时，令计算机执行上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。本发明提供的业务查询信息的获取方法，接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带目标业务的业务标识；调用驱动托管单元，获取所述业务标识对应的目标业务查询信息，其中，所述驱动托管单元设置于数据库编程接口与数据库驱动单元之间，所述驱动托管单元记录的业务查询信息包括：在业务数据查询过程中所述驱动托管单元从所述数据库编程接口获得的业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果；将所述目标业务查询信息发送至所述请求方。本发明一个实施例通过在数据库编程接口与数据库驱动单元之间增加驱动托管单元，使得驱动托管单元即能够获取数据库编程接口转发的业务查询语句，又能够接收数据库驱动单元返回的业务数据查询结果，在此基础上，调用驱动托管单元获取目标业务的业务标识对应的业务查询信息，该业务查询信息包括从所述数据库编程接口获得的完整业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果。由于较顶层的框架无论什么框架类型采用的都是相同的数据库编程接口，因此从较底层的数据库编程接口获取完整业务查询语句，可以不考虑框架类型，提高了获取业务查询信息的通用性，同时无需对代码进行修改，降低了代码侵入性。附图说明图1是相关技术中ORM框架的结构示意图；图2是相关技术中集中式的访问服务的一种结构示意图；图2是相关技术中集中式的访问服务的另一种结构示意图；图3是本发明一个实施例提供的一种业务数据查询系统架构的交互流程示意图；图4是本发明一个实施例提供的一种业务查询信息的获取方法的流程图；图5是本发明一个实施例提供的一种业务数据查询方法的流程图；图6是本发明一个实施例提供的一种应用于获取完整SQL的业务查询信息的获取方法的处理过程流程图；图7是本发明一个实施例提供的一种应用于获取完整SQL的业务查询信息的获取方法中ORM框架的结构示意图；图8是本发明一个实施例提供的一种业务数据查询装置的结构示意图；图9是本发明一个实施例提供的一种计算设备的结构框图。具体实施方式在下面的描述中阐述了很多具体细节以便于充分理解本发明。但是本发明能够以很多不同于在此描述的其它方式来实施，本领域技术人员可以在不违背本发明内涵的情况下做类似推广，因此本发明不受下面公开的具体实施的限制。在本发明一个或多个实施例中使用的术语是仅仅出于描述特定实施例的目的，而非旨在限制本发明一个或多个实施例。在本发明一个或多个实施例和所附权利要求书中所使用的单数形式的“一种”、“所述”和“该”也旨在包括多数形式，除非上下文清楚地表示其他含义。还应当理解，本发明一个或多个实施例中使用的术语“和/或”是指并包含一个或多个相关联的列出项目的任何或所有可以组合。应当理解，尽管在本发明一个或多个实施例中可以采用术语第一、第二等来描述各种信息，但这些信息不应限于这些术语。这些术语仅用来将同一类型的信息彼此区分开。例如，在不脱离本发明一个或多个实施例范围的情况下，第一也可以被称为第二，类似地，第二也可以被称为第一。取决于语境，如在此所使用的词语“如果”可以被解释成为“在……时”或“当……时”或“响应于确定”。此外，需要说明的是，本发明一个或多个实施例所涉及的用户信息和数据，均为经用户授权或者经过各方充分授权的信息和数据，并且相关数据的收集、使用和处理需要遵守相关国家和地区的相关法律法规和标准，并提供有相应的操作入口，供用户选择授权或者拒绝。首先，对本发明一个或多个实施例涉及的名词术语进行解释。SQL：结构查询语言，是一种用于管理和操作数据库的语言，通过特定的命令和语法实现对数据库的查询、插入、更新和删除等操作。在本发明的实施例中，获取业务SQL是指获取业务执行过程中对数据库操作的SQL语句，以监控业务对数据库的所有操作。数据库SQL适配扫描：一种针对查询执行优化的技术，在执行查询时根据数据的分布情况和查询的条件动态调整扫描策略，以提高查询性能。在该项技术中，为了对查询进行全面的分析和优化，需要获取完整SQL以提供准确的查询语义信息。动态SQL的执行监控：一种用于监控和分析动态生成的SQL语句执行情况的技术。在该项技术中，需要获取完整SQL以进行监控和分析。SQL拦截：一种用于捕获和处理应用程序中发送到数据库的SQL语句的技术，可以截获应用程序中生成的SQL语句，并对其进行处理、修改或监控。在该项技术中，为了后续对SQL语句进行处理、修改或监控，需要拦截完整的SQL。SQL执行统计：一种用于收集和分析SQL查询执行过程中的性能指标和统计信息的技术。通过对SQL执行的统计数据进行分析，可以评估查询的性能、识别潜在的瓶颈，并对查询进行优化和调整。在该项技术中，需要获取完整的SQL。JDBCAPI：即Java数据库编程接口，是一组标准的Java语言中的接口和类，使用这些接口和类，Java客户端程序可以访问各种不同类型的数据库。比如建立数据库连接、执行SQL语句进行数据的存取操作。ORM框架：用于将数据库中的数据与面向对象的编程语言中的对象进行映射。它的目标是通过使用面向对象的方式来操作数据库，使开发人员能够通过直接操作对象来进行数据库操作，而不是编写和执行SQL语句。常见ORM框架有Hibernate，MyBatis，Spring DataJPA，Apache Cayenne等。对于获取SQL，不同的ORM框架有不同的做法。mycat：一种开源的数据库中间件，旨在提供对大规模MySQL集群的简化和自动化管理。drds：分布式关系型数据库服务，提供了一个统一的SQL访问接口，可以将数据分布在多个节点上，通过分布式事务保证数据的一致性。DVU：驱动托管单元。随着各行业业务需求的增长，在实际的业务中企业往往需要在访问数据库时获取完整的业务SQL，以达到业务监控的目的，如数据库SQL适配扫描、动态SQL的执行监控、SQL拦截以及SQL执行统计等。现有技术中，通常不直接通过JDBC获取SQL，而是通过ORM框架来获取SQL，以简化业务开发。示例性的，参考图1所示，图1是相关技术中一种ORM框架的结构示意图，在应用程序中使用ORM框架，ORM框架包括JDBC接口与oracle jdbc驱动、mysql jdbc驱动、postgresQL jdbc驱动相连接，oracle jdbc驱动与应用程序之外的oracle数据库连接，mysql jdbc驱动与应用程序之外的mysql数据库连接，postgresQL jdbc驱动与应用程序之外的postgresQL数据库连接。开发人员通过ORM框架调用JDBC接口生成SQL指令发送至对应的jdbc驱动，jdbc驱动执行SQL语句在数据库中完成数据查询、数据写入、数据查询等操作。通过ORM框架获取SQL，以ORM框架为MyBatis框架为例，可以通过MyBatis的拦截器来获取SQL，拦截器是MyBatis提供的一种机制，可以在SQL执行前后进行一些操作，例如记录并获取SQL。具体过程为：首先，开发人员编写一个继承自MyBatis拦截器接口的类，实现其中的intercept方法，该方法会在SQL执行前被调用记录SQL语句，在SQL执行后被调用记录SQL语句计算SQL语句的执行时间；其次，在mybatis-config.xml中配置拦截器，并将其添加到SQL执行链中，这样，当MyBatis执行SQL时，拦截器就会在SQL执行前记录SQL语句，在SQL执行后计算执行时间并输出。开发人员也可以根据实际需求，对拦截器进行修改，实现其他功能，比如记录SQL执行次数、记录SQL开始执行时间等。可以理解的是，其他ORM框架例如Hibernate也可以采用类似的方法实现获取SQL。然而，ORM框架的类型多样，不同的ORM框架的实现方式各有不同，在企业不同业务使用不同ORM框架的情况下获取SQL的通用性较差，并且通常情况下，ORM由于其面向对象的特性，通过ORM框架获取的SQL并不是完整的SQL语句甚至是经过转义的非SQL语句，如果需要获取完整的SQL，一般需要对代码进行修改，造成了代码侵入问题。以MyBatis框架为例，最常用的mybaits框架如需要获取带参数的完整SQL，可以通过拦截Executor对象的query和update方法，在方法执行前后分别获得带占位符的SQL，再通过多步参数转合和填充，将原有的SQL占位符号换成参数值，但是，在处理过程中容易影响原有的SQL性能和参数资源释放。此外，ORM框架中采用的集中式的访问服务例如mycat、drds、mysql、proxy受限与协议，通用性差，并且会造成访问延时和吞吐限制。参考图2所示，图2是相关技术中集中式的访问服务的一种结构示意图，mycat组件位于数据库与分布式应用之间。图2是相关技术中集中式的访问服务的另一种结构示意图，drds位于云端，且在同样位于云端的rds与位于云端之外的分布式应用之间。图2与图2中两种集中式访问服务由于协议不同，通用性差，并且会获取SQL造成访问延时和吞吐限制。基于上述问题，在本发明中，提供了一种业务查询信息的获取方法，业务数据查询方法，本发明同时涉及一种业务数据查询装置，一种计算设备，以及一种计算机可读存储介质，在下面的实施例中逐一进行详细说明。参照图3所示，图3是本发明一个实施例提供的一种业务数据查询系统架构的交互流程示意图，其中该业务数据查询系统包括数据库编程接口、驱动托管单元与数据库驱动单元，同时在业务数据查询系统之外还包括查询方、请求方与数据库。所述查询方，用于向业务查询系统发送业务查询信息的获取请求。所述数据库编程接口，用于基于业务查询信息的获取请求生成业务查询语句并将业务查询语句发送至驱动托管单元。所述驱动托管单元，用于将业务查询语句发送至数据库驱动单元，并记录业务查询语句；所述驱动托管单元，还用于接收请求方发起的业务查询信息的获取请求，并响应于请求方发起的业务查询信息的获取请求向请求方返回业务查询语句。所述数据库驱动单元，有执行业务查询语句，从数据库中获取业务数据查询结果，并将所述业务查询结果返回至业务数据查询系统，使得所述业务数据查询系统将业务数据查询结果返回至查询方。可以理解的是，请求方与查询方可以为同一个端口。该业务数据查询系统通过在数据库编程接口与数据库驱动单元之间增加驱动托管单元，使得驱动托管单元即能够获取数据库编程接口转发的业务查询语句，又能够接收数据库驱动单元返回的业务数据查询结果，在此基础上，调用驱动托管单元获取目标业务的业务标识对应的业务查询信息，该业务查询信息包括从所述数据库编程接口获得的完整业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果。由于较顶层的框架无论什么框架类型采用的都是相同的数据库编程接口，因此从较底层的数据库编程接口获取完整业务查询语句，可以不考虑框架类型，提高了获取业务查询信息的通用性，同时无需对代码进行修改，降低了代码侵入性。参见图4，图4是本发明一个实施例提供的一种业务查询信息的获取方法的流程图，具体包括以下步骤。步骤402：接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带目标业务的业务标识。其中，业务查询信息为业务数据查询过程中的相关信息，举例而言，业务查询信息可以是业务数据查询过程中的SQL语句。业务标识为指示目标业务的标识，可以是数字标识、字符串标识或者数字与字符串的组合标识。在实际应用中，请求方可以通过HTTP或其他通信协议向业务数据查询系统发送业务查询信息的获取请求，请求内容中包括获取目标业务的业务标识，业务数据查询接收到业务查询信息的获取请求后，解析业务查询信息的获取请求，得到目标业务的业务标识。在本发明一具体实施例中，以业务查询信息为SQL语句为例，请求方向业务数据查询系统发送获取目标业务的SQL语句的请求，业务查询系统在接收到该获取目标业务的SQL语句的请求之后，首先进行解析，确定目标业务的业务标识。进一步地，在所述接收请求方发送的业务查询信息的获取请求之前，还包括：获取样本业务查询请求，调用数据库编程接口，转发所述样本业务查询请求；调用驱动托管单元，获得所述数据库编程接口转发的所述样本业务查询请求，对所述样本业务查询请求解析得到所述样本业务的业务标识和业务查询语句，并记录所述样本业务的业务标识和业务查询语句。其中，所述样本业务查询请求携带样本业务的业务标识和业务查询语句，在实际应用中，业务数据查询系统在接收请求方发送业务查询信息的获取请求之前，需要首先获取样本业务查询请求。在获取到样本业务查询请求后，业务数据查询系统调用数据库编程接口将样本业务查询请求转发给数据库编程接口，使得样本请求的内容就传递到了数据库编程接口中。数据库编程接口将样本业务查询请求传递给驱动托管单元，以便在驱动托管单元处理样本业务查询请求。其中，驱动托管单元位于数据库编程接口和数据库驱动单元之间，负责协调数据库的访问和查询过程。驱动托管单元获得样本请求后，对其进行解析。从样本业务查询请求中提取样本业务的业务标识和业务查询语句。在解析样本业务查询请求后，驱动托管单元将样本业务的业务标识和业务查询语句进行记录，用于后续的查询分析、性能优化或其他需要使用样本业务信息的场景。基于此，可以在实际的业务查询中使用样本业务信息作为参考，进一步优化查询逻辑和结果。同时，记录样本业务信息也有助于后续的数据分析和问题排查等工作。进一步地，在所述记录所述样本业务的业务标识和业务查询语句之前，还包括：响应于针对所述样本业务的业务查询语句的处理指令，调用驱动托管单元，对所述样本业务的业务查询语句进行处理，获得处理后的所述样本业务的业务查询语句；所述记录所述样本业务的业务标识和业务查询语句，包括：记录所述样本业务的业务标识和处理后的所述样本业务的业务查询语句。其中，处理指令可以包括对业务查询语句的记录、复制、转发、改写等处理操作指令。在实际应用中，响应于针对样本业务的业务查询语句的处理指令，驱动托管单元在记录样本业务的业务标识和业务查询语句之前，需要先对针对样本业务的业务查询语句进行复制、转发、改写等处理操作得处理后的样本业务查询语句，以满足处理指令发起方特定的需求和目标。在获得处理后的样本业务查询语句后，将样本业务的业务标识和处理后的样本业务的业务查询语句进行记录。这样可以保存样本业务的关键信息，用于后续参考、分析或其他需要使用样本业务信息的目的。基于此，可以对样本业务的业务查询语句进行额外处理，并且保留处理后的样本业务信息用于后续的查询和分析。进一步地，在所述接收请求方发送的业务查询信息的获取请求之前，还包括：接收所述数据库驱动单元的注册信息；调用所述驱动托管单元，基于所述数据库驱动单元的注册信息，对所述数据库驱动单元进行注册操作。其中，注册信息可以包括数据库的主机名、端口号、数据库名称、用户名和密码等信息，还可以包括指定要使用的数据库驱动单元的名称和版本号，例如：驱动单元名称：MySQL JDBC Driver，版本号：8.0.23。注册操作可以包括验证数据库驱动单元的身份、建立与数据库的连接、加载必要的配置、设置所需的权限等。在实际应用中，在接收请求方发送的业务查询信息获取请求之前，首先需要接收数据库驱动单元的注册信息。这些注册信息是数据库驱动单元向驱动托管单元注册所提供的与数据库驱动单元或者数据库本身相关的身份信息，用于建立与数据库的连接和交互。在接收到数据库驱动单元的注册信息后，调用驱动托管单元进行注册操作。在本发明一具体实施例中，以注册信息为数据库驱动单元名称：MySQL JDBCDriver，版本号：8.0.23为例，驱动托管单元根据接收到的注册信息，对数据库驱动单元名称：MySQL JDBC Driver，版本号：8.0.23的数据库驱动单元进行注册操作，建立驱动托管单元与MySQL数据库的链接与交互。基于此，确保数据库驱动单元与驱动托管单元建立正确的连接，并在后续的查询操作中提供必要的支持和功能，保证了数据库查询能够顺利进行，并且数据库驱动单元能够正确地与数据库进行通信和交互。进一步地，在所述接收所述数据库驱动单元的注册信息之前，还包括：获取所述驱动托管单元的注册信息；将所述驱动托管单元的注册信息发送至注册管理端，以使所述注册管理端基于所述驱动托管单元的注册信息，对所述驱动托管单元进行注册操作。其中，注册管理端可以为位于应用程序中的驱动管理器，驱动托管单元的注册信息可以包括驱动托管单元的身份标识、配置参数、权限等信息。注册操作可以包括验证驱动托管单元的身份、建立与驱动托管单元的连接、加载必要的配置、设置所需的权限等操作。在实际应用中，在接收数据库驱动单元的注册信息之前，需要首先获取驱动托管单元的注册信息，这些注册信息可以包括驱动托管单元的身份标识、配置参数、可用功能、所需权限等内容。获取到驱动托管单元的注册信息后，将该注册信息发送至注册管理端,注册管理端可以是一个专门负责管理和维护注册信息的服务端，可用于协调管理驱动托管单元注册操作。在本发明一具体实施例中，以注册信息为驱动托管单元的身份标识、配置参数、可用功能、所需权限，以注册管理端为位于应用程序的驱动管理器为例。在接收数据库驱动单元的注册信息之前，驱动托管单元需要将自身的身份标识、配置参数、可用功能、所需权限发送到位于应用程序的驱动管理器。驱动管理器根据接收到的驱动托管单元的身份标识、配置参数、可用功能、所需权限，进行验证驱动托管单元的身份、建立与驱动托管单元的连接、加载必要的配置、设置所需的权限等操作，以建立与驱动托管单元的链接。基于此，将驱动托管单元注册到驱动管理端，确保了驱动托管单元和数据库驱动单元之间的正确连接和协同工作，同时保证了驱动托管单元和数据库驱动单元之间的一致性。步骤404：调用驱动托管单元，获取所述业务标识对应的目标业务查询信息，其中，所述驱动托管单元设置于数据库编程接口与数据库驱动单元之间，所述驱动托管单元记录的业务查询信息包括：在业务数据查询过程中所述驱动托管单元从所述数据库编程接口获得的业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果。其中，数据库编程接口是用于与数据库进行交互的程序接口或编程接口，数据库编程接口提供了一组方法、类、函数或协议，使得应用程序能够通过编程语言与数据库进行通信、执行查询、插入或更新数据等操作。数据库驱动单元是用于连接和与特定数据库进行通信的软件组件，充当了应用程序与数据库之间的桥梁，通过提供接口和功能，使得应用程序能够通过标准化的方式与数据库进行交互。在实际应用中，业务数据查询系统接收到获取请求后，首先，解析请求内容，得到目标业务的业务标识；其次，调用驱动托管单元来获取目标业务的业务查询信息，驱动托管单元位于数据库编程接口和数据库驱动单元之间，负责协调数据库的访问和查询过程，调用驱动托管单元来获取目标业务的业务查询信息具体包括：驱动托管单元根据业务标识，从数据库编程接口获取业务查询语句，驱动托管单元可以记录该业务查询语句，并将业务查询语句传递给数据库驱动单元，数据库驱动单元获取业务数据查询结果，并返回至驱动托管单元。通过上述步骤，驱动托管单元获取了与目标业务相关的业务查询信息。在本发明一具体实施例中，以业务查询信息为SQL语句为例，业务数据查询系统接收到获取请求后，首先，解析请求内容，得到目标业务的业务标识；其次，调用驱动托管单元根据业务标识，从数据库编程接口获取SQL语句，记录该SQL语句。进一步地，在所述调用驱动托管单元，获得所述数据库编程接口转发的所述样本业务查询请求之后，还包括：调用所述驱动托管单元，基于所述样本业务查询请求，确定目标数据库驱动单元；调用所述目标数据库驱动单元，执行所述样本业务查询语句，从所述目标数据库驱动单元对应的目标数据库获得所述样本业务的数据查询结果；调用所述驱动托管单元，获得所述目标数据库驱动单元得到的所述数据查询结果，并记录所述数据查询结果。在实际应用中，首先，驱动托管单元会接收到数据库编程接口转发的样本业务查询请求。这个请求可以包含业务查询语句、参数和其他必要的信息；其次，驱动托管单元会根据样本业务查询请求的内容，确定需要执行这个样本业务查询请求的目标数据库驱动单元；然后，驱动托管单元会调用目标数据库驱动单元，并将样本业务查询语句传递给它，目标数据库驱动单元会执行该样本业务查询语句，并与相应的目标数据库建立连接；最后，目标数据库驱动单元会执行样本业务查询语句，从目标数据库中获得数据查询结果，并将查询结果返回至驱动托管单元，驱动托管单元对该数据查询结果进行记录。基于此，实现了样本业务的查询操作。进一步地，在所述调用所述目标数据库驱动单元，执行所述样本业务查询语句之前，还包括：调用所述驱动托管单元，经所述目标数据库驱动单元，构建与目标数据库的访问链路。其中，访问链路为数据库驱动单元与数据库之间进行数据传递和通信的链路。在实际应用中，在执行样本业务查询语句之前，首先，配置构建访问链路所需的参数，如数据库的主机名、端口号、数据库名称、用户名和密码等；其次，调用数据库驱动程序建立数据库驱动单元与数据库的连接；然后，数据库会对连接进行身份验证和权限验证，一般情况下身份验证和权限验证涉及用户名和密码的校验；最后可选地，在应用程序不再需要与数据库通信时，可以关闭数据库连接，这样可以释放与数据库的资源和连接，防止资源泄露和性能问题。基于此，访问链路的构建为数据库驱动单元与数据库进行交互和数据传递提供了的基础步骤406：将所述目标业务查询信息发送至所述请求方。在实际应用中，驱动托管单元在获取目标业务查询信息之后将目标业务查询信息发送至所述请求方。在本发明一具体实施例中，以目标业务查询信息为SQL语句为例，驱动托管单元在获取SQL语句之后将SQL语句发送至所述请求方。进一步地，所述将所述目标业务查询信息发送至所述请求方，包括：将所述目标业务查询信息缓存至异步队列；利用所述异步队列，将所述目标业务查询信息转发至所述请求方。其中，异步队列为用于存储和管理待处理任务的数据结构，将目标业务查询信息缓存到异步队列中可以确保在后续的处理过程中，能够有效地处理该目标业务查询信息。在实际应用中，首先，将目标业务查询信息存储到一个异步队列中进行缓存；其次，将异步队列作为中间层，将缓存的目标业务查询信息从驱动托管单元发送到请求方。基于此，保证了目标业务查询信息从驱动程序传递到请求方之间的安全、高效的转发和处理。本发明一个实施例通过在数据库编程接口与数据库驱动单元之间增加驱动托管单元，使得驱动托管单元即能够获取数据库编程接口转发的业务查询语句，又能够接收数据库驱动单元返回的业务数据查询结果，在此基础上，调用驱动托管单元获取目标业务的业务标识对应的业务查询信息，该业务查询信息包括从所述数据库编程接口获得的完整业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果。由于较顶层的框架无论什么框架类型采用的都是相同的数据库编程接口，因此从较底层的数据库编程接口获取完整业务查询语句，可以不考虑框架类型，提高了获取业务查询信息的通用性，同时无需对代码进行修改，降低了代码侵入性参见图5，图5是本发明一个实施例提供的一种业务数据查询方法的流程图，具体包括以下步骤。步骤502：接收查询方发起的目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句。其中，业务查询语句是一种用于数据库查询的语句或语言，用于描述要在数据库中执行的查询操作，通常是SQL语句或类似的查询语言，用于描述查询的条件、参数和要返回的数据等。在实际应用中，查询方可以通过HTTP或其他通信协议向业务数据查询系统发送业务数据查询请求，请求内容中包括获取目标业务的业务标识和业务查询语句，业务数据查询接收到业务数据查询请求后，解析业务数据查询请求，得到目标业务的业务标识与业务查询语句。在本发明一具体实施例中，以业务查询语句为SQL语句为例，请求方向业务数据查询系统发送查询业务数据的请求，业务查询系统在接收到该查询业务数据的请求之后，首先进行解析，确定目标业务的业务标识与业务查询语句。步骤504：调用数据库编程接口，转发所述目标业务查询请求。其中，数据库编程接口用于与数据库进行交互的程序接口或编程接口，例如JDBC接口。在实际应用中，在调用数据库编程接口之前，可以先建立数据库编程接口与转发对象的连接，然后通过调用数据库编程接口来转发目标业务查询请求。步骤506：调用驱动托管单元，获得所述数据库编程接口转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元，其中，所述驱动托管单元设置于所述数据库编程接口与数据库驱动单元之间。其中，数据库编程接口是用于与数据库进行交互的程序接口或编程接口，数据库编程接口提供了一组方法、类、函数或协议，使得应用程序能够通过编程语言与数据库进行通信、执行查询、插入或更新数据等操作。数据库驱动单元是用于连接和与特定数据库进行通信的软件组件，充当了应用程序与数据库之间的桥梁，通过提供接口和功能，使得应用程序能够通过标准化的方式与数据库进行交互。在实际应用中，数据库编程接口调用驱动托管单元，接收目标业务查询请求传递给它，驱动托管单元负责协调数据库的访问和查询过程，设置在数据库编程接口与数据库驱动单元之间。步骤508：调用所述目标数据库驱动单元，执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果。在实际应用中，基于目标业务查询请求，驱动托管单元根据业务标识和查询语句的特定要求，确定目标数据库驱动单元。目标数据库驱动单元是具体执行数据库查询和操作的组件，它与特定的数据库管理系统相关联。目标数据库驱动单元接收到目标业务查询请求之后，根据查询请求中的业务标识和查询语句，在数据库中执行具体的查询操作。步骤510：调用所述驱动托管单元，获得所述目标数据库驱动单元得到的所述数据查询结果，将所述数据查询结果反馈至所述查询方。在实际应用中，一旦目标数据库驱动单元的查询操作完成，目标数据库驱动单元会将查询结果返回给驱动托管单元。查询结果可以是查询的数据集、游标或其他适合的数据表示形式。为了更清楚的说明本发明实施例提供的技术方案，以应用于获取完整SQL的业务查询信息的获取方法为例，参照图6所示，图6是本发明一个实施例提供的一种应用于获取完整SQL的业务查询信息的获取方法的处理过程流程图，具体包括：步骤602，DVU向驱动管理程序注册。在一种可实现方式中，参照图7所示，图7是本发明一个实施例提供的一种应用于获取完整SQL的业务查询信息的获取方法中ORM框架的结构示意图，具体包括：JDBC接口：用于在Java应用程序和DVU之间进行通信。DVU：包括DVU JDBC、驱动托管组件，SQL路由组件与扩展单元，其中，DVU JDBC用于与JDBC接口链接，接收JDBC接口转发的内容或请求；驱动托管组件用于注册数据库驱动单元，构建数据库驱动单元与数据库之间的通信链路，存储SQL语句；SQL路由组件，用于对记录的SQL语句执行改写、复制、转发等操作，扩展单元，用于增加DVU的功能。Oracle jdbc驱动、mysql jdbc驱动、postgresQL jdbc驱动：分别为Oracle数据库的驱动程序，mysql数据库的驱动程序，postgresQL数据库的驱动程序。所述DVU向驱动管理程序注册具体包括：在应用程序启动时，将DVU JDBC注册到位于应用程序的JDBC驱动程序管理器中。具体注册过程参照上述实施例所述，此处不再赘述。步骤604，数据库驱动程序向DVU注册。在一种可实现方式中，参照图7所示，Oracle jdbc驱动、mysql jdbc驱动、postgresQL jdbc驱动向DVU中的驱动托管组件注册，由DVU管理Oracle jdbc驱动、mysqljdbc驱动、postgresQL jdbc驱动的生命周期，以及构建Oracle jdbc驱动、mysql jdbc驱动、postgresQL jdbc驱动与Oracle数据库，mysql数据库，postgresQL数据库的通信连接。具体注册过程与构建通信连接过程参照上述实施例所述，此处不再赘述。步骤606，转发数据库访问请求至DVU。在一种可实现方式中，参照图7所示，当应用程序使用JDBC接口访问数据库时，JDBC驱动程序管理器会将数据库访问的请求通过JDBC接口转发给DVU，具体的，通过DVUJDBC转发到DVU。具体转发过程参照上述实施例所述，此处不再赘述。步骤608，确定目标数据库驱动单元。在一种可实现方式中，参照图7所示，DVU寻找数据库访问请求对应的jdbc驱动，构建数据库访问链路，经过SQL路由组件将数据库访问的请求分发出去。SQL路由组件可以做与SQL相关的事包含SQL分析，记录,转发，改写，复制等。具体确定目标数据驱动单元的过程参照上述实施例所述，此处不再赘述。步骤610，将转发数据库访问请求发送至目标数据库驱动单元。在一种可实现方式中，参照图7所示，DVU会将访问数据库请求中的SQL语句和SQL语句的参数值分发给目标jdbc驱动，由目标jdbc驱动执行SQL语句。具体分发过程与执行过程参照上述实施例所述，此处不再赘述。步骤612，数据库驱动单元执行SQL语句，并返回查询结果。在一种可实现方式中，参照图7所示，目标jdbc驱动执行完SQL语句后，将查询结果返回给DVU。返回过程参照上述实施例所述，此处不再赘述。步骤614，DVU返回查询结果至应用程序。在一种可实现方式中，参照图7所示，DVU将查询结果转发给应用程序。转发过程参照上述实施例所述，此处不再赘述。通过上述过程，驱动托管单元可以在不修改应用程序代码的情况下，监控和记录应用程序访问数据库的SQL语句和参数值。使用时仅需要增加驱动虚拟化单元的驱动包，将服务的JDBC驱动指向驱动虚拟化单元，然后将正常的数据库驱动配置下放到虚拟化单元的托管驱动配置文件中Managed_config.properties中,重启服务即可。由于仅用于记录完整SQL，在虚拟化单元的SQL执行接口中获取完整SQL后推送异步队列，并转发，该操作在JVM机内存中完成，无数据复制过程，仅延迟的SQL数据的生命周期，在异步队列输出本地文件或通过管道消费后标识回收。整体过程不会对现有的SQL访问造成影响。与上述方法实施例相对应，本发明还提供了业务数据查询装置实施例，图8是本发明一个实施例提供的一种业务数据查询装置的结构示意图。如图8所示，该装置包括：数据库编程接口802，被配置为接收查询方发起的目标业务查询请求，并转发所述目标业务查询请求，其中，所述目标业务查询请求携带目标业务的业务标识和业务查询语句。驱动托管单元804，被配置为获得所述数据库编程接口802转发的所述目标业务查询请求，基于所述目标业务查询请求，确定目标数据库驱动单元。数据库驱动单元806，被配置为执行所述目标业务查询请求，从所述目标数据库驱动单元对应的目标数据库获得所述目标业务的数据查询结果。驱动托管单元804，还被配置为获得所述目标数据库驱动单元得到的所述数据查询结果，并将所述数据查询结果反馈至所述查询方。进一步地，所述驱动托管单元804，还被配置为对所述目标业务查询请求解析得到所述目标业务的业务标识和业务查询语句，并记录所述目标业务的业务标识和业务查询语句。在实际应用中，驱动托管单元804获得样本请求后，对其进行解析。从样本业务查询请求中提取样本业务的业务标识和业务查询语句。在解析样本业务查询请求后，驱动托管单元804将样本业务的业务标识和业务查询语句进行记录，用于后续的查询分析、性能优化或其他需要使用样本业务信息的场景。进一步地，所述驱动托管单元804，还被配置为记录所述数据查询结果。在实际应用中，在目标数据库驱动单元执行样本业务查询语句，从目标数据库中获得数据查询结果，并将查询结果返回至驱动托管单元804之后，驱动托管单元804对该数据查询结果进行记录。进一步地，所述驱动托管单元804，还被配置为接收请求方发送的业务查询信息的获取请求，其中，所述获取请求携带所述目标业务的业务标识；获取所述业务标识对应的目标业务查询信息，将所述目标业务查询信息发送至所述请求方。在实际应用中，驱动托管单元804根据业务标识，从数据库编程接口802获取业务查询语句，驱动托管单元804可以记录该业务查询语句，并将业务查询语句传递给数据库驱动单元，数据库驱动单元获取业务数据查询结果，并返回至驱动托管单元804。此时，驱动托管单元804获取了业务查询语句和业务数据查询结果，之后，驱动托管单元804接收请求方发送的业务查询信息的获取请求，并根据业务查询信息的获取请求返回业务数据查询结果和/或业务查询语句。上述为本实施例的一种业务数据查询装置的示意性方案。需要说明的是，该业务数据查询装置的技术方案与上述的业务数据查询方法的技术方案属于同一构思，业务数据查询装置的技术方案未详细描述的细节内容，均可以参见上述业务数据查询方法的技术方案的描述。所述业务数据查询装置通过在数据库编程接口与数据库驱动单元之间增加驱动托管单元，使得驱动托管单元即能够获取数据库编程接口转发的业务查询语句，又能够接收数据库驱动单元返回的业务数据查询结果，在此基础上，调用驱动托管单元获取目标业务的业务标识对应的业务查询信息，该业务查询信息包括从所述数据库编程接口获得的完整业务查询语句和/或从所述数据库驱动单元获得的业务数据查询结果。由于较顶层的框架无论什么框架类型采用的都是相同的数据库编程接口，因此从较底层的数据库编程接口获取完整业务查询语句，可以不考虑框架类型，提高了获取业务查询信息的通用性，同时无需对代码进行修改，降低了代码侵入性。图9示出了根据本发明一个实施例提供的一种计算设备900的结构框图。该计算设备900的部件包括但不限于存储器910和处理器920。处理器920与存储器910通过总线930相连接，数据库950用于保存数据。计算设备900还包括接入设备940，接入设备940使得计算设备900能够经由一个或多个网络960通信。这些网络的示例包括公用交换电话网、局域网、广域网、个域网或诸如因特网的通信网络的组合。接入设备940可以包括有线或无线的任何类型的网络接口）中的一个或多个，诸如IEEE802.11无线局域网无线接口、全球微波互联接入接口、以太网接口、通用串行总线接口、蜂窝网络接口、蓝牙接口、近场通信。在本发明的一个实施例中，计算设备900的上述部件以及图9中未示出的其他部件也可以彼此相连接，例如通过总线。应当理解，图9所示的计算设备结构框图仅仅是出于示例的目的，而不是对本发明范围的限制。本领域技术人员可以根据需要，增添或替换其他部件。计算设备900可以是任何类型的静止或移动计算设备，包括移动计算机或移动计算设备、移动电话、可佩戴的计算设备或其他类型的移动设备，或者诸如台式计算机或个人计算机的静止计算设备。计算设备900还可以是移动式或静止式的服务器。其中，处理器920用于执行如下计算机可执行指令，该计算机可执行指令被处理器执行时实现上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。上述为本实施例的一种计算设备的示意性方案。需要说明的是，该计算设备的技术方案与上述的业务查询信息的获取方法或者上述业务数据查询方法的技术方案属于同一构思，计算设备的技术方案未详细描述的细节内容，均可以参见上述业务查询信息的获取方法或者上述业务数据查询方法的技术方案的描述。本发明一实施例还提供一种计算机可读存储介质，其存储有计算机可执行指令，该计算机可执行指令被处理器执行时实现上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。上述为本实施例的一种计算机可读存储介质的示意性方案。需要说明的是，该存储介质的技术方案与上述的业务查询信息的获取方法或者上述业务数据查询方法的技术方案属于同一构思，存储介质的技术方案未详细描述的细节内容，均可以参见上述业务查询信息的获取方法或者上述业务数据查询方法的技术方案的描述。本发明一实施例还提供一种计算机程序，其中，当所述计算机程序在计算机中执行时，令计算机执行上述业务查询信息的获取方法或者上述业务数据查询方法的步骤。上述为本实施例的一种计算机程序的示意性方案。需要说明的是，该计算机程序的技术方案与上述的业务查询信息的获取方法或者上述业务数据查询方法的技术方案属于同一构思，计算机程序的技术方案未详细描述的细节内容，均可以参见上述业务查询信息的获取方法或者上述业务数据查询方法的技术方案的描述。上述对本发明特定实施例进行了描述。其它实施例在所附权利要求书的范围内。在一些情况下，在权利要求书中记载的动作或步骤可以按照不同于实施例中的顺序来执行并且仍然可以实现期望的结果。另外，在附图中描绘的过程不一定要求示出的特定顺序或者连续顺序才能实现期望的结果。在某些实施方式中，多任务处理和并行处理也是可以的或者可以是有利的。所述计算机指令包括计算机程序代码，所述计算机程序代码可以为源代码形式、对象代码形式、可执行文件或某些中间形式等。所述计算机可读介质可以包括：能够携带所述计算机程序代码的任何实体或装置、记录介质、U盘、移动硬盘、磁碟、光盘、计算机存储器、只读存储器、随机存取存储器、电载波信号、电信信号以及软件分发介质等。需要说明的是，所述计算机可读介质包含的内容可以根据专利实践的要求进行适当的增减，例如在某些地区，根据专利实践，计算机可读介质不包括电载波信号和电信信号。需要说明的是，对于前述的各方法实施例，为了简便描述，故将其都表述为一系列的动作组合，但是本领域技术人员应该知悉，本发明实施例并不受所描述的动作顺序的限制，因为依据本发明实施例，某些步骤可以采用其它顺序或者同时进行。其次，本领域技术人员也应该知悉，说明书中所描述的实施例均属于优选实施例，所涉及的动作和模块并不一定都是本发明实施例所必须的。在上述实施例中，对各个实施例的描述都各有侧重，某个实施例中没有详述的部分，可以参见其它实施例的相关描述。以上公开的本发明优选实施例只是用于帮助阐述本发明。可选实施例并没有详尽叙述所有的细节，也不限制该发明仅为所述的具体实施方式。显然，根据本发明实施例的内容，可作很多的修改和变化。本发明选取并具体描述这些实施例，是为了更好地解释本发明实施例的原理和实际应用，从而使所属技术领域技术人员能很好地理解和利用本发明。本发明仅受权利要求书及其全部范围和等效物的限制。
