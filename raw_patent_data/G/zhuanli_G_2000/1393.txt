标题title
一种基于机器学习算法的智能在线测试方法及系统
摘要abst
本发明提供一种基于机器学习算法的智能在线测试方法及系统，属于程序测试技术领域，具体包括：基于不同的子模块的模块综合复杂度进行子模块的解析模式和测试模式的确定，并根据子模块的解析模式对子模块进行解析得到软件系统的文本解析结果；根据子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行软件系统的软件测试结果的输出，并根据软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出，从而进一步提升了软件测试的简易性和便捷性。
权利要求书clms
1.一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。2.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述软件系统的关键词根据所述软件系统的注释词的识别结果进行确定，具体的根据目标关键词与所述软件系统的注释词的匹配结果进行确定。3.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述逻辑关键词根据所述子模块的逻辑结构关键字的识别结果进行确定，具体的根据所述目标关键词与所述子模块的逻辑结构关键字的匹配结果进行确定。4.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述子模块的模块复杂度的确定的方法为：S11基于所述子模块的代码量以及函数数量进行所述子模块的模块基础复杂度的确定；S12根据所述子模块的不同类型的逻辑关键词的识别结果进行所述子模块的逻辑关键词的数量的确定，并基于所述子模块的逻辑关键词的数量确定所述子模块的数据处理逻辑是否复杂，若是，则进入步骤S14，若否，则进入下一步骤；S13根据所述子模块的不同类型的逻辑关键词的识别结果进行所述子模块的逻辑关键词的类型数量的确定，并基于所述子模块的逻辑关键词的类型数量确定所述子模块的数据处理逻辑是否复杂，若是，则进入下一步骤，若否，则将所述模块基础复杂度作为所述子模块的模块复杂度；S14通过所述子模块的不同类型的逻辑关键词的数量进行所述子模块的逻辑关键词的数量大于预设数量的类型数量的确定，并结合所述子模块的逻辑关键词的类型数量以及逻辑关键词的数量进行所述子模块的逻辑复杂度的确定；S15通过所述子模块的逻辑复杂度以及所述模块基础复杂度进行所述子模块的模块复杂度的确定。5.如权利要求4所述的基于机器学习算法的智能在线测试方法，其特征在于，通过所述子模块的逻辑复杂度以及所述模块基础复杂度进行所述子模块的模块复杂度的确定，具体包括：当所述子模块的逻辑复杂度大于所述子模块的模块基础复杂度时，则通过所述子模块的逻辑复杂度进行所述子模块的模块复杂度的确定；当所述子模块的逻辑复杂度不大于所述子模块的模块基础复杂度时，则通过所述子模块的逻辑复杂度与所述基础复杂度的均值进行所述子模块的模块复杂度的确定。6.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述子模块的输入数据和输出数据根据所述子模块的变量关键词的识别结果进行确定。7.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述子模块的数据处理复杂度的确定的方法为：获取所述子模块的输入数据以及输出数据的数量，基于所述子模块的输入数据以及所述软件系统的逻辑关键词的识别结果进行所述子模块的不同的输入数据的数据处理次数的确定；当所述不同的输入数据的数据处理次数的数量和小于预设次数时：则通过所述子模块的输入数据以及输出数据的数量进行所述子模块的数据处理复杂度的确定；当所述不同的输入数据的数据处理次数的数量和不小于预设次数时：根据所述输入数据的数据处理次数将所述输入数据划分为复杂处理数据的确定，并根据所述复杂处理数据的数量以及数据类型、输入数据的数量以及数据处理次数的数量和进行所述子模块的输入数据的数据处理复杂度的确定；根据所述子模块的输出数据进行所述子模块的输出数据的数量以及数据类型的确定，并结合所述子模块的输入数据的数据处理复杂度进行所述子模块的数据处理复杂度的确定。8.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，具体包括：根据不同的子模块的模块综合复杂度进行所有的子模块的模块综合复杂度的均值的确定；当所述子模块的模块综合复杂度大于所述模块综合复杂度的均值时：则根据所述子模块的逻辑关键词进行所述子模块的输入数据的数据处理流程的确定，并根据所述数据处理流程对所述子模块进行解析得到所述子模块的数据处理框图，根据所述子模块的输入数据在所述数据处理框图中的不同的数据流程的子模块的数据处理结果进行所述子模块的测试；当所述子模块的模块综合复杂度不大于所述模块综合复杂度的均值时：将所述子模块作为一个整体进行所述子模块的解析，并根据所述子模块的输入数据和输出数据的测试结果进行所述子模块的测试。9.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述软件系统的软件测试结果的确定的具体步骤为：根据所述不同的子模块在不同的测试环境下的测试结果进行不同的子模块在不同的测试环境下的问题数量的确定；通过所述子模块在不同的测试环境下的问题数量以及存在问题的测试环境的数量进行所述子模块的测试问题评估量以及问题子模块的确定；基于所述软件系统的问题子模块的数量以及在所述子模块中的比例、子模块的问题数量和以及存在问题的测试环境的数量和、子模块的测试问题评估量的均值构建输入集，并通过所述输入集，采用基于机器学习算法的评估模型进行所述软件系统的软件测试结果的输出。10.如权利要求1所述的基于机器学习算法的智能在线测试方法，其特征在于，所述测试建议包括继续测试、暂停测试以及中止测试。11.一种基于机器学习算法的智能在线测试系统，采用权利要求1-10任一项所述的一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：模块复杂度评估模块，综合复杂度评估模块，分类解析模块，测试结果输出模块；所述模块复杂度评估模块负责根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；所述综合复杂度评估模块负责通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；所述分类解析模块负责基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；所述测试结果输出模块负责根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。
说明书desc
技术领域本发明属于程序测试技术领域，尤其一种基于机器学习算法的智能在线测试方法及系统。背景技术软件测试作为互联网行业发展重要护航者，测试岗位的相关要求越来越高。不仅要求测试技术全面性，还要求较高的测试效率跟测试精准度。这就导致了测试门槛越来越高。因此如何辅助测试人员更好的完成测试任务，降低测试能力要求成为亟待解决的技术问题。为了辅助测试人员更好的完成测试任务，提升测试效率，在发明专利CN202310579843.0《一种测试数据生成方法及装置》中通过利用测试数据生成模型生成的待测试数据，对待测试程序进行测试，可以实现软件测试的全分支覆盖，提高软件测试质量，但是却存在以下技术问题：现有技术方案中忽视了根据软件系统的测试数据进行不同的运行环境下的测试结果的评估，并根据不同的运行环境下的测试结果进行总体的测试结果的输出，具体的，以往的测试结果往往反应的是某一种特定运行环境下的测试结果，而一旦运行环境发生改变，例如网络连接状态、数据处理速度等数据发生改变，则同样有可能导致软件系统的运行稳定性不满足要求。针对上述技术问题，本发明提供了一种基于机器学习算法的智能在线测试方法及系统。发明内容为实现本发明目的，本发明采用如下技术方案：根据本发明的一个方面，提供了一种基于机器学习算法的智能在线测试方法。一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：S1根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；S2通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；S3基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；S4根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。本发明的有益效果在于：1、通过根据软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定，不仅考虑到不同的子模块的逻辑关系的复杂度，同时还考虑到代码量的影响，也为差异化的对不同的子模块进行差异化的测试模式和解析模式的确定奠定了基础。2、通过进一步综合输入数据和输出数据进行不同的子模块的模块综合复杂度的确定，既考虑到不同的子模块的逻辑处理关系的复杂度，同时还考虑到不同的子模块的输入数据和输出数据的数据量的差异，进一步实现对不同的子模块的复杂度的综合准确评估。3、根据所述子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，既考虑到不同的逻辑复杂程度对解析模式的需求的差异，同时还实现了对不同的数据逻辑复杂程度对测试模式的需求的差异的准确评估，既保证了程序的测试质量，同时还保证了程序的测试精度。4、通过基于不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行软件系统的软件测试结果的输出，充分考虑到不同的子模块在不同的测试环境下的测试结果的差异，避免了原有的仅考虑单一的测试环境导致的测试结果不够准确的技术问题。进一步的技术方案在于，所述软件系统的关键词根据所述软件系统的注释词的识别结果进行确定，具体的根据目标关键词与所述软件系统的注释词的匹配结果进行确定。进一步的技术方案在于，所述逻辑关键词根据所述子模块的逻辑结构关键字的识别结果进行确定，具体的根据所述目标关键词与所述子模块的逻辑结构关键字的匹配结果进行确定。进一步的技术方案在于，所述子模块的输入数据和输出数据根据所述子模块的变量关键词的识别结果进行确定。进一步的技术方案在于，基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，具体包括：根据不同的子模块的模块综合复杂度进行所有的子模块的模块综合复杂度的均值的确定；当所述子模块的模块综合复杂度大于所述模块综合复杂度的均值时：则根据所述子模块的逻辑关键词进行所述子模块的输入数据的数据处理流程的确定，并根据所述数据处理流程对所述子模块进行解析得到所述子模块的数据处理框图，根据所述子模块的输入数据在所述数据处理框图中的不同的数据流程的子模块的数据处理结果进行所述子模块的测试；当所述子模块的模块综合复杂度不大于所述模块综合复杂度的均值时：将所述子模块作为一个整体进行所述子模块的解析，并根据所述子模块的输入数据和输出数据的测试结果进行所述子模块的测试。进一步的技术方案在于，所述测试建议包括继续测试、暂停测试以及中止测试。第二方面，本发明提供了一种基于机器学习算法的智能在线测试系统，采用上述的一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：模块复杂度评估模块，综合复杂度评估模块，分类解析模块，测试结果输出模块；所述模块复杂度评估模块负责根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；所述综合复杂度评估模块负责通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；所述分类解析模块负责基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；所述测试结果输出模块负责根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。其他特征和优点将在随后的说明书中阐述，并且，部分地从说明书中变得显而易见，或者通过实施本发明而了解。本发明的目的和其他优点在说明书以及附图中所特别指出的结构来实现和获得。为使本发明的上述目的、特征和优点能更明显易懂，下文特举较佳实施例，并配合所附附图，作详细说明如下。附图说明通过参照附图详细描述其示例实施方式，本发明的上述和其它特征及优点将变得更加明显；图1是一种基于机器学习算法的智能在线测试方法的流程图；图2是子模块的模块复杂度的确定的方法的流程图；图3是子模块的数据处理复杂度的确定的方法的流程图；图4是软件系统的软件测试结果的确定的具体步骤的流程图；图5是一种基于机器学习算法的智能在线测试系统的框架图。具体实施方式为了使本技术领域的人员更好地理解本说明书中的技术方案，下面将结合本说明书实施例中的附图，对本说明书实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本说明书一部分实施例，而不是全部的实施例。基于本说明书实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都应当属于本说明书保护的范围。申请人发现，在进行软件系统的测试时，由于软件系统的不同的子模块的数据处理复杂度的差异，因此若不能对数据处理较为复杂的子模块进行精细化的测试，而对数据处理较为简单的子模块采用较为简单的测试，则导致测试结果的效率和准确性都无法满足要求，同时现有技术方案中还忽视了根据不同的子模块在不同的测试环境下的测试结果进行软件系统的测试结果的输出，则有可能导致测试结果无法准确的反应实际的软件系统的运行情况。为了解决上述技术问题，申请人采用以下技术方案：首先通过对软件系统的不同的子模块的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定，具体的根据不同的子模块的逻辑关键词的数量以及代码量进行子模块的模块复杂度的确定，在其中的一个可能的实施例中，通过代码量进行基础的模块复杂度的确定，并根据逻辑关键词的数量进行补偿量的确定，通过补偿量以及基础的模块复杂度进行子模块的模块复杂度的确定；紧接着获取不同的子模块的输入数据和输出数据的数量，根据输入数据和输出数据的数量进行子模块的数据处理复杂度的确定，具体的分别根据输入数据的数量以及输出数据的数量分别进行子模块的输入数据的数据处理复杂度以及输出数据的数据处理复杂度的确定，最后再根据子模块的输入数据的数据处理复杂度以及输出数据的数据处理复杂度的最大值进行子模块的数据处理复杂度的确定；根据子模块的模块复杂度以及数据处理复杂度的最大值进行子模块的模块综合复杂度的确定，并当子模块的模块综合复杂度较高时，需要对子模块进行拆分测试，对每一个逻辑关键词的数据处理结果均需要进行分析，并将子模块进行拆分成多个逻辑处理关系；当子模块的模块综合复杂度较低时，无需对子模块进行拆分测试，根据子模块的输入数据和输出数据进行测试结果的输出，并将子模块作为一个完整的整体作为解析结果；根据不同的子模块在不同的测试环境下的测试结果，采用基于机器学习算法的评估模型得到最后的测试结果，在其中的一个可能的实施例中，可以通过网络连接状态、用户数量以及数据处理延时等进行测试环境的搭建，机器学习算法可以采用基于BP神经网络、LSTM神经网络以及残差神经网络的一种或者多种进行构建。以下将从方法类实施例和系统类实施例两个角度进行详尽叙述。为解决上述问题，根据本发明的一个方面，如图1所示，提供了一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：S1根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；需要说明的是，所述软件系统的关键词根据所述软件系统的注释词的识别结果进行确定，具体的根据目标关键词与所述软件系统的注释词的匹配结果进行确定。进一步需要说明的是，上述步骤S1中的所述逻辑关键词根据所述子模块的逻辑结构关键字的识别结果进行确定，具体的根据所述目标关键词与所述子模块的逻辑结构关键字的匹配结果进行确定。在其中的一个可能的实施例中，如图2所示，上述步骤S1中的所述子模块的模块复杂度的确定的方法为：S11基于所述子模块的代码量以及函数数量进行所述子模块的模块基础复杂度的确定；S12根据所述子模块的不同类型的逻辑关键词的识别结果进行所述子模块的逻辑关键词的数量的确定，并基于所述子模块的逻辑关键词的数量确定所述子模块的数据处理逻辑是否复杂，若是，则进入步骤S14，若否，则进入下一步骤；S13根据所述子模块的不同类型的逻辑关键词的识别结果进行所述子模块的逻辑关键词的类型数量的确定，并基于所述子模块的逻辑关键词的类型数量确定所述子模块的数据处理逻辑是否复杂，若是，则进入下一步骤，若否，则将所述模块基础复杂度作为所述子模块的模块复杂度；S14通过所述子模块的不同类型的逻辑关键词的数量进行所述子模块的逻辑关键词的数量大于预设数量的类型数量的确定，并结合所述子模块的逻辑关键词的类型数量以及逻辑关键词的数量进行所述子模块的逻辑复杂度的确定；在其中的一个可能的实施例中，首先通过子模块的逻辑关键词的数量大于预设数量的类型数量在所有的类型数量的比值进行子模块的逻辑关键词的类型复杂度的确定，根据逻辑关键词的数量与预设关键词数量阈值的比值进行关键词复杂度的确定，最后根据关键词复杂度与类型复杂度的数量和进行子模块的逻辑复杂度的确定。S15通过所述子模块的逻辑复杂度以及所述模块基础复杂度进行所述子模块的模块复杂度的确定。在其中的一个可能的实施例中，上述步骤S15中的通过所述子模块的逻辑复杂度以及所述模块基础复杂度进行所述子模块的模块复杂度的确定，具体包括：当所述子模块的逻辑复杂度大于所述子模块的模块基础复杂度时，则通过所述子模块的逻辑复杂度进行所述子模块的模块复杂度的确定；当所述子模块的逻辑复杂度不大于所述子模块的模块基础复杂度时，则通过所述子模块的逻辑复杂度与所述基础复杂度的均值进行所述子模块的模块复杂度的确定。在另外的一个可能的实施例中，上述步骤S1中的所述子模块的模块复杂度的确定的方法为：根据所述子模块的不同类型的逻辑关键词的识别结果进行所述子模块的逻辑关键词的数量以及逻辑关键词的类型数量的确定；当所述子模块的逻辑关键词的数量以及类型数量均在预设数量范围内时：通过所述子模块的逻辑关键词的数量以及类型数量进行所述子模块的模块复杂度的确定；当所述子模块的逻辑关键词的数量以及类型数量任意一项不在预设数量范围内时：通过所述子模块的不同类型的逻辑关键词的数量进行所述子模块的逻辑关键词的数量大于预设数量的类型数量的确定，并结合所述子模块的逻辑关键词的类型数量以及逻辑关键词的数量进行所述子模块的逻辑复杂度的确定；获取所述子模块的代码量以及函数数量，并结合所述子模块的逻辑复杂度进行所述子模块的模块复杂度的确定。在本实施例中，通过根据软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定，不仅考虑到不同的子模块的逻辑关系的复杂度，同时还考虑到代码量的影响，也为差异化的对不同的子模块进行差异化的测试模式和解析模式的确定奠定了基础。S2通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；进一步需要说明的是，所述子模块的输入数据和输出数据根据所述子模块的变量关键词的识别结果进行确定。在其中的一个可能的实施例中，如图3所示，上述步骤S2中的所述子模块的数据处理复杂度的确定的方法为：S21通过所述子模块的输入数据以及输出数据的数量确定子模块的数据处理量是否小于预设数据量，若是，则进入下一步骤，若否，则进入步骤S23；S22基于所述子模块的输入数据以及所述软件系统的逻辑关键词的识别结果进行所述子模块的不同的输入数据的数据处理次数的确定，并通过所述不同的输入数据的数据处理次数的数量和确定所述子模块的数据处理是否复杂，若是，则进入下一步骤，若否，则通过所述子模块的输入数据以及输出数据的数量进行所述子模块的数据处理复杂度的确定；S23根据所述输入数据的数据处理次数将所述输入数据划分为复杂处理数据的确定，并根据所述复杂处理数据的数量以及数据类型、输入数据的数量以及数据处理次数的数量和进行所述子模块的输入数据的数据处理复杂度的确定；S24根据所述子模块的输出数据进行所述子模块的输出数据的数量以及数据类型的确定，并结合所述子模块的输入数据的数据处理复杂度进行所述子模块的数据处理复杂度的确定。在其中的一个可能的实施例中，上述步骤S22中的通过所述不同的输入数据的数据处理次数的数量和确定所述子模块的数据处理是否复杂，具体包括：根据所述子模块的输入数据的数量进行所述子模块的输入数据的预设处理次数的确定；判断所述不同的输入数据的数据处理次数的数量和是否小于所述子模块的输入数据的预设处理次数，若是，则确定所述子模块的数据处理不复杂，若否，则确定所述子模块的数据处理复杂。在另外的一个可能的实施例中，上述步骤S2中的所述子模块的数据处理复杂度的确定的方法为：获取所述子模块的输入数据以及输出数据的数量，基于所述子模块的输入数据以及所述软件系统的逻辑关键词的识别结果进行所述子模块的不同的输入数据的数据处理次数的确定；当所述不同的输入数据的数据处理次数的数量和小于预设次数时：则通过所述子模块的输入数据以及输出数据的数量进行所述子模块的数据处理复杂度的确定；当所述不同的输入数据的数据处理次数的数量和不小于预设次数时：根据所述输入数据的数据处理次数将所述输入数据划分为复杂处理数据的确定，并根据所述复杂处理数据的数量以及数据类型、输入数据的数量以及数据处理次数的数量和进行所述子模块的输入数据的数据处理复杂度的确定；根据所述子模块的输出数据进行所述子模块的输出数据的数量以及数据类型的确定，并结合所述子模块的输入数据的数据处理复杂度进行所述子模块的数据处理复杂度的确定。在本实施例中，通过进一步综合输入数据和输出数据进行不同的子模块的模块综合复杂度的确定，既考虑到不同的子模块的逻辑处理关系的复杂度，同时还考虑到不同的子模块的输入数据和输出数据的数据量的差异，进一步实现对不同的子模块的复杂度的综合准确评估。S3基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；在其中的一个可能的实施例中，上述步骤S3中的基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，具体包括：根据不同的子模块的模块综合复杂度进行所有的子模块的模块综合复杂度的均值的确定；当所述子模块的模块综合复杂度大于所述模块综合复杂度的均值时：则根据所述子模块的逻辑关键词进行所述子模块的输入数据的数据处理流程的确定，并根据所述数据处理流程对所述子模块进行解析得到所述子模块的数据处理框图，根据所述子模块的输入数据在所述数据处理框图中的不同的数据流程的子模块的数据处理结果进行所述子模块的测试；当所述子模块的模块综合复杂度不大于所述模块综合复杂度的均值时：将所述子模块作为一个整体进行所述子模块的解析，并根据所述子模块的输入数据和输出数据的测试结果进行所述子模块的测试。在本实施例中，根据所述子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，既考虑到不同的逻辑复杂程度对解析模式的需求的差异，同时还实现了对不同的数据逻辑复杂程度对测试模式的需求的差异的准确评估，既保证了程序的测试质量，同时还保证了程序的测试精度。S4根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。在其中的一个可能的实施例中，如图4所示，上述步骤S4中的所述软件系统的软件测试结果的确定的具体步骤为：根据所述不同的子模块在不同的测试环境下的测试结果进行不同的子模块在不同的测试环境下的问题数量的确定；通过所述子模块在不同的测试环境下的问题数量以及存在问题的测试环境的数量进行所述子模块的测试问题评估量以及问题子模块的确定；基于所述软件系统的问题子模块的数量以及在所述子模块中的比例、子模块的问题数量和以及存在问题的测试环境的数量和、子模块的测试问题评估量的均值构建输入集，并通过所述输入集，采用基于机器学习算法的评估模型进行所述软件系统的软件测试结果的输出。在其中的一个可能的实施例中，上述基于机器学习算法的评估模型采用基于RNN算法的评估模型进行搭建，其中所述评估模型的搭建的具体步骤为：确定网络的基本结构：输入：RNN的输入为所述软件系统的问题子模块的数量以及在所述子模块中的比例、子模块的问题数量和以及存在问题的测试环境的数量和、子模块的测试问题评估量的均值。输出：RNN的输出通常是对输入序列的响应，在本发明中为软件系统的软件测试结果。隐藏层函数：RNN通过隐藏层函数对输入序列中每个元素特征的提取和转换，然后进行网络的输出的计算。定义隐藏层函数，使用适当的激活函数来计算每次训练后的结果，使用前一步计算得到的结果和当前训练集的输入来计算网络的输出对隐含层函数的权重值进行动态调整：重复上述步骤直到达到期望的输出或迭代次数。在达到期望的输出后，RNN的输出可以被用来进行软件系统的软件测试结果的输出。进一步的技术方案在于，所述测试建议包括继续测试、暂停测试以及中止测试。在本实施例中，通过基于不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行软件系统的软件测试结果的输出，充分考虑到不同的子模块在不同的测试环境下的测试结果的差异，避免了原有的仅考虑单一的测试环境导致的测试结果不够准确的技术问题。另一方面，如图5所示，本发明提供了一种基于机器学习算法的智能在线测试系统，采用上述的一种基于机器学习算法的智能在线测试方法，其特征在于，具体包括：模块复杂度评估模块，综合复杂度评估模块，分类解析模块，测试结果输出模块；所述模块复杂度评估模块负责根据软件系统的关键词的识别结果将所述软件系统划分为多个子模块，并根据所述软件系统的不同的子模块的不同类型的逻辑关键词的识别结果以及代码量进行不同的子模块的模块复杂度的确定；所述综合复杂度评估模块负责通过所述软件系统的不同的子模块的输入数据和输出数据进行不同的子模块的数据处理复杂度的确定，并结合所述不同的子模块的模块复杂度进行不同的子模块的模块综合复杂度的确定；所述分类解析模块负责基于不同的子模块的模块综合复杂度进行所述子模块的解析模式和测试模式的确定，并根据所述子模块的解析模式对所述子模块进行解析得到所述软件系统的文本解析结果；所述测试结果输出模块负责根据所述子模块的测试模式得到不同的子模块在不同的测试环境下的测试结果，并基于所述不同的子模块在不同的测试环境下的测试结果，采用机器学习算法的解析模型进行所述软件系统的软件测试结果的输出，并根据所述软件系统的文本解析结果和软件测试结果进行测试建议以及测试文本的输出。本说明书中的各个实施例均采用递进的方式描述，各个实施例之间相同相似的部分互相参见即可，每个实施例重点说明的都是与其他实施例的不同之处。尤其，对于装置、设备、非易失性计算机存储介质实施例而言，由于其基本相似于方法实施例，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。上述对本说明书特定实施例进行了描述。其它实施例在所附权利要求书的范围内。在一些情况下，在权利要求书中记载的动作或步骤可以按照不同于实施例中的顺序来执行并且仍然可以实现期望的结果。另外，在附图中描绘的过程不一定要求示出的特定顺序或者连续顺序才能实现期望的结果。在某些实施方式中，多任务处理和并行处理也是可以的或者可能是有利的。以上所述仅为本说明书的一个或多个实施例而已，并不用于限制本说明书。对于本领域技术人员来说，本说明书的一个或多个实施例可以有各种更改和变化。凡在本说明书的一个或多个实施例的精神和原理之内所作的任何修改、等同替换、改进等，均应包含在本说明书的权利要求范围之内。
