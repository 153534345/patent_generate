标题title
一种处理核心隔离方法、装置及电子设备和存储介质
摘要abst
本申请公开了一种处理核心隔离方法、装置及电子设备和存储介质，涉及计算机技术领域，应用于分布式计算系统，该方法包括：确定分布式计算系统中启动的节点，并获取分布式计算系统中启动的节点对应的节点进程关系表；根据分布式计算系统中启动的节点之间的连接关系对节点进行聚类操作，并根据节点进程关系表生成多个进程组；监控多个进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；将目标数量个进程子组绑定至目标数量个处理核心。本申请减少了分布式计算系统中因进程频繁切换导致的资源消耗。
权利要求书clms
1.一种处理核心隔离方法，其特征在于，应用于分布式计算系统，所述方法包括：确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；将所述目标数量个进程子组绑定至所述目标数量个处理核心。2.根据权利要求1所述处理核心隔离方法，其特征在于，所述根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，包括：从所述分布式计算系统中启动的节点中选择预设数量个节点作为簇心，计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，并将所述分布式计算系统中启动的每个节点分配至距离最近的簇心对应的簇中，基于每个所述簇中的节点与簇心的距离的总和构建目标函数；调整所述预设数量的值，确定不同所述预设数量的值对应的目标函数的值，确定所述目标函数的值最小时所述预设数量的目标值，并确定所述预设数量为所述目标值时每个簇包含的节点，根据所述节点进程关系表生成多个进程组。3.根据权利要求2所述处理核心隔离方法，其特征在于，所述计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，包括：确定所述分布式计算系统中启动的每个节点的权重系数，将所述节点与每个所述簇心之间的距离与所述权重系数的乘积作为所述节点与每个所述簇心之间的最终距离。4.根据权利要求3所述处理核心隔离方法，其特征在于，所述确定所述分布式计算系统中启动的每个节点的权重系数，包括：根据所述分布式计算系统中启动的每个节点的通信数据量确定所述节点的权重系数；其中，所述权重系数与所述通信数据量呈正相关。5.根据权利要求2所述处理核心隔离方法，其特征在于，所述计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，包括：根据距离计算公式计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离；其中，所述距离计算公式为：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数；相应的，所述目标函数为：；其中，N为所述预设数量。6.根据权利要求1所述处理核心隔离方法，其特征在于，所述监控多个所述进程组的进程切换数量，包括：监控多个所述进程组内所有进程的每秒切换次数，将每个所述进程组内所有进程的每秒切换次数的总和作为每个所述进程组的进程切换数量。7.根据权利要求6所述处理核心隔离方法，其特征在于，所述监控多个所述进程组的进程切换数量，包括：监控多个所述进程组内所有进程的每秒切换次数，根据进程切换数量计算公式计算所述进程组的进程切换数量；其中，所述进程切换数量计算公式为：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。8.根据权利要求1所述处理核心隔离方法，其特征在于，对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组，包括：获取所述目标进程组的处理器占用率，并对所述处理器占用率进行向上取整以确定目标数量；从所述目标进程组中选择所述目标数量个进程作为簇心，计算所述目标进程组中每个进程与每个所述簇心之间的距离，并将所述目标进程组中每个进程分配至距离最近的簇心对应的簇中，以生成所述目标数量个进程子组。9.根据权利要求1所述处理核心隔离方法，其特征在于，将所述目标数量个进程子组绑定至所述目标数量个处理核心之前，还包括：判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；若是，则执行将所述目标数量个进程子组绑定至所述目标数量个处理核心的步骤。10.根据权利要求9所述处理核心隔离方法，其特征在于，所述判断是否存在足够的处理核心以供所述目标数量个处理核心绑定，包括：获取当前处理核心总数和处理器平均占用率，计算所述当前处理核心总数和所述处理器平均占用率与所述目标数量的第一差值是否小于所述当前处理核心总数与所述目标数量的第二差值；若是，则判定存在足够的处理核心以供所述目标数量个处理核心绑定。11.根据权利要求10所述处理核心隔离方法，其特征在于，还包括：监控处理器信息，并生成处理器信息数据库；其中，所述处理器信息至少包括处理器占用率；相应的，获取处理器平均占用率，包括：从所述处理器信息数据库中获取处理器平均占用率。12.根据权利要求9所述处理核心隔离方法，其特征在于，所述判断是否存在足够的处理核心以供所述目标数量个处理核心绑定，包括：根据处理核心数量判断公式判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；其中，所述处理核心数量判断公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，/＞为所述目标数量。13.一种处理核心隔离装置，其特征在于，应用于分布式计算系统，所述装置包括：获取模块，用于确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；第一聚类模块，用于根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；第二聚类模块，用于监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；绑定模块，用于将所述目标数量个进程子组绑定至所述目标数量个处理核心。14.一种电子设备，其特征在于，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序时实现如权利要求1至12任一项所述处理核心隔离方法的步骤。15.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质上存储有计算机程序，所述计算机程序被处理器执行时实现如权利要求1至12任一项所述处理核心隔离方法的步骤。
说明书desc
技术领域本申请涉及计算机技术领域，更具体地说，涉及一种处理核心隔离方法、装置及电子设备和存储介质。背景技术分布式计算系统由多个独立节点组成，不同的功能分属不同的独立节点，完成一套完整的业务逻辑需要多个节点相互配合，因此系统中会同时运行大量不同进程。系统的资源是有限的，当需要计算的进程大于处理器的核心数量时，进程的切换也会愈加频繁，而进程的频繁切换会导致资源的额外开销，反而降低了系统的性能。因此，如何减少分布式计算系统中因进程频繁切换导致的资源消耗是本领域技术人员需要解决的技术问题。发明内容本申请的目的在于提供一种处理核心隔离方法、装置及电子设备和存储介质，减少了分布式计算系统中因进程频繁切换导致的资源消耗。为实现上述目的，本申请提供了一种处理核心隔离方法，应用于分布式计算系统，所述方法包括：确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；将所述目标数量个进程子组绑定至所述目标数量个处理核心。其中，所述根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，包括：从所述分布式计算系统中启动的节点中选择预设数量个节点作为簇心，计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，并将所述分布式计算系统中启动的每个节点分配至距离最近的簇心对应的簇中，基于每个所述簇中的节点与簇心的距离的总和构建目标函数；调整所述预设数量的值，确定不同所述预设数量的值对应的目标函数的值，确定所述目标函数的值最小时所述预设数量的目标值，并确定所述预设数量为所述目标值时每个簇包含的节点，根据所述节点进程关系表生成多个进程组。其中，所述计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，包括：确定所述分布式计算系统中启动的每个节点的权重系数，将所述节点与每个所述簇心之间的距离与所述权重系数的乘积作为所述节点与每个所述簇心之间的最终距离。其中，所述确定所述分布式计算系统中启动的每个节点的权重系数，包括：根据所述分布式计算系统中启动的每个节点的通信数据量确定所述节点的权重系数；其中，所述权重系数与所述通信数据量呈正相关。其中，所述计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，包括：根据距离计算公式计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离；其中，所述距离计算公式为：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数；相应的，所述目标函数为：；其中，N为所述预设数量。其中，所述监控多个所述进程组的进程切换数量，包括：监控多个所述进程组内所有进程的每秒切换次数，将每个所述进程组内所有进程的每秒切换次数的总和作为每个所述进程组的进程切换数量。其中，所述监控多个所述进程组的进程切换数量，包括：监控多个所述进程组内所有进程的每秒切换次数，根据进程切换数量计算公式计算所述进程组的进程切换数量；其中，所述进程切换数量计算公式为：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。其中，对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组，包括：获取所述目标进程组的处理器占用率，并对所述处理器占用率进行向上取整以确定目标数量；从所述目标进程组中选择所述目标数量个进程作为簇心，计算所述目标进程组中每个进程与每个所述簇心之间的距离，并将所述目标进程组中每个进程分配至距离最近的簇心对应的簇中，以生成所述目标数量个进程子组。其中，将所述目标数量个进程子组绑定至所述目标数量个处理核心之前，还包括：判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；若是，则执行将所述目标数量个进程子组绑定至所述目标数量个处理核心的步骤。其中，所述判断是否存在足够的处理核心以供所述目标数量个处理核心绑定，包括：获取当前处理核心总数和处理器平均占用率，计算所述当前处理核心总数和所述处理器平均占用率与所述目标数量的第一差值是否小于所述当前处理核心总数与所述目标数量的第二差值；若是，则判定存在足够的处理核心以供所述目标数量个处理核心绑定。其中，还包括：监控处理器信息，并生成处理器信息数据库；其中，所述处理器信息至少包括处理器占用率；相应的，获取处理器平均占用率，包括：从所述处理器信息数据库中获取处理器平均占用率。其中，所述判断是否存在足够的处理核心以供所述目标数量个处理核心绑定，包括：根据处理核心数量判断公式判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；其中，所述处理核心数量判断公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，/＞为所述目标数量。为实现上述目的，本申请提供了一种处理核心隔离装置，应用于分布式计算系统，所述装置包括：获取模块，用于确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；第一聚类模块，用于根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；第二聚类模块，用于监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；绑定模块，用于将所述目标数量个进程子组绑定至所述目标数量个处理核心。其中，所述第一聚类模块具体用于：从所述分布式计算系统中启动的节点中选择预设数量个节点作为簇心，计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，并将所述分布式计算系统中启动的每个节点分配至距离最近的簇心对应的簇中，基于每个所述簇中的节点与簇心的距离的总和构建目标函数；调整所述预设数量的值，确定不同所述预设数量的值对应的目标函数的值，确定所述目标函数的值最小时所述预设数量的目标值，并确定所述预设数量为所述目标值时每个簇包含的节点，根据所述节点进程关系表生成多个进程组。其中，所述第一聚类模块具体用于：确定所述分布式计算系统中启动的每个节点的权重系数，将所述节点与每个所述簇心之间的距离与所述权重系数的乘积作为所述节点与每个所述簇心之间的最终距离。其中，所述第一聚类模块具体用于：根据所述分布式计算系统中启动的每个节点的通信数据量确定所述节点的权重系数；其中，所述权重系数与所述通信数据量呈正相关。其中，所述第一聚类模块具体用于：根据距离计算公式计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离；其中，所述距离计算公式为：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数；相应的，所述目标函数为：；其中，N为所述预设数量。其中，所述第二聚类模块具体用于：监控多个所述进程组内所有进程的每秒切换次数，将每个所述进程组内所有进程的每秒切换次数的总和作为每个所述进程组的进程切换数量。其中，所述第二聚类模块具体用于：监控多个所述进程组内所有进程的每秒切换次数，根据进程切换数量计算公式计算所述进程组的进程切换数量；其中，所述进程切换数量计算公式为：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。其中，所述第二聚类模块具体用于：获取所述目标进程组的处理器占用率，并对所述处理器占用率进行向上取整以确定目标数量；从所述目标进程组中选择所述目标数量个进程作为簇心，计算所述目标进程组中每个进程与每个所述簇心之间的距离，并将所述目标进程组中每个进程分配至距离最近的簇心对应的簇中，以生成所述目标数量个进程子组。其中，还包括：判断模块，用于判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；若是，则启动所述绑定模块的工作流程。其中，所述判断模块具体用于：获取当前处理核心总数和处理器平均占用率，计算所述当前处理核心总数和所述处理器平均占用率与所述目标数量的第一差值是否小于所述当前处理核心总数与所述目标数量的第二差值；若是，则判定存在足够的处理核心以供所述目标数量个处理核心绑定。其中，还包括：生成模块，用于监控处理器信息，并生成处理器信息数据库；其中，所述处理器信息至少包括处理器占用率；相应的，所述判断模块具体用于：从所述处理器信息数据库中获取处理器平均占用率。其中，所述判断模块具体用于：根据处理核心数量判断公式判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；其中，所述处理核心数量判断公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，为所述目标数量。为实现上述目的，本申请提供了一种电子设备，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序时实现如上述处理核心隔离方法的步骤。为实现上述目的，本申请提供了一种计算机可读存储介质，所述计算机可读存储介质上存储有计算机程序，所述计算机程序被处理器执行时实现如上述处理核心隔离方法的步骤。通过以上方案可知，本申请提供的一种处理核心隔离方法，应用于分布式计算系统，该方法包括：确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；将所述目标数量个进程子组绑定至所述目标数量个处理核心。本申请提供的处理核心隔离方法，将切换频繁的进程绑定至处理核心，通过处理核心隔离减少了运行过程中因进程频繁切换带来的额外开销。同时，在划分进程组时考虑了节点之间的连接关系，尽量减少了核心隔离及进程绑定对通信的影响。由此可见，本申请提供的处理核心隔离方法，实现了低额外开销、高实时性、可动态调节的核心隔离，解决了因进程数量多需要频繁切换导致的系统额外开销问题。本申请还公开了一种处理核心隔离装置及一种电子设备和一种计算机可读存储介质，同样能实现上述技术效果。应当理解的是，以上的一般描述和后文的细节描述仅是示例性的，并不能限制本申请。附图说明为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本申请的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。附图是用来提供对本公开的进一步理解，并且构成说明书的一部分，与下面的具体实施方式一起用于解释本公开，但并不构成对本公开的限制。在附图中：图1为根据一示例性实施例示出的一种处理核心隔离方法的流程图；图2为根据一示例性实施例示出的另一种处理核心隔离方法的流程图；图3为本申请应用实施例提供的一种动态核心隔离方法的流程图；图4为根据一示例性实施例示出的一种处理核心隔离装置的结构图；图5为根据一示例性实施例示出的一种电子设备的结构图。具体实施方式下面将结合本申请实施例中的附图，对本申请实施例中的技术方案进行清楚、完整地描述。显然，所描述的实施例仅仅是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。另外，在本申请实施例中，“第一”、“第二”等是用于区别类似的对象，而不必用于描述特定的顺序或先后次序。本申请实施例公开了一种处理核心隔离方法，减少了分布式计算系统中因进程频繁切换导致的资源消耗。参见图1，根据一示例性实施例示出的一种处理核心隔离方法的流程图，如图1所示，包括：S101：确定分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；本实施例应用于分布式计算系统，例如车载异构分布式计算系统，分布式计算系统包括多个节点。在具体实施中，通过读取分布式计算系统的配置文件确定将要启动的节点，生成节点进程关系表，节点进程关系表记录了节点与进程之间的对应的关系，也即各个启动的节点运行了哪些进程。也即，可以根据配置文件初始化节点的进程信息，包括进程名称、运行设备IP等，还可以根据配置文件获取节点的通信类型，以供后续步骤使用。S102：根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；在本步骤中，根据分布式计算系统中启动的节点之间的连接关系对节点进行聚类操作，得到多个簇，每个簇中包括一个或多个节点，根据节点进程关系表确定每个簇中所有节点对应的所有进程，将每个簇作为一个进程组进行管理，生成多个进程组。作为一种可行的实施方式，所述根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组，包括：从所述分布式计算系统中启动的节点中选择预设数量个节点作为簇心，计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，并将所述分布式计算系统中启动的每个节点分配至距离最近的簇心对应的簇中，基于每个所述簇中的节点与簇心的距离的总和构建目标函数；调整所述预设数量的值，确定不同所述预设数量的值对应的目标函数的值，确定所述目标函数的值最小时所述预设数量的目标值，并确定所述预设数量为所述目标值时每个簇包含的节点，根据所述节点进程关系表生成多个进程组。在具体实施中，从分布式计算系统中启动的节点中选择N个节点作为簇心，也即聚类质心，对于每个节点，计算其与每个簇心之间的距离，将其分配至距离最近的簇心对应的簇中。作为一种可行的实施方式，所述计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，包括：确定所述分布式计算系统中启动的每个节点的权重系数，将所述节点与每个所述簇心之间的距离与所述权重系数的乘积作为所述节点与每个所述簇心之间的最终距离。也即，根据距离计算公式计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离；其中，所述距离计算公式为：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数。作为一种优选的实施方式，所述确定所述分布式计算系统中启动的每个节点的权重系数，包括：根据所述分布式计算系统中启动的每个节点的通信数据量确定所述节点的权重系数；其中，所述权重系数与所述通信数据量呈正相关。在具体实施中，第i个节点的权重系数可以根据第i个节点的通信数据量确定，通信数据量越大，权重系数越大。进一步的，对于所有节点，可以构建聚类的目标函数，该目标函数描述每个簇中的节点与簇心的距离的总和，也即目标函数为：。尝试不同的N值，并重复上述步骤，直到J的值不再显著减少为止，此时节点已经按照距离和通信量进行了聚类分组。S103：监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；S104：将所述目标数量个进程子组绑定至所述目标数量个处理核心。在具体实施中，监控每个进程组的进程切换数量，当进程组的进程切换数量超过预设值时，对该进程组内的进程进行聚类后，实行处理核心的隔离。作为一种可行的实施方式，所述监控多个所述进程组的进程切换数量，包括：监控多个所述进程组内所有进程的每秒切换次数，将每个所述进程组内所有进程的每秒切换次数的总和作为每个所述进程组的进程切换数量，也即监控多个所述进程组内所有进程的每秒切换次数，根据进程切换数量计算公式计算所述进程组的进程切换数量；其中，所述进程切换数量计算公式为：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。作为一种可行的实施方式，对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组，包括：获取所述目标进程组的处理器占用率，并对所述处理器占用率进行向上取整以确定目标数量；从所述目标进程组中选择所述目标数量个进程作为簇心，计算所述目标进程组中每个进程与每个所述簇心之间的距离，并将所述目标进程组中每个进程分配至距离最近的簇心对应的簇中，以生成所述目标数量个进程子组。在具体实施中，假设需要实行核心隔离的进程组为K，获取该进程组的CPU占用率，并对其进行向上取整，比如253%的占用率则取整到3，将此数值记为，根据对K进程组内进程再进行聚类，此次聚类的簇数量为固定值/＞。在进程组K内随机选择个进程作为簇心，对于进程组K内的每个进程，计算其与每个簇心之间的欧几里得距离，再乘以根据进程的通信数据量确定的权重系数得到每个进程与每个簇心之间的最终距离，将每个进程分配到最终距离最近的簇心所代表的簇。对于进程组K内的所有进程，可以构建聚类的目标函数，该目标函数描述每个簇中的进程与簇心的距离的总和，更新每个簇的簇心，不断重复上述过程直至目标函数的值最小，簇心不再发生变化，将每个簇作为一个进程子组作为待隔离的进程，申请/＞个处理核心，将/＞个子进程组绑定至/＞个处理核心。本申请实施例提供的处理核心隔离方法，将切换频繁的进程绑定至处理核心，通过处理核心隔离减少了运行过程中因进程频繁切换带来的额外开销。同时，在划分进程组时考虑了节点之间的连接关系，尽量减少了核心隔离及进程绑定对通信的影响。由此可见，本申请实施例提供的处理核心隔离方法，实现了低额外开销、高实时性、可动态调节的核心隔离，解决了因进程数量多需要频繁切换导致的系统额外开销问题。本申请实施例公开了一种处理核心隔离方法，相对于上一实施例，本实施例对技术方案作了进一步的说明和优化。具体的：参见图2，根据一示例性实施例示出的另一种处理核心隔离方法的流程图，如图2所示，包括：S201：确定分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；S202：根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；S203：监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；S204：判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；若是，则进入S205；在本实施例中，生成目标数量个进程子组之后，判断是否存在足够的处理核心以供目标数量个处理核心绑定，若是，则进入S205，否则停止处理核心隔离。作为一种可行的实施方式，所述判断是否存在足够的处理核心以供所述目标数量个处理核心绑定，包括：获取当前处理核心总数和处理器平均占用率，计算所述当前处理核心总数和所述处理器平均占用率与所述目标数量的第一差值是否小于所述当前处理核心总数与所述目标数量的第二差值；若是，则判定存在足够的处理核心以供所述目标数量个处理核心绑定。也即，根据处理核心数量判断公式判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；其中，所述处理核心数量判断公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，为所述目标数量。作为一种可行的实施方式，本实施例还包括：监控处理器信息，并生成处理器信息数据库；其中，所述处理器信息至少包括处理器占用率；相应的，获取处理器平均占用率，包括：从所述处理器信息数据库中获取处理器平均占用率。在具体实施中，当分布式计算系统开始运行时，从分布式计算系统中获取CPU信息，包括但不局限于CPU核心数量、CPU占用率等信息。系统运行过程中，CPU管理模块不间断获取CPU信息，并生成CPU核心及处理器信息数据库。即可从上述处理器信息数据库中获取。S205：将所述目标数量个进程子组绑定至所述目标数量个处理核心。由此可见，在本实施例中，在处理核心隔离之前，判断是否存在足够的处理核心以供目标数量个处理核心绑定，避免了后续处理核心隔离失败。下面介绍本申请提供的一种应用实施例，应用于车载异构分布式计算系统，可满足自动驾驶应用在单机/分布式情况下的实时计算性能优化需求，具体包括节点进程管理模块和CPU核心管理模块。节点进程管理模块的主要功能包括：a. 进程初始化功能：通过读取系统的配置文件，来初始化节点的进程信息，包含但不局限于进程名称、运行设备ip等。b. 进程聚类功能：将临近的节点进行聚类打包，将其合并成进程组进行管理。c. 进程监控功能：不间断的监控进程间切换次数、通信状态等信息。d. 进程选择及隔离功能：针对切换次数超过阈值的进程组，进行核心隔离。CPU核心管理模块的主要功能包括：a. 核心初始化功能：初始化CPU核心信息，确认核心隔离方法等。b. 核心监控功能：持续监控CPU核心的负载情况，并生成运行数据库以供后续查询。c. 核心选择功能：选择合适的核心并应用隔离，用于后续的进程隔离操作。基于上述两模块，动态核心隔离方法如图3所示，包括：步骤1：当系统开始运行时，节点进程管理模块从配置文件中读取将要启动的节点，并生成节点进程关系表，并获取节点的通信类型，供后续步骤使用。步骤2：当系统开始运行时，CPU管理模块从系统中获取CPU信息，包括但不局限于CPU核心数量、CPU占用率等信息。并且此时需要让用户指定核心隔离的方案，比如硬隔离或者PGroup软隔离等。步骤3：系统运行过程中，CPU管理模块不间断获取CPU信息，并生成CPU核心及占用率数据库。步骤4：根据步骤1生成的节点关系表，对节点进行聚类，聚类方法为：a. 从节点关系表中，随机选择N个节点作为聚类质心，聚类质心即为簇的中心点。b.对于每个样本，计算其与每个质心的距离，将样本分配到距离最近的质心所代表的簇。其距离计算方法如下式所示：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数。c.对于所有样本，可以构建聚类的目标函数，如下式所示：。d.尝试不同的N值，并重复步骤b和c，直到J的值不再显著减少为止。此时节点已经按照距离和通信量进行了聚类分组。后续将每个簇作为一个进程组进行管理。步骤5：针对步骤2生成的进程组，进行进程切换数量监控，监控公式：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。步骤6：当步骤3中的进程组切换次数超过设定的阈值时，便需要对该组进程进行智能分类后，实行核心隔离，具体步骤如下：a.假设需要实行核心隔离的进程组为K，获取该进程组的CPU占用率，并对其进行向上取整，比如253%的占用率则取整到3，将此数值记为。b.根据步骤a获取的，对K进程组内进程再进行聚类，但是此次聚类的簇数量为固定值/＞。c.将步骤b产生的子进程组作为待隔离的进程，并向CPU核心管理模块申请个隔离核心。步骤7：当CPU核心管理模块接收到CPU隔离请求后，则进行判断是否有足够的核心供分配，计算公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，为所述目标数量。当上式成立时，即表明有足够的核心可供分配，核心管理模块将隔离出供进程隔离使用。步骤8：进程管理模块将步骤6.c中产生的个子进程组，绑定至步骤7分配的个CPU核心中，实现进程和CPU核心的绑定。此时，系统已经实现了在运行过程中，将切换次数超过阈值的进程隔离到单独的核心中，并且综合考虑了通信以及节点功能的影响。下面对本申请实施例提供的一种处理核心隔离装置进行介绍，下文描述的一种处理核心隔离装置与上文描述的一种处理核心隔离方法可以相互参照。参见图4，根据一示例性实施例示出的一种处理核心隔离装置的结构图，如图4所示，包括：获取模块401，用于确定所述分布式计算系统中启动的节点，并获取所述分布式计算系统中启动的节点对应的节点进程关系表；第一聚类模块402，用于根据所述分布式计算系统中启动的节点之间的连接关系对所述节点进行聚类操作，并根据所述节点进程关系表生成多个进程组；第二聚类模块403，用于监控多个所述进程组的进程切换数量，若存在进程切换数量超过预设值的目标进程组，则对所述目标进程组内的进程进行聚类操作，以生成目标数量个进程子组；绑定模块404，用于将所述目标数量个进程子组绑定至所述目标数量个处理核心。本申请实施例提供的处理核心隔离装置，将切换频繁的进程绑定至处理核心，通过处理核心隔离减少了运行过程中因进程频繁切换带来的额外开销。同时，在划分进程组时考虑了节点之间的连接关系，尽量减少了核心隔离及进程绑定对通信的影响。由此可见，本申请实施例提供的处理核心隔离装置u，实现了低额外开销、高实时性、可动态调节的核心隔离，解决了因进程数量多需要频繁切换导致的系统额外开销问题。在上述实施例的基础上，作为一种优选实施方式，所述第一聚类模块402具体用于：从所述分布式计算系统中启动的节点中选择预设数量个节点作为簇心，计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离，并将所述分布式计算系统中启动的每个节点分配至距离最近的簇心对应的簇中，基于每个所述簇中的节点与簇心的距离的总和构建目标函数；调整所述预设数量的值，确定不同所述预设数量的值对应的目标函数的值，确定所述目标函数的值最小时所述预设数量的目标值，并确定所述预设数量为所述目标值时每个簇包含的节点，根据所述节点进程关系表生成多个进程组。在上述实施例的基础上，作为一种优选实施方式，所述第一聚类模块402具体用于：确定所述分布式计算系统中启动的每个节点的权重系数，将所述节点与每个所述簇心之间的距离与所述权重系数的乘积作为所述节点与每个所述簇心之间的最终距离。在上述实施例的基础上，作为一种优选实施方式，所述第一聚类模块402具体用于：根据所述分布式计算系统中启动的每个节点的通信数据量确定所述节点的权重系数；其中，所述权重系数与所述通信数据量呈正相关。在上述实施例的基础上，作为一种优选实施方式，所述第一聚类模块402具体用于：根据距离计算公式计算所述分布式计算系统中启动的每个节点与每个所述簇心之间的距离；其中，所述距离计算公式为：；其中，/＞为第i个节点，cj为第j个簇Cj的簇心，/＞表示欧几里得距离，/＞为第i个节点的权重系数；相应的，所述目标函数为：；其中，N为所述预设数量。在上述实施例的基础上，作为一种优选实施方式，所述第二聚类模块403具体用于：监控多个所述进程组内所有进程的每秒切换次数，将每个所述进程组内所有进程的每秒切换次数的总和作为每个所述进程组的进程切换数量。在上述实施例的基础上，作为一种优选实施方式，所述第二聚类模块403具体用于：监控多个所述进程组内所有进程的每秒切换次数，根据进程切换数量计算公式计算所述进程组的进程切换数量；其中，所述进程切换数量计算公式为：；其中，/＞为第K个进程组的进程切换数量，/＞为第K个进程组中第m个进程的每秒切换次数，M为第K个进程组包含的进程总数。在上述实施例的基础上，作为一种优选实施方式，所述第二聚类模块403具体用于：获取所述目标进程组的处理器占用率，并对所述处理器占用率进行向上取整以确定目标数量；从所述目标进程组中选择所述目标数量个进程作为簇心，计算所述目标进程组中每个进程与每个所述簇心之间的距离，并将所述目标进程组中每个进程分配至距离最近的簇心对应的簇中，以生成所述目标数量个进程子组。在上述实施例的基础上，作为一种优选实施方式，还包括：判断模块，用于判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；若是，则启动所述绑定模块404的工作流程。在上述实施例的基础上，作为一种优选实施方式，所述判断模块具体用于：获取当前处理核心总数和处理器平均占用率，计算所述当前处理核心总数和所述处理器平均占用率与所述目标数量的第一差值是否小于所述当前处理核心总数与所述目标数量的第二差值；若是，则判定存在足够的处理核心以供所述目标数量个处理核心绑定。在上述实施例的基础上，作为一种优选实施方式，还包括：生成模块，用于监控处理器信息，并生成处理器信息数据库；其中，所述处理器信息至少包括处理器占用率；相应的，所述判断模块具体用于：从所述处理器信息数据库中获取处理器平均占用率。在上述实施例的基础上，作为一种优选实施方式，所述判断模块具体用于：根据处理核心数量判断公式判断是否存在足够的处理核心以供所述目标数量个处理核心绑定；其中，所述处理核心数量判断公式为：；其中，/＞为当前处理核心总数，/＞为处理器平均占用率，为所述目标数量。关于上述实施例中的装置，其中各个模块执行操作的具体方式已经在有关该方法的实施例中进行了详细描述，此处将不做详细阐述说明。基于上述程序模块的硬件实现，且为了实现本申请实施例的方法，本申请实施例还提供了一种电子设备，图5为根据一示例性实施例示出的一种电子设备的结构图，如图5所示，电子设备包括：通信接口1，能够与其它设备比如网络设备等进行信息交互；处理器2，与通信接口1连接，以实现与其它设备进行信息交互，用于运行计算机程序时，执行上述一个或多个技术方案提供的处理核心隔离方法。而所述计算机程序存储在存储器3上。当然，实际应用时，电子设备中的各个组件通过总线系统4耦合在一起。可理解，总线系统4用于实现这些组件之间的连接通信。总线系统4除包括数据总线之外，还包括电源总线、控制总线和状态信号总线。但是为了清楚说明起见，在图5中将各种总线都标为总线系统4。本申请实施例中的存储器3用于存储各种类型的数据以支持电子设备的操作。这些数据的示例包括：用于在电子设备上操作的任何计算机程序。可以理解，存储器3可以是易失性存储器或非易失性存储器，也可包括易失性和非易失性存储器两者。其中，非易失性存储器可以是只读存储器、可编程只读存储器、可擦除可编程只读存储器、电可擦除可编程只读存储器、磁性随机存取存储器、快闪存储器、磁表面存储器、光盘、或只读光盘；磁表面存储器可以是磁盘存储器或磁带存储器。易失性存储器可以是随机存取存储器，其用作外部高速缓存。通过示例性但不是限制性说明，许多形式的RAM可用，例如静态随机存取存储器、同步静态随机存取存储器、动态随机存取存储器、同步动态随机存取存储器、双倍数据速率同步动态随机存取存储器、增强型同步动态随机存取存储器、同步连接动态随机存取存储器、直接内存总线随机存取存储器。本申请实施例描述的存储器3旨在包括但不限于这些和任意其它适合类型的存储器。上述本申请实施例揭示的方法可以应用于处理器2中，或者由处理器2实现。处理器2可能是一种集成电路芯片，具有信号的处理能力。在实现过程中，上述方法的各步骤可以通过处理器2中的硬件的集成逻辑电路或者软件形式的指令完成。上述的处理器2可以是通用处理器、DSP，或者其他可编程逻辑器件、分立门或者晶体管逻辑器件、分立硬件组件等。处理器2可以实现或者执行本申请实施例中的公开的各方法、步骤及逻辑框图。通用处理器可以是微处理器或者任何常规的处理器等。结合本申请实施例所公开的方法的步骤，可以直接体现为硬件译码处理器执行完成，或者用译码处理器中的硬件及软件模块组合执行完成。软件模块可以位于存储介质中，该存储介质位于存储器3，处理器2读取存储器3中的程序，结合其硬件完成前述方法的步骤。处理器2执行所述程序时实现本申请实施例的各个方法中的相应流程，为了简洁，在此不再赘述。在示例性实施例中，本申请实施例还提供了一种存储介质，即计算机存储介质，具体为计算机可读存储介质，例如包括存储计算机程序的存储器3，上述计算机程序可由处理器2执行，以完成前述方法所述步骤。计算机可读存储介质可以是FRAM、ROM、PROM、EPROM、EEPROM、Flash Memory、磁表面存储器、光盘、CD-ROM等存储器。本领域普通技术人员可以理解：实现上述方法实施例的全部或部分步骤可以通过程序指令相关的硬件来完成，前述的程序可以存储于一计算机可读取存储介质中，该程序在执行时，执行包括上述方法实施例的步骤；而前述的存储介质包括：移动存储设备、ROM、RAM、磁碟或者光盘等各种可以存储程序代码的介质。或者，本申请上述集成的单元如果以软件功能模块的形式实现并作为独立的产品销售或使用时，也可以存储在一个计算机可读取存储介质中。基于这样的理解，本申请实施例的技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台电子设备执行本申请各个实施例所述方法的全部或部分。而前述的存储介质包括：移动存储设备、ROM、RAM、磁碟或者光盘等各种可以存储程序代码的介质。以上所述，仅为本申请的具体实施方式，但本申请的保护范围并不局限于此，任何熟悉本技术领域的技术人员在本申请揭露的技术范围内，可轻易想到变化或替换，都应涵盖在本申请的保护范围之内。因此，本申请的保护范围应以所述权利要求的保护范围为准。
