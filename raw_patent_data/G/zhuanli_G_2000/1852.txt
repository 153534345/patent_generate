标题title
数据处理方法、装置、设备及计算机可读存储介质
摘要abst
本申请实施例公开了一种数据处理方法、装置、设备及计算机可读存储介质，包括：在运行阶段中，获取业务应用中的第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。采用本申请，可以降低业务组件之间的耦合度。
权利要求书clms
1.一种数据处理方法，其特征在于，所述方法包括：在运行阶段中，获取业务应用中的第一业务组件针对第二业务组件的调用请求；所述业务应用包括N个业务组件以及与所述N个业务组件分别连接的公共接口组件；所述N个业务组件包括所述第一业务组件和所述第二业务组件；所述N个业务组件用于为所述业务应用提供业务服务；所述公共接口组件用于在所述N个业务组件之间提供业务组件调用功能；根据所述调用请求从所述公共接口组件中包括的接口声明服务中获取所述第二业务组件关联的接口类；所述第二业务组件关联的接口类用于表示所述第二业务组件的业务服务的内容；根据所述第二业务组件关联的接口类，从所述公共接口组件中包括的接口管理服务中调用与所述第二业务组件关联的实现类对应的实例对象，通过所述实例对象调用所述第二业务组件的实现类实现业务服务；所述第二业务组件关联的实现类用于实现所述第二业务组件的业务服务；所述第二业务组件关联的实现类携带自定义注解，所述自定义注解用于将所述实现类对应的实例对象注册至所述接口管理服务中。2.如权利要求1所述的数据处理方法，其特征在于，所述根据所述第二业务组件关联的接口类，从所述公共接口组件中包括的接口管理服务中调用与所述第二业务组件关联的实现类对应的实例对象，通过所述实例对象调用所述第二业务组件的实现类实现业务服务，包括：调用所述接口管理服务中的管理接口，将所述第二业务组件关联的接口类传入至所述管理接口中；通过所述管理接口遍历所述接口管理服务中的实例对象列表，根据所述第二业务组件关联的接口类确定所述接口类对应的实例对象，通过所述实例对象调用所述第二业务组件关联的实现类，通过所述实现类调用所述第二业务组件的业务服务；所述实例对象列表包括所述N个业务组件关联的实现类对应的实例对象。3.如权利要求1所述的数据处理方法，其特征在于，在所述获取业务应用中的第一业务组件针对第二业务组件的调用请求之前，所述方法还包括：获取所述N个业务组件以及所述N个业务组件分别关联的接口类和实现类；基于所述N个业务组件关联的接口类生成所述公共接口组件中的接口声明服务；所述接口类用于在所述运行阶段中调用所述业务组件关联的实现类对应的实例对象；在打包编译阶段中，通过编译打包工具截获所述业务应用关联的源代码，获取所述源代码中包括的第一格式类集合，所述第一格式类集合包括所述N个实现类；通过面向切面工具对所述第一格式类集合进行处理，得到携带所述自定义注解的目标格式类，将所述目标格式类注册至所述公共接口组件中的所述接口管理服务中；所述目标格式类与所述自定义注解之间的关联关系是通过所述自定义注解对所述N个实现类进行注解得到。4.如权利要求3所述的数据处理方法，其特征在于，所述自定义注解包括注解生命周期和注解对象；所述注解生命周期用于声明所述自定义注解存在于所述打包编译阶段；所述注解对象用于声明对所述N个业务组件关联的实现类进行注解。5.如权利要求3所述的数据处理方法，其特征在于，所述通过面向切面工具对所述第一格式类集合进行处理，得到携带所述自定义注解的目标格式类，将所述目标格式类注册至所述公共接口组件中的所述接口管理服务中，包括：通过所述面向切面工具将所述第一格式类集合转换为所述面向切面工具适用的第二格式类集合；通过所述面向切面工具从所述第二格式类集合中识别携带所述自定义注解的N个第二格式类，将所述N个第二格式类确定为目标格式类；将所述目标格式类实例化，得到所述目标格式类对应的实例对象，将所述实例对象注册至所述接口管理服务中的实例对象列表中。6.如权利要求5所述的数据处理方法，其特征在于，所述通过所述面向切面工具编程工具从所述第二格式类集合中，识别携带所述自定义注解的N个第二格式类，将所述N个第二格式类确定为目标格式类，包括：通过所述面向切面工具将所述自定义注解传入至所述第二格式类集合中的每个所述第二格式类关联的服务接口中，根据反射机制将所述服务接口返回的与所述自定义注解对应的注解对象的所述第二格式类确定为所述目标格式类。7.一种数据处理装置，其特征在于，包括：第一获取模块，用于在运行阶段中，在业务应用中获取第一业务组件针对第二业务组件的调用请求；所述业务应用包括N个业务组件以及与所述N个业务组件分别连接的公共接口组件；所述N个业务组件包括所述第一业务组件和所述第二业务组件；所述N个业务组件用于为所述业务应用提供业务服务；所述公共接口组件用于在所述N个业务组件之间提供业务组件调用功能；第二获取模块，用于根据所述调用请求从所述公共接口组件中包括的接口声明服务中获取所述第二业务组件关联的接口类；所述第二业务组件关联的接口类用于表示所述第二业务组件的业务服务的内容；第一调用模块，用于根据所述第二业务组件关联的接口类，从所述公共接口组件中包括的接口管理服务中调用与所述第二业务组件关联的实现类对应的实例对象，通过所述实例对象调用所述第二业务组件的实现类实现业务服务；所述第二业务组件关联的实现类用于实现所述第二业务组件的业务服务；所述第二业务组件关联的实现类携带自定义注解，所述自定义注解用于将所述实现类对应的实例对象注册至所述接口管理服务中。8.一种计算机设备，其特征在于，包括：处理器、存储器以及网络接口；所述处理器与所述存储器、所述网络接口相连，其中，所述网络接口用于提供数据通信功能，所述存储器用于存储程序代码，所述处理器用于调用所述程序代码，以执行权利要求1-6任一项所述的方法。9.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质中存储有计算机程序，所述计算机程序适于由处理器加载并执行权利要求1-6任一项所述的方法。10.一种计算机程序产品，其特征在于，所述计算机程序产品包括计算机程序，该计算机程序存储在计算机可读存储介质中，且适于由处理器读取并执行，以使得具有所述处理器的计算机设备执行权利要求1-6任一项所述的方法。
说明书desc
技术领域本申请涉及软件开发技术领域，尤其是一种数据处理方法、装置、设备及计算机可读存储介质。背景技术在业务应用的开发过程中，由于业务的不断增长，导致项目的软件代码量越来越大。为方便技术人员对业务应用的不同功能的改动，通常根据业务服务的内容对代码进行划分，将不同的业务代码放置到独立的功能模块中进行开发，得到不同业务服务的业务组件。这样可以通过组件的功能模块之间进行相互调用形成业务应用，从而减少软件代码之间的耦合性。现有技术中，一般是在业务组件中声明其他业务组件的组件接口，各个业务组件之间存在依赖关系，或者，是将各个业务组件的组件接口集中在公共接口中，但需要技术人员手动完成业务组件的接口注册。由于各个业务组件之间的依赖关系，代码之间的耦合问题依然存在，导致会出现一个功能模块改动时，其他功能模块也可能得进行重新编码才可保证被调用以完成大型项目的开发，且手动完成接口注册会大大增加接口的维护成本，因此开发效率低下，成本更高。发明内容本申请实施例提供了一种数据处理方法、装置、设备及计算机可读存储介质，可以降低业务组件之间的耦合度，提高开发效率高，降低成本。本申请实施例提供了一种数据处理方法，该方法包括：在运行阶段中，获取业务应用中的第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；N个业务组件包括第一业务组件和第二业务组件；N个业务组件用于为业务应用提供业务服务；公共接口组件用于在N个业务组件之间提供业务组件调用功能；根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；第二业务组件关联的接口类用于表示第二业务组件的业务服务的内容；根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类用于实现第二业务组件的业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。本申请实施例一方面提供了一种数据处理装置，包括：第一获取模块，用于在运行阶段中，在业务应用中获取第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；N个业务组件包括第一业务组件和第二业务组件；N个业务组件用于为业务应用提供业务服务；公共接口组件用于在N个业务组件之间提供业务组件调用功能；第二获取模块，用于根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；第二业务组件关联的接口类用于表示第二业务组件的业务服务的内容；第一调用模块，用于根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类用于实现第二业务组件的业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。其中，上述第一调用模块包括：第一调用单元，用于调用接口管理服务中的管理接口，将第二业务组件关联的接口类传入至管理接口中；第一处理单元，用于通过管理接口遍历接口管理服务中的实例对象列表，根据第二业务组件关联的接口类确定接口类对应的实例对象，通过实例对象从实例对象列表中调用第二业务组件关联的实现类，通过实现类调用第二业务组件的业务服务；实例对象列表包括N个业务组件关联的实现类对应的实例对象。其中，上述装置还包括：第三获取模块，用于获取N个业务组件以及N个业务组件分别关联的接口类和实现类；第一生成模块，用于基于N个业务组件关联的接口类生成公共接口组件中的接口声明服务；接口类用于在运行阶段中调用业务组件关联的实现类对应的实例对象；第四获取模块，用于在打包编译阶段中，通过编译打包工具截获业务应用关联的源代码，获取源代码中包括的第一格式类集合，第一格式类集合包括N个实现类；第一处理模块，用于通过面向切面工具对第一格式类集合进行处理，得到携带自定义注解的目标格式类，将目标格式类注册至公共接口组件中的接口管理服务中；目标格式类与自定义注解之间的关联关系是通过自定义注解对N个实现类进行注解得到。其中，上述自定义注解包括注解生命周期和注解对象；注解生命周期用于声明自定义注解存在于打包编译阶段；注解对象用于声明对N个业务组件关联的实现类进行注解。其中，上述第一处理模块包括：第二处理单元，用于通过面向切面工具将第一格式类集合转换为面向切面工具适用的第二格式类集合；第三处理单元，用于通过面向切面工具从第二格式类集合中识别携带自定义注解的N个第二格式类，将N个第二格式类确定为目标格式类；第四处理单元，用于将目标格式类实例化，得到目标格式类对应的实例对象，将实例对象注册至接口管理服务中的实例对象列表中。其中，上述第三处理单元包括：第一处理子单元，用于通过面向切面工具将自定义注解传入至第二格式类集合中的每个第二格式类关联的服务接口中，根据反射机制将服务接口返回的与自定义注解对应的注解对象的第二格式类确定为目标格式类。本申请实施例一方面提供了一种计算机设备，包括：处理器和存储器；上述处理器与存储器、网络接口相连，其中，网络接口用于提供数据通信功能，存储器用于存储程序代码，处理器用于调用上述程序代码，以执行如本申请实施例第一方面提供的方法。本申请实施例一方面提供了一种计算机可读存储介质，计算机可读存储介质存储有计算机程序，该计算机程序适于由处理器加载并执行，以使得具有该处理器的计算机设备执行本申请实施例提供的方法。本申请实施例一方面提供了一种计算机程序产品，该计算机程序产品包括计算机程序，该计算机程序存储在计算机可读存储介质中。计算机设备的处理器从计算机可读存储介质读取该计算机程序，处理器执行该计算机程序，使得该计算机设备执行本申请实施例提供的方法。在本申请实施例中，业务应用可以实现任一业务组件之间的互相调用功能，以使业务组件向业务应用提供业务服务。业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件，业务应用中的第一业务组件可以通过公共接口组件中的接口声明服务调用第二业务组件的接口类，根据第二业务组件关联的接口类从公共接口组件包括的接口管理服务中调用第二业务组件关联的实现类对应的实例对象。进一步，可以通过实例对象调用第二业务组件关联的实现类，从而实现第二业务组件的业务服务。其中，通过携带自定义注解的第二业务组件可以将实现类对应的实例对象注册至接口管理服务中。应当理解，通过将N个业务组件关联的接口类集中在公共接口组件包括的接口管理服务中，从而实现对各个业务组件的调用，可以降低各个业务组件之间的耦合度。同时，通过自定义注解将各个业务组件的实现类对应的实例对象注册至公共接口组件包括的接口管理服务中，可以避免技术人员手动完成接口注册，降低了接口的维护成本，提升了开发效率。附图说明图1是本申请实施例提供的一种网络架构的结构示意图；图2是本申请实施例提供的数据处理方法的第一种流程示意图；图3是本申请实施例提供的数据处理方法的一场景示意图；图4是本申请实施例提供的数据处理方法的一结构示意图；图5是本申请实施例提供的数据处理方法的第一种数据通信流程图；图6是本申请实施例提供的数据处理方法的第二种流程示意图；图7是本申请实施例提供的数据处理方法的第二种数据通信流程图；图8是本申请实施例提供的数据处理装置的结构示意图；图9是本申请实施例提供的计算机设备的结构示意图。具体实施方式下面将结合本申请实施例中的附图，对本申请实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。下面结合附图来对本申请的技术方案的实施作进一步的详细描述。1、面向切面编程：是指在打包编译期间通过预编译方式和运行期动态代理实现程序中某些功能的统一维护的一种技术。2、编译打包工具：是基于安卓针对安卓系统的编译打包工具，能够实现自定义构建逻辑的插件。3、Gradle插件：Gradle是项目构建工具，可以用于构建Android工程，Gradle插件则是基于Gradle实现的可以帮助开发人员提高开发效率、扩展功能的脚本。4、注解：是一种应用于类、方法、参数、变量、构造器或包声明中的特殊修饰符，是用来描述元数据的一种工具。自定义注解为系统内置注解之外的、由开发人员利用元注解自行编写的注解。一般地，注释用于告知开发人员代码的逻辑、说明、特点等，可以无限制的随意编写；编译时，注释会被编译器完全忽略。注解是通过标注类、方法、参数、变量、构造器或包等元素，告知JAVA虚拟机这些元素的元数据，其一般以“@”起始，对于位置、语法、内容都有严格的限制，如果有任何错误，编译过程中就会显示异常。5、接口：接口是指实体将自己提供给外界的一种抽象化物，用以由内部操作分离出外部沟通方法，使其能被内部修改而不影响外界其他实体与其交互的方式，接口具有对应的实现类，接口实现类是具体实现接口方法。6、安卓：Android是一个基于Linux内核与其他开源软件的开放源代码的移动操作系统。7、安卓系统应用：是在Android操作系统的终端设备上运行的应用程序，Android App可使用Java语言来编写开发。8、Java：Java是一种广泛使用的计算机编程语言，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。9、组件化：是指在将整个应用程序进行拆分成各个不同的业务组件以及公共接口组件之后，各个业务组件之间互相没有依赖关系，但都同时依赖公共接口组件，且当各个业务组件单独运行时，则将每个业务组件以及公共接口组件打包成为一个独立APP；当各个业务组件组合成一个完整APP时，会将各个业务Module以及公共接口组件一起打包成为一个独立APP。请参见图1，图1是本申请实施例提供的一种网络架构的结构示意图。如图1所示，该系统架构可以包括业务服务器100以及终端集群，终端集群可以包括：终端设备200a、终端设备200b、终端设备200c、……、终端设备200n等终端设备。其中，上述业务服务器100可以是独立的物理服务器，也可以是多个物理服务器构成的服务器集群或者分布式系统，还可以是提供云数据库、云服务、云计算、云函数、云存储、网络服务、云通信、中间件服务、域名服务、安全服务、CDN、以及大数据和人工智能平台等基础云计算服务的云服务器。终端设备可以是平板电脑、智能手机、笔记本电脑、台式计算机、掌上电脑、可穿戴设备、智能电视、智能车载等智能终端。其中，业务服务器100与终端集群中的各终端设备可以建立通信连接，终端集群中的各终端设备之间也可建立通信连接。换句话说，业务服务器100可与终端设备200a、终端设备200b、终端设备200c、……、终端设备200n中的各终端设备建立通信连接，例如终端设备200a与业务服务器100之间可建立通信连接。终端设备200a与终端设备200b之间可建立通信连接，终端设备200a与终端设备200c之间也可建立通信连接。其中，上述通信连接不限定连接方式，可以通过有线通信方式进行直接或间接地连接，也可以通过无线通信方式进行直接或间接地连接等，具体可根据实际应用场景确定，本申请在此不做限制。应该理解，如图1所示的终端集群中的每个终端设备均可以安装有业务应用，业务服务器100可以与各终端设备进行数据交互。例如，若终端设备通过业务应用调用登录组件时，操作对象可通过登录组件登录账户，业务服务器100可以通过终端设备存储操作对象登录的账号信息。当该业务应用运行于各终端设备中时，终端设备可以通过业务应用获取针对任一业务组件的调用请求。其中，业务应用可以包含多个业务组件，各个业务组件可以通过业务应用实现互相调用，进而使该业务应用为终端设备提供任一业务组件的业务服务。为方便描述，该业务应用可以为带有支付功能的社交客户端，即各终端设备可以获取业务应用中针对任一业务组件的调用请求，各终端设备可以根据调用请求从公共接口组件中获取任一业务组件关联的接口类、实例对象、实现类等。应当理解，实现类就是实现接口中约定的内容和接口类定义规范，实现类还可以确定接口类定义规范如何运行。其中，任一业务组件关联的实现类携带有自定义注解，自定义注解用于将任一业务组件关联的实现类对应的实例对象注册至公共接口组件中，使得终端设备通过公共接口组件调用任一业务组件，从而使各个业务组件为终端设备提供业务服务。也就是说，终端设备可以通过业务应用获取第一业务组件针对第二业务组件的调用请求，终端设备根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类。进一步地，终端设备根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务。应当理解，通过将各业务组件关联的接口类集中在公共接口组件包括的接口管理服务中，从而实现对各个业务组件的调用，可以降低各个业务组件之间的耦合度。同时，通过自定义注解将各个业务组件的实现类对应的实例对象注册至公共接口组件包括的接口管理服务中，可以避免技术人员手动完成接口注册，降低了接口的维护成本，提升了开发效率。可选的，终端设备通过业务应用获取任一业务组件关联的接口类、实例对象等的处理过程，也可以由业务服务器100执行。也就是说，业务服务器100可以通过终端设备获取针对任一业务组件的调用请求，根据调用请求向终端设备返回任一业务组件关联的接口类、实例对象等。业务服务器100作为业务应用的服务器，可以为包括该业务应用对应的后台服务器、数据处理服务器等多个服务器的集合。上述业务应用可以为独立的客户端，也可以为集成在某客户端中的嵌入式子客户端，具体可根据实际应用场景确定，在此不做限定。可以理解的是，在本申请的具体实施方式中，涉及到用户信息等相关的数据，当本申请实施例运用到具体产品或技术中时，需要获得用户许可或者同意，且相关数据的收集、使用和处理需要遵守相关地区的相关法律法规和标准。可以理解的是，本申请实施例提供的数据处理方法适用于基于包含多个业务组件的业务应用。可以理解的是，上述数据处理方法所适用的终端设备包括但不限于智能手机、计算机、平板电脑、个人数码助理、移动互联网设备以及可穿戴设备等。可选的，终端设备也可为上述智能手机、计算机、平板电脑、PDA、MID以及可穿戴设备对应的服务器等，具体可根据实际应用场景确定，在此不做限制。对应的，本申请实施例提供的数据处理装置包括但不限于智能手机、计算机、平板电脑、PDA、MID以及可穿戴设备等。为方便描述，本申请实施例提供的数据处理装置和/或终端设备将以智能手机为例进行说明。数据处理方法请参见图2，图2是本申请实施例提供的数据处理方法的第一种流程示意图。为了便于理解，本申请实施例以终端设备为例进行说明，即以图1中的终端设备200b为例进行叙述。本申请实施例可应用于各种场景，包括但不限于云技术、人工智能、软件开发等。在图2所示的数据处理方法中，数据处理方法的各个步骤可由上述图1中的终端设备200b来执行，如图2所示，该数据处理方法至少可以包括以下步骤S101-步骤S103。步骤S101，在运行阶段中，获取业务应用中的第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；N个业务组件包括第一业务组件和第二业务组件；N个业务组件用于为业务应用提供业务服务；公共接口组件用于在N个业务组件之间提供业务组件调用功能。在一些可行的实施方式中，请参见图3，图3是本申请实施例提供的数据处理方法的一场景示意图。终端用户可以通过装载在终端设备上的业务应用调用业务组件，从而实现业务服务。如图3所示的界面1、界面2、界面3、界面4以及界面5可以为业务应用在不同时刻的界面。如界面1所示，终端设备可以通过业务应用调用不同的业务组件来向操作对象提供不同的服务，如终端设备可以通过业务应用调用“通讯录”组件，向操作对象展示通讯录中任一联系人员的相关信息，例如头像、个人主页、名称等。终端设备也可以通过界面1所示的“更多”控件201a来调用其他业务组件。例如，当操作对象需要通过业务应用完成支付任务时，操作对象可以通过点击界面1所示的“更多”控件201a跳转至界面2，即当终端设备检测到操作对象在界面1上的点击位置为“更多”控件201a时，终端设备将跳转至界面2。进一步地，当终端设备检测到界面2所示的针对“收付款”控件201b的对象操作指令时，终端设备通过业务应用调用支付组件完成支付任务。应当理解，当操作对象未在业务应用中登录账户时，上述支付任务无法完成，此时终端设备将跳转至界面3，操作对象可在界面3上输入操作对象的账号和密码，授权登录业务应用，以便于终端设备获取操作对象的用户信息。具体地，当操作对象输入账户以及密码时，终端设备可以提示操作对象阅读与用户相关的信息，如图3所示例的提示操作对象阅读并了解《用户协议》以及《隐私协议》，在操作对象触发已阅读控件201c时，终端设备才可以通过调用“登录”组件，完成账户验证。终端设备成功登录业务应用后，终端设备才可以调用支付组件完成支付任务。应当理解，终端设备可以通过第一业务组件调用第二业务组件，也可以通过第二业务组件调用第一业务组件，即任一业务组件可以通过业务应用调用其他业务组件以实现不同的业务服务。应当理解，业务应用可以包含多个业务组件，不同业务组件可以为业务应用提供不同的业务服务。上述业务应用中包含的多个业务组件均为类文件，即可以根据服务需求修改业务应用中包含的多个业务组件对应的类文件，以实现不同的业务服务。在一些可行的实施方式中，在运行阶段中，终端设备可以获取业务应用中的第一业务组件针对第二业务组件的调用请求。其中，业务应用可以包括N个业务组件以及与N个业务组件分别连接的公共接口组件。N个业务组件包括第一业务组件和第二业务组件。其中，N个业务组件用于为业务应用提供业务服务，公共接口组件用于在N个业务组件之间提供业务组件调用功能。具体地，请参见图4，图4是本申请实施例提供的数据处理方法的一结构示意图。如图4所示，业务应用可以包括支付组件、登录组件以及与支付组件、登录组件分别连接的公共接口组件。在运行阶段中，终端设备可以获取业务应用中的第一业务组件针对第二业务组件的调用请求，即当操作对象需要完成支付任务时，终端设备可以从业务应用中获取支付组件针对登录组件的调用请求，从而实现支付任务。请再参见图3，当操作对象成功登录业务应用后，终端设备会向操作对象显示业务应用的展示界面，即界面5，其中，界面5中可以包括操作对象的交互记录、通讯录以及设置，还包括“更多”控件201a，以调用其他业务组件实现不同的业务服务。步骤S102，根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；第二业务组件关联的接口类用于表示第二业务组件的业务服务的内容。在一些可行的实施方式中，终端设备根据调用请求从业务应用中的公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类。其中，N个业务组件分别关联的接口可通过接口声明服务获取。具体地，请再参见图4，在终端设备从业务应用中获取到支付组件针对登录组件的调用请求后，终端设备可以通过业务应用根据调用请求从公共接口组件中包括的接口声明服务中获取登录组件关联的接口类2。其中，登录组件关联的接口类2用于表示登录组件的业务服务的内容，如登录组件用于登录操作对象的账户。步骤S103，根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类用于实现第二业务组件的业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。在一些可行的实施方式中，终端设备可以根据第二业务组件关联的接口类，通过业务应用从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务。再请参见图4，终端设备可以根据登录组件关联的接口类2，通过业务应用从公共接口组件中包括的接口管理服务中调用与登录组件关联的实现类2对应的实例对象2，通过实例对象2调用登录组件的实现类2实现业务服务。如图4所示，接口管理服务中的实例对象列表可以包括支付组件关联的实现类1对应的实例对象1以及登录组件关联的实现类2对应的实例对象2。请参见图5，图5是本申请实施例提供的数据处理方法的第一种数据通信流程图。如图5所示，当终端设备需要通过支付组件调用登录组件时，终端设备可以调用接口管理服务中的管理接口，将登录组件关联的接口类2传入至管理接口中。应当理解，上述管理接口用于根据任一业务组件关联的接口类获取上述任一业务组件关联的接口类对应的实例对象，即管理接口可以根据登录组件关联的接口类2获取接口类2对应的实例对象2。进一步地，终端设备可以通过管理接口管理服务中的实例对象列表，根据第二业务组件关联的接口类确定接口类对应的实例对象，通过实例对象从实例对象列表中调用第二业务组件关联的实现类，通过实现类调用第二业务组件的业务服务。其中，实例对象列表包括N个业务组件关联的实现类对应的实例对象。具体地，在终端设备将登录组件关联的接口类2传入至管理接口中，终端设备通过管理接口遍历接口管理服务中的实例对象列表，根据登录组件关联的接口类2从实例对象列表中确定接口类2对应的实例对象2。终端设备可以通过实例对象2调用登录组件关联的实现类2，从而通过实现类2调用登录组件的业务服务，为操作对象提供登录服务。其中，N个业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。也就是说，登录组件关联的实现类携带自定义注解，自定义注解用于将登录组件关联的实现类对应的实例对象注册至接口管理服务中的实例对象列表中，以供终端设备调用登录组件实现业务服务。在本申请实施例中，本申请提供的数据处理方法可以在多个业务组件之间提供业务组件调用功能，并且将业务应用中的多个业务组件关联的接口类集中在公共接口组件中，可以降低各个业务组件之间的耦合度。同时，通过自定义注解将各个业务组件的实现类对应的实例对象注册至公共接口组件包括的接口管理服务中，可以避免技术人员手动完成接口注册，降低了接口的维护成本，提升了开发效率。请参见图6，图6是本申请实施例提供的数据处理方法的第二种流程示意图。在终端设备通过业务应用调用业务组件之前，还需要在打包编译阶段中，通过面向切面编程对各个业务组件关联的实现类进行注解等处理，具体如图6所示，该数据处理方法至少可以包括以下步骤S201-步骤S204。步骤S201，获取N个业务组件以及N个业务组件分别关联的接口类和实现类。在一些可行的实施方式中，请参见图7，图7是本申请实施例提供的数据处理方法的第二种数据通信流程图。如图7所示，在打包编译阶段中，终端设备可以获取业务应中的N个业务组件以及N个业务组件分别关联的接口类和实现类。其中，N个业务组件分别关联的接口类用于表示N个业务组件的业务服务的内容，N个业务组件分别关联的实现类用于N个业务组件的业务服务。例如，终端设备可以获取如图4所示的支付组件关联的接口类1和实现类1，以及登录组件关联的接口类2和实现类2；N个业务组件可以包括支付组件和登录组件。步骤S202，基于N个业务组件关联的接口类生成公共接口组件中的接口声明服务；接口类用于在运行阶段中调用业务组件关联的实现类对应的实例对象。在一些可行的实施方式中，如图7所示，终端设备可以基于N个业务组件关联的接口类生成公共接口组件中的接口声明服务。其中，N个业务组件关联的接口类用于在运行阶段中调用业务组件关联的实现类对应的实例对象，进而实现N个业务组件的业务服务。例如，如图4所示，终端设备可以基于支付组件关联的接口类1以及登录组件关联的接口类2生成公共接口组件中的接口声明服务。终端设备可以从接口声明服务中获取支付组件或登录组件关联的接口类，通过支付组件或登录组件关联的接口类调用接口类关联的业务组件，实现支付服务或者登录服务。步骤S203，在打包编译阶段中，通过编译打包工具截获业务应用关联的源代码，获取源代码中包括的第一格式类集合，第一格式类集合包括N个实现类。在一些可行的实施方式中，终端设备可以在打包编译阶段中，通过打包编译工具截获业务应用关联的源代码，获取源代码中包括的第一格式类集合。其中，第一格式类集合包括N个实现类。具体地，如图7所示，终端设备可以通过打包编译工具截获业务应用关联的源代码，终端设备可以调用Gradle插件中的Transform接口获取源代码中包括的第一格式类集合。其中，第一格式类集合为业务应用中包括的所有第一格式类，即第一格式类集合中包括支付组件关联的实现类1以及登录组件关联的实现类2。应当理解，打包编译工具可以遍历读取业务应用中的class文件，在业务应用对应的源代码中，class文件存在多个地方，例如有java源码生成的class文件，jar包中的class文件以及aar文件等，打包编译工具的入口会统一将这些class文件进行收集在一起，每一个class文件只读取一次，读取后的class文件会按照AOP编程中的AOP Handler处理链依次进行处理，直至遍历所有class类文件。步骤S204，通过面向切面工具对第一格式类集合进行处理，得到携带自定义注解的目标格式类，将目标格式类注册至公共接口组件中的接口管理服务中；目标格式类与自定义注解之间的关联关系是通过自定义注解对N个实现类进行注解得到。在一些可行的实施方式中，终端设备可以通过面向切面工具对第一格式类集合进行处理，得到携带自定义注解的目标格式类，将目标格式类注册至公共接口组件中的接口管理服务中。其中，面向切面工具可以为Javassist编译工具，Javassist编译工具用于对第一格式类集合进行格式转换，将第一格式类集合中的各个第一格式类转换为AOP编程适用的第二格式类。其中，自定义注解为预先设置的注解，并设置了注解生命周期和注解对象。其中，注解生命周期用于声明自定义注解存在于打包编译阶段，即自定义注解仅在打包编译阶段使用，在其他阶段不再运行自定义注解。注解对象用于声明对N个业务组件关联的实现类进行注解。应当理解，注解通常是一种代码级别的说明，可以声明在包、类、字段、方法、局部变量、方法等前面，用以说明和注释，但不会直接影响到程序的语义。注解的形式一般为“@注解名”。具体地，如图7所示，终端设备可以通过面向切面工具将第一格式类集合转换为面向切面工具适用的第二格式类集合，即终端设备可以通过Javassist编译工具对第一格式类集合中包括的各个class文件进行格式转换，得到ctclass文件。其中，class文件为第一格式类集合中包括的各个第一格式类，终端设备可以通过Javassist编译工具将格式文件为class文件的各个第一格式类转换成格式文件为ctclass文件的各个第二格式类，根据各个第二格式类得到第二格式类集合。进一步地，终端设备通过面向切面工具从第二格式类集合中识别携带自定义注解的N个第二格式类，将N个第二格式类确定为目标格式类。其中，目标格式类与自定义注解之间的关联关系是通过自定义注解对N个实现类进行注解得到。如图7所示，终端设备可以通过Javassist编译工具识别携带自定义注解的ctclass文件，并将携带自定义注解的ctclass文件确定为目标格式类。终端设备可以通过Javassist编译工具将自定义注解传入至第二格式类集合中的每个第二格式类关联的服务接口中，根据反射机制将服务接口返回的与自定义注解对应的注解对象的第二格式类确定为目标格式类。具体地，终端设备将自定义注解传入至每个第二格式类关联的服务接口中，每个第二格式类将根据自定义注解遍历注解列表，若注解列表中包含自定义注解，将自定义注解实例化得到与自定义注解对应的注解对象，将注解对象返回至服务接口，终端设备将返回注解对象的第二格式类确定为目标格式类。例如，终端设备将自定义注解传入至支付组件关联的第二格式类关联的服务接口中，根据反射机制接收到自定义注解对应的注解对象，并将支付组件关联的第二格式类确定为目标格式类。将登录组件关联的第二格式类确定为目标格式类的过程与将支付组件关联的第二格式类确定为目标格式类过程类似，在此不多赘述。进一步地，如图7所示，终端设备可以通过Javassist编译工具将目标格式类实例化，得到目标格式类对应的实例对象，将实例对象注册至接口管理服务中的实例对象列表中。具体地，终端设备将支付组件关联的目标格式类实例化，得到支付组件关联的目标格式类对应的实例对象1，终端设备将登录组件关联的目标格式类实例化，得到登录组件关联的目标格式类对应的实例对象2。进一步地，终端设备将支付组件关联的目标格式类对应的实例对象1和登录组件关联的目标格式类对应的实例对象2注册至接口管理服务中的实例对象列表中。在一些可行的实施方式中，当操作对象需要在业务组件中增加第三业务组件时，可以根据自定义注解对第三业务组件关联的实现类进行注解。具体地，终端设备可以获取第三业务组件关联的接口类和实现类，将第三业务组件关联的接口类添加至公共接口组件中的接口声明服务中。终端设备可通过AOP编程将第三业务组件关联的实现类实例化，得到第三业务组件关联的实现类对应的实例对象，将第三业务组件关联的实现类对应的实例对象注册至接口管理服务中的实例对象列表中。此时，终端设备可以通过业务应用调用第三业务组件以实现第三业务组件的业务服务。在本申请实施例中，终端设备将各个业务组件关联的接口类集中在公共接口组件中的接口声明服务中，从而实现对各个业务组件的调用，由于各个业务组件之间不存在依赖关系，可以降低各个业务组件之间的耦合度。同时，根据自定义注解对各个业务组件关联的实现类进行注解的形式，终端设备将各个业务组件关联的实现类对应的实例对象注册至公共接口组件中的接口管理服务中，通过依赖注入的方式实现各个业务组件的接口注册，自动将各个业务组件关联的实现类对应的实例对象注册至接口管理服务中，可以避免技术人员手动完成接口注册，降低了接口的维护成本，提升了开发效率。基于上述数据处理方法的实施例的描述，本申请实施例还公开了一种数据处理装置1。请参见图8，图8是本申请实施例提供的数据处理装置的结构示意图。在本申请实施例中，该装置可运行如下模块：第一获取模块11，用于在运行阶段中，在业务应用中获取第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；N个业务组件包括第一业务组件和第二业务组件；N个业务组件用于为业务应用提供业务服务；公共接口组件用于在N个业务组件之间提供业务组件调用功能；第二获取模块12，用于根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；第二业务组件关联的接口类用于表示第二业务组件的业务服务的内容；第一调用模块13，用于根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类用于实现第二业务组件的业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。其中，上述第一调用模块13包括：第一调用单元131，用于调用接口管理服务中的管理接口，将第二业务组件关联的接口类传入至管理接口中；第一处理单元132，用于通过管理接口遍历接口管理服务中的实例对象列表，根据第二业务组件关联的接口类确定接口类对应的实例对象，通过实例对象从实例对象列表中调用第二业务组件关联的实现类，通过实现类调用第二业务组件的业务服务；实例对象列表包括N个业务组件关联的实现类对应的实例对象。其中，上述装置还包括：第三获取模块14，用于获取N个业务组件以及N个业务组件分别关联的接口类和实现类；第一生成模块15，用于基于N个业务组件关联的接口类生成公共接口组件中的接口声明服务；接口类用于在运行阶段中调用业务组件关联的实现类对应的实例对象；第四获取模块16，用于在打包编译阶段中，通过编译打包工具截获业务应用关联的源代码，获取源代码中包括的第一格式类集合，第一格式类集合包括N个实现类；第一处理模块17，用于通过面向切面工具对第一格式类集合进行处理，得到携带自定义注解的目标格式类，将目标格式类注册至公共接口组件中的接口管理服务中；目标格式类与自定义注解之间的关联关系是通过自定义注解对N个实现类进行注解得到。其中，上述自定义注解包括注解生命周期和注解对象；注解生命周期用于声明自定义注解存在于打包编译阶段；注解对象用于声明对N个业务组件关联的实现类进行注解。其中，上述第一处理模块17包括：第二处理单元171，用于通过面向切面工具将第一格式类集合转换为面向切面工具适用的第二格式类集合；第三处理单元172，用于通过面向切面工具从第二格式类集合中识别携带自定义注解的N个第二格式类，将N个第二格式类确定为目标格式类；第四处理单元173，用于将目标格式类实例化，得到目标格式类对应的实例对象，将实例对象注册至接口管理服务中的实例对象列表中。其中，上述第三处理单元172包括：第一处理子单元1721，用于通过面向切面工具将自定义注解传入至第二格式类集合中的每个第二格式类关联的服务接口中，根据反射机制将服务接口返回的与自定义注解对应的注解对象的第二格式类确定为目标格式类。根据上述图2所对应的实施例，图2所示的数据处理方法中步骤S101至S103所描述的实现方式可由图8所示的装置的各个模块执行。例如，上述图2所示的数据处理方法中步骤S101所描述的实现方式可由图8所示的装置中第一获取模块11来执行，步骤S102所描述的实现方式可由第二获取模块12来执行，步骤S103所描述的实现方式可由第一调用模块13来执行。其中，上述第一获取模块11、第二获取模块12以及第一调用模块13所执行的实现方式可参见上述图2所对应的实施例中各个步骤所提供的实现方式，在此不再赘述。在本申请实施例中，终端设备通过业务应用可以实现任一业务组件之间的互相调用功能，以使业务组件向业务应用提供业务服务。业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件，业务应用中的第一业务组件可以通过公共接口组件中的接口声明服务调用第二业务组件的接口类，根据第二业务组件关联的接口类从公共接口组件包括的接口管理服务中调用第二业务组件关联的实现类对应的实例对象。进一步，可以通过实例对象调用第二业务组件关联的实现类，从而实现第二业务组件的业务服务。其中，通过携带自定义注解的第二业务组件可以将实现类对应的实例对象注册至接口管理服务中。应当理解，通过将N个业务组件关联的接口类集中在公共接口组件包括的接口管理服务中，从而实现对各个业务组件的调用，可以降低各个业务组件之间的耦合度。同时，通过自定义注解将各个业务组件的实现类对应的实例对象注册至公共接口组件包括的接口管理服务中，可以避免技术人员手动完成接口注册，降低了接口的维护成本，提升了开发效率，成本低，适用性强。在本申请实施例中，上述图所示的装置中的各个模块可以分别或全部合并为一个或若干个另外的模块来构成，或者其中的某个模块还可以再拆分为功能上更小的多个模块来构成，这可以实现同样的操作，而不影响本申请实施例的技术效果的实现。上述模块是基于逻辑功能划分的，在实际应用中，一个模块的功能也可以由多个模块来实现，或者多个模块的功能由一个模块实现。在本申请的其它可行的实现方式中，上述装置也可以包括其它模块，在实际应用中，这些功能也可以由其它模块协助实现，并且可以由多个模块协作实现，在此不做限制。请参见图9，图9是本申请实施例提供的计算机设备的结构示意图，该计算机设备可以是终端设备或服务器。该计算机设备1000可以包括：处理器1001，网络接口1004和存储器1005，此外，上述计算机设备1000还可以包括：用户接口1003，和至少一个通信总线1002。其中，通信总线1002用于实现这些组件之间的连接通信。其中，在一些实施例中，用户接口1003可以包括显示屏、键盘，可选用户接口1003还可以包括标准的有线接口、无线接口。可选的，网络接口1004可以包括标准的有线接口、无线接口。存储器1005可以是高速RAM存储器，也可以是非不稳定的存储器，例如至少一个磁盘存储器。可选的，存储器1005还可以是至少一个位于远离前述处理器1001的存储装置。如图9所示，作为一种计算机可读存储介质的存储器1005中可以包括操作系统、网络通信模块、用户接口模块以及设备控制应用程序。在如图9所示的计算机设备1000中，网络接口1004可提供网络通讯功能；而用户接口1003主要用于为用户提供输入的接口；而处理器1001可以用于调用存储器1005中存储的设备控制应用程序，以实现：在运行阶段中，获取业务应用中的第一业务组件针对第二业务组件的调用请求；业务应用包括N个业务组件以及与N个业务组件分别连接的公共接口组件；N个业务组件包括第一业务组件和第二业务组件；N个业务组件用于为业务应用提供业务服务；公共接口组件用于在N个业务组件之间提供业务组件调用功能；根据调用请求从公共接口组件中包括的接口声明服务中获取第二业务组件关联的接口类；第二业务组件关联的接口类用于表示第二业务组件的业务服务的内容；根据第二业务组件关联的接口类，从公共接口组件中包括的接口管理服务中调用与第二业务组件关联的实现类对应的实例对象，通过实例对象调用第二业务组件的实现类实现业务服务；第二业务组件关联的实现类用于实现第二业务组件的业务服务；第二业务组件关联的实现类携带自定义注解，自定义注解用于将实现类对应的实例对象注册至接口管理服务中。应当理解，本申请实施例中所描述的计算机设备1000可执行前文图2、图6所对应实施例中对数据处理方法的描述，也可执行前文图8所对应实施例中对数据处理装置的描述，在此不再赘述。另外，对采用相同方法的有益效果描述，也不再进行赘述。此外，这里需要指出的是：本申请实施例还提供了一种计算机可读存储介质，且计算机可读存储介质中存储有前文提及的数据处理装置所执行的计算机程序，当处理器执行计算机程序时，能够执行前文图2、图6所对应实施例中对数据处理方法的描述，因此，这里将不再进行赘述。另外，对采用相同方法的有益效果描述，也不再进行赘述。对于本申请所涉及的计算机可读存储介质实施例中未披露的技术细节，请参照本申请方法实施例的描述。作为示例，计算机程序可被部署在一个计算机设备上执行，或者在位于一个地点的多个计算机设备上执行，又或者，在分布在多个地点且通过通信网络互连的多个计算机设备上执行，分布在多个地点且通过通信网络互连的多个计算机设备可以组成通信系统。此外，需要说明的是：本申请实施例还提供了一种计算机程序产品，该计算机程序产品可以包括计算机程序，该计算机程序可以存储在计算机可读存储介质中。计算机设备的处理器从计算机可读存储介质读取该计算机程序，处理器可以执行该计算机程序，使得该计算机设备可执行前文图2、图6所对应实施例中对数据处理方法的描述，在此不再赘述。另外，对采用相同方法的有益效果描述，也不再进行赘述。对于本申请所涉及的计算机程序产品实施例中未披露的技术细节，请参照本申请方法实施例的描述。本领域普通技术人员可以理解实现上述实施例方法中的全部或部分流程，是可以通过计算机程序来指令相关的硬件来完成，计算机程序可存储于一计算机可读取存储介质中，该程序在执行时，可包括如上述各方法的实施例的流程。其中，存储介质可为磁碟、光盘、只读存储记忆体或随机存储记忆体等。本申请实施例的说明书和权利要求书及附图中的术语“第一”、“第二”等是用于区别不同对象，而非用于描述特定顺序。此外，术语“包括”以及它们任何变形，意图在于覆盖不排他的包含。例如包含了一系列步骤或单元的过程、方法、装置、产品或设备没有限定于已列出的步骤或模块，而是可选地还包括没有列出的步骤或模块，或可选地还包括对于这些过程、方法、装置、产品或设备固有的其他步骤单元。本领域普通技术人员可以意识到，结合本文中所公开的实施例描述的各示例的单元及算法步骤，能够以电子硬件、计算机软件或者二者的结合来实现，为了清楚地说明硬件和软件的可互换性，在上述说明中已经按照功能一般性地描述了各示例的组成及步骤。这些功能究竟以硬件还是软件方式来执行，取决于技术方案的特定应用和设计约束条件。专业技术人员可以对每个特定的应用来使用不同方法来实现所描述的功能，但是这种实现不应认为超出本申请的范围。本申请实施例提供的方法及相关装置是参照本申请实施例提供的方法流程图和/或结构示意图来描述的，具体可由计算机程序实现方法流程图和/或结构示意图的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。这些计算机程序指令可提供到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或结构示意图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或结构示意图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或结构示意一个方框或多个方框中指定的功能的步骤。以上所揭露的仅为本申请较佳实施例而已，当然不能以此来限定本申请之权利范围，因此依本申请权利要求所作的等同变化，仍属本申请所涵盖的范围。
