标题title
处理MMIO请求的方法、电子装置和存储介质
摘要abst
本申请提供一种处理MMIO请求的方法、电子装置和存储介质。所述方法包括：响应于从虚拟机接收MMIO请求，经由虚拟机驱动设置与所述MMIO请求对应的指示变量为第一值；响应于所述指示变量为第一值，经由第一线程获取与所述MMIO请求有关的事件信息并且存储到事件队列；经由第二线程从所述事件队列读取所述事件信息；以及经由所述第二线程根据所述事件信息处理所述MMIO请求，其中，所述第一线程和所述第二线程与用于运行所述虚拟机的应用关联。
权利要求书clms
1.一种处理MMIO请求的方法，包括：响应于从虚拟机接收MMIO请求，经由虚拟机驱动设置与所述MMIO请求对应的指示变量为第一值；响应于所述指示变量为第一值，经由第一线程获取与所述MMIO请求有关的事件信息并且存储到事件队列；经由第二线程从所述事件队列读取所述事件信息；以及经由所述第二线程根据所述事件信息处理所述MMIO请求，其中，所述第一线程和所述第二线程与用于运行所述虚拟机的应用关联。2.如权利要求1所述的方法，进一步包括：经由所述第一线程获取指示MMIO请求的指示变量的值；以及经由所述第一线程确定所述指示变量的值是否为第一值。3.如权利要求1所述的方法，其中，设置与所述MMIO请求对应的指示变量为第一值进一步包括：确定所述MMIO请求的操作地址是否超出所述虚拟机驱动的地址范围；响应于所述MMIO请求的操作地址超出所述虚拟机驱动的地址范围，设置所述指示变量为所述第一值。4.如权利要求1所述的方法，其中，所述事件信息包括所述MMIO请求的物理首地址、要操作的数据、地址长度或所述MMIO请求是否为写操作的标记的至少一个。5.如权利要求1所述的方法，其中，所述事件队列是先进先出队列。6.如权利要求1所述的方法，其中，所述虚拟机驱动在所述指示变量被设置为第一值后保持运行。7.如权利要求1所述的方法，其中，用于运行所述虚拟机的应用的是QEMU应用。8.一种电子装置，包括存储器，用于存储一组指令；以及至少一个处理器，配置为执行该组指令以使得所述电子装置执行如权利要求1-7的任一项所述的方法。9.一种非暂态计算机可读存储介质，存储计算机的一组指令，该组指令用于在被执行时使得所述计算机执行如权利要求1-7的任一项所述的方法。
说明书desc
技术领域本申请涉及芯片验证技术领域，尤其涉及一种处理MMIO请求的方法、电子装置和存储介质。背景技术硬件仿真工具）可以原型化并且调试一个包括一个或多个模块的逻辑系统设计。所述逻辑系统设计可以是，例如，用于供专门应用的集成电路或者片上系统芯片的设计。因此，在仿真工具中被测试的逻辑系统设计又可以称为待测设计。仿真工具可以通过一个或多个可配置组件）来仿真该待测设计，包括执行该待测设计的各种操作，从而在制造之前就测试并验证待测设计的各个模块的功能。通过在仿真工具上外接多种外设子卡还可以测试待测设计与各种外设作为一个完整系统进行运行的效果。将外设子卡连接到主机的一种方式是使用QEMU来虚拟一个或多个主机，并且这些虚拟主机可以通过内存映射的IO地址来调用外设子卡。例如，芯片设计是一个外设芯片，那么通过QEMU来虚拟主机并与外设芯片协同来测试芯片设计是否正确。发明内容本申请的第一方面提供一种处理MMIO请求的方法。所述方法包括：响应于从虚拟机接收MMIO请求，经由虚拟机驱动设置与所述MMIO请求对应的指示变量为第一值；响应于所述指示变量为第一值，经由第一线程获取与所述MMIO请求有关的事件信息并且存储到事件队列；经由第二线程从所述事件队列读取所述事件信息；以及经由所述第二线程根据所述事件信息处理所述MMIO请求，其中，所述第一线程和所述第二线程与用于运行所述虚拟机的应用关联。本申请的第二方面提供一种电子装置，包括：存储器，用于存储一组指令；以及至少一个处理器，配置为执行所述一组指令以使得所述电子装置执行如第一方面所述的方法。本申请的第三方面提供一种非暂态计算机可读存储介质，所述非暂态计算机可读存储介质存储计算机的一组指令，该组指令用于在被执行时使所述计算机执行如第一方面所述的方法。本申请实施例的方法使得虚拟机驱动将MMIO请求转交给QEMU应用去处理的方式来避免虚拟机驱动退出。这样，即使有大量MMIO请求涌入虚拟机驱动，QEMU应用也可以按照请求进入队列的先后顺序依次处理。而虚拟机驱动由于不处理MMIO请求，也可以继续处理其他请求，不用为了MMIO请求而退出，从而提高了系统整体的运行效率。附图说明为了更清楚地说明本申请或相关技术中的技术方案，下面将对实施例或相关技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本申请的实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1示出了根据本申请实施例的示例性主机的结构示意图。图2示出了根据本申请实施例的仿真系统的示意图。图3示出了根据本申请实施例的一种在驱动和客操作系统之间处理MMIO请求的示意图图4示出了根据本申请实施例的一种用于处理MMIO请求的方法的流程图。具体实施方式为使本申请的目的、技术方案和优点更加清楚明白，以下结合具体实施例，并参照附图，对本申请进一步详细说明。需要说明的是，除非另外定义，本申请使用的技术术语或者科学术语应当为本申请所属领域内具有一般技能的人士所理解的通常意义。本申请中使用的“第一”、“第二”以及类似的词语并不表示任何顺序、数量或者重要性，而只是用来区分不同的组成部分。“包括”等类似的词语意指出现该词前面的元件或者物件涵盖出现在该词后面列举的元件或者物件及其等同，而不排除其他元件或者物件。“连接”等类似的词语并非限定于物理的或者机械的连接，而是可以包括电性的连接，不管是直接的还是间接的。图1示出了根据本申请实施例的主机100的结构示意图。主机100可以是运行仿真系统的电子设备。如图1所示，主机100可以包括：处理器102、存储器104、网络接口106、外围接口108和总线110。其中，处理器102、存储器104、网络接口106和外围接口108通过总线110实现彼此之间在电子设备内部的通信连接。处理器102可以是中央处理器、图像处理器、神经网络处理器、微控制器、可编程逻辑器件、数字信号处理器、应用专用集成电路、或者一个或多个集成电路。处理器102可以用于执行与本申请描述的技术相关的功能。在一些实施例中，处理器102还可以包括集成为单一逻辑组件的多个处理器。如图1所示，处理器102可以包括多个处理器102a、102b和102c。存储器104可以配置为存储数据。在一些实施例中，用于仿真测试设计的仿真测试系统可以是存储器104中存储的计算机程序。如图1所示，存储器存储的数据可以包括程序指令以及要处理的数据。处理器102也可以访问存储器存储的程序指令和数据，并且执行程序指令以对要处理的数据进行操作。存储器104可以包括易失性存储装置或非易失性存储装置。在一些实施例中，存储器104可以包括随机访问存储器、只读存储器、光盘、磁盘、硬盘、固态硬盘、闪存、存储棒等。网络接口106可以配置为经由网络向主机100提供与其他外部设备的通信。该网络可以是能够传输和接收数据的任何有线或无线的网络。例如，该网络可以是有线网络、本地无线网络等）、蜂窝网络、因特网、或上述的组合。可以理解的是，网络的类型不限于上述具体示例。在一些实施例中，网络接口106可以包括任意数量的网络接口控制器、射频模块、接收发器、调制解调器、路由器、网关、适配器、蜂窝网络芯片等的任意组合。外围接口108可以配置为将主机100与一个或多个外围装置连接，以实现信息输入及输出。例如，外围装置可以包括键盘、鼠标、触摸板、触摸屏、麦克风、各类传感器等输入设备以及显示器、扬声器、振动器、指示灯等输出设备。总线110可以被配置为在主机100的各个组件之间传输信息，诸如内部总线、外部总线等。需要说明的是，尽管上述电子设备架构仅示出了处理器102、存储器104、网络接口106、外围接口108和总线110，但是在具体实施过程中，该电子设备架构还可以包括实现正常运行所必需的其他组件。此外，本领域的技术人员可以理解的是，上述电子设备架构中也可以仅包含实现本申请实施例方案所必需的组件，而不必包含图中所示的全部组件。图2示出了根据本申请实施例的仿真系统200的示意图。如图2所示，仿真系统200可以包括仿真工具202以及与仿真工具202连接的主机100。仿真工具202是一种用于仿真待测设计的硬件系统。仿真工具202可以是原型验证板或者硬件仿真器。一个待测设计可以包括多个模块。待测设计可以是组合逻辑电路、时序逻辑电路、或上述两者的组合。仿真工具202可以包括一个或多个可配置电路，用于仿真待测设计。仿真工具202可以包括接口单元2022，用于与主机100通信地耦接，以进行主机100和仿真工具202之间的通信。在一些实施例中，接口单元2022可以包括具有电连接能力的一个或多个接口。例如，接口单元2022可以包括RS232接口、USB接口、LAN口、光纤接口、IEEE1394等。在一些实施例中，接口单元2022可以是无线网络接口。例如，接口单元2022可以是WIFI接口、蓝牙接口等。主机100可以经由接口单元2022向仿真工具202传输编译后的DUT、调试指令等。仿真工具202也可以经由接口单元2022向主机100传输仿真数据等。仿真工具202还可以包括存储器2024，用于存储在仿真过程中待测设计产生的仿真数据。在一些实施例中，仿真过程中待测设计产生的信号值可以直接被主机100读取。可以理解的是，存储器2024也可以独立仿真工具202，例如，使用一种外接存储器。仿真工具202还可以包括FPGA 2026，用于将逻辑系统设计硬件地实现到FPGA上。可以理解的是，仿真工具202可以包括多个FPGA，图中仅为示例。除了连接到主机100，仿真工具202还可以经由接口单元2022连接到一个或多个子卡204。子卡用于在使用仿真工具202进行原型验证时向DUT提供外设以构成完整的电子系统。原型验证是指在芯片流片之前，尽可能的还原芯片真实使用场景，验证芯片功能是否准确和完整的一种验证方式。子卡204可以包括存储器子卡、通信子卡等。主机100可以用于配置仿真工具202以仿真一个待测设计。该待测设计可以是一个完整的逻辑系统设计或一个完整逻辑系统设计的一个或多个模块。在一些实施例中，主机100可以是云计算系统中的一个虚拟主机。逻辑系统设计可以由硬件描述语言设计。主机100可以从用户接收调试待测设计的请求。如上所述，待测设计可以包括一个或多个模块。待测设计的描述可以用硬件描述语言来完成。主机100可以基于待测设计的描述来进行综合，以生成，例如，待测设计的门级电路网表。待测设计的该门级电路网表可以被载入仿真工具202中运行，进而可以在仿真工具202中形成与待测设计相对应的电路结构。因此，待测设计的电路结构可以根据该描述而获得，并且相应地，待测设计中的每个块的电路结构也可以类似地获得。如上所述，主机100可以使用QEMU应用来虚拟一个或多个系统，并且这些虚拟系统可以通过内存映射的IO地址来调用外设子卡。这些虚拟出来的系统也可以称为Guest OS。主机100的操作系统）则经由Kernel based Virtual Machine以及VTx驱动来和该一个或多个客操作系统进行交互。由于主操作系统的设备地址的有限，通常使用内存映射IO技术来扩展设备可以使用的地址。这样，MMIO请求可以直接由主操作系统的驱动来处理。此时，当虚拟的客操作系统试图访问设备时，可能出现该设备的MMIO地址超出了主操作系统的范围，所以KVM的驱动会退出，并由QEMU产生的客操作系统直接处理IO请求，并在完成IO请求处理后重新启动KVM。KVM的退出以及IO请求交由QEMU处理会导致整体性能下降。因此，如何提高MMIO请求的处理速度直接关系到硬件仿真工具的整体性能，是一个亟待解决的技术问题。根据以上技术问题，本申请发明人注意到，在现有的MMIO exit处理方式中，采用了一种显而易见的处理方式，即，客操作系统应用发出对IO的操作指令，但是如果IO操作超出了主操作系统的KVM的范围，那么主操作系统上运行的KVM会退出并且将请求交还给客操作系统直接处理。发明人意识到，如果KVM可以在不退出的情况下就能将IO操作指令及其相关信息传递到客操作系统并且交由客操作系统去处理IO操作指令，那么MMIO造成的KVM退出问题就可以得到解决。基于以上，本申请实施例提出了一种处理MMIO请求的方法、装置和存储介质。图3示出了根据本申请实施例的一种在虚拟机驱动和QEMU应用之间处理MMIO请求的示意图。如上所述，主操作系统的KVM驱动在接收到MMIO请求后会确定该MMIO请求是否超出了自身地址范围。如果超过了地址范围，传统的做法是KVM根据KVM_SET_USER_MEMORY_REGION的设置去尝试解决超出地址范围的问题。如果解决失败，就退出虚拟机驱动，并且将MMIO请求交还给客操作系统去处理。而在本申请的一些实施例中，虚拟机驱动310接收到MMIO请求302后可以首先按照传统做法判断该MMIO请求302是否超出了地址范围。如果在步骤312，虚拟机驱动310判断该MMIO请求302超出了地址范围，则将一个指示变量304设置为第一值。可以理解的是，指示变量的值可以根据用户设计来设置，而不限于1。虚拟机驱动310可以是VTx驱动。在另一些实施例中，虚拟机驱动310不再判断该MMIO请求302是否超出了地址范围，而是直接响应于接收到MMIO请求302就将指示变量304设置为第一值。这样，虚拟机驱动310在事实上不再处理MMIO请求302。在QEMU应用320中，运行两个进程322和326。进程322持续地检查指示变量304。当进程322确定指示变量304为第一值时，进程322从虚拟机驱动310获取与MMIO请求302有关的信息，并且在QEMU应用320内的事件队列324中保存为事件信息3242。事件队列324可以是一个先进先出队列。可以理解的是，进程322在获取指示变量304的值之后，可以将指示变量304设置为第二值。可以理解的是，上述QEMU引用320仅为示例，也可以是其他类型的用于生成虚拟设备的应用。事件信息3242可以是一种结构体。以下给出结构体的示例性代码struct {_u64 phys_addr;_u8 data;_u32 len;_u8 is_write;} mmio;如上所示，事件信息3242可以包括MMIO请求302的物理首地址、要操作的数据、请求操作的地址长度以及该请求是否为写操作的标记。可以理解的是，虽然虚拟机驱动310无法处理MMIO请求302的物理地址，但是QEMU应用320产生的客操作系统是可以处理的。进程326持续地检查事件队列324。如果事件队列324不为空，则进程326从事件队列324获取事件信息并且相应处理与事件信息对应的MMIO请求。本申请实施例的方法使得虚拟机驱动将MMIO请求转交给QEMU应用去处理的方式来避免虚拟机驱动退出。这样，即使有大量MMIO请求涌入，QEMU应用320也可以按照请求进入队列324的先后顺序依次处理。而虚拟机驱动310由于不处理MMIO请求，也可以继续处理其他请求，不用为了MMIO请求而退出，从而提高了系统整体的运行效率。本申请实施例还提供了一种用于处理MMIO请求的方法。图4示出了根据本申请实施例的一种用于处理MMIO请求的方法400的流程图，其中，方法400可以由如图1所示的主机100执行。方法400可以包括如下步骤。在步骤402，响应于从虚拟机接收MMIO请求，经由虚拟机驱动设置与所述MMIO请求对应的指示变量为第一值。在一些实施例中，设置与所述MMIO请求对应的指示变量为第一值进一步包括：确定所述MMIO请求的操作地址是否超出所述虚拟机驱动的地址范围；响应于所述MMIO请求的操作地址超出所述虚拟机驱动的地址范围，设置所述指示变量为所述第一值。所述虚拟机驱动在所述指示变量被设置为第一值后保持运行。这样，虚拟机驱动在接收到MMIO请求之后就不会退出，也不会影响系统的运行效率。在步骤404，响应于所述指示变量为第一值，经由第一线程获取与所述MMIO请求有关的事件信息并且存储到事件队列。所述事件信息包括所述MMIO请求的物理首地址、要操作的数据、地址长度或所述MMIO请求是否为写操作的标记的至少一个。所述事件队列是先进先出队列。在一些实施例中，经由所述第一线程获取指示MMIO请求的指示变量的值；并且经由所述第一线程确定所述指示变量的值是否为第一值。在步骤406，经由第二线程从所述事件队列读取所述事件信息。在步骤408，经由所述第二线程根据所述事件信息处理所述MMIO请求，其中，所述第一线程和所述第二线程与用于运行所述虚拟机的应用关联。也就是说，用于运行所述虚拟机的应用的是QEMU应用。本申请实施例还提供一种电子装置。该电子装置可以是图1的主机100。该主机100可以包括存储器，用于存储一组指令；以及至少一个处理器，配置为执行该组指令以使得所述电子装置执行方法400。本申请实施例还提供一种非暂态计算机可读存储介质。该非暂态计算机可读存储介质存储计算机的一组指令，该组指令用于在被执行时使该计算机执行方法400。上述对本申请的一些实施例进行了描述。其他实施例在所附权利要求书的范围内。在一些情况下，在权利要求书中记载的动作或步骤可以按照不同于实施例中的顺序来执行并且仍然可以实现期望的结果。另外，在附图中描绘的过程不一定要求示出的特定顺序或者连续顺序才能实现期望的结果。 在某些实施方式中，多任务处理和并行处理也是可以的或者可能是有利的。所属领域的普通技术人员应当理解：以上任何实施例的讨论仅为示例性的，并非旨在暗示本申请的范围被限于这些例子；在本申请的思路下，以上实施例或者不同实施例中的技术特征之间也可以进行组合，步骤可以以任意顺序实现，并存在如上所述的本申请的不同方面的许多其它变化，为了简明它们没有在细节中提供。尽管已经结合了本申请的具体实施例对本申请进行了描述，但是根据前面的描述，这些实施例的很多替换、修改和变型对本领域普通技术人员来说将是显而易见的。例如，其它存储器架构）可以使用所讨论的实施例。本申请旨在涵盖落入所附权利要求的宽泛范围之内的所有这样的替换、修改和变型。因此，凡在本申请的精神和原则之内，所做的任何省略、修改、等同替换、改进等，均应包含在本申请的保护范围之内。
