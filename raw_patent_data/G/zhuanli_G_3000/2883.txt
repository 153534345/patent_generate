标题title
一种跨运行环境的视频播放优化方法
摘要abst
本发明公开了一种跨运行环境的视频播放优化方法，根据主机端是否具有直接渲染功能来确定主机端与兼容运行环境之间共享缓冲区的构建方式，兼容运行环境基于建立的共享缓冲区实现与主机端之间的视频帧传输，再由主机端完成对视频帧的解码及渲染操作，从而减少了现有兼容运行环境中视频播放类应用程序采用CPU完成视频帧解码、将纹理转化为图层及向主机端传递图层的处理环节，有效提高了视频播放类应用程序移植后的执行效率。
权利要求书clms
1.一种跨运行环境的视频播放优化方法，其特征在于，包括以下步骤：步骤1、兼容运行环境中应用程序创建播放器视图时，记录播放器视图的原属性包括应用程序的TaskID、视图大小、显示位置及透明度；向主机端发送包含原属性的创建视频播放窗口消息，并禁用播放器视图的刷新操作；步骤2、主机端接收到创建视频播放窗口消息后，若主机端具有直接渲染功能则在显存中创建渲染缓冲区，并设置兼容运行环境内的编解码进程具有渲染缓冲区的写权限，为渲染缓冲区创建跨进程的文件句柄，再向兼容运行环境发送渲染缓冲区句柄消息，同时在TaskID对应的应用窗口内根据渲染缓冲区及原属性创建第一视频播放窗口，执行步骤4；否则，向兼容运行环境发送构建渲染缓冲区消息，执行步骤3；步骤3、兼容运行环境接收到构建渲染缓冲区消息后，创建跨进程的共享缓冲区，向主机端发送包含共享缓冲区句柄的共享缓冲区句柄消息；主机端接收到共享缓冲区句柄消息后，在TaskID对应的应用窗口内根据共享缓冲区句柄及原属性创建第二视频播放窗口；兼容运行环境将共享缓冲区句柄作为渲染缓冲区句柄执行步骤5；步骤4、兼容运行环境接收到渲染缓冲区句柄消息后，对渲染缓冲区句柄指向的缓冲区执行加锁操作，应用程序将一帧视频帧读取到缓冲区，同时向主机端发送解码渲染消息，兼容运行环境对渲染缓冲区句柄指向的缓冲区执行解锁操作；主机端接收到解码渲染消息后，对渲染缓冲区句柄指向的缓冲区执行加锁操作，将缓冲区中的视频帧硬解码为解码结果，对缓冲区执行解锁操作，采用直接渲染接口通知显示器将解码结果刷新到第一视频播放窗口的可见范围中；若应用程序未将当前视频流读取完毕则执行步骤4，否则结束本流程；步骤5、兼容运行环境将一帧视频帧读取到渲染缓冲区句柄指向的缓冲区，同时向主机端发送解码渲染消息；主机端接收到解码渲染消息后，将缓冲区中的视频帧硬解码为解码结果，采用窗口编程接口将解码结果复制到显存后再渲染到第二视频播放窗口；若应用程序未将当前视频流读取完毕则执行步骤5，否则结束本流程。2.根据权利要求1所述的视频播放优化方法，其特征在于，所述步骤1还包括：获取待播放视频的类型，若待播放视频的类型为视频文件则将包含视频文件全路径的播放视频文件消息发送至主机端。3.根据权利要求2所述的视频播放优化方法，其特征在于，所述步骤2还包括：主机端接收到播放视频文件消息后，逐帧完成对视频文件执行解码和渲染操作，结束本流程。4.根据权利要求1所述的视频播放优化方法，其特征在于，所述步骤2中所述渲染缓冲区为能够容纳当前物理显示器大小的解码后视频帧。5.根据权利要求1所述的视频播放优化方法，其特征在于，所述步骤3中所述共享缓冲区为能够容纳当前物理显示器大小的解码后视频帧。6.根据权利要求1所述的视频播放优化方法，其特征在于，所述步骤1中所述向主机端发送包含原属性的创建视频播放窗口消息后还包括：将播放器视图设置为全透明。7.根据权利要求1所述的视频播放优化方法，其特征在于，所述视频播放优化方法还包括：当所述播放器视图的位置或大小发生变化时，兼容运行环境向主机端发送播放器视图改变消息，播放器视图改变消息包含播放器视图改变后的参数值；主机端接收到播放器视图改变消息后，若主机端具有直接渲染功能则根据播放器视图改变消息中的参数值设置第一视频播放窗口的可见范围，并采用直接渲染接口通知显示器刷新可见范围；否则不执行其它操作。
说明书desc
技术领域本发明属于计算机应用开发技术领域，具体涉及一种跨运行环境的视频播放优化方法。背景技术随着各类计算平台的不断发展，跨运行环境使用应用程序的需求也在逐渐增多。一般情况下，通过构建兼容运行环境即可实现应用程序的跨运行环境移植，具体来说，将应用程序运行在兼容运行环境中，再将兼容运行环境部署运行到主机端，从而实现应用程序到主机端的移植。对于视频播放类的应用程序来说，在现有兼容运行环境内播放视频的基本流程是：首先在兼容运行环境中读取视频帧并采用CPU完成视频帧解码，例如调用兼容运行环境的软解码引擎完成解码；然后将视频帧解码结果转换为纹理，再将纹理转化为图层，其中视频帧解码结果一般为位图格式；再将图层传递至主机端，由主机端在其窗口内完成该图层的渲染。然而，对于直接运行在主机端的视频播放类应用程序，其播放视频的过程为：读取视频帧，解码视频帧，最后将解码结果渲染到窗口。对于具有直接渲染功能的系统，可以直接将解码结果保存在窗口对应的显存中的渲染缓冲区中即可完成渲染，省去了将解码结果渲染到窗口的过程，例如， Linux内核中的子系统DRM，用户使用DRM提供的管理GPU和Display模块的标准API即可实现直接将解码结果保存至显存完成渲染功能，换句话说，解码结果存到显存中相当于可以直接上屏。通过上述分析可见，视频播放类应用程序在兼容运行环境内播放视频的过程，相较于直接在主机端播放视频的过程来说至少增加了采用CPU完成视频帧解码、将纹理转化为图层及向主机端传递图层等处理环节，增加的这些处理环节很大程度地降低了视频播放类应用程序移植后的执行效率。发明内容有鉴于此，本发明提供了一种跨运行环境的视频播放优化方法，实现了视频播放类应用程序跨运行环境的高效执行。本发明提供的一种跨运行环境的视频播放优化方法，包括以下步骤：步骤1、兼容运行环境中应用程序创建播放器视图时，记录播放器视图的原属性包括应用程序的TaskID、视图大小、显示位置及透明度；向主机端发送包含原属性的创建视频播放窗口消息，并禁用播放器视图的刷新操作；步骤2、主机端接收到创建视频播放窗口消息后，若主机端具有直接渲染功能则在显存中创建渲染缓冲区，并设置兼容运行环境内的编解码进程具有渲染缓冲区的写权限，为渲染缓冲区创建跨进程的文件句柄，再向兼容运行环境发送渲染缓冲区句柄消息，同时在TaskID对应的应用窗口内根据渲染缓冲区及原属性创建第一视频播放窗口，执行步骤4；否则，向兼容运行环境发送构建渲染缓冲区消息，执行步骤3；步骤3、兼容运行环境接收到构建渲染缓冲区消息后，创建跨进程的共享缓冲区，向主机端发送包含共享缓冲区句柄的共享缓冲区句柄消息；主机端接收到共享缓冲区句柄消息后，在TaskID对应的应用窗口内根据共享缓冲区句柄及原属性创建第二视频播放窗口；兼容运行环境将共享缓冲区句柄作为渲染缓冲区句柄执行步骤5；步骤4、兼容运行环境接收到渲染缓冲区句柄消息后，对渲染缓冲区句柄指向的缓冲区执行加锁操作，应用程序将一帧视频帧读取到缓冲区，同时向主机端发送解码渲染消息，兼容运行环境对渲染缓冲区句柄指向的缓冲区执行解锁操作；主机端接收到解码渲染消息后，对渲染缓冲区句柄指向的缓冲区执行加锁操作，将缓冲区中的视频帧硬解码为解码结果，对缓冲区执行解锁操作，采用直接渲染接口通知显示器将解码结果刷新到第一视频播放窗口的可见范围中；若应用程序未将当前视频流读取完毕则执行步骤4，否则结束本流程；步骤5、兼容运行环境将一帧视频帧读取到渲染缓冲区句柄指向的缓冲区，同时向主机端发送解码渲染消息；主机端接收到解码渲染消息后，将缓冲区中的视频帧硬解码为解码结果，采用窗口编程接口将解码结果复制到显存后再渲染到第二视频播放窗口；若应用程序未将当前视频流读取完毕则执行步骤5，否则结束本流程。进一步地，所述步骤1还包括：获取待播放视频的类型，若待播放视频的类型为视频文件则将包含视频文件全路径的播放视频文件消息发送至主机端。进一步地，所述步骤2还包括：主机端接收到播放视频文件消息后，逐帧完成对视频文件执行解码和渲染操作，结束本流程。进一步地，所述步骤2中所述渲染缓冲区为能够容纳当前物理显示器大小的解码后视频帧。进一步地，所述步骤3中所述共享缓冲区为能够容纳当前物理显示器大小的解码后视频帧。进一步地，所述步骤1中所述向主机端发送包含原属性的创建视频播放窗口消息后还包括：将播放器视图设置为全透明。进一步地，所述视频播放优化方法还包括：当所述播放器视图的位置或大小发生变化时，兼容运行环境向主机端发送播放器视图改变消息，播放器视图改变消息包含播放器视图改变后的参数值；主机端接收到播放器视图改变消息后，若主机端具有直接渲染功能则根据播放器视图改变消息中的参数值设置第一视频播放窗口的可见范围，并采用直接渲染接口通知显示器刷新可见范围；否则不执行其它操作。有益效果本发明根据主机端是否具有直接渲染功能来确定主机端与兼容运行环境之间共享缓冲区的构建方式，兼容运行环境基于建立的共享缓冲区实现与主机端之间的视频帧传输，再由主机端完成对视频帧的解码及渲染操作，从而减少了现有兼容运行环境中视频播放类应用程序采用CPU完成视频帧解码、将纹理转化为图层及向主机端传递图层的处理环节，有效提高了视频播放类应用程序移植后的执行效率。具体实施方式下面列举实施例，对本发明进行详细描述。本发明提供了一种跨运行环境的视频播放优化方法，其核心思想是：当应用程序在兼容运行环境内创建播放器视图时，兼容运行环境通知主机端创建视频播放窗口；再根据主机端是否具有直接渲染功能，来确定兼容运行环境与主机端的共享缓冲区的创建方式；兼容运行环境将视频帧保存到共享缓冲区中，再由主机端完成共享缓冲区中视频帧的解码及渲染操作。本发明提供的一种跨运行环境的视频播放优化方法，具体包括以下步骤：步骤1、兼容运行环境中应用程序在创建播放器视图时，记录播放器视图的原属性，该原属性包括应用程序的TaskID、视图大小、显示位置及透明度等；获取待播放视频的类型，若类型为视频文件则将包含视频文件全路径的播放视频文件消息发送至主机端，若类型为网络视频流则向主机端发送包含原属性的创建视频播放窗口消息；再将播放器视图设置为全透明，并禁用播放器视图的刷新操作。步骤2、主机端接收到创建视频播放窗口消息后，判断其是否具有直接渲染功能，若具有则在显存中创建渲染缓冲区，将渲染缓冲区设置为能够容纳当前物理显示器大小的解码后视频帧，并设置兼容运行环境内的编解码进程具有渲染缓冲区的写权限，为渲染缓冲区创建跨进程的文件句柄，再向兼容运行环境发送渲染缓冲区句柄消息，同时在TaskID对应的应用窗口内根据渲染缓冲区及原属性创建第一视频播放窗口，执行步骤4；否则，向兼容运行环境发送构建渲染缓冲区消息，执行步骤3。主机端接收到播放视频文件消息后，逐帧完成对视频文件执行解码和渲染操作，结束本流程。其中，第一视频播放窗口为主机端直接渲染子视图，该子视图的大小为当前物理显示器的大小、透明度为原属性中的透明度，子视图中的可见范围根据原属性中的视图大小和显示位置来设置。步骤3、兼容运行环境接收到构建渲染缓冲区消息后，创建跨进程的共享缓冲区，并将该共享缓冲区设置为能够容纳当前物理显示器大小的解码后视频帧，向主机端发送包含共享缓冲区句柄的共享缓冲区句柄消息；主机端接收到共享缓冲区句柄消息后，在TaskID对应的应用窗口内根据共享缓冲区句柄及原属性创建第二视频播放窗口；兼容运行环境将共享缓冲区句柄作为渲染缓冲区句柄执行步骤5。第二视频播放窗口为根据原属性中的视图大小、显示位置和透明度创建的主机端子视图。步骤4、兼容运行环境接收到渲染缓冲区句柄消息后，获取渲染缓冲区句柄消息中的渲染缓冲区句柄；兼容运行环境对渲染缓冲区句柄指向的缓冲区执行加锁操作，应用程序将一帧视频帧读取到缓冲区，同时向主机端发送解码渲染消息，兼容运行环境对渲染缓冲区句柄指向的缓冲区执行解锁操作；与此同时，主机端接收到解码渲染消息后，对渲染缓冲区句柄指向的缓冲区执行加锁操作，然后将缓冲区中的视频帧硬解码为解码结果，最后对缓冲区执行解锁操作；再采用直接渲染接口通知显示器将解码结果刷新到第一视频播放窗口的可见范围中；若应用程序未将当前视频流读取完毕则执行步骤4，否则结束本流程。本发明中，对于显存中建立的渲染缓冲区需要为显存加全局锁，以使其它进程无法访问渲染缓冲区。步骤5、兼容运行环境将一帧视频帧读取到渲染缓冲区句柄指向的缓冲区，同时向主机端发送解码渲染消息；与此同时，主机端接收到解码渲染消息后，将缓冲区中的视频帧硬解码为解码结果，再采用窗口编程接口将解码结果复制到显存后再渲染到第二视频播放窗口；若应用程序未将当前视频流读取完毕则执行步骤5，否则结束本流程。现有兼容运行环境中编解码的多缓冲机制是指创建多个缓冲区，每个缓冲区由一个线程处理，这多个线程以并发或交替的方式执行视频帧的读取、解码及通知视图渲染等操作。本发明通过修改现有兼容运行环境的编解码方法，实现了不执行现有标准的创建两个缓冲区的操作，而是直接使用渲染缓冲区句柄指向的缓冲区，同时在将视频帧读入缓冲区后也不再执行标准的解码及通知视图渲染等操作。进一步地，当兼容运行环境监测到应用程序创建的播放器视图的位置或大小发生变化时，兼容运行环境向主机端发送播放器视图改变消息，播放器视图改变消息包含播放器视图改变后的参数值。主机端接收到播放器视图改变消息后，若主机端具有直接渲染功能则根据播放器视图改变消息中的参数值设置第一视频播放窗口的可见范围，并采用直接渲染接口通知显示器刷新可见范围；否则不执行其它操作。实施例本实施例中采用本发明提供的一种跨运行环境的视频播放优化方法，在兼容运行环境为安卓端、主机端为Linux端的环境中基于xDroid实现了对安卓端应用程序视频播放过程的优化，具体包括以下步骤：S1、在安卓端创建播放器视图时，例如播放器视图为SurfaceView，通过RPC机制通知Host端创建对应的Host端视频播放窗口，该Host端视频播放窗口用于实际显示视频内容，具体步骤如下：S1.1、修改SurfaceView的构造函数，保存相关属性，如应用程序播放器视图的TaskID、视图大小、显示位置及透明度等。S1.2、将上述属性通过RPC传递至Host端的xDroidUI。xDroidUI将会基于此消息创建对应的Host端的视频播放窗口，实际为子窗口或子视图。S1.3、将当前正在创建的SurfaceView设置为全透明。由于视频实际由Host端的视频子视图显示，因此当前创建的SurfaceView实际是没必要显示的，并且若该SurfaceView具有一定的透明度则显示在其上面的Host端的视频子视图也会具有相同的透明度，这样SurfaceView也会显示出来进而导致窗口显示混乱。S1.4、修改SurfaceView的刷新函数，如onDraw，禁用其刷新操作。S2、xDroidUI根据Host端的图形系统特性，即是否支持直接渲染，来创建相应的安卓端与Host端的共享缓冲区，具体过程为：S2.1、如果Host端支持直接渲染，例如Linux的DRM，则：由xDroidUI通过图形系统接口，如Linux的libdrm，在显存中直接创建一个渲染缓冲区，该渲染缓冲区能够容纳当前物理显示器大小的解码后的视频帧；获取安卓端的MediaCodec进程Id，记为mediaCodecProcessId，通过内核接口修改该渲染缓冲区的读写权限，使进程mediaCodecProcessId可写该渲染缓冲区；为该渲染缓冲区创建一个跨进程的文件句柄，记为sharedBuffferHandle，并将该文件句柄传递至安卓端。S2.2、如果Host端不支持直接渲染，则：利用ashmem接口在安卓端创建一个跨进程的共享缓冲区，该共享缓冲区能够容纳当前物理显示器大小的解码后的视频帧，并将该共享缓冲区的句柄sharedBuffferHandle传递至Host端使用。S3、xDroidUI找到TaskID对应的安卓应用窗口，根据安卓端发送的属性创建视频子窗口或子视图，具体为：S3.1、如果Host端支持直接渲染，则：基于sharedBuffferHandle创建直接渲染子视图hostVideoView，该子视图实际大小为完整显示器的大小；根据属性中的视图大小和显示位置设置hostVideoView的可见范围，该可见范围为矩形；根据属性中的透明度设置hostVideoView的透明度。S3.2、如果Host端不支持直接渲染，则根据视图大小、显示位置及透明度创建Host端的子窗口或子视图，记为hostVideoView，hostVideoView用来显示视频内容。S4、在安卓端修改MediaCodec，将读取的一帧视频帧数据保存在sharedBuffferHandle指向的缓冲区，并通知Host端解码。修改MediaCodec的多缓冲实现，具体修改如下：S4.1、不执行标准的两个缓冲区创建操作，而是直接使用共享缓冲区，即由句柄sharedBuffferHandle指向的共享缓冲区；S4.2、循环读取一帧视频帧，执行：给缓冲区添加全局锁并锁定，全局锁记为videoBufferLock，以防止其他进程访问该缓冲区；读取一帧视频帧到sharedBuffferHandle指向的缓冲区，同时通过一个内核信号量通知xDroidUI执行解码和渲染；内核信号量相较于RPC消息来说具有更高的效率；给全局锁videoBufferLock解锁；不执行MediaCodec后面标准的解码和通知SurfaceView渲染帧的操作。S5、在Host端xDroidUI接到安卓端通知后，使用Host端的FFmpeg硬解码一帧数据，并渲染到Host端的对应窗口，具体包括：S5.1、给全局锁videoBufferLock加锁；S5.2、用Host端的FFmpeg硬解码一帧数据；S5.3、给全局锁videoBufferLock解锁；S5.4、如果Host端支持直接渲染，则根据当前视频子视图的大小和显示位置，将子视图的可见范围设置为对应矩形，并使用直接渲染接口直接通知显示器刷新对应矩形，不需要复制解码结果到显存，因为解码结果已经保存在显存中了。S5.5、如果Host端不支持直接渲染，则使用窗口编程接口更新视频子视图，此时实际会导致视频帧解码结果从sharedBuffferHandle复制到显存。S6、在安卓端检测视频播放视图的位置移动和大小改变，通过RPC通知Host端同步到Host端窗口的位置和大小，具体步骤如下：S6.1、修改SurfaceView的位置移动和大小改变的事件函数，当位置和大小改变时，将相关变化参数通过RPC通知给xDroidUI；S6.2、Host端在收到位置变化和大小改变事件后：如果Host端支持直接渲染，则根据当前视频子视图的新位置和新大小，将子视图的可见范围设置为对应位置的矩形，并使用直接渲染接口直接通知显示器刷新对应矩形；否则，不需要执行操作。综上所述，以上仅为本发明的较佳实施例而已，并非用于限定本发明的保护范围。凡在本发明的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本发明的保护范围之内。
