标题title
一种基于仿真平台的多层级、多模式软件故障注入方法
摘要abst
本发明涉及一种基于仿真平台的多层级、多模式软件故障注入方法，属于嵌入式软件测试领域。本发明通过修改仿真平台来达到故障注入的效果，仿真平台具有可控性强的特点，故障注入灵活、精度高。该方法首先采用虚拟化技术实现仿真平台构建，包括处理器、外设、总线等模型；其次，构建故障注入案例库，包括处理器平台级、接口设备级、通信协议级等层级，统一进行故障案例设计和管理；然后，配置故障注入参数，执行故障注入，包括基于时间、基于PC、基于地址等注入方式；最后，采集故障案例注入后的执行信息，生成代码覆盖率报告。本发明提高嵌入式软件测试充分性，保障软件质量和可靠性。
权利要求书clms
1.一种基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，该方法包括如下步骤：第一步构建嵌入式软件仿真平台采用虚拟化技术构建仿真平台，实现处理器平台仿真模型、接口设备仿真模型、通信协议仿真模型，按照硬件运行环境组成关系描述仿真模型间的关联，运行被测嵌入式软件；第二步创建典型故障案例库按照故障属性、故障分布建立故障模型，对故障模型进行统一管理形成故障案例库；其中，故障属性包括：故障类型、注入位置，故障分布标识故障模型发生的条件，依赖于故障属性；第三步编辑故障执行脚本根据需求从故障案例库中检索故障案例，编辑故障模型信息并配置故障脚本参数，生成故障执行脚本；第四步执行多层级、多模式故障注入按照生成的故障执行脚本执行故障注入，按照故障案例注入位置执行不同层级的故障注入，包括处理器故障注入、接口设备故障注入、通信协议故障注入；按照不同的触发方式执行不同模式的故障注入，包括基于时间的故障注入、基于PC的故障注入、基于地址的故障注入；第五步采集故障数据信息基于仿真平台监控目标程序运行过程，标记故障执行情况，收集目标程序运行的状态数据，包括：处理器上下文信息、寄存器信息、内存信息、程序轨迹、异常记录和故障参数；第六步结果分析与展示对收集的故障信息进行分析和展示，包括：故障触发、执行、结束各阶段信息分析，判断故障案例的有效性，对被测软件的容错机制、程序覆盖率进行分析，通过自定义模板生成报告结果。2.如权利要求1所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第一步中实现处理器平台仿真模型、接口设备仿真模型、通信协议仿真模型具体包括：模拟处理器平台，根据处理器指令手册完成处理器架构仿真，按照取指、译码、执行阶段设计实现指令集功能模拟架构，进行片上设备、寄存器、内存空间模拟，生成处理器平台仿真模型；模拟接口设备，根据设备使用手册完成接口设备功能仿真，包括接口设备的输入接口、输出接口、寄存器功能，生成接口设备仿真模型；模拟通信协议，对应用层通信协议进行建模，生成通信协议仿真模型，包括：数据帧、命令帧，模拟字节、整型、半整型、长整型、数据位类型，按照通信协议组装形成帧头、帧数据、帧尾。3.如权利要求2所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第二步具体包括：S21、故障模型描述：根据测试需求进行故障模型描述，包括故障属性和故障分布；故障属性包括故障类型、故障发生位置信息；故障分布标识故障模型发生的条件；S22、故障模型存储：采用JSON数据格式对故障模型信息进行结构化存储，故障库＝{故障模型1，故障模型2，故障模型3}，故障模型＝{故障属性，故障分布}，故障属性＝{故障类型，故障发生位置}，故障分布＝{均匀分布，指数分布，正态分布}，故障类型＝{瞬时性故障，间歇性故障，永久性故障}，故障发生位置＝{处理器，接口设备，通信协议}；S23、故障模型管理：对故障库中的故障模型进行管理，提取故障模型的关键字，通过关键字进行故障模型的检索，获取指定故障模型，进行故障模型的分类展示。4.如权利要求3所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第三步中，故障模型信息包括：故障类型属性、故障位置属性、持续时间属性、触发方式属性和仿真平台属性；其中，故障类型属性包括软件故障、硬件故障、通信故障；故障位置属性包括软件、运行环境、处理器、接口设备、通信协议；持续时间属性包括永久性、瞬时性、间歇性；触发方式属性包括基于时间、基于PC、基于地址；仿真平台属性包括处理器参数、外设参数、协议参数。5.如权利要求3所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第三步具体包括：S31、根据关键字检索故障案例库，匹配故障案例并读取故障模型基本信息；S32、编辑故障模型关键信息，包括：故障注入时间T、故障注入位置P、故障注入模式M；S33、配置故障执行脚本，执行脚本＝{故障个数N，故障案例ID{ID1，ID2，…}，故障注入时刻T{T1，T2，…}，故障注入位置P{P1，P2，…}，故障注入模式M{M1，M2，…}}。6.如权利要求5所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第四步具体包括：S41、仿真平台初始化，将仿真平台的处理器、接口设备、通信协议状态初始化为正常状态；S42、解析故障执行脚本，匹配故障案例库，按照ID检索故障案例；S43、获取故障案例的注入位置P，匹配故障注入层级，包括处理器、寄存器和协议；S44、获取故障案例的注入模式M，匹配故障注入模式，包括：基于时间、基于地址和基于PC；S45、运行脚本，执行多模式、多层级故障注入；S46、判断故障注入是否完成，已完成执行步骤S47，未完成执行步骤S42；S47、故障注入结束。7.如权利要求6所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第五步具体包括：S51、按照ID检索故障案例，启动仿真平台监控服务；S52、获取故障注入模式M，根据基于时间、基于PC、基于地址模式匹配对应的监控算法；S53、监控仿真平台故障位置P，判断故障注入模式的触发条件是否满足，采集触发后位置P处的故障状态信息；S54、监控目标程序进程，收集进程状态信息；S55、将状态信息以日志文件的方式进行输出。8.如权利要求7所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，故障注入模式包括：基于时间的故障注入：分为立即触发和应用程序运行指定时间后触发两种，采用这种方式，用户对目标系统任何未受保护的地方注入各种故障；基于PC的故障注入：当目标系统执行某些特殊指令或分支时就触发故障注入进程，通过这种方式，用户改变目标系统的运行路径，从而检验目标系统容错机制的有效性；基于地址的故障注入：向某一存储单元进行读写操作时、向某些特定地址单元进行数据操作时触发故障；启动仿真平台后监控目标系统程序是否正在运行，如果目标程序没有运行则退出系统，如果目标程序正在运行则记录当前目标程序的指令步数和仿真系统的状态信息；然后轮询目标系统当前是否已注入故障，如果已注入故障则继续执行目标程序，通过监控和信息采集模块获取目标系统状态信息，最后通过分析模块进行故障分析和系统评估；如果未注入故障，目标程序单步运行，然后根据用户配置选择不同的故障模式，触发条件满足时对相应的故障模型执行故障注入操作并标记已注入的故障。9.如权利要求7所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述第六步具体包括：S61、查看故障注入后程序运行状态并记录故障结果；S62、根据运行结果分析故障案例对系统的影响，指导容错设计。10.如权利要求9所述的基于仿真平台的多层级、多模式软件故障注入方法，其特征在于，所述S61中结果如下：程序正常执行，故障注入对程序结果无影响；程序运行结束，程序结果不正确；程序跑飞，陷入死循环；运行非法指令，导致处理器仿真内核停止工作；访问非法地址空间，导致仿真平台崩溃。
说明书desc
技术领域本发明属于嵌入式软件测试领域，具体涉及一种基于仿真平台的多层级、多模式软件故障注入方法。背景技术随着嵌入式系统在航空、航天等关键领域中的广泛应用，嵌入式软件规模日趋庞大，对可靠性和稳定性的要求日益提高，软件质量问题成为不可忽视的问题。嵌入式软件与通用软件相比，由于其运行环境具有其特殊性和专用性，难以获取和定位硬件错误、故障复现困难、异常边界覆盖不全，缺乏有效的质量评估手段。在实际工程应用中，由于担心硬件损坏，很难对真实的目标系统进行故障注入，为保障嵌入式软件测试验证的充分性，通常采用半实物和实物搭建动态测试环境，通过插装等方式实现接口外部数据的故障模拟，但是难以模拟底硬件系统处理器和设备层面的故障，测试充分性需要进一步提高。随着目标系统结构复杂性不断提高，基于硬件实现的故障注入方法局限性逐渐暴露，基于真实目标机构建的动态测试环境存在成本高、周期长、故障不可逆等问题，故障模拟困难、异常边界无法覆盖，导致软件质量和可靠性无法得到有效保障。为降低嵌入式软件开发测试成本、提高测试充分性，本发明提供一种基于仿真平台的多层级、多模式软件故障注入方法。基于虚拟化技术对处理器、外设等模块进行功能模拟构建仿真平台，实现设备接口级、处理器你平台级、通信协议级的多层级故障注入，实现异常边界情况覆盖，通过监控软件运行状态采集故障信息，保障嵌入式软件质量和可靠性。发明内容要解决的技术问题本发明要解决的技术问题是如何提供一种基于仿真平台的多层级、多模式软件故障注入方法，以解决当前嵌入式软件测试过程中故障注入手段不足、故障信息采集困难、测试验证不充分，导致关键软件质量无法得到有效保障的问题。技术方案为了解决上述技术问题，本发明提出一种基于仿真平台的多层级、多模式软件故障注入方法，该方法包括如下步骤：第一步构建嵌入式软件仿真平台采用虚拟化技术构建仿真平台，实现处理器平台仿真模型、接口设备仿真模型、通信协议仿真模型，按照硬件运行环境组成关系描述仿真模型间的关联，运行被测嵌入式软件；第二步创建典型故障案例库按照故障属性、故障分布建立故障模型，对故障模型进行统一管理形成故障案例库；其中，故障属性包括：故障类型、注入位置，故障分布标识故障模型发生的条件，依赖于故障属性；第三步编辑故障执行脚本根据需求从故障案例库中检索故障案例，编辑故障模型信息并配置故障脚本参数，生成故障执行脚本；第四步执行多层级、多模式故障注入按照生成的故障执行脚本执行故障注入，按照故障案例注入位置执行不同层级的故障注入，包括处理器故障注入、接口设备故障注入、通信协议故障注入；按照不同的触发方式执行不同模式的故障注入，包括基于时间的故障注入、基于PC的故障注入、基于地址的故障注入；第五步采集故障数据信息基于仿真平台监控目标程序运行过程，标记故障执行情况，收集目标程序运行的状态数据，包括：处理器上下文信息、寄存器信息、内存信息、程序轨迹、异常记录和故障参数；第六步结果分析与展示对收集的故障信息进行分析和展示，包括：故障触发、执行、结束各阶段信息分析，判断故障案例的有效性，对被测软件的容错机制、程序覆盖率进行分析，通过自定义模板生成报告结果。有益效果本发明提出一种基于仿真平台的多层级、多模式软件故障注入方法，本发明一种基于仿真平台的多层级、多模式软件故障注入方法具有如下特点：1、基于仿真平台实现故障注入系统，解决了硬件平台故障注入不易控制、灵活性差、系统易损坏等问题，大幅度提高了可控性、灵活性。2、支持多层级故障注入，实现了处理器平台、接口设备、通信协议等多层级的故障注入，提高了故障注入的覆盖范围，极大的保障了目标软件可靠性。3、支持多模式故障注入，具备可配置的故障注入模式，支持基于时间、基于PC、基于地址等方式，提高了故障注入灵活性和效率；4、支持故障案例库设计，提供了故障模型和故障案例描述，支持标准的故障案例库管理，支持案例库动态更新，为故障注入提供了丰富的模型，有力支撑了故障注入工作。附图说明图1为本发明基于仿真平台的多层级、多模式软件故障注入方法组成结构图；图2为软件故障注入流程图。具体实施方式为使本发明的目的、内容和优点更加清楚，下面结合附图和实施例，对本发明的具体实施方式作进一步详细描述。本发明给出了一种基于仿真平台的多层级、多模式软件故障注入方法，主要通过修改仿真平台来达到故障注入的效果，仿真平台具有可控性强的特点，故障注入灵活、精度高。该方法首先采用虚拟化技术实现仿真平台构建，包括处理器、外设、总线等模型；其次，构建故障注入案例库，包括处理器平台级、接口设备级、通信协议级等层级，统一进行故障案例设计和管理；然后，配置故障注入参数，执行故障注入，包括基于时间、基于PC、基于地址等注入方式；最后，采集故障案例注入后的执行信息，生成代码覆盖率报告。该方法实现的基于仿真平台的多层级、多模式软件故障注入方法，故障注入方式简洁灵活、故障注入层级全面、故障案例类型丰富，可全面覆盖异常边界情况，提高嵌入式软件测试充分性，保障软件质量和可靠性。本发明的目的在于提供一种基于仿真平台的多层级、多模式软件故障注入方法，解决当前嵌入式软件测试过程中故障注入手段不足、故障信息采集困难、测试验证不充分，导致关键软件质量无法得到有效保障的问题。第一步构建嵌入式软件仿真平台采用虚拟化技术构建仿真平台，实现处理器平台仿真模型、接口设备仿真模型、通信协议仿真模型，按照硬件运行环境组成关系描述仿真模型间的关联，运行被测嵌入式软件。第二步创建典型故障案例库按照故障属性、故障分布建立故障模型，对故障模型进行统一管理形成故障案例库。其中故障属性包括故障类型、注入位置，故障分布标识故障模型发生的条件，依赖于故障属性。第三步编辑故障执行脚本根据需求从故障案例库中检索故障案例，编辑故障模型信息并配置故障脚本参数，生成故障执行脚本；故障模型信息包括：故障类型属性、故障位置属性、持续时间属性、触发方式属性和仿真平台属性；其中，故障类型属性包括软件故障、硬件故障、通信故障；故障位置属性包括软件、运行环境、处理器、接口设备、通信协议；持续时间属性包括永久性、瞬时性、间歇性；触发方式属性包括基于时间、基于PC、基于地址；仿真平台属性包括处理器参数、外设参数、协议参数。第四步执行多层级、多模式故障注入使用故障注入器，如生成的故障执行脚本，执行故障注入，按照故障案例注入位置执行不同层级的故障注入，包括处理器故障注入、接口设备故障注入、通信协议故障注入；按照不同的触发方式执行不同模式的故障注入，包括基于时间的故障注入、基于PC的故障注入、基于地址的故障注入。第五步采集故障数据信息基于仿真平台监控目标程序运行过程，标记故障执行情况，收集目标程序运行的状态数据，主要包括处理器上下文信息、寄存器信息、内存信息、程序轨迹、异常记录、故障参数等内容。第六步结果分析与展示对收集的故障信息进行分析和展示，包括故障触发、执行、结束各阶段信息分析，判断故障案例的有效性，对被测软件的容错机制、程序覆盖率进行分析，通过自定义模板生成报告结果。实施例1：一种基于仿真平台的多层级、多模式软件故障注入方法实施方案包含仿真平台和软件故障注入系统两个部分，如图1所示。首先，采用虚拟化技术实现处理器平台、接口设备、通信协议的建模仿真，建立仿真平台，支持软件运行；其次，构建故障案例库，设计多层级的故障案例，描述异常边界条件，构造故障数据；然后，使用故障注入器执行多层级、多模式的故障注入；最终，采集故障数据进行分析并展示结果。具体实施步骤为：第一步构建嵌入式软件仿真平台嵌入式软件仿真平台对硬件运行环境的功能仿真，采用虚拟化技术实现处理器平台、接口设备、通信协议的功能模拟，支持嵌入式软件仿真运行。模拟处理器平台，根据处理器指令手册完成处理器架构仿真，按照取指、译码、执行阶段设计实现指令集功能模拟架构，进行片上设备、寄存器、内存空间模拟，生成处理器平台仿真模型。模拟接口设备，根据设备使用手册完成接口设备功能仿真，主要包括接口设备的输入接口、输出接口、寄存器功能，生成接口设备仿真模型。模拟通信协议，对应用层通信协议进行建模，生成通信协议仿真模型，包括数据帧、命令帧等，模拟字节、整型、半整型、长整型、数据位等类型，按照通信协议组装形成帧头、帧数据、帧尾。第二步生成故障案例库创建故障案例库，按照故障属性、故障分布建立故障模型，使用结构化文件进行故障信息存储，提取故障模型关键字信息对故障案例库进行统一管理。S21、故障模型描述。根据测试需求进行故障模型描述，包括故障属性和故障分布。故障属性包括故障类型、故障发生位置等信息；故障分布标识故障模型发生的条件，如均匀分布、指数分布、正态分布等。S22、故障模型存储。采用JSON数据格式对故障模型信息进行结构化存储，故障库＝{故障模型1，故障模型2，故障模型3}，故障模型＝{故障属性，故障分布}，故障属性＝{故障类型，故障发生位置}，故障分布＝{均匀分布/指数分布/正态分布}，故障类型＝{瞬时性故障，间歇性故障，永久性故障}，故障发生位置＝{处理器，接口设备，通信协议}。S23、故障模型管理。对故障库中的故障模型进行管理，提取故障模型的关键字，如故障类型、故障发生位置、故障分布，通过关键字进行故障模型的检索，获取指定故障模型，进行故障模型的分类展示。第三步编辑故障执行脚本根据需求从故障案例库中检索故障案例，编辑故障模型信息并配置故障脚本参数，生成故障执行脚本。S31、根据关键字检索故障案例库，匹配故障案例并读取故障模型基本信息。S32、编辑故障模型关键信息，包括故障注入时间T、故障注入位置P、故障注入模式M。S33、配置故障执行脚本，执行脚本＝{故障个数N，故障案例ID{ID1，ID2，…}，故障注入时刻T{T1，T2，…}，故障注入位置P{P1，P2，…}，故障注入模式M{M1，M2，…}}。第四步执行多层级、多模式故障注入按照生成的故障执行脚本执行故障注入，故障注入步骤如下。S41、仿真平台初始化，将仿真平台的处理器、接口设备、通信协议状态初始化为正常状态。S42、解析故障执行脚本，匹配故障案例库，按照ID检索故障案例。S43、获取故障案例的注入位置P，匹配故障注入层级，包括处理器、寄存器、协议等。S44、获取故障案例的注入模式M，匹配故障注入模式，包括基于时间、基于地址、基于PC等。S45、运行脚本，执行多模式、多层级故障注入。S46、判断故障注入是否完成，已完成执行步骤S47，未完成执行步骤S42。S47、故障注入结束。第五步采集故障状态数据信息执行故障注入后，运行仿真平台监控服务，收集故障数据信息。S51、按照ID检索故障案例，启动仿真平台监控服务。S52、获取故障注入模式M，根据基于时间、基于PC、基于地址等模式匹配对应的监控算法。S53、监控仿真平台故障位置P，判断故障注入模式的触发条件是否满足，采集触发后位置P处的故障状态信息。S54、监控目标程序进程，收集进程状态信息。S55、将状态信息以日志文件的方式进行输出。第六步故障结果解析S61、查看故障注入后程序运行状态并记录故障结果，常见运行结果如下。1)程序正常执行，故障注入对程序结果无影响。2)程序运行结束，程序结果不正确。3)程序跑飞，陷入死循环。4)运行非法指令，导致处理器仿真内核停止工作。5)访问非法地址空间，导致仿真平台崩溃。S62、根据运行结果分析故障案例对系统的影响，指导容错设计。本发明的关键：1.故障案例库设计：故障案例库包含硬件运行环境故障、软件运行环境故障、通信故障、软件故障等种类。其中，硬件运行环境故障包括处理器、内存、接口、中断/时序类等；软件运行环境故障包含操作系统类、支撑软件类等；通信故障包含总线类、应用协议类等。故障模型示例如表1所示。表1故障模型示例表2.多层级、多模式故障注入实现了一种支持多层级、多模式故障注入的故障注入器，接收故障案例后进行故障层级匹配、故障模式匹配、触发故障、标记故障等操作，故障注入模式如下。基于时间的故障注入：可分为立即触发和应用程序运行指定时间后触发两种，采用这种方式，用户可对目标系统任何未受保护的地方注入各种故障。基于PC的故障注入：当目标系统执行某些特殊指令或分支时就触发故障注入进程，通过这种方式，用户可改变目标系统的运行路径，从而检验目标系统容错机制的有效性。基于地址的故障注入：向某一存储单元进行读写操作时、向某些特定地址单元进行数据操作时触发故障。启动仿真平台后监控目标系统程序是否正在运行，如果目标程序没有运行则退出系统，如果目标程序正在运行则记录当前目标程序的指令步数和仿真系统的状态信息。然后轮询目标系统当前是否已注入故障，如果已注入故障则继续执行目标程序，通过监控和信息采集模块获取目标系统状态信息，最后通过分析模块进行故障分析和系统评估；如果未注入故障，目标程序单步运行，然后根据用户配置选择不同的故障模式，触发条件满足时对相应的故障模型执行故障注入操作并标记已注入的故障。针对不同的故障模式，有不同故障注入方法，通用故障注入流程如图2所示。本发明一种基于仿真平台的多层级、多模式软件故障注入方法具有如下特点：1、基于仿真平台实现故障注入系统，解决了硬件平台故障注入不易控制、灵活性差、系统易损坏等问题，大幅度提高了可控性、灵活性。2、支持多层级故障注入，实现了处理器平台、接口设备、通信协议等多层级的故障注入，提高了故障注入的覆盖范围，极大的保障了目标软件可靠性。3、支持多模式故障注入，具备可配置的故障注入模式，支持基于时间、基于PC、基于地址等方式，提高了故障注入灵活性和效率；4、支持故障案例库设计，提供了故障模型和故障案例描述，支持标准的故障案例库管理，支持案例库动态更新，为故障注入提供了丰富的模型，有力支撑了故障注入工作。以上所述仅是本发明的优选实施方式，应当指出，对于本技术领域的普通技术人员来说，在不脱离本发明技术原理的前提下，还可以做出若干改进和变形，这些改进和变形也应视为本发明的保护范围。
