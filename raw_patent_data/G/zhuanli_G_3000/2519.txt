标题title
一种语音信号处理方法、装置和可读存储介质
摘要abst
本发明实施例提供了一种语音信号处理方法、装置和可读存储介质，可应用于神经网络处理器NPU。所述方法包括：将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。本发明实施例可以在低资源的NPU上实现STFT，降低资源成本，并且语音信号处理过程不需要经过CPU处理，可以实现端到端结构，提高语音信号处理的实时性。
权利要求书clms
1.一种语音信号处理方法，其特征在于，应用于神经网络处理器NPU，所述方法包括：将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。2.根据权利要求1所述的方法，其特征在于，所述方法还包括：将处理后的频域信号输入所述第二算子，通过所述第二算子对所述处理后的频域信号进行反快速傅里叶变换，输出处理后的重叠帧向量；将所述处理后的重叠帧向量输入所述第一算子，通过所述第一算子对所述处理后的重叠帧向量进行加窗及合成，输出处理后的时域信号。3.根据权利要求1所述的方法，其特征在于，所述方法还包括：根据所需的FFT点数，在预置的不同规格的计算单元中确定目标计算单元；其中，不同规格的计算单元用于实现不同预置点数的快速傅里叶变换；对所述目标计算单元进行组合和/或复用得到所述第二算子。4.根据权利要求1所述的方法，其特征在于，所述通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量，包括：调用所述一维卷积并输入参数，所述参数包括输入数据、卷积权重和移动步长，所述一维卷积基于所述卷积权重和移动步长在所述输入数据上进行卷积操作，输出卷积结果；其中，所述输入数据为所述时域信号，所述卷积权重为预置的窗函数，所述移动步长为预置的帧移大小，所述卷积结果为重叠帧向量。5.根据权利要求1所述的方法，其特征在于，所述权重矩阵为复数数据结构，所述方法还包括：基于所述权重矩阵中各元素的实部和虚部，将所述权重矩阵转换为扩展矩阵，所述扩展矩阵包括实部矩阵和虚部矩阵；所述通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，包括：通过所述线性函数执行所述重叠帧向量与所述实部矩阵和虚部矩阵的乘法计算。6.根据权利要求1所述的方法，其特征在于，所述方法还包括：对所述频域信号计算目标值，所述目标值包括模和/或幅角；基于所述目标值进行处理，得到处理结果。7.根据权利要求1所述的方法，其特征在于，所述权重矩阵采用预设的固定参数。8.一种语音信号处理装置，其特征在于，应用于神经网络处理器NPU，所述装置包括STFT模块，所述STFT模块包括：第一处理子模块，用于将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；第二处理子模块，用于将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。9.根据权利要求8所述的装置，其特征在于，所述装置还包括ISTFT模块，所述ISTFT模块包括：第三处理模块，用于将处理后的频域信号输入所述第二算子，通过所述第二算子对所述处理后的频域信号进行反快速傅里叶变换，输出处理后的重叠帧向量；第四处理模块，用于将所述处理后的重叠帧向量输入所述第一算子，通过所述第一算子对所述处理后的重叠帧向量进行加窗及合成，输出处理后的时域信号。10.一种机器可读存储介质，其上存储有指令，当所述指令由装置的一个或多个处理器执行时，使得装置执行如权利要求1至7中任一所述的语音信号处理方法。
说明书desc
技术领域本发明涉及语音处理技术领域，尤其涉及一种语音信号处理方法、装置和可读存储介质。背景技术语音信号处理的相关任务，通常是基于语音的频域信号进行处理，语音信号需要经过从时域信号到频域信号的转换过程。STFT的基本原理是对一段长信号，截取每一段时间的短信号做FFT，实现从时域信号到频域信号的转换，从而可以对语音信号在时间和频率上的变换进行观察和分析。然而，STFT通常需要专门的硬件逻辑资源支持，例如，一般使用CPU或者采用蝶形计算逻辑的DSP来计算STFT，因此，无法适用于低功耗、资源有限的设备。发明内容本发明实施例提供一种语音信号处理方法、装置和可读存储介质，可以在低资源的NPU上实现STFT，降低资源成本，并且语音信号处理过程不需要经过CPU处理，可以实现端到端结构，提高语音信号处理的实时性。第一方面，本发明实施例公开了一种语音信号处理方法，应用于神经网络处理器NPU，所述方法包括：将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。第二方面，本发明实施例公开了一种语音信号处理装置，应用于神经网络处理器NPU，所述装置包括STFT模块，所述STFT模块包括：第一处理子模块，用于将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；第二处理子模块，用于将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。第三方面，本发明实施例公开了一种机器可读介质，其上存储有指令，当所述指令由装置的一个或多个处理器执行时，使得装置执行如前述一个或多个所述的语音信号处理方法。本发明实施例包括以下优点：本发明实施例使用第一算子实现STFT的第一个步骤，使用第二算子实现STFT的第二个步骤。第一算子通过一维卷积conv1d实现，第二算子通过线性函数linear实现。利用第一算子和第二算子可以代替用于进行STFT的专门的硬件逻辑资源。由于一维卷积conv1d和线性函数linear不需要较高的计算资源，可以在NPU上执行。因此，通过本发明实施例，可以在低资源的NPU上实现STFT，降低资源成本。此外，本发明实施例中的语音信号处理流程可以优化如下：输入时域信号-＞基于NPU将时域信号变换到频域信号-＞基于NPU进行神经网络推理-＞基于NPU将频域信号变换到时域信号-＞输出时域信号。通过本发明实施例的方法，语音信号处理过程不需要经过CPU处理，可以实现端到端结构，提高语音信号处理的实时性。语音信号处理的整个过程可以在低资源的NPU上执行，无需进行数据搬移，可以降低资源消耗和系统时延。进一步地，本发明实施例可以借助NPU上卷积操作的高效性以及流水线PIPE处理的优势，使得数据可以实现即进即出，将延迟降至最低，可以适用于实时性要求较高的场景。附图说明为了更清楚地说明本发明实施例的技术方案，下面将对本发明实施例的描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1是本发明实施例的一种语音信号处理方法实施例的步骤流程图；图2是本发明实施例利用conv1d实现分帧及加窗的示意图；图3是本发明实施例中STFT和ISTFT的流程对比示意图；图4是本发明通过组合和/或复用不同规格的计算单元实现不同FFT点数的FFT计算的示意图；图5是利用本发明实施例提供的方法实现的一种语音信号处理的系统架构示意图；图6是本发明实施例中利用STFT模块进行处理的示意图；图7是本发明实施例中利用ISTFT模块进行处理的示意图；图8是本发明实施例的一种语音信号处理装置实施例的结构示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。本发明的说明书和权利要求书中的术语“第一”、“第二”等是用于区别类似的对象，而不用于描述特定的顺序或先后次序。应该理解这样使用的数据在适当情况下可以互换，以便本发明的实施例能够以除了在这里图示或描述的那些以外的顺序实施，且“第一”、“第二”等所区分的对象通常为一类，并不限定对象的个数，例如第一对象可以是一个，也可以是多个。此外，说明书以及权利要求中的术语“和/或”用于描述关联对象的关联关系，表示可以存在三种关系，例如，A和/或B，可以表示：单独存在A，同时存在A和B，单独存在B这三种情况。字符“/”一般表示前后关联对象是一种“或”的关系。本发明实施例中术语“多个”是指两个或两个以上，其它量词与之类似。参照图1，示出了本发明的一种语音信号处理方法实施例的步骤流程图，所述方法可应用于神经网络处理器NPU，所述方法可以包括如下步骤：步骤101、将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；步骤102、将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。本发明实施例提供的语音信号处理方法，可适用于需要将语音信号从时域信号转换为频域信号的场景。例如将语音信号从时域信号转换为频域信号之后，可以基于频域信号进行语音增强处理、语音识别处理等。STFT可以实现将语音信号从时域信号到频域信号的转换，STFT主要包括如下两个步骤：1、对时域信号进行分帧及加窗，得到重叠帧向量；2、对重叠帧向量中的每一帧进行FFT，得到频域信号。分帧的目的是把若干个语音采样点分为一帧，在这一帧内，语音信号的特性可以视为是稳定的。为了使得语音帧之间有一个平滑的过度，一般帧与帧之间有一定的重叠，相邻两帧的起始位置的时间差叫做帧移。加窗是为了使分帧后的语音信号更加平稳，使得时域信号更好地满足FFT处理的周期性要求，减少泄漏。本发明实施例利用第一算子实现STFT的第一个步骤。所述第一算子可以通过一维卷积conv1d实现。conv1d是指一维卷积神经网络，它是卷积神经网络的一种变体。conv1d可用于处理一维序列数据，比如音频、文本等。conv1d使用卷积层来提取序列数据中的特征。卷积层通过滑动一个固定大小的窗口在输入数据上进行卷积操作，提取窗口内的特征。简单理解，conv1d是在一个维度上进行卷积核的移动，卷积核只在一个方向上运动。本发明实施例利用conv1d的上述特性，将预置的窗函数和帧移大小作为参数输入conv1d，通过窗函数可以实现对时域信号进行截断及加窗，通过预置的帧移大小可以实现帧移。由此，通过conv1d可以实现对所述时域信号进行分帧及加窗，输出重叠帧向量。所述重叠帧向量指的是有重叠的矢量段，重叠部分即帧移。在本发明的一种可选实施例中，所述通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量，可以包括：调用所述一维卷积并输入参数，所述参数包括输入数据、卷积权重和移动步长，所述一维卷积基于所述卷积权重和移动步长在所述输入数据上进行卷积操作，输出卷积结果；其中，所述输入数据为所述时域信号，所述卷积权重为预置的窗函数，所述移动步长为预置的帧移大小，所述卷积结果为重叠帧向量。conv1d的函数形式为：torch.nn.functional.conv1d，该函数主要包括如下参数：input、weight、bias、stride、padding、dilation和groups。本发明实施例中使用其中的参数input、weight和stride实现对时域信号进行分帧及加窗，其他参数可以设置为空。input为输入数据；weight为卷积权重；stride为移动步长。加窗实质是用一个窗函数与原始的时域信号作乘积的过程，使得相乘后的信号更好地满足傅立叶变换的周期性要求。“窗函数”是一种加权函数，方便用来截取所需要的信号，加窗的过程，实际上是在时域上将信号截断。因此，通过加窗也就实现了分帧，帧长就是一个窗口的长度。conv1d可以基于输入的卷积权重和移动步长在所述输入数据上进行卷积操作，输出卷积结果。本发明实施例将语音的时域信号作为输入数据input，将预置的窗函数作为卷积权重weight，将预置的帧移大小作为移动步长stride，调用函数torch.nn.functional.conv1d。conv1d基于所述窗函数和帧移大小在所述时域信号上进行卷积操作，实现了将该窗函数与该时域信号相乘的过程，由此实现对该时域信号进行分帧及加窗的操作，输出的卷积结果即为对该时域信号进行分帧及加窗得到的重叠帧向量，两帧之间的帧移大小即为输入的移动步长stride的值。本发明实施例对选取的窗函数不做限制，例如可以选取矩形窗、汉宁窗、平顶窗、指数窗等中的任意一种；对所选取的帧移大小不做限制，例如可以为帧长的1/2或1/4等。参照图2，示出了本发明实施例利用conv1d实现分帧及加窗的示意图。如图2所示，调用conv1d输入的参数包括时域信号、窗函数和帧移大小。其中，时域信号为图2中的，每个小方块表示一个采样点。其中采样点pad为占位符，可用于调节系统时延。当然，在实际应用中，也可以不使用pad。窗函数中的w1、w2和w3表示窗系数，分别与其对应位置的采样点相乘，实现分帧及加窗。通过移动步长stride实现帧移。在本发明实施例中，时域信号可以通过PIPE的形式输入，并且可以将pad填充0，这样可以在第一个采样点输入第一算子后就会有输出。由此，可以保证总是有输出，即每个采样点输入进来都会有对应的输出，以降低时延。可以理解的是，图2中所示的窗口大小以及窗系数等均为示例性说明。PIPE使用的是数据流级联处理的形式，通过对处理阶段抽象，当前处理阶段负责对输入进行处理，并将输出作为下一个阶段的输入，从而实现流式操作。本发明实施例中，时域信号以PIPE的形式输入第一算子，第一算子输出的结果以PIPE的形式输入第二算子执行FFT计算。也即，输入一个采样点即可有输出，从而可以开始执行后续操作，而不是像传统的FFT计算单元需要等待整个数组的采样点都到达时才能开始执行操作。本发明实施例可以实现流式操作，降低系统的时延。本发明实施例利用第二算子实现STFT的第二个步骤。所述第二算子可以通过线性函数linear实现。线性函数linear的形式如下：torch.nn.functional.linear。linear可用于对输入数据进行如下线性变换：y = xAT+b。其中，x为输入数据input，A为权重矩阵weight，b为偏置。利用线性函数linear可以实现向量与矩阵的乘法计算。由于FFT操作即是对所述重叠帧向量与预置的权重矩阵的乘法计算，因此，本发明实施例可以利用线性函数linear实现FFT操作。具体地，在通过第一算子对语音的时域信号进行分帧及加窗，输出重叠帧向量之后，可以将所述重叠帧向量作为第二算子的输入数据input，将预置的权重矩阵作为第二算子的权重矩阵weight，调用线性函数torch.nn.functional.linear。线性函数linear对该重叠帧向量与该预置的权重矩阵执行乘法计算，该过程即对该重叠帧向量在每帧上进行FFT操作，输出频域信号。所述权重矩阵为预先设置的，可以是预先训练得到的，也可以是根据经验设置的。FFT的计算公式如下：其中，为重叠帧向量，/＞为预置的权重矩阵，/＞为第k帧的频域信号。FFT计算是对向量和矩阵/＞相乘，可以表示如下：其中，，N的值为FFT点数。本发明实施例中利用linear实现FFT，预置的权重矩阵记为W1，则：本发明实施例使用第一算子实现STFT的第一个步骤，使用第二算子实现STFT的第二个步骤。第一算子通过一维卷积conv1d实现，第二算子通过线性函数linear实现。利用第一算子和第二算子可以代替用于进行STFT的专门的硬件逻辑资源。由于一维卷积conv1d和线性函数linear不需要较高的计算资源，可以在NPU上执行。因此，通过本发明实施例，可以在低资源的NPU上实现STFT，降低资源成本。其中，低资源的NPU指的是NPU支持的算子有限。NPU上并不支持可用于进行FFT计算的蝶形计算逻辑，也未提供专用于分帧和加窗的算子。本发明实施例利用第一算子可以实现分帧及加窗操作，利用第二算子可以实现FFT操作，第一算子通过一维卷积conv1d实现，第二算子通过线性函数linear实现，一维卷积conv1d和线性函数linear均为NPU支持的算子，因此可以在低资源的NPU上实现STFT。此外，相关技术中，通常利用高资源的CPU对时域信号进行STFT，然后将转换得到的频域信号搬移至NPU，利用NPU进行神经网络预测，最后再将预测后的频域信号搬移至CPU进行ISTFT，得到时域信号。上述过程需要进行两次数据搬移，不仅浪费资源，而且增加了系统时延，因此不能适用于对实时性要求较高的场景，如助听器等实时语音增强系统。相关技术中的语音信号处理流程可以表示如下：输入时域信号-＞基于CPU将时域信号变换到频域信号-＞基于NPU进行神经网络推理-＞基于CPU将频域信号变换到时域信号-＞输出时域信号。本发明实施例中的语音信号处理流程可以表示如下：输入时域信号-＞基于NPU将时域信号变换到频域信号-＞基于NPU进行神经网络推理-＞基于NPU将频域信号变换到时域信号-＞输出时域信号。可以看出，通过本发明实施例的方法，语音信号处理过程不需要经过CPU处理，可以实现端到端结构。通过本发明实施例提供的方法，可以将麦克风等音频通路直接连接NPU，语音信号不用先在CPU上做处理，而是通过流式方式直接输入到NPU进行处理，处理完成之后的数据可以直接发送到喇叭进行反馈。整个过程可以在NPU上执行，无需进行数据搬移，可以降低资源消耗和系统时延。进一步地，本发明实施例通过端到端结构，借助NPU上卷积操作的高效性以及PIPE处理的优势，使得数据可以实现即进即出，将延迟降至最低，可以适用于实时性要求较高的场景。在本发明的一种可选实施例中，在步骤102之后，所述方法还可以包括：步骤S11、将处理后的频域信号输入所述第二算子，通过所述第二算子对所述处理后的频域信号进行反快速傅里叶变换，输出处理后的重叠帧向量；步骤S12、将所述处理后的重叠帧向量输入所述第一算子，通过所述第一算子对所述处理后的重叠帧向量进行加窗及合成，输出处理后的时域信号。在将语音信号从时域信号转换为频域信号之后，可以基于频域信号进行后续处理，如语音增强、语音识别等，处理完成之后，可以将处理后的频域信号进行ISTFT，转换为处理后的时域信号输出。本发明实施例除了可以利用所述第一算子和所述第二算子在NPU上实现STFT，还可以利用所述第一算子和所述第二算子在NPU上实现ISTFT。ISTFT是STFT的逆过程。参照图3，示出了STFT和ISTFT的流程对比示意图。在STFT过程中，本发明实施例利用第一算子对时域信号进行分帧及加窗操作，得到重叠帧向量；利用第二算子对重叠帧向量进行FFT操作，得到频域信号。在ISTFT过程中，本发明实施例利用第二算子对处理后的频域信号进行IFFT操作，得到处理后的重叠帧向量；利用第一算子对处理后的重叠帧向量进行加窗及合成操作，得到处理后的时域信号。IFFT的计算公式如下：其中，为重叠帧向量，/＞为权重矩阵，/＞为第k帧的频域信号。IFFT计算是对向量和矩阵/＞相乘，可以表示如下：其中，，N的值为FFT点数。在本发明实施例中，将频域信号作为第二算子的输入数据input，将预置的权重矩阵作为第二算子的权重矩阵weight，调用函数torch.nn.functional.linear。linear对该频域信号与该权重矩阵执行乘法计算，该过程即对该频域信号进行IFFT操作，输出重叠帧向量。本发明实施例利用linear实现IFFT，预置的权重矩阵记为W2，则：由于IFFT为FFT的逆过程，也是向量和矩阵的乘法计算，因此，本发明实施例可以利用第二算子实现IFFT。可以理解的是，FFT中使用的权重矩阵W1和IFFT中使用的权重矩阵W2不同。在利用第二算子对频域信号进行IFFT之后，得到重叠帧向量。此时可以利用第一算子对该处理后的重叠帧向量进行加窗及合成，得到处理后的时域信号。在利用第一算子对处理后的重叠帧向量进行加窗及合成时，可以将该处理后的重叠帧向量作为conv1d的输入数据input，将预置的窗函数作为conv1d的卷积权重，调用conv1d。由于此时该处理后的重叠帧向量已经分帧过了，因此第一算子不再进行分帧，也不需要帧移，而是需要将各帧合成，因此可以将stride设置为空，conv1d即对输入的重叠帧向量进行加窗及合成操作，得到时域信号。需要说明的是，本发明实施例对利用第一算子对处理后的重叠帧向量进行加窗及合成使用的窗函数不做限制。例如，可以使用STFT过程中，第一算子对时域信号进行分帧及加窗时使用的相同的窗函数。在本发明的一种可选实施例中，所述权重矩阵可以为复数数据结构，所述方法还可以包括：基于所述权重矩阵中各元素的实部和虚部，将所述权重矩阵转换为扩展矩阵，所述扩展矩阵包括实部矩阵和虚部矩阵；所述通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，包括：通过所述线性函数执行所述重叠帧向量与所述实部矩阵和虚部矩阵的乘法计算。在具体实施中，FFT计算是基于复数的，计算结果也是复数。由于低资源的NPU不支持复数数据结构，也就不支持复数相乘，因此，本发明实施例通过构造扩展矩阵实现在NPU上进行复数矩阵相乘，从而实现在NPU上进行FFT和IFFT的复数计算。假设矩阵A和B为复数矩阵，复数矩阵指的是矩阵中的元素为复数。首先对矩阵A和B分别进行拆分：A= AR+jAM，B=BR+jBM。其中，AR是矩阵A的实部矩阵，AM是矩阵A的虚部矩阵；BR是矩阵B的实部矩阵，BM是矩阵B的虚部矩阵。利用矩阵A的实部矩阵和矩阵A的虚部矩阵构建扩展矩阵A'如下：利用矩阵B的实部矩阵和矩阵B的虚部矩阵构建扩展矩阵B'如下：扩展矩阵A'和扩展矩阵B'相乘如下：的计算结果为复数结果C，则：在STFT过程中，利用第二算子进行FFT时，预置的权重矩阵记为W1，W1为复数矩阵，可以转换为扩展矩阵A1'表示如下：其中，为权重矩阵W1的实部矩阵，/＞为权重矩阵W1的虚部矩阵。重叠帧向量可以转换为扩展矩阵B1'表示如下：其中，为重叠帧向量的实部矩阵，/＞为重叠帧向量的虚部矩阵。需要说明的是，在本发明实施例中，重叠帧向量为实数，则/＞为0，此时FFT计算为实数向量与复数矩阵相乘。本发明实施例中，利用第二算子进行FFT，即调用linear计算，得到复数结果C1如下：由于重叠帧向量为实数，为0，则：其中，在ISTFT过程中，利用第二算子进行IFFT时，预置的权重矩阵记为W2，W2为复数矩阵，可以转换为扩展矩阵A2'表示如下：其中，为权重矩阵W2的实部矩阵，/＞为权重矩阵W2的虚部矩阵。对于待转换为时域信号的频域信号，该频域信号为复数矩阵，可以转换为扩展矩阵B2'表示如下：本发明实施例中，利用第二算子进行IFFT，即调用linear计算，得到实数结果C2如下：=由于B2'是实数信号FFT变换过来的，所以它具有共轭对称的特性，在反变换的时候，虚部)这部分为零，因此C2是实数结果。其中，本发明实施例通过构造扩展矩阵完成实部和虚部联合的复数矩阵运算，通过构造扩展矩阵实现FFT和IFFT复数计算。在具体实施中，权重矩阵可以预先以扩展矩阵的形式存放在NPU中，在进行FFT时，只需输入将重叠帧向量转换得到的扩展矩阵B1'即可，第二算子计算，输出复数结果C1，C1为频域信号。在进行IFFT时，只需输入将频域信号转换得到的扩展矩阵B2'即可，第二算子计算/＞，输出实数结果C2，C2为时域信号。在本发明的一种可选实施例中，在步骤102之前，所述方法还可以包括：步骤S21、根据所需的FFT点数，在预置的不同规格的计算单元中确定目标计算单元；其中，不同规格的计算单元用于实现不同预置点数的快速傅里叶变换；步骤S22、对所述目标计算单元进行组合和/或复用得到所述第二算子。FFT点数N指的是离散时间信号的记录长度。例如，FFT点数N=256，表示只有前256个时域样本将被进行FFT计算。FFT点数N根据所要求的频率分辨率F决定。频率分辨率F指的是能够用FFT算法分析得到的最靠近的两个信号频率之间的间隔。N和F的关系如下：N≥Fs/F，Fs为采样频率。由于FFT一般要求N是2的整数幂，所以通常需要把N扩大为最接近的2的整数幂。为了使得本发明实施例可以适用于各种不同的FFT点数，包括N不是2的整数幂的情况。本发明实施例预先实现若干基本的计算单元，利用这些计算单元进行组合和/或复用可以实现不同FFT点数下的FFT计算。示例性地，本发明实施例实现的不同规格的计算单元包括FFT点数N分别为2、5和16的计算单元。本发明实施例中将预先实现的计算单元记为Linear-Radix-N，其中N表示FFT点数。例如，Linear-Radix-2表示该计算单元适用于FFT点数N为2的FFT计算，Linear-Radix-5表示该计算单元适用于FFT点数N为5的FFT计算，Linear-Radix-16表示该计算单元适用于FFT点数N为16的FFT计算。在具体实施中，语音信号中常见的FFT点数包括160、256和320等。通过对本发明实施例提供的计算单元进行组合和/或复用，可以实现不同的FFT点数的FFT计算。参见图4，示出了本发明通过组合和/或复用不同规格的计算单元实现不同FFT点数的FFT计算的示意图。其中，预置的不同规格的计算单元包括计算单元1、计算单元2和计算单元3。计算单元1可用于实现FFT点数N为16的FFT计算，将计算单元1表示为Linear-Radix-16。计算单元2可用于实现FFT点数N为5的FFT计算，将计算单元2表示为Linear-Radix-5。计算单元3可用于实现FFT点数N为2的FFT计算，将计算单元3表示为Linear-Radix-2。如图4所示，例如，假设所需的FFT点数N为160，由于160=16×5×2，因此，可以确定目标计算单元包括Linear-Radix-16、Linear-Radix-5和Linear-Radix-2，通过组合Linear-Radix-16、Linear-Radix-5和Linear-Radix-2可以实现N为160的FFT计算。又如，假设所需的FFT点数为320，由于320=16×5×2×2，因此，可以确定目标计算单元包括Linear-Radix-16、Linear-Radix-5和Linear-Radix-2，通过组合Linear-Radix-16、Linear-Radix-5和Linear-Radix-2，以及复用Linear-Radix-2，可以实现N为320的FFT计算。再如，假设所需的FFT点数为256，由于256=16×16，因此，可以确定目标计算单元包括Linear-Radix-16，通过复用Linear-Radix-16，即先计算一次Linear-Radix-16，然后再计算一次Linear-Radix-16，可以实现N为256的FFT计算。通过本发明实施例，可以在NPU上快速实现不同FFT点数的FFT计算。需要说明的是，上述几种规格的计算单元通过组合和/或复用即可实现大多数常用的FFT点数的FFT计算。当然，在具体实施中，可以设计更多不同规格的计算单元，本发明实施例对此不做限制。此外，本发明实施例通过实现不同规格的基本的计算单元，对于当前所需的FFT点数，可以通过组合和/或复用已有的计算单元实现。也即，第二算子可以通过组合和/或复用已有的计算单元实现，由此，可以将第二算子拆分成多个子模块，不同的子模块对应不同的目标计算单元，进而可以采用PIPE的方式实现流式处理。也即，各目标计算单元的输入及输出均为PIPE的方式，不仅可以提高处理效率，还可以实现更多不同FFT点数的FFT计算。在本发明的一种可选实施例中，在步骤102之后，所述方法还可以包括：步骤S51、对所述频域信号计算目标值，所述目标值包括模和/或幅角；步骤S52、基于所述目标值进行处理，得到处理结果。经过FFT处理后得到的频域信号为复数数据结构，本发明实施例还可以对该频域信号计算目标值，本发明实施例对目标值的类型不做限制，如目标值可以包括模和/或幅角。也即，对步骤102输出的频域信号计算模和/或幅角等。本发明实施例对目标值进行处理的类型不做限制，所述目标值为频域上的数据，所述处理如基于频域上的语音增强处理等。具体地，N个采样点的时域信号经过FFT之后可以得到N个点的FFT结果，该FFT结果为本发明实施例中所述的频域信号，该频域信号为N个复数。对该频域信号求模，即对这N个复数求模。对该频域信号求幅角，即对这N个复数求幅角。假设某个点的复数用a+bi表示，a为实部，b为虚部，则该复数的模为：，该复数的幅角为：/＞。模和幅角是傅里叶变换中的两个重要概念，分别代表了频域信号中每个频率成分的振幅大小和相位角度。傅里叶变换中的模代表了频域信号中每个频率成分所占比例的大小。例如，在语音信号中，低频声音的振幅较大，高频声音的振幅较小，因此，低音区更加饱满。例如，在实际应用中，可以利用计算的模来分析音乐的节奏和节拍，又如，可以利用计算的模进行语音增强处理，如语音去噪等。傅里叶变换中的幅角代表了频域信号中每个频率成分的相位。不同的语音信号的波形形状不同，在频域中对应的幅角也不同。例如，在实际应用中，可以利用计算的幅角进行语音增强处理，如数据压缩等。语音增强处理之后，得到的处理结果包括处理后的模和/或幅角。该处理结果是复数数据结构，可以对该处理结果计算实部和虚部，转换为扩展矩阵，从而可以利用第二算子进行IFFT计算。在本发明的一种可选实施例中，所述第二算子使用的权重矩阵可以采用预设的固定参数。参照图5，示出了利用本发明提供的方法实现的一种语音信号处理的系统架构示意图。如图5所示，该系统可以部署在NPU上，该系统包括STFT模块、神经网络、以及ISTFT模块。STFT模块用于对时域信号进行STFT。神经网络用于对STFT模块的输出结果在频域上进行推理，并且将推理结果输入ISTFT模块。ISTFT模块用于对神经网络的输出结果进行ISTFT，转换为时域信号。具体地，STFT模块可用于执行步骤101和步骤102。ISTFT模块可用于执行步骤S11和步骤S12。在具体实施中，STFT模块和ISTFT模块可以预先设置好，这两个模块的参数可以预先设置好，不用通过训练数据进行训练，免去了训练过程。由此，在网络训练过程中，只需关注神经网络的训练过程。STFT模块和ISTFT模块的参数固定，指的是STFT模块中第二算子使用的权重矩阵W1为预设的固定的权重矩阵，以及ISTFT模块中第二算子使用的权重矩阵W2为预设的固定的权重矩阵。由于STFT模块和ISTFT模块可以预先设定，无需进行训练。因此，在具体实施中，只需将神经网络的输入端和输出端分别连接STFT模块和ISTFT模块，即可完成系统的部署。本发明实施例将语音信号的整个处理过程在NPU上实现，无需在CPU上进行FFT和IFFT计算，避免了需要在CPU和NPU之间传递数据。STFT模块和ISTFT模块不需要进行预训练，预设固定参数即可，参数可以直接从SRAM导入。在实际部署过程中，STFT模块和ISTFT模块的功能固化，使用者只需考虑优化中间的神经网络部分即可，可以降低系统优化的成本。参照图6，示出了本发明实施例中利用STFT模块进行处理的示意图，以及参照图7，示出了本发明实施例中利用ISTFT模块进行处理的示意图。如图6所示，麦克风等音频通路可以直接连接NPU，语音信号通过流式方式直接输入NPU中的STFT模块进行处理，处理完成之后，输入神经网络进行推理。如图7所示，图6处理完之后，模和/或幅角发生变化，对变化后的模和/或幅角计算实部和虚部，通过流式方式输入ISTFT模块进行处理，处理完成之后，将得到的语音信号直接发送到喇叭进行反馈。由此实现端到端处理，可适用于实时性要求较高的场景。综上，本发明实施例使用第一算子实现STFT的第一个步骤，使用第二算子实现STFT的第二个步骤。第一算子通过一维卷积conv1d实现，第二算子通过线性函数linear实现。利用第一算子和第二算子可以代替用于进行STFT的专门的硬件逻辑资源。由于一维卷积conv1d和线性函数linear不需要较高的计算资源，可以在NPU上执行。因此，通过本发明实施例，可以在低资源的NPU上实现STFT，降低资源成本。此外，本发明实施例中的语音信号处理流程可以优化如下：输入时域信号-＞基于NPU将时域信号变换到频域信号-＞基于NPU进行神经网络推理-＞基于NPU将频域信号变换到时域信号-＞输出时域信号。通过本发明实施例的方法，语音信号处理过程不需要经过CPU处理，可以实现端到端结构，提高语音信号处理的实时性。语音信号处理的整个过程可以在低资源的NPU上执行，无需进行数据搬移，可以降低资源消耗和系统时延。进一步地，本发明实施例可以借助NPU上卷积操作的高效性以及流水线PIPE处理的优势，使得数据可以实现即进即出，将延迟降至最低，可以适用于实时性要求较高的场景。需要说明的是，对于方法实施例，为了简单描述，故将其都表述为一系列的动作组合，但是本领域技术人员应该知悉，本发明实施例并不受所描述的动作顺序的限制，因为依据本发明实施例，某些步骤可以采用其他顺序或者同时进行。其次，本领域技术人员也应该知悉，说明书中所描述的实施例均属于优选实施例，所涉及的动作并不一定是本发明实施例所必须的。参照图8，示出了本发明的一种语音信号处理装置实施例的结构框图，所述装置可应用于神经网络处理器NPU，所述装置可以包括STFT模块801，所述STFT模块801包括：第一处理子模块8011，用于将语音的时域信号输入第一算子，通过所述第一算子对所述时域信号进行分帧及加窗，输出重叠帧向量；所述第一算子通过一维卷积实现；第二处理子模块8012，用于将所述重叠帧向量输入第二算子，通过所述第二算子对所述重叠帧向量进行快速傅里叶变换，输出频域信号；所述第二算子通过线性函数实现，所述线性函数用于执行所述重叠帧向量与预置的权重矩阵的乘法计算。可选地，所述装置还可以包括ISTFT模块802，所述ISTFT模块802包括：第三处理模块，用于将处理后的频域信号输入所述第二算子，通过所述第二算子对所述处理后的频域信号进行反快速傅里叶变换，输出处理后的重叠帧向量；第四处理模块，用于将所述处理后的重叠帧向量输入所述第一算子，通过所述第一算子对所述处理后的重叠帧向量进行加窗及合成，输出处理后的时域信号。可选地，所述装置还可以包括：目标确定模块，用于根据所需的FFT点数，在预置的不同规格的计算单元中确定目标计算单元；其中，不同规格的计算单元用于实现不同预置点数的快速傅里叶变换；组合复用模块，用于对所述目标计算单元进行组合和/或复用得到所述第二算子。可选地，所述第一处理子模块，具体用于：调用所述一维卷积并输入参数，所述参数包括输入数据、卷积权重和移动步长，所述一维卷积基于所述卷积权重和移动步长在所述输入数据上进行卷积操作，输出卷积结果；其中，所述输入数据为所述时域信号，所述卷积权重为预置的窗函数，所述移动步长为预置的帧移大小，所述卷积结果为重叠帧向量。可选地，所述权重矩阵为复数数据结构，所述装置还可以包括：矩阵转换模块，用于基于所述权重矩阵中各元素的实部和虚部，将所述权重矩阵转换为扩展矩阵，所述扩展矩阵包括实部矩阵和虚部矩阵；所述第二处理子模块，具体用于：通过所述线性函数执行所述重叠帧向量与所述实部矩阵和虚部矩阵的乘法计算。可选地，所述装置还可以包括：目标计算模块，用于对所述频域信号计算目标值，所述目标值包括模和/或幅角；目标处理模块，用于基于所述目标值进行处理，得到处理结果。可选地，所述权重矩阵采用预设的固定参数。综上，本发明实施例使用第一算子实现STFT的第一个步骤，使用第二算子实现STFT的第二个步骤。第一算子通过一维卷积conv1d实现，第二算子通过线性函数linear实现。利用第一算子和第二算子可以代替用于进行STFT的专门的硬件逻辑资源。由于一维卷积conv1d和线性函数linear不需要较高的计算资源，可以在NPU上执行。因此，通过本发明实施例，可以在低资源的NPU上实现STFT，降低资源成本。此外，本发明实施例中的语音信号处理流程可以优化如下：输入时域信号-＞基于NPU将时域信号变换到频域信号-＞基于NPU进行神经网络推理-＞基于NPU将频域信号变换到时域信号-＞输出时域信号。通过本发明实施例的方法，语音信号处理过程不需要经过CPU处理，可以实现端到端结构，提高语音信号处理的实时性。语音信号处理的整个过程可以在低资源的NPU上执行，无需进行数据搬移，可以降低资源消耗和系统时延。进一步地，本发明实施例可以借助NPU上卷积操作的高效性以及流水线PIPE处理的优势，使得数据可以实现即进即出，将延迟降至最低，可以适用于实时性要求较高的场景。对于装置实施例而言，由于其与方法实施例基本相似，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。本说明书中的各个实施例均采用递进的方式描述，每个实施例重点说明的都是与其他实施例的不同之处，各个实施例之间相同相似的部分互相参见即可。关于上述实施例中的装置，其中各个模块执行操作的具体方式已经在有关该方法的实施例中进行了详细描述，此处将不做详细阐述说明。本发明实施例还提供一种非临时性计算机可读存储介质，当所述存储介质中的指令由装置的处理器执行时，使得装置能够执行前文图1所对应实施例中语音信号处理方法的描述，因此，这里将不再进行赘述。另外，对采用相同方法的有益效果描述，也不再进行赘述。对于本申请所涉及的计算机程序产品或者计算机程序实施例中未披露的技术细节，请参照本申请方法实施例的描述。本领域技术人员在考虑说明书及实践这里公开的发明后，将容易想到本发明的其它实施方案。本发明旨在涵盖本发明的任何变型、用途或者适应性变化，这些变型、用途或者适应性变化遵循本发明的一般性原理并包括本发明未公开的本技术领域中的公知常识或惯用技术手段。说明书和实施例仅被视为示例性的，本发明的真正范围和精神由下面的权利要求指出。应当理解的是，本发明并不局限于上面已经描述并在附图中示出的精确结构，并且可以在不脱离其范围进行各种修改和改变。本发明的范围仅由所附的权利要求来限制。以上所述仅为本发明的较佳实施例，并不用以限制本发明，凡在本发明的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本发明的保护范围之内。以上对本发明所提供的一种语音信号处理方法、语音信号处理装置和机器可读存储介质，进行了详细介绍，本文中应用了具体个例对本发明的原理及实施方式进行了阐述，以上实施例的说明只是用于帮助理解本发明的方法及其核心思想；同时，对于本领域的一般技术人员，依据本发明的思想，在具体实施方式及应用范围上均会有改变之处，综上所述，本说明书内容不应理解为对本发明的限制。
