标题title
用于软件通信体系结构的静态部署方法
摘要abst
本发明涉及用于软件通信体系结构的静态部署方法，包括步骤：创建基础模型：在基础模型中创建各类元素模型；创建部署模型：创建配置界面和部署界面；生成平台部署描述文件：根据部署模型中各元素模型之间的映射关系，说明部署模型的名称以及各元素模型之间的部署关系；创建应用组件实例：解析平台部署描述文件后，根据平台部署描述文件中所述部署模型的名称，以及各元素模型之间的部署关系，在目标平台上创建应用组件实例；部署：根据各元素实例之间的关联关系在目标平台上对应用组件实例进行部署。本发明能够根据用户的需要创建部署模型，将指定的应用组件部署在指定的可执行设备上，以满足用户的不同需求。
权利要求书clms
1.用于软件通信体系结构的静态部署方法，其特征为包括步骤：创建基础模型：包括在基础模型中创建静态部署需要的各类元素模型；创建部署模型：根据基础模型中的元素模型，创建配置界面和部署界面，所述配置界面用于说明静态部署过程中需要用到的元素模型，所述部署界面用于说明部署后各元素模型之间的映射关系；生成平台部署描述文件：根据部署模型中各元素模型之间的映射关系，通过文件形式说明部署模型的名称，以及各元素模型之间的部署关系；创建应用组件实例：解析平台部署描述文件后，根据平台部署描述文件中所述部署模型的名称，以及各元素模型之间的部署关系，通过函数在目标平台上创建应用组件实例；部署：根据各元素实例之间的关联关系在目标平台上对所述应用组件实例进行部署。2.如权利要求1所述用于软件通信体系结构的静态部署方法，其特征为：在生成平台部署描述文件前，验证创建的基础模型和部署模型进行验证是否符合SCA标准SRTF规范，以及各元素模型之间的端口连接是否匹配。3.如权利要求1所述用于软件通信体系结构的静态部署方法，其特征为：在创建基础模型时，创建的元素模型包括设备模型、节点模型、平台模型、应用组件模型和应用波形模型，在创建设备模型和应用组件模型时，包括设备模型和应用组件模型的属性、接口、端口和实现。4.如权利要求3所述用于软件通信体系结构的静态部署方法，其特征为：在部署模型的配置界面中，包含有一个平台模型和至少一个应用波形模型，在所述平台模型下包含有至少一个节点模型，在每个节点模型下包含有至少一个设备模型；在所述应用波形模型下包含至少一个应用组件模型。5.如权利要求1所述用于软件通信体系结构的静态部署方法，其特征为：在生成平台部署描述文件步骤中，通过生成XML格式的文件说明了部署模型的名称，以及各元素模型之间的部署关系。6.如权利要求5所述用于软件通信体系结构的静态部署方法，其特征为：在生成平台部署描述文件步骤中，调用函数对已构建的部署模型名称数组进行初始化，再创建一个存储对象，并添加XML声明到该存储对象中，然后循环遍历所述部署模型名称数组中的部署模型名称，获取每个部署模型名称关联的应用程序列表，再通过遍历所述应用程序列表，获取每个应用程序依赖的应用组件列表，遍历每个所述应用组件列表，为每个应用组件列表创建一个设备分配元素，并对该设备分配元素设置相关属性值，然后将所有的设备分配元素添加到设备分配数组中，最后将所述设备分配数组添加到最终的重构元素中，并将所述重构元素中的所有内容添加到.pdd.xml文件中，所述.pdd.xml文件为所述平台部署描述文件。7.如权利要求1所述用于软件通信体系结构的静态部署方法，其特征为：在创建元素实例步骤中，解析所述平台部署描述文件后，通过设备分配序列，在目标平台上创建相互关联的元素实例。8.如权利要求7所述用于软件通信体系结构的静态部署方法，其特征为：在使用设备分配序列时，通过函数来验证设备分配序列对设备分配的正确性并返回已分配的有效设备；如果设备分配是正确且有效的，则将相应的信息保存，以及将对应的元素实例相关联。9.如权利要求7所述用于软件通信体系结构的静态部署方法，其特征为：在部署步骤中，显示出已创建的元素实例对应的所有部署模型的名称供用户选择，用户选择需部署的部署模型名称后，根据基于设备分配序列创建的各元素实例之间的关联关系在目标平台上进行部署步骤。
说明书desc
技术领域本发明涉及用于软件通信体系结构的静态部署方法，特别是用于软件通信体系结构且基于设备序列分配的静态部署方法。背景技术软件通信体系结构是基于联合战术无线电系统提出的一种以实现软件无线电系统平台为目标的通信系统设计框架，是现行几种软件无线电体系结构中应用最广泛的一种通信系统框架。在SCA中，部署是指将应用程序和服务实现部署到目标平台上，并确保它们能够相互通信和协作,因此，部署是SCA架构实现的一个必要步骤。同时，SCA也提供了部署时的一致性和可移植性，以支持应用程序和服务的跨平台交互和重用,因此，SCA和部署密切相关，是实现可靠、高效、可扩展的分布式应用程序和服务的基础。在SCA中，目前的部署方式均是采用动态部署，动态部署是指系统自动根据各设备的优先级以及应用组件和设备的容量来决定将应用组件部署在哪一个设备上面，具有一定的灵活性，能够提高资源利用率。但是这种方式的弊端是，如果用户想要将指定的应用程序部署在指定的可执行设备上，则需要更改设备底层源码中的优先级设定，对用户来说难度较高，不易于使用，另外，动态部署过程中涉及到应用组件的动态加载和资源分配，增加了系统实现的复制性，对系统性能要求较高。因此动态部署在实际应用中存在上述的局限性和弊端。发明内容本发明提供了一种用于软件通信体系结构的静态部署方法，通过静态部署，用户可根据自己的需要创建部署模型，将指定的应用组件部署在指定的可执行设备上，以满足用户的不同需求。本发明用于软件通信体系结构的静态部署方法，包括步骤：创建基础模型：包括在基础模型中创建静态部署需要的各类元素模型；创建部署模型：根据基础模型中的元素模型，创建配置界面和部署界面，所述配置界面用于说明静态部署过程中需要用到的元素模型，所述部署界面用于说明部署后各元素模型之间的映射关系；生成平台部署描述文件：根据部署模型中各元素模型之间的映射关系，通过文件形式说明部署模型的名称，以及各元素模型之间的部署关系；创建应用组件实例：解析平台部署描述文件后，根据平台部署描述文件中所述部署模型的名称，以及各元素模型之间的部署关系，通过函数在目标平台上创建应用组件实例；部署：根据各元素实例之间的关联关系在目标平台上对所述应用组件实例进行部署。经测试，本发明的静态部署方法具有良好的可靠性，在建模过程中创建创建部署模型，可以模拟部署情况，避免了实际部署过程中出现的一些人为错误，如平台中无可执行设备，无法部署成功等。通过静态部署能够利于提高系统性能，因为在静态部署中可以通过先编译、预处理和链接代码等方式进行优化。同时，静态部署还具有良好的安全性，由于在部署时就已明确应该运行哪些应用组件，因此对系统进行攻击的可能性会明显降低。静态部署还利于调试与维护，由于静态部署产生的应用组件副本相对较少，因此可以更容易地对其进行测试、调试和维护。静态部署还可以忽略设备内部的优先级设定，方便将指定的应用组件部署在指定的设备上。优选的，在生成平台部署描述文件前，验证创建的基础模型和部署模型进行验证是否符合SCA标准和SRTF规范，以及各元素模型之间的端口连接是否匹配。可以通过现有的算法等方式进行验证，以提高部署和后期运行的安全性及规范性。具体的，在创建基础模型时，创建的元素模型包括设备模型、节点模型、平台模型、应用组件模型和应用波形模型，在创建设备模型和应用组件模型时，包括设备模型和应用组件模型的属性、接口、端口和实现。在此基础上，在部署模型的配置界面中，包含有一个平台模型和至少一个应用波形模型，在所述平台模型下包含有至少一个节点模型，在每个节点模型下包含有至少一个设备模型；在所述应用波形模型下包含至少一个应用组件模型。通过配置界面定义出各种元素模型之间的从属关系。优选的，在生成平台部署描述文件步骤中，通过生成XML格式的文件说明了部署模型的名称，以及各元素模型之间的部署关系。XML格式的文件是目前各类系统通用的一种文本格式，具有可读性、通用性等优点。具体的，在生成平台部署描述文件步骤中，调用函数对已构建的部署模型名称数组进行初始化，再创建一个存储对象，并添加XML声明到该存储对象中，然后循环遍历所述部署模型名称数组中的部署模型名称，获取每个部署模型名称关联的应用程序列表，再通过遍历所述应用程序列表，获取每个应用程序依赖的应用组件列表，遍历每个所述应用组件列表，为每个应用组件列表创建一个设备分配元素，并对该设备分配元素设置相关属性值，然后将所有的设备分配元素添加到设备分配数组中，最后将所述设备分配数组添加到最终的重构元素中，并将所述重构元素中的所有内容添加到.pdd.xml文件中，所述.pdd.xml文件为所述平台部署描述文件。进一步的，在创建元素实例步骤中，解析所述平台部署描述文件后，通过设备分配序列，在目标平台上创建相互关联的元素实例。具体的，在使用设备分配序列时，通过函数来验证设备分配序列对设备分配的正确性并返回已分配的有效设备；如果设备分配是正确且有效的，则将相应的信息保存，以及将对应的元素实例相关联。由此保证了各元素实例之间关联的正确性。进一步的，在部署步骤中，显示出已创建的元素实例对应的所有部署模型的名称供用户选择，用户选择需部署的部署模型名称后，根据基于设备分配序列创建的各元素实例之间的关联关系在目标平台上进行部署步骤。用户可以根据需要选择不同的部署模型进行部署，使部署更加具有灵活性。本发明的有益效果包括：1、通过静态部署，用户可根据自己的需要创建部署模型，将指定的应用组件部署在指定的设备上，满足了用户的不同需求。2、使用静态部署，在部署过程中只需根据平台部署描述文件中的部署关系进行部署，不需调用动态资源分配，有利于提高运行效率。3、具有良好的可靠性，在建模过程中创建创建部署模型，可以模拟部署情况，避免了实际部署过程中出现的一些人为错误，如平台中无可执行设备，无法部署成功等。4、提高了系统性能，在静态部署中可以通过先编译、预处理和链接代码等方式进行优化。同时，静态部署还具有良好的安全性，由于在部署时就已明确应该运行哪些应用组件，因此对系统进行攻击的可能性会明显降低。5、便于调试与维护，静态部署产生的应用组件副本相对较少，因此可以更容易地对其进行测试、调试和维护。6、忽略设备内部的优先级设定，方便将指定的应用组件部署在指定的设备上。附图说明图1为本发明用于软件通信体系结构的静态部署方法的流程图。图2为本发明部署模型的结构框图。具体实施方式为使本申请实施例的目的、技术方案和优点更加清楚，下面将结合本申请实施例中附图，对本申请实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅是本申请一部分实施例，而不是全部的实施例。通常在此处附图中描述和示出的本申请实施例的组件可以各种不同的配置来布置和设计。因此，以下对在附图中提供的本申请的实施例的详细描述并非旨在限制要求保护的本申请的范围，而是仅仅表示本申请的选定实施例。基于本申请的实施例，本领域技术人员在没有做出创造性劳动的前提下所获得的所有其他实施例，都属于本申请保护的范围。实施例1：如图1所示，本发明用于软件通信体系结构的静态部署方法，包括步骤：创建基础模型：包括在基础模型中创建静态部署需要的各类元素模型；创建部署模型：根据基础模型中的元素模型，创建配置界面和部署界面，所述配置界面用于说明静态部署过程中需要用到的元素模型，所述部署界面用于说明部署后各元素模型之间的映射关系，即，部署界面说明各元素模型之间是怎么部署的；生成平台部署描述文件：根据部署模型中各元素模型之间的映射关系，通过文件形式说明部署模型的名称，以及各元素模型之间的部署关系；创建应用组件实例：解析平台部署描述文件后，根据平台部署描述文件中所述部署模型的名称，以及各元素模型之间的部署关系，通过函数在目标平台上创建应用组件实例；部署：根据各元素实例之间的关联关系在目标平台上对所述应用组件实例进行部署。经测试，本发明的静态部署方法具有良好的可靠性，在建模过程中创建创建部署模型，可以模拟部署情况，避免了实际部署过程中出现的一些人为错误，如平台中无可执行设备，无法部署成功等。通过静态部署能够利于提高系统性能，因为在静态部署中可以通过先编译、预处理和链接代码等方式进行优化。同时，静态部署还具有良好的安全性，由于在部署时就已明确应该运行哪些应用组件，因此对系统进行攻击的可能性会明显降低。静态部署还利于调试与维护，由于静态部署产生的应用组件副本相对较少，因此可以更容易地对其进行测试、调试和维护。静态部署还可以忽略设备内部的优先级设定，方便将指定的应用组件部署在指定的设备上。实施例2：在实施例1的基础上，在生成平台部署描述文件前，还要验证创建的基础模型和部署模型进行验证是否符合SCA标准和SRTF规范，以及各元素模型之间的端口连接是否匹配。可以通过现有的算法等方式进行验证，以提高部署和后期运行的安全性及规范性。实施例3：在上述实施例的基础上，创建基础模型时，创建的元素模型包括设备模型、节点模型、平台模型、应用组件模型和应用波形模型，在创建设备模型和应用组件模型时，包括设备模型和应用组件模型的属性、接口、端口和实现。如图2所示，在部署模型的配置界面中，包含有一个平台模型和一个应用波形模型，在所述平台模型下包含有节点模型1和节点模型2，在节点模型1下包含有设备模型11和设备模型12，在节点模型2下包含有设备模型21和设备模型22，也可以是每个节点模型下包含一个或多个设备模型；在所述应用波形模型下包含至少一个应用组件模型，图2中为应用组件模型1和应用组件模型2。通过配置界面定义出各种元素模型之间的从属关系。然后在部署界面中，需要将配置界面中的应用波形模型部署到设备模型12上，因此将该应用波形模型对应的应用组件模型1和应用组件模型2分别与设备模型12关联。上述各元素模型的创建均可通过现有技术实现，该部分不是本发明的创新所在。实施例4：在上述实施例基础上，在生成平台部署描述文件步骤中，通过生成XML格式的文件说明了部署模型的名称，例如生成.pdd.xml文件，以及各元素模型之间的部署关系。XML格式的文件是目前各类系统通用的一种文本格式，具有可读性、通用性等优点。以下通过一种具体实施方式说明平台部署描述文件的生成过程：调用函数“initDeployments”对已构建的部署模型名称数组“deployments”进行初始化；创建一个存储对象，并添加XML声明到该存储对象中，所述存储对象还用于存储各类元素模型的ID和名称。然后循环遍历所述部署模型名称数组“deployments”中的部署模型名称，获取每个部署模型名称关联的应用程序列表；遍历所述应用程序列表，获取每个应用程序依赖的应用组件列表；遍历每个所述应用组件列表，为每个应用组件列表创建一个设备分配元素“deviceAssignment”，并对该设备分配元素“deviceAssignment”设置相关属性值；将所有的设备分配元素“deviceAssignment”添加到设备分配数组“deviceAssignments”中；最后将所述设备分配数组“deviceAssignments”添加到最终的重构元素“softwareassembly”中，并将所述重构元素“softwareassembly”中的所有内容添加到deployment.pdd.xml文件中，所述deployment.pdd.xml文件为所述平台部署描述文件。系统解析所述平台部署描述文件后，通过设备分配序列，在目标板卡上创建相互关联的元素实例。在使用设备分配序列时，通过函数来验证设备分配序列对设备分配的正确性并返回已分配的有效设备。所述函数接受四个输入参数：appFactory、resolver、devices和deviceAssignments。其中，appFactory表示应用程序工厂实例；resolver表示依赖解析器，用于在应用组件和设备之间建立关系；devices表示所有可用的设备；deviceAssignments表示给定的设备分配数组。验证时，该函数先分配一个数组，用于存储有效分配的设备、应用组件实例和资源实现，然后使用appFactory中的softwareAssembly引用，遍历deviceAssignments中的每个元素并验证每个分配的设备和应用组件实例的有效性。如果分配是正确且有效的，则将该设备的对象、应用组件ID、设备ID等信息存储到所述分配的数组中，最后通过所述函数将相对应的设备与应用组件实例相关联。在部署时，显示出已创建的应用组件实例对应的所有部署模型的名称供用户选择，若之前只创建一个部署模型，就只显示一个部署模型名称的选项，若之前创建了多个部署模型，就有多个部署模型名称的选项可供选择。用户选择需部署的部署模型名称后，系统根据基于设备分配序列创建的各元素实例之间的关联关系在所述目标板卡上创建部署模型中各元素模型的实例，进行部署。由此使得部署更加具有灵活性。以上所述实施例仅表达了本申请的具体实施方式，其描述较为具体和详细，但并不能因此而理解为对本申请保护范围的限制。应当指出的是，对于本领域的普通技术人员来说，在不脱离本申请技术方案构思的前提下，还可以做相关的变形和改进，这些都属于本申请的保护范围。
