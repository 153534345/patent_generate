标题title
一种基于4G网络的无人机集群载荷远程调试方法和系统
摘要abst
本发明公开了一种基于4G网络的无人机集群载荷远程调试方法和系统，包括：S1.电路设计：通过block design设计出调试板的硬件电路模型；S2.软硬结合：使用S1生成的HDF文件创建并配置Petalinux工程，编写异步socket网络服务端，加入异常断网处理，服务端配置启动项、设备树完成调试板的程序烧写；S3.远程调试：将烧写完成的调试板与无人机设备装配成载荷，实现基于4G网络的调试模型；S4.集群组网：重复构建S3所述的调试载荷，并通过4G组网将多个无人机载荷构成集群；通过单个地面调试站登录多个搭载于无人机上的调试板，对与调试板连接的FPGA进行调试。本发明解决了在无人机执行任务期间无法对FPGA做实时监控调试和无人机在高空飞行途中时常遇到信号盲区后连接失效的问题。
权利要求书clms
1.一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，所述方法包括以下步骤：S1.电路设计：通过block design设计出调试板的硬件电路模型，并生成硬件描述文件；S2.软硬结合：使用S1生成的HDF文件创建并配置Petalinux工程，编写异步socket网络服务端，加入异常断网处理，服务端配置启动项和设备树完成调试板的程序烧写；S3.远程调试：将烧写完成的调试板与无人机设备装配成载荷，实现基于4G网络的调试模型；S4.集群组网：重复构建S3所述的调试载荷，并通过4G组网将多个无人机载荷构成集群；完成上述步骤之后，通过单个地面调试站登录多个搭载于无人机上的调试板，进而对与调试板连接的FPGA进行调试。2.根据权利要求1所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，步骤S1中，硬件部分实现如下：S1.1.调试板硬件电路设计通过Xilinx Vivado Design Suite中的Block Design构建调试板卡的硬件逻辑系统；S1.2. 基于AXI4总线协议的接口信号进行时序分析；S1.3.基于AXI4总线信号的时序分析将Block Design中的IP核连接；S1.4.编写.xdc约束文件，编写完成后用vivado进行综合验证、生成bit流文件和导出硬件描述文件。3.根据权利要求2所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，AXI4协议具有五个独立的通道：读地址通道、读数据通道、写地址通道、写数据通道和写回应通道。4.根据权利要求1所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，步骤S2中，软件部分实现如下：S2.1.安装配置Petalinux；安装版本与生成HDF的vivado版本保持一致；S2.2.使用HDF文件创建并配置Petalinux工程；S2.3.编写TCP/IP网络服务端，加入异常断网处理；S2.4.加入xvcserver.bb 代码， makefile代码， 服务器自启动配置代码，设备树配置代码；S2.5.编译生成elf和bin文件，然后使用SDK烧写调试板。5.根据权利要求4所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，步骤S2.3中,实现一个TCP/IP服务端程序，为了避免多个客户端对同一FPGA操作，只允许一个服务端的客户端挂载数为1；通过修改客户端服务端套接字程序逻辑，添加对read函数的处理，当服务端在设定时间内read不到客户端的信息来主动诊断网络连接是否断开，若设定时间内收不到则判定为网络连接已断开，主动释放socket资源，然后重新启动等待下一次连接，以此解决网络频繁中断和无人机飞行中经过信号盲区后无法重新连接的问题。6.根据权利要求4所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，步骤S2.4中，进一步包括：步骤S2.4.1.编写xvc-init脚本，所述xvc-init脚本在/usr/bin目录自动创建一个精灵线程，自动化配置服务端程序所需要的UIO驱动模块；并模仿linux系统服务脚本形式，为其添加start、stop和restart功能，当开机启动异常时进行诊断；S2.4.2.使用gcc编译的makefile和bitbake文件代码编写，bitbake中包含md5加密序列，源文件和makefile文件的URI；S2.4.3.编写为硬件设备分配内存地址的设备树代码；包含内容为根节点和各设备节点的配置。7.根据权利要求4所述的一种基于4G网络的无人机集群载荷远程调试方法，其特征在于，步骤S2.5中，编译Petalinux工程，生成zynq_fsbl.elf文件和BOOT.BIN文件，然后使用xilinx SDK工具固化功能在调试板上；选择将程序烧写在SD卡或者Flash上；烧写成功后开始初步的调试，vivado连接后，在Hardware Devices找到被调试的FPGA芯片。8.一种基于4G网络的无人机集群载荷远程调试系统，其特征在于，所述系统用于实现根据权利要求1-7任一项所述的基于4G网络的无人机集群载荷远程调试方法。9.根据权利要求8所述的一种基于4G网络的无人机集群载荷远程调试系统，其特征在于，通过4G无线组网打通无人机集群内的网络，各个无人机载荷搭载4G工业路由器，借助路由器的SD-WAN组网方案将异地的4G路由器互联互通构成了一个虚拟局域网，并支持远程管理。10.根据权利要求8所述的一种基于4G网络的无人机集群载荷远程调试系统，其特征在于，所述系统中将ZYNQ调试板用网线挂载到4G路由器下，保持各IP配置在同一网段中，同时保持被调试FPGA与ZYNQ调试板用JTAG相连。
说明书desc
技术领域本发明涉及FPGA、无人机、VPN等技术领域，尤其是涉及一种基于4G网络的无人机集群载荷远程调试方法和系统。背景技术本发明设计为适应当前飞速发展的无人机技术。随着无人机技术的不断发展及无人机载重与续航能力的不断提升。无人机承担的任务也越来越多，在军事、巡检、测绘等方面的功能扩展也与日俱增。同时也带来了诸多需要解决的技术问题，无人机扩展实现的诸多功能主要取决于载荷的功能。其中FPGA因其在通信、图像、数字信号处理等领域的突出优势而被广泛应用在无人机载荷上。对无人机内部的FPGA以及其他设备的远程调试技术也需要不断的升级优化。现有的赛灵思FPGA远程调试技术主要是基于XVC协议实现的，通过实体线缆连接到上位机使用，对于远距离调试没有具体实现方法。而且对于无人机高空飞行这样的场景显得无所适从，对于多架无人机载荷的FPGA状态也不能很好的监控和调试。现有技术中的服务器基本均是使用verilog语言完成，一方面实现方式比较繁琐，另一方面verilog语言在调试的技巧上与一般的编程语言有较大差异，需要通过功能仿真波形分析，难度较大，调试不方便；其次对于无人机集群载荷这样的应用场景没有合适的调试方法；最后对于因为网络中断重连没有应对措施。针对以上问题提出以下四点：1.现有技术采用Verilog语言设计硬件电路，技术门槛较高，实现复杂。本发明无需verilog语言实现，调试板的硬件设计主要是对Processing System的IP核进行互连通过block design实现硬件电路设计。同时可以基于vivado软件实现电路综合验证和仿真。服务端是位于调试板的PS上运行的TCP服务端程序。在程序运行时可以通过网络对服务端进行调试和监测。2.现有技术对远距离调试没有解决方案，本发明基于4G网络实现远程调试，借助4G网络的超远覆盖范围使得FPGA的调试可以在任意有蜂窝网络的地方，将原本在实验室中的应用升级推广。基于4G网络的先进技术，比如MIMO和OFDM使得4G网络的容量和覆盖范围完全满足无人机远程调试需求，尤其是覆盖范围相比5G网络更广，可支持无人机在一些较为偏远或者人口密度较低的地区工作。3.现有技术对集群这样的多目标应用场景没有解决方案，本发明基于4G网络搭建VPN组网环境，允许远程用户访问局域网中的被调试设备将被调试设备加入组网环境中，为每个被调试设备分配一个IP地址，调试时根据设备选择连接至对应IP地址的设备上，解决了一台电脑不能远程调试多个FPGA设备的问题。4.传统的远程调试技术都是基于网络良好的环境下实现的，对于网络不稳定的情况没有考虑，而在无人机载荷这样的应用场景下，会因无人机飞到信号盲区而导致网络和调试中断的情况出现，并且等到无人机飞行至信号良好区域仍然无法连接。针对此问题，本发明在后文详细阐述了一种异步socket通信的服务端搭建步骤，通过异步socket通信模式可以轻松处理大量连接，实现非阻塞I/O可以使程序支持多个请求，并且可以使网络连接异常中断后自动重连。本发明详细描述了一种基于4G网络的无人机集群载荷远程调试方法,主要用于对无人机集群上飞行载荷内部FPGA进行实时调试、监控以及bit流文件的更换。发明内容本发明的目的在于提供一种基于4G网络的无人机集群载荷远程调试方法和系统，解决在无人机执行任务期间无法对FPGA做实时监控调试的技术问题和无人机在高空飞行途中时常遇到信号盲区后连接失效的问题。为实现上述目的，本发明提供一种基于4G网络的无人机集群载荷远程调试方法，所述方法包括以下步骤：S1.电路设计：通过block design设计出调试板的硬件电路模型，实现RTL级到比特流，并生成硬件描述文件；S2.软硬结合：使用S1生成的HDF文件创建并配置Petalinux工程，编写异步socket网络服务端，加入异常断网处理，服务端配置启动项和设备树完成调试板的程序烧写；S3.远程调试：将烧写完成的调试板与无人机设备装配成载荷，实现基于4G网络的调试模型；S4.集群组网：重复构建S3所述的调试载荷，并通过4G组网将多个无人机载荷构成集群；完成上述步骤之后，通过单个地面调试站登录多个搭载于无人机上的调试板，进而对与调试板连接的FPGA进行调试。进一步，步骤S2中，软件部分实现如下：S2.1.安装配置Petalinux；安装版本与生成HDF的vivado版本保持一致；S2.2.使用HDF文件创建并配置Petalinux工程；S2.3.编写TCP/IP网络服务端，加入异常断网处理；S2.4.加入xvcserver.bb 代码， makefile代码， 服务器自启动配置代码，设备树配置代码；S2.5.编译生成elf和bin文件，然后使用SDK烧写调试板。进一步，步骤S2.3中,实现一个TCP/IP服务端程序，为了避免多个客户端对同一FPGA操作，只允许一个服务端的客户端挂载数为1；通过修改客户端服务端套接字程序逻辑，添加对read函数的处理，当服务端在设定时间内read不到客户端的信息来主动诊断网络连接是否断开，若设定时间内收不到则判定为网络连接已断开，主动释放socket资源，然后重新启动等待下一次连接，以此解决网络频繁中断和无人机飞行中经过信号盲区后无法重新连接的问题。进一步，步骤S2.4中，进一步包括：步骤S2.4.1.编写xvc-init脚本，所述xvc-init脚本在/usr/bin目录自动创建一个精灵线程，自动化配置服务端程序所需要的UIO驱动模块；并模仿linux系统服务脚本形式，为其添加start、stop和restart功能，当开机启动异常时进行诊断；S2.4.2.使用gcc编译的makefile和bitbake文件代码编写，bitbake中包含md5加密序列，源文件和makefile文件的URI；S2.4.3.编写为硬件设备分配内存地址的设备树代码；包含内容为根节点和各设备节点的配置。进一步，步骤S2.5中，编译Petalinux工程，生成zynq_fsbl.elf文件和BOOT.BIN文件，然后使用xilinx SDK工具固化功能在调试板上；选择将程序烧写在SD卡或者Flash上；烧写成功后开始初步的调试，vivado连接后，在Hardware Devices找到被调试的FPGA芯片。另一方面，本发明提供一种基于4G网络的无人机集群载荷远程调试系统，所述系统用于实现根据本发明所述的基于4G网络的无人机集群载荷远程调试方法。进一步，通过4G无线组网打通无人机集群内的网络，各个无人机载荷搭载4G工业路由器，借助路由器的SD-WAN组网方案将异地的4G路由器互联互通构成了一个虚拟局域网，并支持远程管理。进一步，所述系统中将ZYNQ调试板用网线挂载到4G路由器下，保持各IP配置在同一网段中，同时保持被调试FPGA与ZYNQ调试板用JTAG相连。本发明解决了在无人机执行任务期间无法对FPGA做实时监控调试的技术问题。摆脱了传统FPGA调试中jtag线缆的束缚，通过基于4G的VPN组网环境将调试设备连接至组网环境，可以在4G网络的覆盖范围内随时随地畅连调试。另外针对无人机在高空飞行途中时常遇到信号盲区后连接失效的问题做了优化完善，使其在实际应用中能够从容面对网络异常情况，为当今FPGA在无人机载荷中应用日益增多的场景提供远程调试的解决方案。附图说明图1示出了根据本发明实施例基于4G网络的无人机集群载荷远程调试方法和系统中ZYNQ-7000 block design结构示意图；图2示出了根据本发明实施例的基于4G网络的无人机集群载荷远程调试系统网络拓扑图；图3示出了根据本发明实施例的整体的调试场景和内部组件连接方式示意图；图4示出了根据本发明实施例接口信号的读时序图；图5示出了根据本发明实施例接口信号的写时序图。具体实施方式下面将结合附图，对本发明的技术方案进行清楚、完整地描述，显然，所描述的实施例是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。在本发明的描述中，需要说明的是，术语“中心”、“上”、“下”、“左”、“右”、“竖直”、“水平”、“内”、“外”等指示的方位或位置关系为基于附图所示的方位或位置关系，仅是为了便于描述本发明和简化描述，而不是指示或暗示所指的装置或元件必须具有特定的方位、以特定的方位构造和操作，因此不能理解为对本发明的限制。此外，术语“第一”、“第二”、“第三”仅用于描述目的，而不能理解为指示或暗示相对重要性。在本发明的描述中，需要说明的是，除非另有明确的规定和限定，术语“安装”、“相连”、“连接”应做广义理解，例如，可以是固定连接，也可以是可拆卸连接，或一体地连接；可以是机械连接，也可以是电连接；可以是直接相连，也可以通过中间媒介间接相连，可以是两个元件内部的连通。对于本领域的普通技术人员而言，可以根据具体情况理解上述术语在本发明中的具体含义。以下结合图1-图5对本发明的具体实施方式进行详细说明。应当理解的是，此处所描述的具体实施方式仅用于说明和解释本发明，并不用于限制本发明。本技术的实现主要分为硬件和软件两个部分。硬件部分包括载荷的部分架构和调试板的FPGA设计，软件部分指调试板的嵌入式系统软件设计。根据本发明的一种基于4G网络的无人机集群载荷远程调试方法，所述方法包括以下步骤：S1.电路设计：通过block design设计出调试板的硬件电路模型，并生成HDF文件；S2.软硬结合：使用S1生成的HDF文件创建并配置Petalinux工程，编写异步socket网络服务端，加入异常断网处理，服务端配置启动项和设备树完成调试板的程序烧写；S3.远程调试：将烧写完成的调试板与无人机设备装配成载荷，实现基于4G网络的调试模型；S4.集群组网：重复构建S3所述的调试载荷，并通过4G组网将多个无人机载荷构成集群；完成上述步骤之后，通过单个地面调试站登录多个搭载于无人机上的调试板，进而对与调试板连接的FPGA进行调试。具体地，步骤S1中，本发明的硬件设备包括ZYNQ调试板、被调试FPGA开发板和4G工业路由器。其中，ZYNQ是赛灵思公司的一种SoC，本发明所用调试板芯片型号为ZYNQ-7000，它由两个主要部分组成的：一个由双核 ARM Cortex-A9 构成的处理系统 ，和一个等价于一片 FPGA 的可编程逻辑 部分。它还具有集成的存储器、各种外设和高速通信接口。调试板选型有一定灵活性，建议选用小巧的ZYNQ开发板。其一端与4G路由器用网线相连接，另一端使用杜邦线将调试板与被调试FPGA的TCK、TDI、TMS、TDO、GND连接。若被调试FPGA无网线接口可不与4G路由器相连。进一步，步骤S1中，硬件部分实现如下：S1.1.调试板硬件电路设计通过Xilinx Vivado Design Suite中的Block Design构建调试板卡的硬件逻辑系统具体方法：在Block Design引入ZYNQ、Ethernet Subsystem、DMA、jtag及时钟IP核。如下表，并配置。S1.2. 基于AXI4总线协议的接口信号进行时序分析，AXI4协议具有五个独立的通道：读地址通道、读数据通道、写地址通道、写数据通道和写回应通道，同时对应着主要的时序信号。具体的读地址通道、读数据通道信号时序分析见图4：先发送读地址，同时axi_arvaild信号有效，等待axi接口的axi_arready有效时，slave接口可以接收信息，并且发送响应信号。随后将axi_rready信号拉高，表示master接口可以接受数据，axi_rdata信号显示master请求数据已发送，同时axi_rvalid拉高表示数据有效；在数据写回时还包括写回应的三个信号，时序分析见图5：先发送写地址同时axi_awvalid有效。当axi_awready有效时候表示slave接口允许接受地址，完成写地址的发送。数据写入时axi_wvalid有效，表示slave可以接收数据，当wvalid和wready同时有效后完成写数据操作。master完成数据写操作后axi_rs_ready拉高等待slave接口响应，当axi_rsp为OK时，rs_valid信号有效，表示完成数据的写入。S1.3.基于AXI4总线信号的时序分析将Block Design中的IP核连接。具体地如图1所示。S1.4.编写.xdc约束文件，根据FPGA型号查看电路原理图对GPIO管脚进行绑定，同时设定相关引脚的电气标准为LVCMOS33标准；编写完成后用vivado进行综合验证、生成bit流文件和导出硬件描述文件。调试板的硬件电路模型的设计主要是对Processing System的IP核进行互连。使用vivado创建工程，其中block design设计如图1所示的ZYNQ-7000 block design。在图1中的右下角使用XILINX公司的IP核AXI4-Lite to JTAG，基于AXI总线访问技术，用于AXI4-Lite接口转换为JTAG接口，实现了将内存数据转成JTAG信号。该IP核支持高速数据传输和低功耗设计，并且具有高度可配置性，可以通过AXI总线进行控制和配置。此外，该IP核还支持多种调试和测试功能，包括断点、单步执行和内存访问，充分满足远程FPGA调试需求。该IP结构包括AXI4-Lite Master接口、JTAG接口及控制器参数配置。将调试板与被调试开发板的TCK、TMS、TDI、TDO连接，通过调试板对JTAG信号的转换处理进而取代实体JTAG下载器。然后编写.xdc约束文件，根据FPGA型号查看电路原理图对GPIO管脚进行绑定，同时设定了相关引脚的电气标准为LVCMOS33标准。编写完成后用vivado进行综合验证、生成bit流文件、导出硬件描述文件。软件实现部分主要基于硬件实现部分生成的HDF文件完成。步骤S2中，软件部分实现如下：考虑到实时调试的响应速度需求，软件部分选择基于点对点的C/S架构实现，与传统C/S架构不同的是本发明意在通过单个client登录多个server，进而对与server端连接的FPGA进行调试。软件部分即server端的实现步骤主要通过以下5个步骤实现，在此实现步骤执行的过程中同时加入了对片上系统的配置和调优。S2.1.安装配置Petalinux。S2.2.使用HDF文件创建并配置Petalinux工程。S2.3.编写TCP/IP网络服务端，加入异常断网处理。S2.4.加入xvcserver.bb 代码， makefile代码， 服务器自启动配置代码，设备树配置代码。S2.5.编译生成elf和bin文件，然后使用SDK烧写调试板。其中，步骤S2.1的安装版本要与生成HDF的vivado版本保持一致。步骤S2.2需要按照下表中的配置对HDF文件进行配置：具体地，步骤S2.3中,参考xilinx官方文档xapp1251实现一个TCP/IP服务端程序，为了避免多个客户端对同一FPGA操作发生脏读等情况，只允许一个服务端的客户端挂载数为1。传统的TCP/IP服务端与客户端中套接字函数交互方式中服务端程序启动后开启监听，等待客户端通过connect来建立连接。在客户端退出或关闭时会执行close进而告知服务端释放与此连接的socket资源。但是在遇到突然失去信号的场景中，服务端等不到客户端四次挥手的数据包，所以一直不释放此连接的相关资源。等到网络恢复之后客户端又会重新建立一个socket连接，但是此时服务端不会listen而是一直在read，导致出现恢复网络也不能重新连接的问题。在无人机的应用场景中经常会出现网络的中断，所以原有的方案在此场景中几乎完全不可用，在本发明中通过设计实现异步通信的套接字程序解决了在无人机应用场景中的问题。基本步骤如下：S2.3.1.创建套接字并绑定端口：在服务端程序中，首先需要创建一个套接字并绑定端口以便于客户端连接。可以使用UNIX网络编程中的socket和bind函数来完成这个步骤。S2.3.2.监听连接请求：服务端程序需要监听客户端的连接请求。可以使用UNIX网络中的listen函数来完成这个步骤。S2.3.3.接受连接请求：当有客户端连接请求到达时，服务端程序需要使用UNIX中的accept函数来接受连接请求并返回一个新的套接字。S2.3.4.设置异步I/O模式：在服务端程序中，可以使用UNIX中的fcntl函数来设置套接字为非阻塞模式，从而实现异步I/O操作。S2.3.5.处理I/O事件：服务端程序需要在事件循环中使用select或者poll函数来监听I/O事件，当有事件发生时，需要处理事件并返回结果给客户端。S2.3.6.客户端发送请求：在客户端程序中，需要使用connect函数来连接服务端，并使用异步I/O模式发送请求。S2.3.7.处理服务端响应：客户端程序需要在事件循环中使用select或者poll函数来监听服务端响应，当有响应到达时，需要处理响应并关闭连接。实现的异步通信socket程序不需要为每个连接创建新的线程或进程，可以轻松地扩展到处理大量并发连接，通过使用回调函数来处理事件，从而实现非阻塞的I/O操作。这使得程序可以同时处理多个请求，而不需要等待每个请求完成。并且可以通过使用事件驱动的设计来处理连接错误和异常情况。这使得程序更加稳定，并且可以更好地处理连接中断和其他错误情况。并且在实践中测试可以解决网络频繁中断和无人机飞行中经过信号盲区后无法重新连接的问题。具体地，步骤S2.4的实现流程如下：S2.4.1,编写xvc-init脚本，该脚本在/usr/bin目录自动创建一个精灵线程，自动化配置服务端程序所需要的UIO驱动模块。并模仿linux系统服务脚本形式，为其添加start、stop和restart功能，如果开机启动异常可以通过以上命令进行诊断。脚本创建方式：“petalinux-create -t apps --template install -n xvc-init –enable”。调试命令如 “/etc/init.d/xvc-init restart”。S2.4.2,使用gcc编译的makefile和bitbake文件代码编写，bitbake中包含md5加密序列，源文件和makefile文件的URI。S2.4.3,编写为硬件设备分配内存地址的设备树代码，文件的创建位置位于“xvc_linux/project-spec/meta-user/recipes-bsp/device-tree/files”。主要包含内容为根节点和各设备节点的配置，设备节点包括usb控制器、axi_jtag、axi_internet等，配置内容包括内存地址空间起始位置、compatible属性等。具体地，步骤S2.5中，编译Petalinux工程，生成zynq_fsbl.elf文件和BOOT.BIN文件，然后使用xilinx SDK工具固化功能在调试板上。可以选择将程序烧写在SD卡或者Flash上。烧写成功后就可以开始初步的调试，vivado连接界面中可以看到先前配置的192.168.1.66的静态IP已经通过网络连接上，在Hardware Devices可以找到被调试FPGA xc7z100的芯片。在网络层面，要实现对无人机集群内FPGA的远程调试需要将集群内的网络打通，其中一种实现方式是4G无线组网，这是一种在物联网中常用的解决方案，在本发明中各个无人机载荷搭载4G工业路由器，借助路由器的SD-WAN组网方案将异地的4G路由器互联互通构成了一个虚拟局域网，并支持远程管理，此组网方案使用端口映射技术将公网上的端口映射到局域网中的设备上。使用VPN技术建立公网和局域网之间的安全隧道，从而允许远程用户访问局域网中的被调试设备，其网络拓扑如图2所示。其中4G工业路由器负责将机上的调试板、FPGA等设备连接起来构成一个局域子网络，同时它还负责连接internet，在internet中将多个路由器构成一个集散网络环境，在集散网络中，各个路由器作为组网成员无法互相访问，只有地面调试站作为中心网络可以访问所有组网成员路由器及其子设备。从调试场景来观察调试系统内各个模块之间的关系如图3所示，主要分为地空两方面，地面调试站在功能方面包括比特流程序的加载与切换、信号的实时抓取与调试。空中由无人机舱内携带载荷，在载荷内部将ZYNQ调试板用网线挂载到4G路由器下，被调试的任务FPGA与ZYNQ调试板用JTAG信号线相连。载荷在功能方面通过任务FPGA采集空中模拟信号，转为物理层的数字逻辑信号，被任务FPGA处理过的逻辑信号通过JTAG接口传递给调试板，最后调试板将物理层信号转换为TCP信号通过路由器发送到地面站。本发明中，取代传统的FPGA-JTAG-上位机连接调试，采用了FPGA-ZYNQ-ETH-路由器-4G网路-上位机的连接方式。由FPGA、ZYNQ、路由器、ETH连接线、JTAG连接线等主要模块构成了无人机载荷的主体。只在FPGA和ZYNQ之间使用JTAG连接，在ZYNQ内部使用图1的block_design设计将AXI-JTAG IP核集成，JTAG模块负责将JTAG和AXI信号进行转换。AXI总线是一种多通道传输总线，可以在不同的接口中传递IO数据、地址、握手等信号。AXI信号经过ZYNQ中嵌入式操作系统上的服务端处理变成TCP/IP包，最后通过4G网络发送到上位机。本发明中，硬件设计部分block design硬件电路设计为重点技术之一。本发明中，为了应对无人机在飞行过程中网络中断后FPGA无法重新连接的情况，提出了一种应对重新连接不上的具体措施：通过优化TCP/IP连接与断开方式使得在无人机飞行过程中的远程调试更加稳定，为本发明的另一技术重点。本发明是针对无人机集群载荷提出的一种远程调试方法，与现有技术相比，是一种更加复杂的应用场景。通过搭建4G组网环境，使得组网环境中任何设备都可以被调试。使得了FPGA调试突破了地域限制。并且设备之间的网络互联都基于载荷内部的路由器来实现，在载荷引出WiFi和4G天线接口，保持了载荷的密封性，故载荷的电磁兼容性不受影响。本发明提出了一种应对网络丢失后重连失败的解决方法，在无人机飞行等应用场景中有了更加健壮的性能，并给出了一种便捷的解决办法，与现有技术方案相比，使得系统稳定性更强。本发明流程图中或在此以其他方式描述的任何过程或方法描述可以被理解为表示包括一个或多个用于实现特定逻辑功能或过程的步骤的可执行指令的代码的模块、片段或部分，可以实现在任何计算机刻度介质中，以供指令执行系统、装置或设备，所述计算机可读介质可以是任何包含存储、通信、传播或传输程序以供执行系统、装置或设备使用。包括只读存储器、磁盘或光盘等。在本说明书的描述中，参考术语“实施例”、“示例”等的描述意指结合该实施例或示例描述的具体特征、结构、材料或者特点包含于本发明的至少一个实施例或示例中。在本说明书中，对上述术语的示意性表述不必须针对的是相同的实施例或示例。此外，本领域的技术人员可以在不产生矛盾的情况下，将本说明书中描述的不同实施例或示例以及其中的特征进行结合或组合。上述内容虽然已经示出和描述了本发明的实施例，可以理解的是，上述实施例是示例性的，不能理解为对本发明的限制，本领域的普通技术人员在本发明的范围内可以对上述实施例进行变化、修改、替换和变型等更新操作。
