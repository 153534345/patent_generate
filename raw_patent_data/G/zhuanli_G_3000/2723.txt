标题title
GPU芯片渲染任务的调试方法及系统
摘要abst
本申请公开了一种GPU芯片渲染任务的调试方法及系统，该方法包括：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。本申请实现了对调试目标的定位和调试模式切换，且同一时间可并行或串行地调试多个目标处理器核，目标处理器核的执行代码也可以动态生成，不局限于静态的已编译完成的elf文件，实现了对GPU进行多目标调试以及动态调试。
权利要求书clms
1.一种GPU芯片渲染任务的调试方法，应用于调试模块，所述调试模块同时挂载于被调试的GPU的GPU系统总线和第二总线上，所述GPU的第一处理器核挂载于所述GPU的第一总线上，所述GPU的第二处理器核挂载于所述GPU的第二总线上，其特征在于，所述方法包括：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，所述第一目标处理器核为第一处理器核；将所述待调试的第二目标处理器核切换至调试模式，其中，所述第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对所述第二目标处理器核进行访问和调试。2.根据权利要求1所述的方法，其特征在于，所述调试模块包含1个，且所述调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上；所述将所述待调试的第二目标处理器核切换至调试模式，包括：根据所述第二目标处理器核的核ID生成模式切换命令，其中，所述模式切换命令携带所指示的第二目标处理器核的核ID及核状态控制位；通过所述第二总线和广播模块向所述第二处理器核广播所述模式切换命令，使每个所述第二目标处理器核根据相应的核状态控制位切换至调试模式。3.根据权利要求1所述的方法，其特征在于，所述调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上，一个调试模块对应一个第二处理器核；所述将所述待调试的第二目标处理器核切换至调试模式，包括：根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位；通过所述第二总线向所述第二目标处理器核发送所述模式切换命令，使所述第二目标处理器核根据相应的核状态控制位切换至调试模式。4.根据权利要求1所述的方法，其特征在于，所述调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上，一个调试模块对应至少一个第二处理器核；若调试模块对应至少两个第二处理器核，则所述将所述待调试的第二目标处理器核切换至调试模式，包括：根据对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的每个第二目标处理器核的核ID及核状态控制位，通过所述第二总线及对应的广播模块向对应的第二处理器核广播所述模式切换命令，使所指示的每个所述第二目标处理器核根据相应的核状态控制位切换至调试模式；若调试模块对应一个第二处理器核，则所述将所述待调试的第二目标处理器核切换至调试模式，包括：根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过所述第二总线向所述第二目标处理器核发送所述模式切换命令，使所述第二目标处理器核根据相应的核状态控制位切换至调试模式。5.根据权利要求1所述的方法，其特征在于，所述调试模块包括第一调试模块和第二调试模块，所述根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，包括：利用第一调试模块根据调试工具的第一调试指令控制第一处理器核定位第二目标处理器核，调用对应的调试接口通过调试传输模块将所述第二目标处理器核的核ID反馈给所述调试工具；利用被调用的第二调试模块根据对应的第二目标处理器核的核ID通过所述GPU的数据传递模块通知所述第一处理器核，使所述第一处理器核通过所述数据传递模块将所述第二目标处理器核所对应的执行代码和数据从GPU侧内存加载至存储单元中。6.一种GPU芯片渲染任务的调试系统，其特征在于，所述调试系统包括：安装于DebugHOST上的调试工具、同时挂载于被调试的GPU的GPU系统总线和第二总线上的调试模块、供调试模块和调试工具通信的调试传输模块，所述GPU的第一处理器核挂载于所述GPU的第一总线上，所述GPU的第二处理器核挂载于所述GPU的第二总线上；所述调试工具，用于根据用户指令通过调试传输模块向调试模块发送第一调试指令；所述调试模块，用于根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，所述第一目标处理器核为第一处理器核；将所述第二目标处理器核切换至调试模式，其中，所述第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对所述第二目标处理器核进行访问和调试。7.根据权利要求6所述的系统，其特征在于，所述调试模块包含1个，且所述调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上；所述调试模块，具体用于根据所述第二目标处理器核的核ID生成模式切换命令，其中，所述模式切换命令携带所指示的第二目标处理器核的核ID及核状态控制位，通过所述第二总线和广播模块向所述第二处理器核广播所述模式切换命令，使每个所述第二目标处理器核根据相应的核状态控制位切换至调试模式。8.根据权利要求6所述的系统，其特征在于，所述调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上，一个调试模块对应一个第二处理器核；所述调试工具，具体用于通过调试接口调用所述第二目标处理器核对应的调试模块；被调用的调试模块，具体用于根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过所述第二总线向所述第二目标处理器核发送所述模式切换命令，使所述第二目标处理器核根据相应的核状态控制位切换至调试模式。9.根据权利要求6所述的系统，其特征在于，所述调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于所述GPU的第二总线上，一个调试模块对应至少一个第二处理器核；所述调试工具，具体用于通过调试接口调用所述第二目标处理器核对应的调试模块；若被调用的调试模块对应至少两个第二处理器核，则被调用的调试模块，具体用于根据对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的每个第二目标处理器核的核ID及核状态控制位，通过所述第二总线及对应的广播模块向对应的第二处理器核广播所述模式切换命令，使所指示的每个所述第二目标处理器核根据相应的核状态控制位切换至调试模式；若被调用的调试模块对应一个第二处理器核，则被调用的调试模块，具体用于根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，所述模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过所述第二总线向所述第二目标处理器核发送所述模式切换命令，使所述第二目标处理器核根据相应的核状态控制位切换至调试模式。10.根据权利要求6所述的系统，其特征在于，所述调试模块包括第一调试模块和第二调试模块；所述第一调试模块，用于根据所述第一调试指令控制第一处理器核定位第二目标处理器核，所述第一调试模块，还用于调用对应的调试接口通过所述调试传输模块将所述第二目标处理器核的核ID反馈给所述调试工具；所述调试工具，还用于根据所述第二目标处理器核的核ID通过所述调试传输模块调用对应的调试接口，以调用对应的第二调试模块；被调用的第二调试模块，用于根据对应的第二目标处理器核的核ID通过所述GPU的数据传递模块通知所述第一处理器核，使所述第一处理器核通过所述数据传递模块将所述第二目标处理器核所对应的执行代码和数据从GPU侧内存加载至存储单元中。
说明书desc
技术领域本申请涉及GPU技术领域，尤其涉及一种GPU芯片渲染任务的调试方法及系统。背景技术一般调试工具有多种，如Openocd等，调试传输模块也有多种，如Jlink,、STlink等，但都有一个特点：调试目标单一，调试加载的elf文件是静态的、已编译完成的文件。GPU核数量众多，甚至有些核要加载的elf文件动态生成。目前的调试工具并不能很好地应对GPU调试的需求。发明内容本申请的主要目的在于提供一种GPU芯片渲染任务的调试方法及系统，可以解决现有技术中调试目标单一，且调试加载的elf文件具有一定局限性的技术问题。为实现上述目的，本申请第一方面提供一种GPU芯片渲染任务的调试方法，应用于调试模块，调试模块同时挂载于被调试的GPU的GPU系统总线和第二总线上，GPU的第一处理器核挂载于GPU的第一总线上，GPU的第二处理器核挂载于GPU的第二总线上，该方法包括：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。为实现上述目的，本申请第二方面提供一种GPU芯片渲染任务的调试系统，该调试系统包括：安装于Debug HOST上的调试工具、同时挂载于被调试的GPU的GPU系统总线和第二总线上的调试模块、供调试模块和调试工具通信的调试传输模块；GPU的第一处理器核挂载于GPU的第一总线上，GPU的第二处理器核挂载于GPU的第二总线上；调试工具，用于根据用户指令通过调试传输模块向调试模块发送第一调试指令；调试模块，用于根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。为实现上述目的，本申请第三方面提供一种计算机可读存储介质，存储有计算机程序，计算机程序被处理器执行时，使得处理器执行以下步骤：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。为实现上述目的，本申请第四方面提供一种计算机设备，包括存储器和处理器，存储器存储有计算机程序，计算机程序被处理器执行时，使得处理器执行以下步骤：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。采用本申请实施例，具有如下有益效果：本申请在调试核数量众多的GPU时，通过调试模块定位GPU中待调试的一个或多个第二目标处理器核，通过第一目标处理器核将需要的或动态生成的执行代码和数据加载至指定的存储单元，并将待调试的第二目标处理器核切换至调试模式，由调试模块获取执行代码和数据对第二目标处理器模块进行访问和调试，且同一时间可并行或串行地调试多个第二目标处理器核，第二目标处理器核的执行代码也可以动态生成，不局限于静态的已编译完成的elf文件，实现了对GPU进行多目标调试以及动态调试。附图说明为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本申请的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。其中：图1为本申请实施例中GPU芯片渲染任务的调试方法的流程图；图2为本申请实施例中调试模块与第二处理器核的连接示意图；图3为本申请另一实施例中调试模块与第二处理器核的连接示意图；图4为本申请另一实施例中调试模块与第二处理器核的连接示意图；图5为本申请实施例中GPU芯片渲染任务的调试系统的结构框图；图6为本申请一具体实施例中GPU芯片渲染任务的调试系统的结构框图。具体实施方式下面将结合本申请实施例中的附图，对本申请实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。如图1所示，在一个实施例中，提供了一种GPU芯片渲染任务的调试方法。该GPU芯片渲染任务的调试方法具体包括如下步骤：S100：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；具体地，该GPU芯片渲染任务的调试方法应用于调试模块，调试模块同时挂载于被调试的GPU的GPU系统总线和第二总线上，GPU的第一处理器核挂载于GPU的第一总线上，GPU的第二处理器核挂载于GPU的第二总线上，第二总线相当于Debug调试总线。调试模块和第二处理器核均挂载于第二总线上，因此，调试模块可以通过第二总线对第二处理器核进行调试和访问。第一处理器核包括分配渲染等任务的一类处理器核，用于调度第二处理器核执行相应的渲染等任务。第二处理器核是执行渲染等任务的一类处理器核，一般GPU包含数以千计的此类核。第一调试指令是Debug HOST上安装的调试工具根据用户指令通过调试传输模块传输给调试模块的。该调试工具包括程序调试工具和片上调试工具。第一调试指令可以用于指示待调试渲染任务或待调试绘图任务，第一目标处理器核根据第一调试指令读取并执行目标绘图命令，以对第二处理器核进行任务分发，被分发任务的第二处理器核为第二目标处理器核。第一调试指令所指示的待调试渲染任务或待调试绘图任务可以是第一目标处理器核控制第二处理器核执行渲染任务的时候产生渲染出错的出错任务。加载的执行代码和数据可以是由CPU HOST侧动态生成并传输至GPU侧的，由GPU侧的第一处理器核分配给第二处理器核执行，并非固定的静态、已编译完成的。因此，本实施例可以实现加载动态的elf文件，实现动态调试。例如，有些核执行的代码是动态生成的，是随上一级核分配的任务变化而变化，从而可以实现动态下载代码并调控。渲染任务是第一处理器核分配给第二处理器核的，因此第一处理器核可以获取到出错任务对应的第二处理器核。基于此，用户发现出错任务后通过第一调试指令指示第一目标处理器核定位出错的第二目标处理器核，重新加载出错的第二处理器核对应的执行代码和数据，并将出错的第二目标处理器核切换至调试模式，以根据该重新加载的执行代码和数据对出错的第二目标处理器核进行访问和调试。第一调试指令所指示的待调试渲染任务或待调试绘图任务还可以是第一目标处理器核并未执行的任务。第一目标处理器核根据第一调试指令读取GPU侧内存中存储的目标绘图命令，并执行目标绘图命令，以对第二处理器核进行任务分发，被分发任务的第二处理器核为待调试的第二目标处理器核。第一目标处理器核将分发任务所对应的执行代码和数据从GPU侧内存加载至被分发任务的第二目标处理器核的存储单元中。其中，存储单元可以为多个第二处理器核所共用，存储单元可以为CACHE，本申请对此不作限制。执行代码是第二处理器核作为渲染任务单元或绘图单元执行画图程序的代码，数据是由上层透传的数据，比如画图使用的顶点数据等。S200：将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核。具体地，第二目标处理器核进入到调试模式后，调试模块才能对第二目标处理器核进行访问和调试，以及获取到第二目标处理器核调试时的调试结果。S300：获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。具体地，调试模块包括调试程序和调试数据，通过调试程序和调试数据可实现对第二目标处理器核的访问核调试。调试数据：用来存储调试程序中使用变量的地方。调试程序：用来访问第二处理器核内存的代码，外部的主机如果要访问第二处理器核需特定的寄存器，在调试模式下调试程序访问第二处理器核内存的代码用到的就是这些寄存器。本实施例在调试核数量众多的GPU时，通过调试模块定位GPU中待调试的第二目标处理器核，通过第一目标处理器核将需要的或动态生成的执行代码和数据加载至指定的存储单元，并将待调试的第二目标处理器核切换至调试模式，由调试模块获取执行代码和数据对第二目标处理器模块进行访问和调试，且同一时间可并行或串行地调试多个第二目标处理器核，第二目标处理器核的执行代码也可以动态生成，不局限于静态的已编译完成的elf文件，实现了对GPU进行多目标调试以及动态加载文件进行调试。在一个实施例中，调试模块包含1个，且调试模块与被调试的GPU的第二处理器核均挂载于GPU的第二总线上；步骤S200具体包括：根据第二目标处理器核的核ID生成模式切换命令，其中，模式切换命令携带所指示的第二目标处理器核的核ID及核状态控制位；通过第二总线和广播模块向第二处理器核广播模式切换命令，使每个第二目标处理器核根据相应的核状态控制位切换至调试模式。具体地，图2为本申请实施例中调试模块与第二处理器核的连接示意图；参考图2，所有第二处理器核共用一个调试模块，调试模块通过广播模块与各个第二处理器核通信。调试模块通过一个SW模块广播模式切换命令。GPU的每一个处理器核都会有自己的核ID，如果一个第二目标处理器核对应一个模式切换命令，则一个模式切换命令中携带一个第二目标处理器核的核ID和核状态控制位。如果所有第二目标处理器核共用一个模式切换命令，则该模式切换命令携带所有第二目标处理器核的核ID及对应的核状态控制位。模式切换命令按序包括：帧头、第二目标处理器核的核ID及核状态控制位。第二处理器核中的任意一个核一旦接收到匹配自己核ID号的命令，就根据核状态控制位来切换核的模式至调试模式。调试模式即停住该核，不停住该核就是让该核正常运行。本实施例通过挂载一个调试模块调试所有第二处理器核，无需挂载过多调试模式，减少资源占用，且可以实现调试的统一管理和调试。而且可以将相互有影响的第二处理器核并行切换至调试模式，进行现场故障排查，实现了多核调试。在一个实施例中，调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于GPU的第二总线上，一个调试模块对应一个第二处理器核；步骤S200具体包括：根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位；通过第二总线向第二目标处理器核发送模式切换命令，使第二目标处理器核根据相应的核状态控制位切换至调试模式。具体地，图3为本申请另一实施例中调试模块与第二处理器核的连接示意图；参考图3，调试模块1通过第二总线与第二处理器核CORE1通信，调试模块2通过第二总线与第二处理器核CORE2通信，调试模块3通过第二总线与第二处理器核CORE3通信，调试模块n通过第二总线与第二处理器核COREn通信。在本实施例中，执行步骤S100-S300及其相关步骤的调试模块为第二目标处理器核对应的调试模块。一个调试模块管理一个第二处理器核的调试，便于清晰地对每个第二处理器核进行独立调试和管理，便于管理。当调试的时候，可以将相互有影响的第二处理器核并行停住进入调试模式，实现第二处理器核的并行调试，利于查看现场故障。且无需配置广播模块，降低设计复杂性。在一个实施例中，调试模块包含多个，所有调试模块与被调试的GPU的第二处理器核均挂载于GPU的第二总线上，一个调试模块对应至少一个第二处理器核；若调试模块对应至少两个第二处理器核，则步骤S200具体包括：根据对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的每个第二目标处理器核的核ID及核状态控制位，通过第二总线及对应的广播模块向对应的第二处理器核广播模式切换命令，使所指示的每个第二目标处理器核根据相应的核状态控制位切换至调试模式；若调试模块对应一个第二处理器核，则步骤S200具体包括：根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过第二总线向第二目标处理器核发送模式切换命令，使第二目标处理器核根据相应的核状态控制位切换至调试模式。具体地，图4为本申请另一实施例中调试模块与第二处理器核的连接示意图；参考图4，调试模块1通过第二总线与第二处理器核CORE1、CORE2通信，调试模块2通过第二总线与第二处理器核CORE3通信，调试模块n通过第二总线与第二处理器核COREn通信。或者，调试模块1通过第二总线与第二处理器核CORE1、CORE2通信，调试模块2通过第二总线与第二处理器核CORE3、CORE4通信，调试模块n通过第二总线与第二处理器核COREn通信。当然，图4仅是一个举例性说明，调试模块与第二处理器核的具体连接或对应关系，可以根据实际情况配置，本申请对此不做限制。相较于图2和图3的对应关系，本实施例部分调试模块可以控制多个第二处理器核，部分调试模块控制单个第二处理器核，综合图2和图3的优势。将相互影响或相关的第二处理器核配置为由同一个调试模块控制，便于整体调试关联的第二处理器核，且可实现第二处理器核的串行调试和并行调试，便于调试和控制。而且图4的连接方式比较灵活，可以适合各种不同的调试场景。在一个实施例中，调试模块包括第一调试模块和第二调试模块，步骤S100具体包括：利用第一调试模块根据调试工具的第一调试指令控制第一处理器核定位第二目标处理器核，调用对应的调试接口通过调试传输模块将第二目标处理器核的核ID反馈给调试工具；利用被调用的第二调试模块根据对应的第二目标处理器核的核ID通过GPU的数据传递模块通知第一处理器核，使第一处理器核通过数据传递模块将第二目标处理器核所对应的执行代码和数据从GPU侧内存加载至存储单元中。具体地，第一调试指令是安装于Debug HOST上的调试工具根据用户指令发送的。第一调试模块根据第一调试指令控制对应的第一目标处理器核，使得第一目标处理器核读取并执行目标绘图命令以对第二处理器核进行任务分发，从而确定被分发任务的第二处理器核为待调试的第二目标处理器核。或者，第一调试模块根据第一调试指令控制对应的第一目标处理器核，使得第一目标处理器核将导致出错任务产生的第二处理器核确定为第二目标处理器核。第一目标处理器核可以通过GPU的数据传递模块将第二目标处理器核的核ID传递给第一调试模块，第一调试模块调用对应的调试接口通过调试传输模块将第二目标处理器核的核ID传递给调试工具。调试工具根据第二目标处理器核的核ID、第二处理器核与第二调试模块之间的对应关系通过调试传输模块调用对应的调试接口，以调用对应的第二调试模块。即，通过对应的调试接口进到不同的调试模块。被调用的第二调试模块向对应的第二目标处理器核发送模式切换命令，使得第二目标处理器核进入调试模式。被调用的第二调试模块通过数据传递模块通知第一目标处理器核将所指示的第二目标处理器核对应的执行代码和数据从GPU侧内存加载至被待调试的第二目标处理器核的存储单元中。其中，数据传递模块具体为GPU中的DMA模块。DMA模块是在GPU内部进行搬移数据的模块，可以访问GPU内部的地址空间。调试模块通过DMA模块发送命令可以不影响第一处理器核的正常运行，实现调试模块与第一处理器核的交互。DMA直接存储器访问模块。本实施例通过第一调试模块定位到第二目标处理器核的核ID，并通过第二调试模块控制对第二目标处理器核的执行代码和数据的加载，实现了多核调试，通过数据传递模块与第一处理器核交互，在不打断第一处理器核正常运行的情况下，通知第一处理器核通过数据传递模块将相应的执行代码和数据从GPU侧内存加载至存储单元，实现局部调试。参考图5，本申请还提供了一种GPU芯片渲染任务的调试系统，调试系统包括：安装于Debug HOST上的调试工具10、同时挂载于被调试的GPU的GPU系统总线和第二总线上的调试模块20、供调试模块20和调试工具10通信的调试传输模块30；GPU的第一处理器核挂载于GPU的第一总线上，GPU的第二处理器核挂载于GPU的第二总线上，调试工具10，用于根据用户指令通过调试传输模块30向调试模块20发送第一调试指令；调试模块20，用于根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中；将第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。具体地，调试工具10包括程序调试工具10和片上调试工具10，调试工具10安装于Debug HOST主机上。其中，程序调试工具10即程序调试器，例如可以为gdb等。片上调试工具10是调试目标对象的工具，例如可以为OpenOCD等，可能包含硬件驱动程序。被调试GPU的系统总线和第二总线上挂载有调试模块20。被调试GPU为Debug Target即调试目标。其中，OpenOCD是一款开源的开放式片上调试软件，需要在调试适配器的配合下可以对片上系统进行相应调试，以及在嵌入式设备上测试系统内程序或边界接扫描测试，可以对硬件设备进行指令集级别和寄存器级别的调试。OpenOCD是一款功能强大的开源调试软件，支持多种调试器，例如Jlink、STlink、FT2232、并口等；支持多种嵌入式处理器等核心的芯片；另外还提供一个GDB Server接口。调试传输模块30是连接DEBUG HOST和调试目标对象的硬件连接设备，如JTAG适配器、Jlink、STlink等。Debug HOST通过调试传输模块30，经过调试端口调用调试模块20的调试程序和调试数据，实现对作为Debug Target的第二处理器核的调试。调试模块20Debug Module，用来调试核的模块。同时挂在GPU的系统总线和总线2上。其中包含调试数据和调试程序等信息。调试数据：用来存储调试程序中使用变量的地方。调试程序：用来访问第二处理器核内存的代码，外部的主机如果要访问第二处理器核，需特定的寄存器，调试程序访问第二处理器核内存的代码用到的就是这些寄存器。调试模块20通过调试程序和调试数据可实现对第二处理器核的访问。另外，本申请的调试模式不同于正常模式。在调试模式下可访问核内的特定寄存器，在正常模式下这些特定寄存器不会被访问。因此，在调试模式下第二目标处理器核会将调试结果存储于特定寄存器，调试模块20可以通过访问特定寄存器获取调试结果，并将调试结果返回给Debug HSOT，以在调试工具10上显示。另外需要说明的是，存储于GPU侧内存的执行代码和数据是CPU HOST根据画图用户的指令生成的。Debug HOST与HOST CPU可以共用一个主机，也可以是二者分别在单独的不同主机上运行。DEBUG HOST是用来调试GPU核的调试主机，通过调试传输模块30与调试的目标对象通信。HOST CPU 和GPU有各自的总线，通过转换总线协议连接。其中HOST CPU分为CPU用户态和CPU内核态：CPU用户态的窗口系统调用MESA的画图函数，生成画图的数据、符号表等数据、指令及BIN文件。其中画图的数据和指令通过libDRM传到CPU内核，可执行代码BIN文件经过编译器优化，转化为指定平台格式的BIN文件，传到CPU内核。其中，窗口系统为供用户操作绘图软件的应用程序。MESA：包括OpenGL的实现，调用DRM接口库libDRM。LIBDRM：是一个库函数，包含有用户态与内核态的一些接口函数，比如IOCTL函数等。CPU内核：Linux内核中包含DRM机制；当MESA调用相应接口，可把符号表、顶点数据、SHADER编译后的BIN文件传到linux内核。GPU通过高速总线接收HOST CPU的数据，此数据存放于GPU的SHARED MEMORY中，第一处理器核通过DMA模块从SHARED MEMORY中加载第二处理器核需要的执行代码和数据至CACHE中，第二处理器核读取CACHE中的执行代码和数据执行图形渲染等任务。GPU的系统总线可以是AXI总线等，第一处理器核、调试模块20、DMA模块挂在该GPU总线上。CPU侧的系统总线可以是PCIE等高速总线。即，HOST CPU用户态中的OpenGL通过调用MESA生成符号表、顶点数据、BIN文件等数据信息。HOST CPU用户态生成的数据传递到HOST CPU内核态。HOST CPU内核态的数据传至GPU。第二处理器核执行渲染任务需要的执行代码是由SHARED MEMORY中存储的BIN文件和符号表组成的elf文件；需要的数据是SHARED MEMORY存储的画图数据。调试模块20与第二处理器核均挂在第二总线上，因此调试模块20只要有对应第二处理器核的elf文件，就可实现对第二处理器核的访问、调试。SHADER编译过程：窗口系统通过MESA生成多种数据，一部分数据传给SHADER，另一部分数据传给CPU内核，后送至GPU。传给SHADERCOMPILER的数据用于生成GPU渲染单元执行代码中的BIN文件，生成BIN文件过程涉及GLSL优化、平台指令格式转换等步骤。SHADER COMPILE过程中的数据源于Gallium 3D。这些数据经TGSI解析后生成初始LLVM IR格式，再经LLVM优化生成新的IR格式。最后，根据对应平台的指令格式，生成相应指令的BIN文件。在一个具体实施例中，在MESA原有的框架内添加了Debug功能，让MESA环境开发调试系统化，容易管理使用。通过调试模块20调试第二处理器核的执行代码，也可以反向的验证MESA生成的代码，这样会给庞大的MESA系统，找到了一个新的查找代码问题的方法。HOST CPU用户态生成的数据传递到HOST CPU内核态：将用户态的数据传递到物理内存。在Linux系统中，MESA层用户可通过Linux内核中的DRM机制，将HOST CPU侧的用户态数据经DRM接口传至CPU内核。fence机制保证用户态核数据同步传递到内核态。HOST CPU内核态的数据传至GPU：HOST CPU侧数据传至GPU的原因：虽然绘图指令和数据在MESA层生成，但真正绘图在GPU侧进行。HOST CPU侧数据从MESA层接收，传至GPU物理内存。HOST CPU侧数据包括：符号表，顶点数据，和SHADER编译后生成的BIN文件。有多种HOST CPU侧的数据传递到GPU的方式：方式一：通过PCIE映射方式来实现符号表和BIN文件搬移。方式二：通过网线连接方式来实现符号表和BIN文件搬移。方式三：通过spi协议方式来实现符号表和BIN文件搬移。方式二和三需要的硬件条件是HOST CPU和GPU都有网络端口、SPI接口等。在一个实施例中，调试模块20包含1个，且调试模块20与被调试的GPU的第二处理器核均挂载于GPU的第二总线上；调试模块20，具体用于根据第二目标处理器核的核ID生成模式切换命令，其中，模式切换命令携带所指示的第二目标处理器核的核ID及核状态控制位，通过第二总线和广播模块向第二处理器核广播模式切换命令，使每个第二目标处理器核根据相应的核状态控制位切换至调试模式。在一个实施例中，调试模块20包含多个，所有调试模块20与被调试的GPU的第二处理器核均挂载于GPU的第二总线上，一个调试模块20对应一个第二处理器核；调试工具10，具体用于通过调试接口调用第二目标处理器核对应的调试模块20；被调用的调试模块20，具体用于根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过第二总线向第二目标处理器核发送模式切换命令，使第二目标处理器核根据相应的核状态控制位切换至调试模式。在一个实施例中，调试模块20包含多个，所有调试模块20与被调试的GPU的第二处理器核均挂载于GPU的第二总线上，一个调试模块20对应至少一个第二处理器核；调试工具10，具体用于通过调试接口调用第二目标处理器核对应的调试模块20；若被调用的调试模块20对应至少两个第二处理器核，则被调用的调试模块20，具体用于根据对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的每个第二目标处理器核的核ID及核状态控制位，通过第二总线及对应的广播模块向对应的第二处理器核广播模式切换命令，使所指示的每个第二目标处理器核根据相应的核状态控制位切换至调试模式；若被调用的调试模块20对应一个第二处理器核，则被调用的调试模块20，具体用于根据所对应的第二目标处理器核的核ID生成对应的模式切换命令，其中，模式切换命令携带所指示的一个第二目标处理器核的核ID及核状态控制位，通过第二总线向第二目标处理器核发送模式切换命令，使第二目标处理器核根据相应的核状态控制位切换至调试模式。图6为本申请一具体实施例中GPU芯片渲染任务的调试系统的结构框图；参考图6，调试模块20包括多个，GPU CORES即GPU的处理器核也包括多个，调试工具10包括连接的程序调试工具10和片上调试工具10。片上调试工具10通过调试传输模块30调用调试接口进入到对应的调试模块20，即通过调试接口调用对应的调试模块20。在一个实施例中，调试模块20包括第一调试模块20和第二调试模块20；第一调试模块20，用于根据第一调试指令控制第一处理器核定位第二目标处理器核，第一调试模块20，还用于调用对应的调试接口通过调试传输模块30将第二目标处理器核的核ID反馈给调试工具10；调试工具10，还用于根据第二目标处理器核的核ID通过调试传输模块30调用对应的调试接口，以调用对应的第二调试模块20；被调用的第二调试模块20，用于根据对应的第二目标处理器核的核ID通过GPU的数据传递模块通知第一处理器核，使第一处理器核通过数据传递模块将第二目标处理器核所对应的执行代码和数据从GPU侧内存加载至存储单元中。具体地，第一调试模块20，用于根据第一调试指令向GPU的数据传递模块发送第二调试指令；第一处理器核读取并执行数据传递模块中的第二调试指令，通过数据传递模块从GPU侧内存中读取目标绘图命令，执行目标绘图命令，以对第二处理器核进行任务分发，将被分发任务的第二目标处理器核的核ID通过数据传递模块反馈给第一调试模块20；或者，第一调试模块20根据第二调试指令确定导致出错任务的第二处理器核为第二目标处理器核。Debug可以追踪程序运行的流程，通过追踪程序运行流程我们就可以了解整个程序的运行，当然也可以找到程序运行异常的地方，我们还可以通过这种方式来学习第三方的框架等。本申请的调试工具10可以供用户查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。它的两大作用，查看程序执行流程，调试程序。用户可以通过调试工具10设置调试断点等操作。本方案的第一处理器核可扩展理解为可加载elf文件信息的一类核，不局限于GPU单元中具有控制第二处理器核调度中心属性的核。本方案的第一处理器核可以是正在运行的核，基于数据传递模块，无需经过核，可直接将需要的数据送至目的地址，即加载elf文件信息到CACHE，因此，在调试的时候不需要打断第一处理器核的正常运行。调试模块20通过数据传递模块将相应的执行代码和数据搬移到CACHE中，进行第二处理器核的调试。通过DMA搬移的执行代码是动态生成的，大小不定，一般来说，动态生成的代码不会超出核内存上限，因为在渲染任务分发之前，第一处理器核会对不同的任务做一个评测，将不同的级别的任务分发给不同级别的第二处理器核，以保证该核能完成任务。执行调试程序其实就是执行汇编指令，该指令一般采用成熟的指令集，如arm指令集，riscv指令集等，根据符号表信息进行调试等。本申请在实现GPU的渲染单元或渲染任务调试时，通过调试模块定位需要调试的核，实现多核串行调试，也可根据配置多个调试模块对应多个核，实现多核并行调试。调试模块可动态地获取系统中任意地方的elf文件调试用于渲染的第二处理器核。这些elf文件可以从任何含有elf文件的GPU单元、CPU单元中取得，包括正在运行的GPU单元。关键是不需要停机，打断正在正常运行管线，可以实现局部调试。本申请还提供了一种计算机设备，该计算机设备包括通过系统总线连接的处理器、存储器和网络接口。其中，存储器包括非易失性存储介质和内存储器。该计算机设备的非易失性存储介质存储有操作系统，还可存储有计算机程序，该计算机程序被处理器执行时，可使得处理器实现上述方法实施例中的各个步骤。该内存储器中也可储存有计算机程序，该计算机程序被处理器执行时，可使得处理器执行上述方法实施例中的各个步骤。本领域技术人员可以理解，具体的计算机设备可以包括比图中所示更多或更少的部件，或者组合某些部件，或者具有不同的部件布置。在一个实施例中，提出了一种计算机设备，包括存储器和处理器，存储器存储有计算机程序，计算机程序被处理器执行时，使得处理器执行以下步骤：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。在一个实施例中，提出了一种计算机可读存储介质，存储有计算机程序，计算机程序被处理器执行时，使得处理器执行以下步骤：根据第一调试指令控制对应的第一目标处理器核定位待调试的第二目标处理器核，以及将对应的执行代码和数据加载至待调试的第二目标处理器核的存储单元中，第一目标处理器核为第一处理器核；将待调试的第二目标处理器核切换至调试模式，其中，第二目标处理器核为第二处理器核；获取存储单元中的执行代码和数据对第二目标处理器核进行访问和调试。本领域普通技术人员可以理解实现上述实施例方法中的全部或部分流程，是可以通过计算机程序来指令相关的硬件来完成，的程序可存储于一非易失性计算机可读取存储介质中，该程序在执行时，可包括如上述各方法的实施例的流程。其中，本申请所提供的各实施例中所使用的对存储器、存储、数据库或其它介质的任何引用，均可包括非易失性和/或易失性存储器。非易失性存储器可包括只读存储器、可编程ROM、电可编程ROM、电可擦除可编程ROM或闪存。易失性存储器可包括随机存取存储器或者外部高速缓冲存储器。作为说明而非局限，RAM以多种形式可得，诸如静态RAM、动态RAM、同步DRAM、双数据率SDRAM、增强型SDRAM、同步链路 DRAM、存储器总线直接RAM、直接存储器总线动态RAM、以及存储器总线动态RAM等。以上实施例的各技术特征可以进行任意的组合，为使描述简洁，未对上述实施例中的各个技术特征所有可能的组合都进行描述，然而，只要这些技术特征的组合不存在矛盾，都应当认为是本说明书记载的范围。以上实施例仅表达了本申请的几种实施方式，其描述较为具体和详细，但并不能因此而理解为对本申请专利范围的限制。应当指出的是，对于本领域的普通技术人员来说，在不脱离本申请构思的前提下，还可以做出若干变形和改进，这些都属于本申请的保护范围。因此，本申请专利的保护范围应以所附权利要求为准。
