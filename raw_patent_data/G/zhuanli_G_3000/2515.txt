标题title
数据同步方法、系统以及相关装置
摘要abst
本申请实施例提供了一种数据同步方法、系统以及相关装置。该方法包括：接收来自中央处理器CPU的数据搬运任务；其中，数据搬运任务包括描述符；基于描述符向外部设备发送数据搬运请求；数据搬运请求携带有第一指令序号；第一指令序号指示数据搬运请求的执行顺序；接收外部设备基于数据搬运请求返回的请求数据；请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照请求数据携带的第二指令序号，向CPU发送数据搬运任务对应的同步信息；同步信息用于指示数据搬运任务的执行进度。本申请能够实现DMA引擎与CPU之间的数据同步，提高数据传输效率，提升设备算力。
权利要求书clms
1.一种数据同步方法，其特征在于，应用于DMA引擎，包括：接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。2.根据权利要求1所述的方法，其特征在于，所述DMA引擎中设置有重排序缓冲区；所述按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息，包括：基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度；根据所述数据搬运任务的执行进度生成所述同步信息，并根据所述第二指令序号指示的发送顺序将所述同步信息发送给CPU。3.根据权利要求2所述的方法，其特征在于，所述基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度，包括：从所述请求数据中获取所述指令序号；以所述指令序号作为索引地址，在所述重排序缓冲区中查找所述索引地址对应的存储空间；在所述索引地址对应的存储空间中写入任务完成标记；所述任务完成标记用于指示所述请求数据对应的数据搬运任务已完成；以所述重排序缓冲区中任务完成标记的写入情况，作为所述数据搬运任务的执行进度。4.根据权利要求3所述的方法，其特征在于，所述重排序缓冲区中划分出多个存储区域；所述根据所述数据搬运任务的执行进度生成所述同步信息，包括：监测所述重排序缓冲区中各个存储区域对应的任务完成标记写入情况；若监测到一个存储区域中所有存储空间均已写入任务完成标记，则生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息。5.根据权利要求4所述的方法，其特征在于，所述生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息之后，还包括：将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态。6.根据权利要求5所述的方法，其特征在于，所述将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态之后，还包括：检测处于待分配状态的指令序号在所有指令序号中所占的比例，基于所述比例通过控制状态寄存器动态配置所述重排序缓冲区的相关参数；其中，所述相关参数包括存储区域所包含的存储单元数量、单次可释放的存储单元数量。7.根据权利要求1所述的方法，其特征在于，所述描述符中包括多个数据搬运任务的执行顺序；所述基于所述描述符向外部设备发送数据搬运请求，包括：从所述描述符中获取所述多个数据搬运任务的执行顺序；按照所述多个数据搬运任务的执行顺序，将处于待分配状态的指令序号分别配置给所述多个数据搬运任务，作为所述多个数据搬运任务各自对应的第一指令序号；分配给数据搬运任务的第一指令序号与该数据搬运任务的执行顺序对应；基于分配到的第一指令序号以及所述描述符中多个数据搬运任务各自的配置信息，生成各个数据搬运任务对应的数据搬运请求；将各个数据搬运任务对应的数据搬运请求发送给所述外部设备。8.根据权利要求1所述的方法，其特征在于，还包括：监测重排序缓冲区中是否存在未绑定数据搬运任务的存储空间；与数据搬运任务绑定的存储空间用于记录该数据搬运任务对应的执行进度；若监测到所述重排序缓冲区中所有存储空间均已绑定数据搬运任务，则生成停止指令，所述停止指令用于指示暂停所述数据搬运请求的生成过程。9.一种DMA引擎，其特征在于，所述DMA引擎包括：收发模块，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；处理模块，被配置为按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。10.一种数据同步系统，其特征在于，所述系统包括CPU以及DMA引擎；其中，所述CPU，被配置为向所述DMA引擎发送数据搬运任务；其中，所述数据搬运任务包括描述符；所述DMA引擎，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度；所述CPU，还被配置为接收所述数据搬运任务对应的同步信息。11.根据权利要求10所述的系统，其特征在于，所述DMA引擎中设置有重排序缓冲区；所述DMA引擎，按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息时，被配置为：基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度；根据所述数据搬运任务的执行进度生成所述同步信息，并根据所述第二指令序号指示的发送顺序将所述同步信息发送给CPU。12.根据权利要求11所述的系统，其特征在于，所述DMA引擎，基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度时，被配置为：从所述请求数据中获取所述指令序号；以所述指令序号作为索引地址，在所述重排序缓冲区中查找所述索引地址对应的存储空间；在所述索引地址对应的存储空间中写入任务完成标记；所述任务完成标记用于指示所述请求数据对应的数据搬运任务已完成；以所述重排序缓冲区中任务完成标记的写入情况，作为所述数据搬运任务的执行进度。13.根据权利要求12所述的系统，其特征在于，所述重排序缓冲区中划分出多个存储区域；所述DMA引擎，根据所述数据搬运任务的执行进度生成所述同步信息时，被配置为：监测所述重排序缓冲区中各个存储区域对应的任务完成标记写入情况；若监测到一个存储区域中所有存储空间均已写入任务完成标记，则生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息。14.根据权利要求13所述的系统，其特征在于，所述DMA引擎，还被配置为：在生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息之后，将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态。15.根据权利要求14所述的系统，其特征在于，所述DMA引擎，还被配置为：在将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态之后，检测处于待分配状态的指令序号在所有指令序号中所占的比例，基于所述比例通过控制状态寄存器动态配置所述重排序缓冲区的相关参数；其中，所述相关参数包括存储区域所包含的存储单元数量、单次可释放的存储单元数量。16.根据权利要求10所述的系统，其特征在于，所述描述符中包括多个数据搬运任务的执行顺序；所述DMA引擎基于所述描述符向外部设备发送数据搬运请求时，被配置为：从所述描述符中获取所述多个数据搬运任务的执行顺序；按照所述多个数据搬运任务的执行顺序，将处于待分配状态的指令序号分别配置给所述多个数据搬运任务，作为所述多个数据搬运任务各自对应的第一指令序号；分配给数据搬运任务的第一指令序号与该数据搬运任务的执行顺序对应；基于分配到的第一指令序号以及所述描述符中多个数据搬运任务各自的配置信息，生成各个数据搬运任务对应的数据搬运请求；将各个数据搬运任务对应的数据搬运请求发送给所述外部设备。17.根据权利要求10所述的系统，其特征在于，所述系统还包括进程追踪器，被配置为：监测重排序缓冲区中是否存在未绑定数据搬运任务的存储空间；与数据搬运任务绑定的存储空间用于记录该数据搬运任务对应的执行进度；若监测到所述重排序缓冲区中所有存储空间均已绑定数据搬运任务，则生成停止指令，所述停止指令用于指示暂停所述数据搬运请求的生成过程。18.一种计算机可读存储介质，其包括指令，当其在计算机上运行时，使得计算机执行如权利要求1-8中任一项所述的数据同步方法。19.一种计算设备，包括：存储器，处理器及存储在存储器上并可在处理器上运行的计算机程序，其中，所述处理器执行所述计算机程序时实现如权利要求1-8中任一项所述的数据同步方法。
说明书desc
技术领域本申请实施例涉及数据处理技术领域，更具体地涉及一种数据同步方法、系统以及相关装置。背景技术目前，越来越多领域需要依赖人工智能技术。人工智能在提供强大计算功能的同时，也伴随着对硬件设备的高算力需求。如何在硬件设备中更高效地运行中央处理器 指令，提升设备算力，成为研究方向之一。相关技术中，采用存储器直接访问传输技术，实现外部设备和存储器之间的高速数据传输，提高硬件设备的数据传输效率，减少对CPU计算资源的消耗。DMA引擎是一个硬件组件，用于在无需CPU介入的场景下，完成存储器与外部设备之间的数据读写，以及存储器之间的数据读写。由于不同数据读写的完成时间不一致，为提升传输效率，DMA引擎一般会乱读突发传输的方式接收不同时间反馈的数据，然而这种方式会降低CPU指令的执行效率，影响设备算力。以高级可扩展接口总线协议为例，假设CPU的一条指令需要读取data_0、data_1、data_2、data_3这四份数据才能开始执行运算。那么，即使data_1、data_2、data_3的读取速度较快，在data_0之前被优先反馈到DMA引擎中，CPU也仍需要等待data_0数据读取完毕才能执行这一指令，大大降低了CPU指令的执行效率。因此，亟需设计一种全新的解决方案，用于克服乱序接收传输方式带来的技术问题，优化数据传输效率和节点物理能耗。发明内容本申请实施例提供了一种改进的数据同步方法、系统以及相关装置，用以实现DMA引擎与CPU之间的数据同步，提高数据传输效率，提升设备算力。本申请的实施例期望提供一种数据同步方法、系统以及相关装置。在本申请的第一方面中，提供了一种数据同步方法，应用于DMA引擎，包括：接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。在本申请的第二方面中，提供了一种DMA引擎，所述DMA引擎应用于实现如第一方面中任一所述的数据同步方法；所述DMA引擎包括：收发模块，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；处理模块，被配置为按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。在本申请的第三方面中，提供了一种数据同步系统，其特征在于，所述系统包括CPU以及DMA引擎；其中，所述CPU，被配置为向所述DMA引擎发送数据搬运任务；其中，所述数据搬运任务包括描述符；所述DMA引擎，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度；所述CPU，还被配置为接收所述数据搬运任务对应的同步信息。在本申请的第四方面中，提供了一种计算机可读存储介质，其包括指令，当其在计算机上运行时，使得计算机执行第一方面中所述的数据同步方法。在本申请的第五方面中，提供了一种计算设备，被配置为：存储器，处理器及存储在存储器上并可在处理器上运行的计算机程序，其中，所述处理器执行所述计算机程序时实现第一方面中所述的数据同步方法。本申请实施例提供的技术方案中，提供了一种数据同步方法，应用于DMA引擎。首先，DMA引擎接收来自CPU的数据搬运任务，该数据搬运任务包括描述符。进而，基于描述符向外部设备发送数据搬运请求，该数据搬运请求携带有第一指令序号，该第一指令序号指示数据搬运请求的执行顺序。进而，接收外部设备基于数据搬运请求返回的请求数据，该请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配。最终，按照请求数据携带的第二指令序号，向CPU发送数据搬运任务对应的同步信息，该同步信息用于指示数据搬运任务的执行进度。相对于现有技术中乱序接收、乱序反馈的方式，本申请实施例中通过数据搬运请求中指示任务执行顺序的第一指令序号，以及请求数据中与第一指令序号匹配的第二指令序号，使得DMA引擎在乱序接收请求数据之后能够基于第二指令序号获取数据搬运任务的执行进度，进而通过同步信息向CPU告知该数据搬运任务的执行进度，实现DMA引擎与CPU之间的数据同步，克服乱序接收传输方式带来的CPU指令执行效率低，存储空间占用过久等问题，提高数据传输效率，提升设备算力。附图说明通过参考附图阅读下文的详细描述，本申请示例性实施例的上述以及其他目的、特征和优点将变得易于理解。在附图中，以示例性而非限制性的方式示出了本申请的若干实施例，其中：图1示意性地示出了根据本申请中数据同步方法的一种流程示意图；图2示意性地示出了根据本申请中数据同步系统的一种架构示意图；图3示意性地示出了根据本申请中数据同步方法的一种原理示意图；图4示意性地示出了根据本申请中数据同步方法的另一种原理示意图；图5示意性地示出了根据本申请中数据同步方法的再一种原理示意图；图6示意性地示出了根据本申请中数据同步系统的一种交互示意图；图7示意性地示出了根据本申请中数据同步装置的一种结构示意图；图8示意性地示出了根据本申请中计算设备的一种结构示意图；图9示意性地示出了根据本申请中服务器的一种结构示意图。在附图中，相同或对应的标号表示相同或对应的部分。具体实施方式下面将参考若干示例性实施例来描述本申请的原理和精神。应当理解，给出这些实施例仅仅是为了使本领域技术人员能够更好地理解进而实现本申请，而并非以任何方式限制本申请的范围。相反，提供这些实施例是为了使本公开更加透彻和完整，并且能够将本公开的范围完整地传达给本领域的技术人员。本领域技术人员知道，本申请的实施例可以实现为一种系统、装置、设备、系统或计算机程序产品。因此，本公开可以具体实现为以下形式，即：完全的硬件、完全的软件，或者硬件和软件结合的形式。目前，越来越多领域需要依赖人工智能技术。人工智能在提供强大计算功能的同时，也伴随着对硬件设备的高算力需求。如何在硬件设备中更高效地运行CPU指令，提升设备算力，成为研究方向之一。相关技术中，采用DMA传输技术，实现外部设备和存储器之间的高速数据传输，允许外部设备和存储器之间直接读写数据，提高硬件设备的数据传输效率，减少对CPU计算资源的消耗，辅助提升设备算力。DMA引擎是一个硬件组件，用于在无需CPU介入的场景下，完成存储器与外部设备之间的数据读写，以及存储器之间的数据读写。相关技术中，由于不同数据读写的完成时间不一致，为提升传输效率，DMA引擎一般会乱读突发传输的方式接收不同时间反馈的数据，然而这种方式会降低CPU指令的执行效率，影响设备算力。以AXI总线协议为例，假设CPU的一条指令需要读取data_0、data_1、data_2、data_3这四份数据才能开始执行运算。那么，即使data_1、data_2、data_3的读取速度较快，在data_0之前被优先反馈到DMA引擎中，CPU也仍需要等待data_0数据读取完毕才能执行这一指令，大大降低了CPU指令的执行效率。因此，亟需设计一种全新的解决方案，用于克服乱序接收传输方式带来的技术问题，优化数据传输效率和节点物理能耗。为了克服上述技术问题，根据本申请的实施例，提出了一种数据同步方法、系统以及相关装置。本申请实施例提供的技术方案中，提供了一种数据同步方法，应用于DMA引擎。首先，DMA引擎接收来自CPU的数据搬运任务，该数据搬运任务包括描述符。进而，基于描述符向外部设备发送数据搬运请求，该数据搬运请求携带有第一指令序号，该第一指令序号指示数据搬运请求的执行顺序。进而，接收外部设备基于数据搬运请求返回的请求数据，该请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配。最终，按照请求数据携带的第二指令序号，向CPU发送数据搬运任务对应的同步信息，该同步信息用于指示数据搬运任务的执行进度。相对于现有技术中乱序接收、乱序反馈的方式，本申请实施例中通过数据搬运请求中指示任务执行顺序的第一指令序号，以及请求数据中与第一指令序号匹配的第二指令序号，使得DMA引擎在乱序接收请求数据之后能够基于第二指令序号获取数据搬运任务的执行进度，进而通过同步信息向CPU告知该数据搬运任务的执行进度，实现DMA引擎与CPU之间的数据同步，克服由乱序接收传输方式带来的CPU指令执行效率低，存储空间占用过久等问题，提高数据传输效率，提升设备算力。作为一种可选的实施方式，数据同步装置的数量是一个，也可以是多个。一些示例中，数据同步装置可以实现为部署在芯片内部的逻辑单元；另一些示例中，也可以是以其他形式部署在数字电路结构中，本申请不作限制。例如，数据同步装置可以设置在各种设备的处理器件中。在本文中，附图中的任何元素数量均用于示例而非限制，以及任何命名都仅用于区分，而不具有任何限制含义。示例性方法下面结合具体应用场景，参考图1来描述根据本申请示例性实施例的用于通信的方法。需要注意的是，上述应用场景仅是为了便于理解本申请的精神和原理而示出，本申请的实施例在此方面不受任何限制。相反，本申请的实施例可以应用于适用的任何场景。下面结合以下实施例对数据同步方法的执行过程进行说明。图1为本发明实施例提供的一种数据同步方法的流程图。该方法应用于DMA引擎。如图1所示，该方法包括如下步骤：步骤101，接收来自中央处理器CPU的数据搬运任务；步骤102，基于所述描述符向外部设备发送数据搬运请求；步骤103，接收所述外部设备基于所述数据搬运请求返回的请求数据；步骤104，按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息。首先，在介绍上述步骤101至104的具体实施方式之前，先介绍本申请实施例所涉及的执行主体，即DMA引擎。DMA引擎是一个硬件组件，用于在无需CPU介入的场景下，完成存储器与外部设备之间的数据读写，以及存储器之间的数据读写。具体地，采用DMA引擎在无需CPU介入的场景下，可以实现外部设备和存储器之间、或者存储器与存储器之间的高速数据传输，不仅有效提升硬件设备的数据传输效率，还有助于避免CPU在数据传输方面应用额外算力，减少对CPU计算资源的消耗，提高了CPU指令的执行效率。其中，本申请实施例所涉及的外部设备可以是外部设备的寄存器，例如ADC的数据寄存器、串口的数据寄存器等。存储器，包括但不限于运行内存和程序存储器，用于存储变量、数组、程序代码的存储空间。相关技术中，由于不同数据读写的完成时间不一致，为提升传输效率，DMA引擎常常会乱序接收不同时间反馈的数据，导致CPU指令的执行效率下降，影响设备算力。以AXI总线协议为例，假设CPU的一条指令需要读取data_0、data_1、data_2、data_3这四份数据才能开始执行运算。那么，即使data_1、data_2、data_3的读取速度较快，在data_0之前被优先反馈到DMA引擎中，CPU也仍需要等待data_0数据读取完毕才能执行这一指令，大大降低了CPU指令的执行效率。此外，CPU等待期间，还会占用存储空间存放已经接收到的部分数据，影响后续数据的存取。为了解决上述至少一个技术问题，本申请实施例提供了一种数据同步方法，用以在DMA引擎与CPU之间实现数据同步，使得乱序反馈到DMA引擎的请求数据能够通过指令序号标注出与数据搬运任务执行顺序之间的关联，进而帮助CPU侧获取到与数据搬运任务执行顺序一致的请求数据，进一步提高数据传输效率，减少对CPU计算资源的消耗，提升设备算力。具体来说，在步骤101中，DMA引擎接收来自CPU的数据搬运任务。本申请实施例中，所述数据搬运任务包括描述符。描述符用于指示数据搬运任务所涉及的各种配置，例如，数据搬运顺序、数据搬运的起始点、数据搬运的终点、待搬运数据量。上述配置类型以及配置数量均可根据实际情况进行调整，此处仅为示例。步骤102中，DMA引擎基于所述描述符向外部设备发送数据搬运请求。本申请实施例中，所述多个数据搬运请求包括数据读取请求和/或数据写入请求 。可以理解的是，数据读取请求是DMA引擎调用自身存储空间中的数据，以执行CPU所指示的操作。数据写入请求是DMA引擎在CPU的指示下，将数据写入自身的存储空间中。此处的存储空间包括DMA引擎可调用的各种类型存储器或存储介质。本申请实施例中，为了应对乱序收发数据带来的效率下降等问题，所述数据搬运请求分别携带有指令序号。为便于区分此处的指令序号称为第一指令序号，所述第一指令序号用于指示所述数据搬运请求的执行顺序。从而，通过该第一指令序号能够表明数据搬运请求所对应的任务执行顺序，为后续请求数据的标注提供实现基础。继续以AXI总线协议为例，假设CPU的一条指令需要依次读取data_0、data_1、data_2、data_3这四份数据，用于执行相关运算。DMA引擎接收到这一指令之后，从指令中提取数据读取任务对应的描述符，进而，基于该描述符中的数据读取需求，生成用于读取上述数据的数据搬运请求。比如，数据读取请求0、数据读取请求1、数据读取请求2、数据读取请求3。上述数据读取请求中分别携带有与CPU数据读取顺序一致的第一指令序号，即数据读取请求0携带有第一指令序号0，数据读取请求1携带有第一指令序号1，数据读取请求2携带有第一指令序号2，数据读取请求3携带有第一指令序号3，上述指令序号基于数值从小到大排序，对应于数据读取任务从先到后的执行顺序。进而，DMA引擎将生成的4个数据读取请求分别发送到对应外部设备侧或其他存储器侧。进一步可选地，为了使需要优先被读取的数据优先返回，上述数据读取请求的发送时机，可以是基于数据读取请求的执行顺序来设置。当然，上述数据读取请求也可以同时发送，或乱序发送。无论是上述何种情况，数据读取请求中都携带有第一指令序号，可以表明其对执行顺序的实际需求，促使外部设备或其他存储器在返回请求数据时携带上对应的第二指令序号，用以表明该请求数据在原有数据读取任务中所对应的执行顺位。当然，实际应用中，根据存储位置或其他因素也可以生成其他数量的数据读取请求，此处示例中并不限定。例如，生成三个数据读取请求，包括数据读取请求x、数据读取请求y、数据读取请求z。基于此，第一指令序号同样也可以基于待读取数据序号从小到大排序，对应于数据读取任务从先到后的执行顺序来设置。步骤103中，DMA引擎接收外部设备基于数据搬运请求返回的请求数据。本申请实施中，请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配。该第二指令序号主要用于表明该请求数据在原有的数据搬运任务中所对应的执行顺位。可以理解的是，为了更直观地反映出请求数据对应的数据搬运任务的执行顺序，可以将请求数据中携带的第二指令序号，设置为与对应数据搬运请求中携带的第一指令序号相同的数值。继续以AXI总线协议为例，假设数据读取请求按照从先到后的执行顺序，包括以下：数据读取请求0、数据读取请求1、数据读取请求2、数据读取请求3。那么，DMA引擎从外部设备处乱序接收上述数据读取请求返回的请求数据，分别为data_1、data_0、data_3、data_2。从携带的第二指令序号可知，按照对应数据读取任务的执行顺位从先到后来排列，分别是data_0、data_1、data_2、data_3。值得说明的是，第一指令序号与第二指令序号的匹配关系，可以通过DMA引擎中的映射表来维护。或者，也可以在DMA引擎中设置用于维护这一关系的序号分配器。如图2所示，在DMA引擎的基础架构中，序号分配器主要用于管理待分配和已分配的指令序号。具体地，序号分配器在数据搬运任务开始前，将待分配的指令序号分别配置给不同的数据搬运任务，在数据搬运任务结束之后，从已完成的数据搬运任务处回收已分配的指令序号，设置为待分配状态，等待下一个DMA数据传输任务。进一步可选地，还可以监测是否存在处于待分配状态的指令序号。若监测到没有处于待分配状态的指令序号，则说明当前未完成的数据传输任务已超过DMA引擎的处理能力，此情况下，需要暂停数据传输任务，以避免CPU等待时间过长。故而，此情况下，可以生成停止指令，所述停止指令用于指示暂停所述数据搬运请求的生成过程。这样，可以避免因乱序反馈的请求数据并未反馈完成，而导致CPU等待时间过长的问题，保证数据传输效率，辅助提高CPU指令的执行效率。接收到请求数据之后，步骤104中，DMA引擎按照请求数据携带的第二指令序号，向CPU发送数据搬运任务对应的同步信息。本申请实施例中，同步信息用于指示数据搬运任务的执行进度。例如，数据搬运任务的执行进度，可以是数据搬运任务中已返回的数据片段对应的标识。或者，以写入任务完成标记的存储空间在所述重排序缓冲区的总存储空间中所占的比例，作为所述数据搬运任务的执行进度。或者，直接以任务完成标记对应的数据搬运任务的数量，作为数据搬运任务的执行进度。继续以AXI总线协议为例，假设DMA引擎从外部设备处乱序接收的请求数据，分别为：data_3、data_2。基于上述假设，根据第二指令序号可以得知，当前已接收到的请求数据data_2、data_3在数据搬运任务中的执行顺位分别为第三位和第四位。基于此，可以生成该数据搬运任务对应的同步信息，并发送给CPU，用以表明已接收到数据搬运任务中的执行顺位为第三位和第四位的请求数据。在上述或下述实施例中，为了进一步提高DMA引擎的数据传输效率，实现DMA引擎与CPU之间的数据同步，本申请实施例还提供了以下数据同步方式。具体来说，在一可选实施例中，假设DMA引擎中设置有重排序缓冲区。基于此，步骤104中，按照请求数据携带的第二指令序号，向CPU发送数据搬运任务对应的同步信息的一个可选实现方式，如图3所示，包括以下步骤：步骤301，基于请求数据携带的第二指令序号，在重排序缓冲区中记录DMA引擎已接收到的请求数据，得到数据搬运任务的执行进度；步骤302，根据数据搬运任务的执行进度生成同步信息，并根据第二指令序号指示的发送顺序将同步信息发送给CPU。上述步骤301至302中，通过在DMA引擎中引入ROB，按照数据搬运任务的执行顺序释放同步信息，使得CPU可以按照同步信息指示的执行进度提前触发程序的执行流程。这样，通过引入ROB可以实现DMA引擎对数据搬运任务的进度追踪，以便实现DMA引擎与CPU之间的数据同步，使数据搬运任务的执行进度与CPU的执行顺序保持一致，有效提高CPU指令的执行效率。基于上述介绍，作为一个可选实施例，步骤301中基于请求数据携带的第二指令序号，在重排序缓冲区中记录DMA引擎已接收到的请求数据，得到数据搬运任务的执行进度的一个可选实现方式，如图4所示，可以为：步骤401，从请求数据中获取指令序号；步骤402，以指令序号作为索引地址，在重排序缓冲区中查找索引地址对应的存储空间；步骤403，在索引地址对应的存储空间中写入任务完成标记；任务完成标记用于指示请求数据对应的数据搬运任务已完成；步骤404，以重排序缓冲区中任务完成标记的写入情况，作为数据搬运任务的执行进度。进一步地，假设重排序缓冲区中划分出多个存储区域。步骤302中根据数据搬运任务的执行进度生成同步信息的一个可选实现方式，如图4所示，可以为：步骤405，监测重排序缓冲区中各个存储区域对应的任务完成标记写入情况；步骤406，若监测到一个存储区域中所有存储空间均已写入任务完成标记，则生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息。通过上述步骤401至406，可以进一步提升数据搬运任务的进度追踪，使数据搬运任务的执行进度与CPU的执行顺序保持一致，有效提高CPU指令的执行效率。进一步可选地，生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息之后，还可以将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态。本申请实施例中，ROB可以在同一周期内通过多个端口写入数据，并在同一周期内清空重排序缓冲区中的多个存储区域。为应对不同应用场景下的运算需求，通过控制状态寄存器动态配置所述重排序缓冲区的相关参数，进一步提升DMA的数据读写效率，提升CPU指令的运行效率。其中，相关参数包括但不限于：存储区域所包含的存储单元数量、单次可释放的存储单元数量。每一存储单元可写入至少一个任务完成标记。例如，存储区域中包含的存储单元数量，可以配置为16、32、64、128个地址。作为另一个可选实施例，如图5所示，DMA引擎中还可设置一个从0开始计数的计数器。若存储单元内对应的数据搬运任务都已完成，那么，ROB会释放这些数据搬运任务对应的同步信号，并将这些同步信号对应的第二指令序号返回至指令产生器。在一些示例中，如图2所示，基于DMA引擎的基础架构，如果检测到ROB里的所有存储空间已被占满，序号分配器可以反馈至请求产生器，使请求产生器停止产生请求。进一步地，基于图2示出的DMA引擎的基础架构中，若ROB中检测到可使用的存储空间，进程追踪器会向序号分配器发出信用，此信用用于表示ROB中已存在空闲的存储区域。在上述或下述实施例中，监测重排序缓冲区中是否存在未绑定数据搬运任务的存储空间。该与数据搬运任务绑定的存储空间用于记录该数据搬运任务对应的执行进度。若监测到重排序缓冲区中所有存储空间均已绑定数据搬运任务，则说明当前未完成的数据传输任务已超过DMA引擎的处理能力，此情况下，需要暂停数据传输任务，以避免CPU等待时间过长。故而，此情况下，可以生成停止指令，该停止指令用于指示暂停数据搬运请求的生成过程。本实施例中，通过数据搬运请求中指示任务执行顺序的第一指令序号，以及请求数据中与第一指令序号匹配的第二指令序号，使得DMA引擎在乱序接收请求数据之后能够基于第二指令序号获取数据搬运任务的执行进度，进而通过同步信息向CPU告知该数据搬运任务的执行进度，实现DMA引擎与CPU之间的数据同步，克服乱序接收传输方式带来的CPU指令执行效率低，存储空间占用过久等问题，提高数据传输效率，提升设备算力。在介绍了本申请实施例的方法之后，接下来，参考图6对本申请实施例的数据同步系统进行介绍。在图6示出的数据同步系统中，至少包括：CPU和DMA引擎。在该数据同步系统中，CPU，主要被配置为执行以下功能，即：向所述DMA引擎发送数据搬运任务；其中，所述数据搬运任务包括描述符；接收所述数据搬运任务对应的同步信息。DMA引擎，主要被配置为执行以下功能，即：接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。在一可选实施例中，所述DMA引擎中设置有重排序缓冲区；所述DMA引擎，按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息时，被配置为：基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度；根据所述数据搬运任务的执行进度生成所述同步信息，并根据所述第二指令序号指示的发送顺序将所述同步信息发送给CPU。在一可选实施例中，所述DMA引擎，基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述DMA引擎已接收到的请求数据，得到所述数据搬运任务的执行进度时，被配置为：从所述请求数据中获取所述指令序号；以所述指令序号作为索引地址，在所述重排序缓冲区中查找所述索引地址对应的存储空间；在所述索引地址对应的存储空间中写入任务完成标记；所述任务完成标记用于指示所述请求数据对应的数据搬运任务已完成；以所述重排序缓冲区中任务完成标记的写入情况，作为所述数据搬运任务的执行进度。在一可选实施例中，所述重排序缓冲区中划分出多个存储区域；所述DMA引擎，根据所述数据搬运任务的执行进度生成所述同步信息时，被配置为：监测所述重排序缓冲区中各个存储区域对应的任务完成标记写入情况；若监测到一个存储区域中所有存储空间均已写入任务完成标记，则生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息。在一可选实施例中，所述DMA引擎，还被配置为：在生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息之后，将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态。在一可选实施例中，所述DMA引擎，还被配置为：检测处于待分配状态的指令序号在所有指令序号中所占的比例，基于所述比例通过控制状态寄存器动态配置所述重排序缓冲区的相关参数；其中，所述相关参数包括存储区域所包含的存储单元数量、单次可释放的存储单元数量。在一可选实施例中，所述描述符中包括多个数据搬运任务的执行顺序；所述DMA引擎基于所述描述符向外部设备发送数据搬运请求时，被配置为：从所述描述符中获取所述多个数据搬运任务的执行顺序；按照所述多个数据搬运任务的执行顺序，将处于待分配状态的指令序号分别配置给所述多个数据搬运任务，作为所述多个数据搬运任务各自对应的第一指令序号；分配给数据搬运任务的第一指令序号与该数据搬运任务的执行顺序对应；基于分配到的第一指令序号以及所述描述符中多个数据搬运任务各自的配置信息，生成各个数据搬运任务对应的数据搬运请求；将各个数据搬运任务对应的数据搬运请求发送给所述外部设备。在一可选实施例中，所述系统还包括进程追踪器，被配置为：监测重排序缓冲区中是否存在未绑定数据搬运任务的存储空间；与数据搬运任务绑定的存储空间用于记录该数据搬运任务对应的执行进度；若监测到所述重排序缓冲区中所有存储空间均已绑定数据搬运任务，则生成停止指令，所述停止指令用于指示暂停所述数据搬运请求的生成过程。本实施例中，通过数据搬运请求中指示任务执行顺序的第一指令序号，以及请求数据中与第一指令序号匹配的第二指令序号，使得DMA引擎在乱序接收请求数据之后能够基于第二指令序号获取数据搬运任务的执行进度，进而通过同步信息向CPU告知该数据搬运任务的执行进度，实现DMA引擎与CPU之间的数据同步，克服乱序接收传输方式带来的CPU指令执行效率低，存储空间占用过久等问题，提高数据传输效率，提升设备算力。上述或下述实施例中，本申请实施例中，还提供了一种DMA引擎，所述DMA引擎应用于数据同步系统；收发模块，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；处理模块，被配置为按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。上述DMA引擎用于实现图1所示的数据同步方法中的各个功能，此处不在展开赘述。在介绍了本申请实施例的方法和系统之后，接下来，参考图7对本申请实施例的数据同步装置进行介绍。本申请实施例中图7所示的数据同步装置70能够实现对应于上述图1所对应的实施例中数据同步方法的步骤。数据同步装置70实现的功能可以通过硬件实现，也可以通过硬件执行相应的软件实现。硬件或软件包括一个或多个与上述功能相对应的模块，所述模块可以是软件和/或硬件。所述数据同步装置70应用于服务端设备或终端设备。所述数据同步装置70可参考图1所对应的实施例中所执行的操作，此处不作赘述。一些实施方式中，所述数据同步装置70中包括收发模块701和处理模块702。收发模块701，被配置为接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；处理模块702，被配置为按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。一些实施方式中，所述数据同步装置70中设置有重排序缓冲区；所述处理模块702，按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息时，被配置为：基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述数据同步装置70已接收到的请求数据，得到所述数据搬运任务的执行进度；根据所述数据搬运任务的执行进度生成所述同步信息，并根据所述第二指令序号指示的发送顺序将所述同步信息发送给CPU。一些实施方式中，所述处理模块702，基于所述请求数据携带的第二指令序号，在所述重排序缓冲区中记录所述数据同步装置70已接收到的请求数据，得到所述数据搬运任务的执行进度时，被配置为：从所述请求数据中获取所述指令序号；以所述指令序号作为索引地址，在所述重排序缓冲区中查找所述索引地址对应的存储空间；在所述索引地址对应的存储空间中写入任务完成标记；所述任务完成标记用于指示所述请求数据对应的数据搬运任务已完成；以所述重排序缓冲区中任务完成标记的写入情况，作为所述数据搬运任务的执行进度。一些实施方式中，所述重排序缓冲区中划分出多个存储区域；所述处理模块702，根据所述数据搬运任务的执行进度生成所述同步信息时，被配置为：监测所述重排序缓冲区中各个存储区域对应的任务完成标记写入情况；若监测到一个存储区域中所有存储空间均已写入任务完成标记，则生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息。一些实施方式中，所述处理模块702，还被配置为：在生成与该存储区域中各个任务完成标记对应的数据搬运任务的同步信息之后，将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态。一些实施方式中，所述处理模块702，还被配置为：在将该存储区域中各个任务完成标记对应的指令序号设置为待分配状态之后，检测处于待分配状态的指令序号在所有指令序号中所占的比例，基于所述比例通过控制状态寄存器动态配置所述重排序缓冲区的相关参数；其中，所述相关参数包括存储区域所包含的存储单元数量、单次可释放的存储单元数量。一些实施方式中，所述描述符中包括多个数据搬运任务的执行顺序；所述收发模块701，基于所述描述符向外部设备发送数据搬运请求时，被配置为：从所述描述符中获取所述多个数据搬运任务的执行顺序；按照所述多个数据搬运任务的执行顺序，将处于待分配状态的指令序号分别配置给所述多个数据搬运任务，作为所述多个数据搬运任务各自对应的第一指令序号；分配给数据搬运任务的第一指令序号与该数据搬运任务的执行顺序对应；基于分配到的第一指令序号以及所述描述符中多个数据搬运任务各自的配置信息，生成各个数据搬运任务对应的数据搬运请求；将各个数据搬运任务对应的数据搬运请求发送给所述外部设备。一些实施方式中，所述装置还包括进程追踪器，被配置为：监测重排序缓冲区中是否存在未绑定数据搬运任务的存储空间；与数据搬运任务绑定的存储空间用于记录该数据搬运任务对应的执行进度；若监测到所述重排序缓冲区中所有存储空间均已绑定数据搬运任务，则生成停止指令，所述停止指令用于指示暂停所述数据搬运请求的生成过程。本实施例中，通过数据搬运请求中指示任务执行顺序的第一指令序号，以及请求数据中与第一指令序号匹配的第二指令序号，使得DMA引擎在乱序接收请求数据之后能够基于第二指令序号获取数据搬运任务的执行进度，进而通过同步信息向CPU告知该数据搬运任务的执行进度，实现DMA引擎与CPU之间的数据同步，克服乱序接收传输方式带来的CPU指令执行效率低，存储空间占用过久等问题，提高数据传输效率，提升设备算力。在介绍了本申请实施例的方法、系统和装置之后，接下来，对本申请实施例的计算机可读存储介质进行说明，计算机可读存储介质可为光盘，其上存储有计算机程序，所述计算机程序在被处理器运行时，会实现上述方法实施方式中所记载的各步骤，例如，接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。各步骤的具体实现方式在此不再重复说明。需要说明的是，所述计算机可读存储介质的例子还可以包括，但不限于相变内存、静态随机存取存储器、动态随机存取存储器、其他类型的随机存取存储器、只读存储器、电可擦除可编程只读存储器、快闪记忆体或其他光学、磁性存储介质，在此不再一一赘述。上面从模块化功能实体的角度对本申请实施例中的数据同步装置70进行了描述，下面从硬件处理的角度分别对本申请实施例中的执行数据同步方法的服务器、终端设备进行描述。需要说明的是，在本申请数据同步装置实施例的图7所示的收发模块701对应的实体设备可以为输入/输出单元、收发器、射频电路、通信模块和输入/输出接口等，处理模块702对应的实体设备可以为处理器。图7所示的数据同步装置70可以具有如图8所示的结构，当图7所示的数据同步装置70具有如图8所示的结构时，图8中的处理器和收发器能够实现前述对应该装置的装置实施例提供的处理模块702和收发模块701相同或相似的功能，图8中的存储器执行上述数据同步方法时需要调用的计算机程序。图9是本申请实施例提供的一种服务器结构示意图，该服务器1100可因配置或性能不同而产生比较大的差异，可以包括一个或一个以上中央处理器1122和存储器1132，一个或一个以上存储应用程序1142或数据1144的存储介质1130。其中，存储器1132和存储介质1130可以是短暂存储或持久存储。存储在存储介质1130的程序可以包括一个或一个以上模块，每个模块可以包括对服务器中的一系列指令操作。更进一步地，中央处理器1122可以设置为与存储介质1130通信，在服务器1100上执行存储介质1130中的一系列指令操作。服务器1100还可以包括一个或一个以上电源1127，一个或一个以上有线或无线网络接口1180，一个或一个以上输入输出接口1159，和/或，一个或一个以上操作系统1141，例如Windows Server，Mac OS X，Unix， Linux，FreeBSD等等。上述实施例中由服务器所执行的步骤可以基于该图9所示的服务器1100的结构。例如，例如上述实施例中由图9所示的数据同步装置80所执行的步骤可以基于该图9所示的服务器结构。例如，所述中央处理器1122通过调用存储器1132中的指令，执行以下操作：通过分连接单元的输入输出接口1159接收来自中央处理器CPU的数据搬运任务；其中，所述数据搬运任务包括描述符；基于所述描述符向外部设备发送数据搬运请求；所述数据搬运请求携带有第一指令序号；所述第一指令序号指示所述数据搬运请求的执行顺序；接收所述外部设备基于所述数据搬运请求返回的请求数据；所述请求数据中携带的第二指令序号与对应数据搬运请求中携带的第一指令序号相匹配；按照所述请求数据携带的第二指令序号，向CPU发送所述数据搬运任务对应的同步信息；所述同步信息用于指示所述数据搬运任务的执行进度。在上述实施例中，对各个实施例的描述都各有侧重，某个实施例中没有详述的部分，可以参见其他实施例的相关描述。所属领域的技术人员可以清楚地了解到，为描述的方便和简洁，上述描述的系统，装置和模块的具体工作过程，可以参考前述方法实施例中的对应过程，在此不再赘述。在本申请实施例所提供的几个实施例中，应该理解到，所揭露的系统，装置和方法，可以通过其它的方式实现。例如，以上所描述的装置实施例仅仅是示意性的，例如，所述模块的划分，仅仅为一种逻辑功能划分，实际实现时可以有另外的划分方式，例如多个模块或组件可以结合或者可以集成到另一个系统，或一些特征可以忽略，或不执行。另一点，所显示或讨论的相互之间的耦合或直接耦合或通信连接可以是通过一些接口，装置或模块的间接耦合或通信连接，可以是电性，机械或其它的形式。所述作为分离部件说明的模块可以是或者也可以不是物理上分开的，作为模块显示的部件可以是或者也可以不是物理模块，即可以位于一个地方，或者也可以分布到多个网络模块上。可以根据实际的需要选择其中的部分或者全部模块来实现本实施例方案的目的。另外，在本申请实施例各个实施例中的各功能模块可以集成在一个处理模块中，也可以是各个模块单独物理存在，也可以两个或两个以上模块集成在一个模块中。上述集成的模块既可以采用硬件的形式实现，也可以采用软件功能模块的形式实现。所述集成的模块如果以软件功能模块的形式实现并作为独立的产品销售或使用时，可以存储在一个计算机可读取存储介质中。在上述实施例中，可以全部或部分地通过软件、硬件、固件或者其任意组合来实现。当使用软件实现时，可以全部或部分地以计算机程序产品的形式实现。所述计算机程序产品包括一个或多个计算机指令。在计算机上加载和执行所述计算机计算机程序时，全部或部分地产生按照本申请实施例所述的流程或功能。所述计算机可以是通用计算机、专用计算机、计算机网络、或者其他可编程装置。所述计算机指令可以存储在计算机可读存储介质中，或者从一个计算机可读存储介质向另一计算机可读存储介质传输，例如，所述计算机指令可以从一个网站站点、计算机、服务器或数据中心通过有线）或无线方式向另一个网站站点、计算机、服务器或数据中心进行传输。所述计算机可读存储介质可以是计算机能够存储的任何可用介质或者是包含一个或多个可用介质集成的服务器、数据中心等数据存储设备。所述可用介质可以是磁性介质，、光介质、或者半导体介质等。以上对本申请实施例所提供的技术方案进行了详细介绍，本申请实施例中应用了具体个例对本申请实施例的原理及实施方式进行了阐述，以上实施例的说明只是用于帮助理解本申请实施例的方法及其核心思想；同时，对于本领域的一般技术人员，依据本申请实施例的思想，在具体实施方式及应用范围上均会有改变之处，综上所述，本说明书内容不应理解为对本申请实施例的限制。
