标题title
一种源代码漏洞检测方法、装置和系统
摘要abst
本发明公开了一种源代码漏洞检测方法、装置和系统，属于信息安全技术领域，所述方法包括：对训练集中代码片段进行静态分析获取对应的增强AST，并将其转化为其状态概率矩阵对应的灰度图像；利用训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；将待检测源代码转化为其增强AST对应的状态概率矩阵的灰度图像；将待检测源代码对应的灰度图像输入目标CNN模型，得到漏洞检测结果。本申请对代码进行静态检测并进一步实现AST扩展，可以较为完整且全面的保留程序的语法和语义信息；在保留程序结构信息的同时将AST转化为图片的形式来表示方式，进而利用训练好的CNN模型进行漏洞检测，能够提升检测效率，还能够支持多程序语言。
权利要求书clms
1.一种源代码漏洞检测方法，其特征在于，包括：训练阶段：S1：针对训练集中代码片段，通过静态分析获取对应的增强抽象语法树AST；S2：将所述训练集中代码片段的增强AST对应的状态概率矩阵转化为灰度图像；S3：利用所述训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；检测阶段：S4：将待检测源代码按照S1和S2中的步骤转化为其增强AST对应的状态概率矩阵的灰度图像；S5：将所述待检测源代码对应的灰度图像输入所述目标CNN模型，得到漏洞检测结果。2.如权利要求1所述的源代码漏洞检测方法，其特征在于，所述S1包括：通过静态分析生成所述训练集中代码片段的AST；对所述训练集中代码片段的AST进行控制流和数据流的添加，得到所述训练集中代码片段的增强AST。3.如权利要求2所述的源代码漏洞检测方法，其特征在于，所述增强AST规定如下类型表示数据流和控制流的边：父子关系：根据AST规则，将非终端结点连接至其所有子结点；兄弟关系：将结点连接至其兄弟结点；下一标识：将终端结点连接至下一个终端节点；数据流：连接一个变量使用的结点及其下一次出现的结点；控制流：表示if、for、while语句控制流的边和表示语句顺序的边。4.如权利要求1所述的源代码漏洞检测方法，其特征在于，所述S2包括：S21：统计增强AST中每个子树一条边连接的两个节点的信息，得出一个状态转移为另一个状态的次数；通过统计所有状态转移情况，建立一个基于AST的马尔可夫链模型；S22：根据所述基于AST的马尔可夫链模型中记录的状态转移次数，生成状态转移矩阵；S23：将所述状态转移矩阵转化为转移概率矩阵，并将所述转移概率矩阵中的值灰度化得到对应的灰度图像。5.如权利要求4所述的源代码漏洞检测方法，其特征在于，所述S23包括：对所述状态转移矩阵中的所有数据进行归一化处理，确定一个状态转移为另一个状态的概率，最终得到转移概率矩阵；将所述转移概率矩阵中的值灰度化得到对应的灰度图像。6.如权利要求4所述的源代码漏洞检测方法，其特征在于，每个子树的状态包括：语句表达式、调用语句、参数列表和标识符。7.如权利要求1-6任一项所述的源代码漏洞检测方法，其特征在于，所述S5包括：将所述待检测源代码对应的灰度图像输入所述目标CNN模型；所述目标CNN模型输出的漏洞检测结果1，则表示所述待检测源代码存在漏洞；所述目标CNN模型输出的漏洞检测结果0，则表示所述待检测源代码非漏洞。8.一种源代码漏洞检测装置，其特征在于，包括：训练模块，用于针对训练集中代码片段，通过静态分析获取对应的增强抽象语法树AST；将所述训练集中代码片段的增强AST转化为其状态概率矩阵对应的灰度图像；利用所述训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；检测模块，用于将待检测源代码转化为增强AST对应的状态概率矩阵的灰度图像；将所述待检测源代码对应的灰度图像输入所述目标CNN模型，得到漏洞检测结果。9.一种源代码漏洞检测系统，包括存储器和处理器，所述存储器存储有计算机程序，其特征在于，所述处理器执行所述计算机程序时实现权利要求1至7中任一项所述的方法的步骤。10.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1至7中任一项所述的方法的步骤。
说明书desc
技术领域本发明属于信息安全技术领域，更具体地，涉及一种源代码漏洞检测方法、装置和系统。背景技术近年来，黑客勒索、僵尸网络攻击、用户信息泄露等网络安全事件频繁发生，作为网络空间的重要组成部分，软件系统的漏洞给网络空间带来了严重的安全威胁。据美国国家漏洞数据库统计，全球漏洞数量日益增大，到2021年披露的安全漏洞已经达到了20137个，且增长率也呈现上升趋势。自动化攻防已经逐渐成为研究的趋势。在自动化攻防的趋势下，对于漏洞的发现和挖掘是最基础的阶段。因此主动发现系统安全漏洞，对攻防战具有重要的意义。常用的漏洞检测方法将代码转换成中间表示，以学习代码表征。根据源代码的转换方式，可以将现有的研究分为四类：基于文本的检测，基于token的检测，基于语法树的检测和基于图的检测。基于文本的深度学习漏洞检测直接使用代码文本本身作为输入，但无法准确把握程序的语义信息；基于token的深度学习漏洞检测根据词法规则将每个代码行划分为一个标记序列，但依旧是将源代码视为纯文本，缺乏程序语义和上下文信息；基于语法树的深度学习漏洞检测用句法结构表示代码，如解析树或抽象语法树，这种方法提供了更精确的语法信息，但树分析十分复杂且开销大；基于图的深度学习漏洞检测用图形描述源代码，其中节点表示语句或标识分隔符，边表示控制或数据依赖，可以较为完整且全面的保留程序的语法和语义信息。但图形分析十分耗时，难以扩展。且有些图形生成需要编译，只能支持C/C++,无法适用于其他语言。因此现有智能漏洞检测方法无法应用于大规模的真实软件，主要有以下两处缺陷：1）效率和精度很难两全；2）一般只支持一种编程语言，无法适用于其他语言的检测。发明内容针对现有技术的以上缺陷或改进需求，本发明提供了一种源代码漏洞检测方法、装置和系统，其目的在于，对代码进行静态检测实现AST扩展，可以较为完整且全面的保留程序的语法和语义信息；在保留程序结构信息的同时将AST转化为图片的形式来表示方式，进而利用训练好的CNN模型进行漏洞检测，能够提升检测效率，还能够支持多程序语言；由此解决漏洞检测方法在应用于大规模真实软件时效率和精度很难两全，且兼容性差的技术问题。为实现上述目的，按照本发明的一个方面，提供了一种源代码漏洞检测方法，包括：训练阶段：S1：针对训练集中代码片段，通过静态分析获取对应的增强抽象语法树AST；S2：将所述训练集中代码片段的增强AST转化为其状态概率矩阵对应的灰度图像；S3：利用所述训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；检测阶段：S4：将待检测源代码按照S1和S2中的步骤转化为其增强AST对应的状态概率矩阵的灰度图像；S5：将所述待检测源代码对应的灰度图像输入所述目标CNN模型，得到漏洞检测结果。在其中一个实施例中，所述S1包括：通过静态分析生成所述训练集中代码片段的AST；对所述训练集中代码片段的AST进行控制流和数据流的添加，得到所述训练集中代码片段的增强AST。在其中一个实施例中，所述增强AST规定如下类型表示数据流和控制流的边：父子关系：根据AST规则，将非终端结点连接至其所有子结点；兄弟关系：将结点连接至其兄弟结点；下一标识：将终端结点连接至下一个终端节点；数据流：连接一个变量使用的结点及其下一次出现的结点；控制流：表示if、for、while语句控制流的边和表示语句顺序的边。在其中一个实施例中，所述S2包括：S21：统计增强AST中每个子树一条边连接的两个节点的信息，得出一个状态转移为另一个状态的次数；通过统计所有状态转移情况，建立一个基于AST的马尔可夫链模型；S22：根据所述基于AST的马尔可夫链模型中记录的状态转移次数，生成状态转移矩阵；S23：将所述状态转移矩阵转化为转移概率矩阵，并将所述转移概率矩阵中的值灰度化得到对应的灰度图像。在其中一个实施例中，所述S23包括：对所述状态转移矩阵中的所有数据进行归一化处理，确定一个状态转移为另一个状态的概率，最终得到转移概率矩阵；将所述转移概率矩阵中的值灰度化得到对应的灰度图像。在其中一个实施例中，每个子树的状态包括：语句表达式、调用语句、参数列表和标识符。在其中一个实施例中，所述S5包括：将所述待检测源代码对应的灰度图像输入所述目标CNN模型；所述目标CNN模型输出的漏洞检测结果1，则表示所述待检测源代码存在漏洞；所述目标CNN模型输出的漏洞检测结果0，则表示所述待检测源代码非漏洞。按照本发明的另一方面，提供了一种源代码漏洞检测装置，包括：训练模块，用于针对训练集中代码片段，通过静态分析获取对应的增强抽象语法树AST；将所述训练集中代码片段的增强AST转化为其状态概率矩阵对应的灰度图像；利用所述训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；检测模块，用于将待检测源代码转化为增强AST对应的状态概率矩阵的灰度图像；将所述待检测源代码对应的灰度图像输入所述目标CNN模型，得到漏洞检测结果。按照本发明的另一方面，提供了一种源代码漏洞检测系统，包括存储器和处理器，所述存储器存储有计算机程序，所述处理器执行所述计算机程序时实现上述的方法的步骤。按照本发明的另一方面，提供了一种计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时实现上述的方法的步骤。总体而言，通过本发明所构思的以上技术方案与现有技术相比，能够取得下列有益效果：本发明提供的一种面向大规模真实软件的源代码漏洞检测方法，基于AST对代码进行静态检测实现AST扩展，可以较为完整且全面的保留程序的语法和语义信息；在保留程序结构信息的同时将AST转化为图片的形式来表示方式，进而利用训练好的CNN模型进行漏洞检测，能够提升检测效率，还能够支持多程序语言。本申请通过分析增强AST解决检测的效率和精度问题，实现一个支持多程序语言且快速精确的大规模漏洞检测。本方案充分利用AST节点中的代码语义和结构信息，额外添加代表控制流、数据流以及语句执行顺序信息的边对AST进行扩展生成增强AST，在较短的时间内获得与图相匹配的代码特征。在保证效率的同时，最大程度的提取程序的语义、语法信息。本方案将生成的增强AST采用马尔可夫链的形式表示并最终转化为灰度图像，在保留程序结构信息的同时，用更加简单的方式来表示AST，充分融合AST信息并转换为图片，基于CNN分类，使漏洞检测更加高效。需要说明的是，在静态分析中使用的提取AST的工具tree-sitter是一个解析器生成器工具和增量解析库。它可以为源代码文件构建具体的语法树，并在编辑源文件时高效地更新语法树。它支持多种编程语言的解析，包括python,java, c等。同时支持多种编程语言的使用。因此，需要少量的修改，就很容易将其应用于其他语言和数据集中。附图说明图1是本发明一实施例提供一种面向大规模真实软件的源代码漏洞检测方法的示意图。图2是本发明一实施例提供源代码对应增强AST的生成过程示意图。图3是本发明一实施例增强AST转化为灰度图像的示意图。具体实施方式为了使本发明的目的、技术方案及优点更加清楚明白，以下结合附图及实施例，对本发明进行进一步详细说明。应当理解，此处所描述的具体实施例仅仅用以解释本发明，并不用于限定本发明。此外，下面所描述的本发明各个实施方式中所涉及到的技术特征只要彼此之间未构成冲突就可以相互组合。如图1所示，提供一种源代码漏洞检测方法，主要分为两个阶段：训练阶段和检测阶段。训练阶段的目的是训练一个目标CNN模型，用来分析AST转化生成的灰度图像的可疑度。主要分为3个步骤，包括静态分析获取增强AST、将增强AST转化为状态概率矩阵并将矩阵转化为灰度图像、利用增强AST转化生成的灰度图像训练CNN模型；检测阶段的目的是分类待检测应用是不是漏洞，输出为1则为漏洞，为0则为非漏洞。首先统计AST中每一条边连接的两个节点的信息，得出一个状态转移为另一个状态的次数，建立一个基于AST的马尔可夫链模型及其对应的状态转移矩阵。将处理得到转移概率矩阵中的值转化为灰度值就可以得到对应的灰度图像。最后使用训练后的CNN模型检测生成的灰度图像，判断是否为漏洞。其中，卷积神经网络模型是一种专门用来处理具有类似网格结构的数据的神经网络，如图像数据。与全连接层不同的地方在于，CNN的上下层神经元并不都能直接连接，而是通过“卷积核”作为中介，通过“核”的共享大大减少了隐藏层的参数。简单的CNN是一系列层，并且每个层都通过一个可微函数将一个量转化为另一个量，这些层主要包括卷积层、池化层和全连接层。抽象语法树是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。抽象语法树是有顺序的树结构，内部节点是操作符而叶子节点是操作数。抽象语法树详尽的展示了操作数和操作符如何组成程序表达式以及语句，进而展示程序的整体形式。在其中一个实施例中，S1包括：通过静态分析生成训练集中代码片段的AST；对训练集中代码片段的AST进行控制流和数据流的添加，得到训练集中代码片段的增强AST。其中，通过向AST中添加表示不同类型的控制和数据流的各种类型的边来构建增强AST，以解决AST 不能充分利用代码片段的结构性信息，特别是控制流和数据流等语义信息的问题。其中控制流代表一个程序执行过程中会遍历到的所有路径，能反映一个过程的实时执行过程。数据流通过跟踪数据可能的定义和使用，收集有关特定数据项属性的信息。程序中增强AST以有向多图的形式呈现，其中语句、代码块或值是图中的节点，而直接关系被记录为边。由于一对节点之间可能存在多种关系，使用关系图来记录每种类型的关系。关系图的节点连通性被编码为一个邻接矩阵。增强AST的图表示是纯粹基于AST的,可以很容易地扩展到其他编程语言。在其中一个实施例中，增强AST规定如下类型表示数据流和控制流的边：父子关系：根据AST规则，将非终端结点连接至其所有子结点；兄弟关系：将结点连接至其兄弟结点；下一标识：将终端结点连接至下一个终端节点；数据流：连接一个变量使用的结点及其下一次出现的结点；控制流：表示if、for、while语句控制流的边和表示语句顺序的边。图2以一个缓冲区溢出漏洞代码为例，展示了增强AST的生成过程。如图2所示，增强AST规定了如下类型表示数据流的边；另有几种用于表示控制流的边。添加了表示if、for、while语句控制流的边和表示语句顺序的边。随后将增强AST转化为状态概率矩阵并将矩阵转化为灰度图像。图3是增强AST转化为灰度图像的示意图，在其中一个实施例中，灰度图像生成过程共分为三个部分：马尔可夫链生成、状态转移矩阵生成、转移概率矩阵生成，最终生成对应的灰度图像。在马尔可夫链生成过程中，首先统计AST中一条边连接的两个节点的信息，得出一个状态转移为另一个状态的次数。如图3中展示的子树中共有四个状态：语句表达式、调用语句、参数列表、标识符Assignment、Operator、Member Reference和Identifier。根据AST中边的指向信息可以看出，状态参数列表转移为状态标识符的次数为3。通过统计所有状态转移情况，建立一个基于AST的马尔可夫链模型。其中，MC(Markov Chain，马尔可夫链）为状态空间中经过从一个状态到另一个状态的转换的随机过程，该过程要求具备“无记忆性 ”。即下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性 ”称作马尔可夫性质。通过马尔可夫链的模型转换，可以将事件的状态转换成概率矩阵。状态转移矩阵经过一定有限次数序列的转换，最终可以得到一个稳定的概率分布 ，且与初始状态概率分布无关。在状态转移矩阵生成过程中，根据之前生成的马尔可夫链模型中记录的状态转移次数，生成状态转移矩阵。如图3所示，根据马尔可夫链模型中记录，状态参数列表转移为状态标识符的次数为3。在状态矩阵中，为便于表达，采用字母A表示状态参数列表，字母I表示状态标识符，在状态转移矩阵Matrix对应的数据为3。由此生成对应的状态转移矩阵。在其中一个实施例中，在转移概率矩阵生成过程中，根据状态转移矩阵，对所有的数据进行归一化处理，得到一个状态转移为另一个状态的概率，得到对应的转移概率矩阵。随后将其中的值转化为灰度值就可以得到对应的灰度图像。最终将所有训练集得到的灰度图像输入CNN模型，得到训练后的CNN模型。按照本发明的另一方面，提供了一种源代码漏洞检测装置，包括：训练模块，用于针对训练集中代码片段，通过静态分析获取对应的增强抽象语法树AST；将训练集中代码片段的增强AST转化为其状态概率矩阵对应的灰度图像；利用训练集中代码片段对应的灰度图像训练原始CNN模型，得到目标CNN模型；检测模块，用于将待检测源代码转化为增强AST对应的状态概率矩阵的灰度图像；将待检测源代码对应的灰度图像输入目标CNN模型，得到漏洞检测结果。按照本发明的另一方面，提供了一种源代码漏洞检测系统，包括存储器和处理器，存储器存储有计算机程序，处理器执行计算机程序时实现上述的方法的步骤。按照本发明的另一方面，提供了一种计算机可读存储介质，其上存储有计算机程序，计算机程序被处理器执行时实现上述的方法的步骤。本领域的技术人员容易理解，以上所述仅为本发明的较佳实施例而已，并不用以限制本发明，凡在本发明的精神和原则之内所作的任何修改、等同替换和改进等，均应包含在本发明的保护范围之内。
