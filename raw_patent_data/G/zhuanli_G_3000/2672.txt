标题title
统一系统调度适配方法、装置、计算机设备及存储介质
摘要abst
本发明实施例公开了统一系统调度适配方法、装置、计算机设备及存储介质。所述方法包括：集成多种调度系统；获取用户所传入的调度参数的信息，以得到调度信息；组装所述调度信息，以得到组装结果；确定调度适配器；利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。通过实施本发明实施例的方法可实现用户只需要API接口调用，传入对应参数即可实现不同调度系统的服务使用，成本低且效率高。
权利要求书clms
1.统一系统调度适配方法，其特征在于，包括：集成多种调度系统；获取用户所传入的调度参数的信息，以得到调度信息；组装所述调度信息，以得到组装结果；确定调度适配器；利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。2.根据权利要求1所述的统一系统调度适配方法，其特征在于，所述集成多种调度系统，包括：集成多种调度系统的jar或者依赖包所打包形成的数据包；设置多种注册器，其中，每种注册器对应一种调度系统；将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。3.根据权利要求1所述的统一系统调度适配方法，其特征在于，所述获取用户所传入的调度参数的信息，以得到调度信息，包括：获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。4.根据权利要求3所述的统一系统调度适配方法，其特征在于，所述调度参数包括调度适配器类型、执行器类型、任务详情、开始时间、结束时间、重复次数以及执行间隔。5.根据权利要求4所述的统一系统调度适配方法，其特征在于，所述组装所述调度信息，以得到组装结果，包括：对所述调度信息进行解压，以得到解压结果；根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。6.根据权利要求4所述的统一系统调度适配方法，其特征在于，所述确定调度适配器，包括：从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。7.根据权利要求6所述的统一系统调度适配方法，其特征在于，所述利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务，包括：利用所述调度适配器调度对应的调度系统；将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。8.统一系统调度适配装置，其特征在于，包括：集成单元，用于集成多种调度系统；信息获取单元，用于获取用户所传入的调度参数的信息，以得到调度信息；组装单元，用于组装所述调度信息，以得到组装结果；确定单元，用于确定调度适配器；调度单元，用于利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。9.一种计算机设备，其特征在于，所述计算机设备包括存储器及处理器，所述存储器上存储有计算机程序，所述处理器执行所述计算机程序时实现如权利要求1至7中任一项所述的方法。10.一种存储介质，其特征在于，所述存储介质存储有计算机程序，所述计算机程序被处理器执行时可实现如权利要求1至7中任一项所述的方法。
说明书desc
技术领域本发明涉及计算机，更具体地说是指统一系统调度适配方法、装置、计算机设备及存储介质。背景技术业务人员在使用各类调度软件的过程中经常要进行各种调度系统的适配，才可以将外部调度与自身业务系统整合。虽然各类调度系统的厂商都提供了自己的SDK或者API调用，但是开发人员在对接过程中，往往从零开始一个模块一个模块的接入，开发成本高且重复劳动。因此，有必要设计一种新的方法，实现用户只需要API接口调用，传入对应参数即可实现不同调度系统的服务使用，成本低且效率高。发明内容本发明的目的在于克服现有技术的缺陷，提供统一系统调度适配方法、装置、计算机设备及存储介质。为实现上述目的，本发明采用以下技术方案：统一系统调度适配方法，包括：集成多种调度系统；获取用户所传入的调度参数的信息，以得到调度信息；组装所述调度信息，以得到组装结果；确定调度适配器；利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。其进一步技术方案为：所述集成多种调度系统，包括：集成多种调度系统的jar或者依赖包所打包形成的数据包；设置多种注册器，其中，每种注册器对应一种调度系统；将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。其进一步技术方案为：所述获取用户所传入的调度参数的信息，以得到调度信息，包括：获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。其进一步技术方案为：所述调度参数包括调度适配器类型、执行器类型、任务详情、开始时间、结束时间、重复次数以及执行间隔。其进一步技术方案为：所述组装所述调度信息，以得到组装结果，包括：对所述调度信息进行解压，以得到解压结果；根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。其进一步技术方案为：所述确定调度适配器，包括：从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。其进一步技术方案为：所述利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务，包括：利用所述调度适配器调度对应的调度系统；将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。本发明还提供了统一系统调度适配装置，包括：集成单元，用于集成多种调度系统；信息获取单元，用于获取用户所传入的调度参数的信息，以得到调度信息；组装单元，用于组装所述调度信息，以得到组装结果；确定单元，用于确定调度适配器；调度单元，用于利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。本发明还提供了一种计算机设备，所述计算机设备包括存储器及处理器，所述存储器上存储有计算机程序，所述处理器执行所述计算机程序时实现上述的方法。本发明还提供了一种存储介质，所述存储介质存储有计算机程序，所述计算机程序被处理器执行时可实现上述的方法。本发明与现有技术相比的有益效果是：本发明通过集成多种调度系统，并对用户传入的带有调度参数的调度信息进行组装，确定调度适配器，并利用调度适配器调用对应的调度系统，以用该调度系统内的执行器执行组装结果内的任务，实现用户只需要API接口调用，传入对应参数即可实现不同调度系统的服务使用，成本低且效率高。下面结合附图和具体实施例对本发明作进一步描述。附图说明为了更清楚地说明本发明实施例技术方案，下面将对实施例描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本发明实施例提供的统一系统调度适配方法的应用场景示意图；图2为本发明实施例提供的统一系统调度适配方法的流程示意图；图3为本发明实施例提供的统一系统调度适配方法的子流程示意图；图4为本发明实施例提供的统一系统调度适配方法的子流程示意图；图5为本发明实施例提供的统一系统调度适配方法的子流程示意图；图6为本发明实施例提供的随机节点执行的示意图；图7为本发明实施例提供的广播执行的示意图；图8为本发明实施例提供的分片执行的示意图；图9为本发明实施例提供的统一系统调度适配装置的示意性框图；图10为本发明实施例提供的统一系统调度适配装置的集成单元的示意性框图；图11为本发明实施例提供的统一系统调度适配装置的组装单元的示意性框图；图12为本发明实施例提供的统一系统调度适配装置的调度单元的示意性框图；图13为本发明实施例提供的计算机设备的示意性框图；图14为本发明实施例提供的工作流的新建示意图；图15为本发明实施例提供的工作流的视图编辑示意图图16为本发明实施例提供的工作流的批量删除、批量导入、批量删除的示意图；图17为本发明实施例提供的工作流的批量操作记录的示意图；图18为本发明实施例提供的工作量的依赖关系的示意图；图19为本发明实施例提供的工作量的批量运行操作的示意图；图20为本发明实施例提供的工作流的按条件筛选的示意图；图21为本发明实施例提供的工作量的操作的示意图；图22为本发明实施例提供的工作流运行明细的批量操作的示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。应当理解，当在本说明书和所附权利要求书中使用时，术语”包括”和“包含”指示所描述特征、整体、步骤、操作、元素和/或组件的存在，但并不排除一个或多个其它特征、整体、步骤、操作、元素、组件和/或其集合的存在或添加。还应当理解，在此本发明说明书中所使用的术语仅仅是出于描述特定实施例的目的而并不意在限制本发明。如在本发明说明书和所附权利要求书中所使用的那样，除非上下文清楚地指明其它情况，否则单数形式的”一”、”一个”及”该”意在包括复数形式。还应当进一步理解，在本发明说明书和所附权利要求书中使用的术语”和/或”是指相关联列出的项中的一个或多个的任何组合以及所有可能组合，并且包括这些组合。请参阅图1和图2，图1为本发明实施例提供的统一系统调度适配方法的应用场景示意图。图2为本发明实施例提供的统一系统调度适配方法的示意性流程图。该统一系统调度适配方法应用于服务器中。该服务器与终端进行数据交互，终端上设置不同的调度系统，将调度系统集成在服务器上，利用用户通过API调用输入的信息，进行组装，并确定调度适配器，利用调度适配器调度对应的调度系统，以由执行器执行对应的任务。图2是本发明实施例提供的统一系统调度适配方法的流程示意图。如图2所示，该方法包括以下步骤S110至S150。S110、集成多种调度系统。在本实施例中，多种调度系统包括xxl-job、erda-pipeline、dophinScheduler、数栈调度能力以及其他调度系统。在一实施例中，请参阅图3，上述的步骤S110可包括步骤S111～S113。S111、集成多种调度系统的jar或者依赖包所打包形成的数据包；S112、设置多种注册器，其中，每种注册器对应一种调度系统；S113、将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。在本实施例中，Java枚举类的调度适配器类型是指利用Java枚举所得调度适配器的所有类型。具体地，先将其他调度系统的jar或者依赖打包集成到本服务器中，然后服务器内部实现多种注册器，每种注册器对应一种外部调度系统，将注册器写在配置文件中，然后本程序内部完成Java枚举类，判断每次外部终端通过MQ或RESTFUL传递过来的schedulerType，与Java枚举类中的调度适配器类型进行判断，如果相等，则进行该种调度适配器的适配。S120、获取用户所传入的调度参数的信息，以得到调度信息。在本实施例中，调度信息是指带有调度参数的消息包，所述调度参数包括调度适配器类型、执行器类型、任务详情、开始时间、结束时间、重复次数以及执行间隔。具体地，获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。其他app可以通过两种方式来调用服务器中的方法。第一种消息队列，第二种http或https的RESTFUL接口；消息队列支持RabbitMQ、kafka、pulsar、RocketMQ，当其他app需要调度任务时候，只需要发送包含调度参数的消息体，本模块内部消费任务信息、解析消息体判断任务需要执行的调度信息。然后按照调度信息对执行器进行触发，执行器执行相应任务。最后将任务直接结果周期性的回推到消息队列，这种模式充分利用了消息队列解耦的特性。但是这种设计强依赖消息队列，可扩展性和功能、系统负载都和消息队列有极大的关联；APP通过MQ发送调度消息体至服务器，服务器将调度结果通过MQ返回至终端。RESTFUL接口支持标准的RESTFUL接口协议，其他APP通过http或者https发送调度参数JSON，服务器收到JSON报文后，解析对应调度信息，然后下发到对应执行器，执行器的执行结果同步通过RESTFUL协议返回给APP调用方，整个调用链路完成；具体地，终端通过RESTFUL协议发送调度消息体至服务器，并由服务器将RESTFUL协议接受结果发送至终端。对于调度参数而言，共计有7个，分别是“schedulerType”:“调度适配器类型”，例如xxl-job、dophinScheduler等，“actuatorType”:“执行器类型”，例如datax、spark等，“jobDetail”:“任务详情”，是一个json体，“startTime”:“开始时间”，“endTime”:“结束时间”，“repeatCount”:“重复次数”，“repeatInterval”:“执行间隔“。参数样例如下所示“schedulerType”:”调度适配器类型，例如xxl-job、dophinScheduler等”，“actuatorType”:”执行器类型，例如datax、spark等”,“jobDetail”:”任务详情，是一个json体”,“startTime”:”开始时间”,“endTime”:”结束时间”,“repeatCount”:”重复次数”,“repeatInterval”:”执行间隔”。S130、组装所述调度信息，以得到组装结果。在本实施例中，组装结果是指包括不同类型的任务调度，执行器中的任务，进行时间控制以及控制执行间隔。在一实施例中，请参阅图4，上述的步骤S130可包括步骤S131～S132。S131、对所述调度信息进行解压，以得到解压结果。在本实施例中，解压结果是指对调度信息进行解包后形成的结果。S132、根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。具体地，APP通过MQ或RESTFUL协议，两者内部都有压缩机制，将报文压缩后传输至服务器，服务器对调度信息进行解压，根据解压后的不同参数，进行不同类型的任务调度，再根据任务json详情组装执行器中的任务job，最后根据时间参数，进行开始结束时间的控制，执行间隔的控制。S140、确定调度适配器。在本实施例中，从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。S150、利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。在一实施例中，请参阅图5，上述的步骤S150可包括步骤S151～S152。S151、利用所述调度适配器调度对应的调度系统。在本实施例中，经过调度适配器进行参数调整后，可以将上游的调度信息根据系统配置自动转发路由到底层已经安装配置好调度参数的调度系统。S152、将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。在本实施例中，上游的调度信息总体是通过RESTFUL协议与下游的适配器。调度适配器与执行器是通过RPC协议进行调用。调度适配器与执行器之间的响应如下:调度适配器触发命令，执行器响应触发命令；执行器异步执行任务，并反馈结果至调度适配器，调度适配器处理回调结果；执行器每隔N秒发送注册命令至调度适配器，由调度适配器处理注册命令。细化可以分为三种方式调度适配器与执行器直接路由；如图6所示，随机节点执行：选择集群中一个可用的执行节点执行调度任务。适用场景：离线订单结算。如图7所示，广播执行：在集群中所有的执行节点分发调度任务并执行。适用场景：批量更新应用本地缓存。如图8所示，分片执行：按照用户自定义分片逻辑进行拆分，分发到集群中不同节点并行执行，提升资源利用效率。适用场景：海量日志统计。在本实施例中，执行器的作用有：负责具体调度任务的执行，例如如果是datax任务，则进行对应数据同步。如果是Python任务，则进行python脚本任务的进行；负责和调度适配器进行通讯，获取调度适配器的调度信息，根据执行器路由规则选择对应的具体执行器实例进行任务启动触发，最后定时将任务状态与执行器实例的健康状态发给调度适配器。具体地，各个调度系统的执行器如：xxl-job执行器、pipeline-agent、dophinScheduler-worker。本实施例的方法由完全封装底层技术实现，对接目前市面上看到的大部分调度服务，用户只需要API接口调用，传入对应参数即可实现不同调度系统的服务使用。在本实施例的方法具备统一界面化的配置管理、统一接口化的调度调用、技术栈统一，底层可以对接多种语音；快速接入，简单易用。适配多种开源调度框架，上层业务无感知。举个例子：如图14至图22，工作流的编辑主要功能包括创建工作流、修改工作流、删除工作流、保存工作流、查询工作流。其中每个工作流内部还可以进行添加节点、修改节点、删除节点。工作流的调度功能包含开始工作流、停止工作流、设置开始定时工作流、设置取消工作流。另外还包含工作流的一些其他附属操作，包括导入工作流、导出工作流、批量启停工作流等。上述的统一系统调度适配方法，通过集成多种调度系统，并对用户传入的带有调度参数的调度信息进行组装，确定调度适配器，并利用调度适配器调用对应的调度系统，以用该调度系统内的执行器执行组装结果内的任务，实现用户只需要API接口调用，传入对应参数即可实现不同调度系统的服务使用，成本低且效率高。图9是本发明实施例提供的一种统一系统调度适配装置300的示意性框图。如图9所示，对应于以上统一系统调度适配方法，本发明还提供一种统一系统调度适配装置300。该统一系统调度适配装置300包括用于执行上述统一系统调度适配方法的单元，该装置可以被配置于服务器中。具体地，请参阅图9，该统一系统调度适配装置300包括集成单元301、信息获取单元302、组装单元303、确定单元304以及调度单元305。集成单元301，用于集成多种调度系统；信息获取单元302，用于获取用户所传入的调度参数的信息，以得到调度信息；组装单元303，用于组装所述调度信息，以得到组装结果；确定单元304，用于确定调度适配器；调度单元305，用于利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。在一实施例中，如图10所示，所述集成单元301包括数据包集成子单元3011、注册器设置子单元3012以及处理子单元3013。数据包集成子单元3011，用于集成多种调度系统的jar或者依赖包所打包形成的数据包；注册器设置子单元3012，用于设置多种注册器，其中，每种注册器对应一种调度系统；处理子单元3013，用于将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。在一实施例中，所述信息获取单元302，用于获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。在一实施例中，如图11所示，所述组装单元303包括解压子单元3031以及内容组装子单元3032。解压子单元3031，用于对所述调度信息进行解压，以得到解压结果；内容组装子单元3032，用于根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。在一实施例中，确定单元304，用于从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。在一实施例中，如图12所示，所述调度单元305包括系统调度子单元3051以及传输子单元3052。系统调度子单元3051，用于利用所述调度适配器调度对应的调度系统；传输子单元3052，用于将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。需要说明的是，所属领域的技术人员可以清楚地了解到，上述统一系统调度适配装置300和各单元的具体实现过程，可以参考前述方法实施例中的相应描述，为了描述的方便和简洁，在此不再赘述。上述统一系统调度适配装置300可以实现为一种计算机程序的形式，该计算机程序可以在如图13所示的计算机设备上运行。请参阅图13，图13是本申请实施例提供的一种计算机设备的示意性框图。该计算机设备500可以是服务器，其中，服务器可以是独立的服务器，也可以是多个服务器组成的服务器集群。参阅图13，该计算机设备500包括通过系统总线501连接的处理器502、存储器和网络接口505，其中，存储器可以包括非易失性存储介质503和内存储器504。该非易失性存储介质503可存储操作系统5031和计算机程序5032。该计算机程序5032包括程序指令，该程序指令被执行时，可使得处理器502执行一种统一系统调度适配方法。该处理器502用于提供计算和控制能力，以支撑整个计算机设备500的运行。该内存储器504为非易失性存储介质503中的计算机程序5032的运行提供环境，该计算机程序5032被处理器502执行时，可使得处理器502执行一种统一系统调度适配方法。该网络接口505用于与其它设备进行网络通信。本领域技术人员可以理解，图13中示出的结构，仅仅是与本申请方案相关的部分结构的框图，并不构成对本申请方案所应用于其上的计算机设备500的限定，具体的计算机设备500可以包括比图中所示更多或更少的部件，或者组合某些部件，或者具有不同的部件布置。其中，所述处理器502用于运行存储在存储器中的计算机程序5032，以实现如下步骤：集成多种调度系统；获取用户所传入的调度参数的信息，以得到调度信息；组装所述调度信息，以得到组装结果；确定调度适配器；利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。在一实施例中，处理器502在实现所述集成多种调度系统步骤时，具体实现如下步骤：集成多种调度系统的jar或者依赖包所打包形成的数据包；设置多种注册器，其中，每种注册器对应一种调度系统；将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。在一实施例中，处理器502在实现所述获取用户所传入的调度参数的信息，以得到调度信息步骤时，具体实现如下步骤：获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。其中，所述调度参数包括调度适配器类型、执行器类型、任务详情、开始时间、结束时间、重复次数以及执行间隔。在一实施例中，处理器502在实现所述组装所述调度信息，以得到组装结果步骤时，具体实现如下步骤：对所述调度信息进行解压，以得到解压结果；根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。在一实施例中，处理器502在实现所述确定调度适配器步骤时，具体实现如下步骤：从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。在一实施例中，处理器502在实现所述利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务步骤时，具体实现如下步骤：利用所述调度适配器调度对应的调度系统；将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。应当理解，在本申请实施例中，处理器502可以是中央处理单元，该处理器502还可以是其他通用处理器、数字信号处理器、专用集成电路、现成可编程门阵列或者其他可编程逻辑器件、分立门或者晶体管逻辑器件、分立硬件组件等。其中，通用处理器可以是微处理器或者该处理器也可以是任何常规的处理器等。本领域普通技术人员可以理解的是实现上述实施例的方法中的全部或部分流程，是可以通过计算机程序来指令相关的硬件来完成。该计算机程序包括程序指令，计算机程序可存储于一存储介质中，该存储介质为计算机可读存储介质。该程序指令被该计算机系统中的至少一个处理器执行，以实现上述方法的实施例的流程步骤。因此，本发明还提供一种存储介质。该存储介质可以为计算机可读存储介质。该存储介质存储有计算机程序，其中该计算机程序被处理器执行时使处理器执行如下步骤：集成多种调度系统；获取用户所传入的调度参数的信息，以得到调度信息；组装所述调度信息，以得到组装结果；确定调度适配器；利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务。在一实施例中，所述处理器在执行所述计算机程序而实现所述集成多种调度系统步骤时，具体实现如下步骤：集成多种调度系统的jar或者依赖包所打包形成的数据包；设置多种注册器，其中，每种注册器对应一种调度系统；将所述注册器写在配置文件中，并完成调度适配器类型的Java枚举，以得到Java枚举类的调度适配器类型。在一实施例中，所述处理器在执行所述计算机程序而实现所述获取用户所传入的调度参数的信息，以得到调度信息步骤时，具体实现如下步骤：获取用户利用消息列队或RESTFUL接口传入的调度参数的信息，以得到调度信息。其中，所述调度参数包括调度适配器类型、执行器类型、任务详情、开始时间、结束时间、重复次数以及执行间隔。在一实施例中，所述处理器在执行所述计算机程序而实现所述组装所述调度信息，以得到组装结果步骤时，具体实现如下步骤：对所述调度信息进行解压，以得到解压结果；根据所述解压结果进行不同类型的任务调度，再根据任务详情组装执行器中的任务，根据开始时间、结束时间进行时间控制以及控制执行间隔，以得到组装结果。在一实施例中，所述处理器在执行所述计算机程序而实现所述确定调度适配器步骤时，具体实现如下步骤：从Java枚举类的调度适配器类型中筛选出与所述解压结果中的调度适配器类型一致的调度适配器。在一实施例中，所述处理器在执行所述计算机程序而实现所述利用所述调度适配器调度对应的调度系统，以利用所述调度系统内的执行器执行所述组装结果内的任务步骤时，具体实现如下步骤：利用所述调度适配器调度对应的调度系统；将所述组装结果传输至适配器，以利用适配器调度所述调度系统内的执行器执行所述组装结果内的任务。所述存储介质可以是U盘、移动硬盘、只读存储器、磁碟或者光盘等各种可以存储程序代码的计算机可读存储介质。本领域普通技术人员可以意识到，结合本文中所公开的实施例描述的各示例的单元及算法步骤，能够以电子硬件、计算机软件或者二者的结合来实现，为了清楚地说明硬件和软件的可互换性，在上述说明中已经按照功能一般性地描述了各示例的组成及步骤。这些功能究竟以硬件还是软件方式来执行，取决于技术方案的特定应用和设计约束条件。专业技术人员可以对每个特定的应用来使用不同方法来实现所描述的功能，但是这种实现不应认为超出本发明的范围。在本发明所提供的几个实施例中，应该理解到，所揭露的装置和方法，可以通过其它的方式实现。例如，以上所描述的装置实施例仅仅是示意性的。例如，各个单元的划分，仅仅为一种逻辑功能划分，实际实现时可以有另外的划分方式。例如多个单元或组件可以结合或者可以集成到另一个系统，或一些特征可以忽略，或不执行。本发明实施例方法中的步骤可以根据实际需要进行顺序调整、合并和删减。本发明实施例装置中的单元可以根据实际需要进行合并、划分和删减。另外，在本发明各个实施例中的各功能单元可以集成在一个处理单元中，也可以是各个单元单独物理存在，也可以是两个或两个以上单元集成在一个单元中。该集成的单元如果以软件功能单元的形式实现并作为独立的产品销售或使用时，可以存储在一个存储介质中。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分，或者该技术方案的全部或部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台计算机设备执行本发明各个实施例所述方法的全部或部分步骤。以上所述，仅为本发明的具体实施方式，但本发明的保护范围并不局限于此，任何熟悉本技术领域的技术人员在本发明揭露的技术范围内，可轻易想到各种等效的修改或替换，这些修改或替换都应涵盖在本发明的保护范围之内。因此，本发明的保护范围应以权利要求的保护范围为准。
