标题title
一种安装包处理方法、装置以及设备
摘要abst
本说明书实施例公开了一种安装包处理方法、装置以及设备。方案包括：确定待通过包管理器下载的安装包，安装包包含第一数量具有顺序的tar文件；在tar文件的下载过程中，对tar文件进行流式解析，以确定tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的tar文件，则根据顺序和位置关系，对第二数量的tar文件进行拼接，得到拼接tar文件，第二数量为多个且远少于第一数量；将各拼接tar文件写入文件系统，以便完成安装包的安装过程。
权利要求书clms
1.一种安装包处理方法，包括：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。2.如权利要求1所述的方法，所述tar文件的下载过程，包括：预先生成针对所述tar文件的多个请求消息，并根据所述请求消息通过所述包管理器向所述tar文件的数据源提前请求下载，将通过所述包管理器返回的响应缓存在响应池；通过访问所述响应池，根据所述顺序和所述响应，获取对应的所述tar文件。3.如权利要求2所述的方法，所述根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接之前，所述方法还包括：确定所述待通过包管理器下载的安装包为第一版本；判定本地是否存在已通过所述包管理器下载并持久化的第二版本的安装包；通过对所述第二版本的安装包与至少部分已下载的所述第一版本的安装包进行比对，确定所述第二数量。4.如权利要求3所述的方法，所述通过对所述第二版本的安装包与至少部分已下载的所述第一版本的安装包进行比对，确定所述第二数量，具体包括：在所述第一版本的安装包的下载过程中，通过将已下载部分在所述第二版本的安装包中进行匹配比对，确定在设定的时间窗口内连续一致的tar文件；根据所述连续一致的tar文件的大小，动态地确定所述第二数量。5.如权利要求4所述的方法，所述tar文件的下载过程，包括：根据所述连续一致的tar文件的大小，确定基准总数据量；从所述第二版本的安装包中对应地连续获取所述基准总数据量的tar文件，用于生成所述拼接tar文件，并写入文件系统；下载所述第一版本的安装包的对应部分，以对所述基准总数据量的tar文件进行一致性验证；若验证通过，则不将所述对应部分写入文件系统，并增大所述基准总数据量，和/或，若验证不通过，则根据所述对应部分对已写入文件系统的所述拼接tar文件进行修正，并缩小所述基准总数据量。6.如权利要求4所述的方法，所述流式解析完第二数量符合条件的所述tar文件，具体包括：获取动态确定出的当前的第二数量；流式解析完总数据量达到预定值的所述当前的第二数量的所述tar文件。7.如权利要求1所述的方法，所述安装包包括多个不同数据源的子安装包；所述对所述第二数量的所述tar文件进行拼接，具体包括：分别获取各所述子安装包中的一部分tar文件；在保持各所述一部分tar文件的顺序的情况下，将各所述一部分tar文件拼接在一起；所述得到拼接tar文件之后，所述方法还包括：将所述拼接tar文件返回给各所述数据源，以使各所述数据源根据所述安装包的更新版本，相应地对所述拼接tar文件进行更新。8.如权利要求1～7任一项所述的方法，所述包管理器包括Nodejs下的npm包管理器。9.一种安装包处理装置，包括：确定模块，确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；解析模块，在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；拼接模块，若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；写入模块，将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。10.如权利要求9所述的装置，所述装置还包括下载模块，预先生成针对所述tar文件的多个请求消息，并根据所述请求消息通过所述包管理器向所述tar文件的数据源提前请求下载，将通过所述包管理器返回的响应缓存在响应池；通过访问所述响应池，根据所述顺序和所述响应，获取对应的所述tar文件。11.如权利要求10所述的装置，所述拼接模块根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接之前，还执行：确定所述待通过包管理器下载的安装包为第一版本；判定本地是否存在已通过所述包管理器下载并持久化的第二版本的安装包；通过对所述第二版本的安装包与至少部分已下载的所述第一版本的安装包进行比对，确定所述第二数量。12.如权利要求11所述的装置，所述拼接模块，在所述第一版本的安装包的下载过程中，通过将已下载部分在所述第二版本的安装包中进行匹配比对，确定在设定的时间窗口内连续一致的tar文件；根据所述连续一致的tar文件的大小，动态地确定所述第二数量。13.如权利要求12所述的装置，所述拼接模块，根据所述连续一致的tar文件的大小，确定基准总数据量；从所述第二版本的安装包中对应地连续获取所述基准总数据量的tar文件，用于生成所述拼接tar文件，并写入文件系统；下载所述第一版本的安装包的对应部分，以对所述基准总数据量的tar文件进行一致性验证；若验证通过，则不将所述对应部分写入文件系统，并增大所述基准总数据量，和/或，若验证不通过，则根据所述对应部分对已写入文件系统的所述拼接tar文件进行修正，并缩小所述基准总数据量。14.如权利要求12所述的装置，所述解析模块，获取动态确定出的当前的第二数量；流式解析完总数据量达到预定值的所述当前的第二数量的所述tar文件。15.如权利要求9所述的装置，所述安装包包括多个不同数据源的子安装包；所述拼接模块，分别获取各所述子安装包中的一部分tar文件；在保持各所述一部分tar文件的顺序的情况下，将各所述一部分tar文件拼接在一起；所述拼接模块在得到拼接tar文件之后，还执行；将所述拼接tar文件返回给各所述数据源，以使各所述数据源根据所述安装包的更新版本，相应地对所述拼接tar文件进行更新。16.如权利要求9～15任一项所述的装置，所述包管理器包括Nodejs下的npm包管理器。17.一种安装包处理设备，包括：至少一个处理器；以及，与所述至少一个处理器通信连接的存储器；其中，所述存储器存储有可被所述至少一个处理器执行的指令，所述指令被所述至少一个处理器执行，以使所述至少一个处理器能够：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。
说明书desc
技术领域本说明书涉及互联网技术领域，尤其涉及一种安装包处理方法、装置以及设备。背景技术包管理器是用于Nodejs的程序包管理和分发的管理工具，能够实现代码的共享，提供各种插件、库和框架的使用便利。npm安装包在安装写入系统的过程中，往往包括大量tgz文件的下载，在这种情况下，tgz文件又需要解压为大量tar文件，往往一个Nodejs项目中可能包含上千个tar文件，这导致写入过程耗时较长。基于此，需要更高效的安装包处理方案。发明内容本说明书一个或多个实施例提供一种安装包处理方法、装置、设备以及存储介质，用以解决如下技术问题：需要更高效的安装包处理方案。为解决上述技术问题，本说明书一个或多个实施例是这样实现的：本说明书一个或多个实施例提供的一种安装包处理方法，包括：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。本说明书一个或多个实施例提供的一种安装包处理装置，包括：确定模块，确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；解析模块，在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；拼接模块，若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；写入模块，将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。本说明书一个或多个实施例提供的一种安装包处理设备，包括：至少一个处理器；以及，与所述至少一个处理器通信连接的存储器；其中，所述存储器存储有可被所述至少一个处理器执行的指令，所述指令被所述至少一个处理器执行，以使所述至少一个处理器能够：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。本说明书一个或多个实施例提供的一种非易失性计算机存储介质，存储有计算机可执行指令，所述计算机可执行指令设置为：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。本说明书一个或多个实施例采用的上述至少一个技术方案能够达到以下有益效果：在通过包管理器下载js包的情况下，下载过程中对其包含的tar文件进行流式解析，边下载边解析，能够提高下载效率，减小下载内容占用的内存的大小，同时便于后续对解析的tar文件进行拼接，以通过将安装包中的tar文件拆分为多个拼接tar文件，分次写入文件系统中，一方面能保证正确的tar文件写入顺序，而且又能减少对文件系统的写入次数，有助于减少写入文件系统的时间，提高写入效率，包管理器能够得到更高效的配合。附图说明为了更清楚地说明本说明书实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本说明书中记载的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动性的前提下，还可以根据这些附图获得其他的附图。图1为本说明书一个或多个实施例提供的一种安装包处理方法的流程示意图；图2为本说明书一个或多个实施例提供的一种应用场景下，图1中方法的一种详细流程示意图；图3为本说明书一个或多个实施例提供的一种应用场景下，图1中方法的一种详细流程示意图；图4为本说明书一个或多个实施例提供的一种安装包处理装置的结构示意图；图5为本说明书一个或多个实施例提供的一种安装包处理设备的结构示意图。具体实施方式本说明书实施例提供一种安装包处理方法、装置、设备以及存储介质。为了使本技术领域的人员更好地理解本说明书中的技术方案，下面将结合本说明书实施例中的附图，对本说明书实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本申请一部分实施例，而不是全部的实施例。基于本说明书实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都应当属于本申请保护的范围。在本说明书一个或多个实施例中，在通过包管理器下载js安装包的下载过程中，对其中正在下载下来的tar文件进行流式解析，并对解析后的tar文件进行拼接，将多个tar文件合并为一个文件再写入，以减少tar文件写入文件系统的次数，减少写入时间，提高写入效率。并且，对待下载的tar文件提前请求下载，能够在下载时节省响应时间。下面基于这样的思路，具体进行说明。图1为本说明书一个或多个实施例提供的一种安装包处理方法的流程示意图。该方法可以应用于不同的业务领域，比如，即时通讯业务领域、公务业务领域等。该流程可以由相应领域的计算设备执行，流程中的某些输入参数或者中间结果允许人工干预调节，以帮助提高准确性。图1中的流程可以包括以下步骤：S102：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件。通过包管理器集成管理多个数据源，可确定来自不同数据源的待下载的安装包。安装包中含有第一数量的tar文件，在安装包下载的过程中，tar文件按照一定的顺序依次写入文件系统。针对Nodejs的包管理器为npm，在一个Nodejs项目中，通过npm下载的安装包可包含上千个tar文件。tar文件是Unix系统、类Unix系统中的归档文件，一般进行文件合并而不进一步压缩。tar文件进行压缩后，追加压缩文件的扩展名，比如经过gzip压缩后的tar文件，扩展名为“.tar.gz”。tar文件中包括多个合并的文件的tar头结构以及对应的文件内容，比如tar包中包括两个文件，则tar包首先存放第一个文件的tar头结构，然后存储文件内容，接着存储第二个文件的tar头结构，然后存储文件内容。基于tar文件的格式要求，其写入文件系统的顺序是一定的，因此，在tar文件的下载过程中，也需要根据相应的顺序下载tar文件。S104：在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系。若一次性对安装包中的tar文件整体进行下载和写入，会使得将tar文件写入文件系统的过程较为缓慢，耗时较长，且容易导致内存溢出。因此，通过流式解析的方式，以数据流的形式对tar文件进行下载，边下载边解析，根据解析的顺序，将先解析得到的tar文件先写入文件系统中，并在写入后释放对应的内存，这样能够提高文件写入速度，减少写入时间，还能占用较小的内容，避免内存溢出的问题。对tar文件进行解析时，确定tar内合并的各头文件和对应的被归档文件内容之间的位置关系，以便后续能够正确地对解析得到的tar文件进行拼接。S106：若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量。在流式解析的过程中，可分次对安装包中包括的第一数量的tar文件进行拼接。在对tar文件进行流式解析的过程中，若解析完第二数量的tar文件后，确定第二数量的tar文件符合设定的拼接条件，则可根据解析的tar文件的顺序和位置关系，对第二数量的tar文件进行拼接，得到拼接tar文件。通常第二数量大于一个，且远少于第一数量。设定条件可包括：解析的tar文件中是指定的业务内容，比如，是全局声明内容、是地图资源、是关键业务逻辑等，如此，有助于将安装包按照更合理的文件顺序重新封装，重新封装的版本可以反馈给包管理器对接的相应数据源；解析的tar文件的第二数量达到预设数量，则对预设数量的解析的tar文件进行拼接；解析的tar文件的文件大小总和达到预设文件大小，则将对应的多个解析的tar文件进行拼接；等等。通过对tar文件进行拼接后，以拼接tar文件的形式写入文件系统，可减少将tar文件写入文件系统的次数，提高写入速率。基于对tar文件的顺序下载，则在拼接过程中，解析的tar文件也是根据下载顺序进行拼接的，得到的拼接tar文件中的文件可以为顺序相邻的tar文件，以便于正确安装。S108：将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。随着tar文件的下载和流式解析，得到各拼接tar文件，将各拼接tar文件即时写入文件系统，直至整个tar文件均下载完成，完成文件系统中对应的tar文件读写目录，从而完成安装包的安装过程。通过图1的方法，对tar文件进行流式解析，边下载边解析，能够提高下载效率，减小下载内容占用的内存的大小，同时便于后续对解析的tar文件进行拼接，以通过将安装包中的tar文件拆分为多个拼接tar文件，分次写入文件系统中，一方面能保证正确的tar文件写入顺序，而且又能减少对文件系统的写入次数，减少写入文件系统的时间，提高写入效率，包管理器能够得到更高效的配合，有助于将包管理器带来的效率提升更充分地落地。基于图1的方法，本说明书还提供了该方法的一些具体实施方案和扩展方案，下面继续进行说明。在本说明书一个或多个实施例中，对tar文件进行顺序下载时，可能会增加下载时的响应时间和延迟，比如，以往返时延进行度量。因此，预先生成针对tar文件的多个请求消息，根据请求消息通过包管理器向tar文件对应的数据源提前请求下载tar文件，并将通过包管理器返回的响应缓存在响应池中。则后续在下载tar文件时，可直接通过访问响应池，根据一定的顺序和响应，获取对应的tar文件。其中，针对tar文件的多个请求消息可以分别对应安装包中的各tar文件，用于请求获取响应池中缓存的文件，也可以分别对应相应的数据源。通过提前下载，缓存响应，能够缩短rtt时间，提高下载效率和安装包的安装效率。具体地，包管理器根据提前下载的请求消息，可直接将对应的待下载的tar文件携带在响应中，返回至文件下载请求方并缓存在响应池中，则后续在tar文件的下载过程中，可直接从响应池中获取对应的tar文件。或者，包管理器根据提前下载的请求消息，仅建立文件下载请求方与数据源之间的关联，给出响应，而不直接返回tar文件。在后续tar文件下载的过程中，文件下载请求方根据预先通过包管理器建立的关联，再从数据源获取对应的tar文件。也就是说，上述S104中提到的tar文件的下载过程，可表示为将tar文件从数据源下载至文件下载请求方本地的过程，也可表示为将提前下载的tar文件从响应池下载至本地的过程。在一种应用场景下，上述的请求消息通过HTTP客户端发送，相应得到的响应时HTTP响应，暂存在HTTP响应池中。进一步地，根据安装包中包含的tar文件所属的数据源，确定包管理器向哪些数据源提前请求下载，并获取对应的tar文件。在本说明书一个或多个实施例中，通过包管理器下载的安装包可能会进行更新，并产生对应的不同版本，npm会在本地保存历史版本，利用这个特性进一步地提高处理效率。在下载的过程中，确定待通过包管理器下载的安装包为第一版本，并判定本地是否存在已通过包管理器下载并持久化的第二版本的安装包。其中，第一版本和第二版本的安装包均为同一程序的安装包，不同版本的安装包之间至少存在部分不同的tar文件，也可能存在部分相同的tar文件。针对第二版本与第一版本的安装包中相同的tar文件，无需再重新下载，而可直接复用第二版本中的tar文件，以节省下载工作量，提高下载效率。因此，在对待下载的第一版本的安装包进行下载的过程中，通过对第二版本的安装包与至少部分已下载的第一版本的安装包进行比对，确定进行拼接的tar文件对应的第二数量。若经过对比得出，第一版本的安装包与第二版本的安装包存在连续多个对应相同的tar文件，则可据此确定第二数量，认为第一版本和第二版本的安装包中对应第二数量的tar文件可能是相同的，可以直接从第二版本的安装包中复用。其中，第二数量可表示两个版本连续多个对应相同的tar文件的个数，比如连续5个对应相同的tar文件，也可以表示连续多个对应相同的tar文件的文件大小的总和，比如文件大小总和为16KB的连续相同的tar文件。通过对比第一版本和第二版本的安装包的tar文件，据此确定第二数量，可直接对第二版本中的tar文件进行复用，避免重复下载，减少额外的下载量，提高下载效率。进一步地，通过对比第一版本和第二版本的安装包得到连续一致的tar文件，进而确定出的第二数量，可能并不完全适用于安装包中所有的tar文件。在tar文件的下载过程中，可能存在第一版本和第二版本的安装包中第二数量的tar文件不一致的情况。因此，在第一版本的安装包的下载过程中，通过将已下载部分在第二版本的安装包中进行匹配比对，确定在设定的时间窗口内连续一致的tar文件。根据连续一致的tar文件的大小，动态地确定第二数量。时间窗口内，包含多个连续的tar文件，两个版本的这些tar文件有可能都是连续一致的，也有可能是断续一致的。对于后一种情况，比如，时间窗口内可能有三段tar文件，第一段连续一致，第二段有不一致的部分，第三段又是连续一致，则比如将第一段和第二段两者中相对小的tar数量确定为第二数量；而若整个时间窗口内tar文件都是一致的，则比如将整个时间窗口内的tar文件数量确定为第二数量，如此动态地确定第二数量，在有不一致的情况出现时及时反应调整，以防止误差扩大化。时间窗口还有更多的应用形式。在本说明书一个或多个实施例中，时间窗口表示对第二数量进行调整的时间间隔条件，具体可通过对第二版本的安装包中的tar文件进行复用的次数确定。比如，设置时间窗口为3，则在第一次确定出第二数量后，根据第二数量对第二版本的安装包中的tar文件进行复用，在复用3次后，根据当前顺序往后的tar文件，重新根据第一版本和第二版本的安装包中连续一致的tar包，来确定第二数量。具体地，在动态确定第二数量的过程中，若第二数量表示连续一致的tar文件的个数，则调整第二数量时，是对连续一致的tar文件的个数的多少进行调整。比如，将第二数量由5个tar文件调整为3个tar文件。若第二数量表示连续一致的tar文件的文件大小的总和，则调整第二数量时，是对连续一致的tar文件的文件大小的总和进行调整。比如，将第二数量由16KB调整为8KB。通过设定时间窗口，动态地调整第二数量，能够在一定程度上减少对第二版本的安装包中的tar文件直接进行复用的误差，增强复用的灵活性、适用性、可靠性，以达到降低下载工作量，提高下载效率的目的。更进一步地，根据确定出的第二数量，对第二版本的安装包中的tar文件进行复用时，为了进一步增强复用的可靠性，根据连续一致的tar文件的大小，确定基准总数据量。基准总数据量表示第一版本和第二版本的安装包中连续一致的tar文件的文件大小总和，比如16KB。根据确定出的基准总数据量，从第二版本的安装包中对应地连续获取相应的tar文件，用于生成拼接tar文件，并写入文件系统，实现对第二版本的安装包中的相应tar文件的复用。为了验证复用的准确性，下载第一版本的安装包的对应部分，与从第二版本的安装包中复用的相应部分进行匹配对比，以对根据基准总数据量获取的tar文件进行一致性验证。若验证通过，即第一版本和第二版本的安装包中的该相应部分是一致的，则复用是正确的，无需将第一版本的安装包中的对应部分写入文件系统。并且，在验证通过的情况下，表示先前确定出的基准总数据量具有一定的可靠性，可在此基础上增大基准总数据量，继续进行下载。这样通过增大拼接tar文件的数据量，有利于进一步减少对文件系统的写入次数，减少写入时间，加快下载效率。和/或，若验证不通过，即第一版本和第二版本的安装包中的该相应部分是不一致的，则不能直接复用第二版本的安装包中的相应部分，需要根据第一版本的安装包中的对应部分，对复用得到的已写入文件系统的拼接tar文件进行修正，以保证下载的正确性。并且，在验证未通过的情况下，表示先前确定出的基准总数据量可能存在问题，则为了增加复用的可靠性，可缩小基准总数据量，再继续下载。这样通过缩小基准总数据量，能够试验得到较为合适的进行复用的数据量，增强复用的可靠性。通过对第一版本和第二版本的安装包中的相应tar文件进行一致性验证，可确保写入文件系统的拼接tar文件的正确性，防止复用出错。并且，根据一致性验证的结果，灵活地调整基准总数据量的大小，能够及时对复用正确与否的情况作出反应，增强复用的可靠性、鲁棒性、可行性。更进一步地，在根据一致性验证的结果，确定对基准总数据量的调整时，可设置调整条件，用于确定对基准总数据量进行调整的频率。比如，连续验证通过设定次数以上，则以第一程度增大基准总数据量，又以增大后的基准总数据量连续验证通过设定次数以上，则以第二程度增大基准总数据量，第二程度大于第一程度；或者，每次进行一致性验证，均对基准总数据量进行调整；等等。通过设置调整条件，能够更加灵活地对第二版本的安装包中的tar文件进行复用的基准总数据量进行调整，提高复用的灵活性、可行性。更进一步地，在对tar文件进行流式解析的过程中，获取动态确定出的当前的第二数量。在第二数量用于表示文件大小的情况下，根据第二数量的tar文件，流式解析完总数据量达到预定值的tar文件，则可对解析后的tar文件进行拼接。在本说明书一个或多个实施例中，基于包管理器集成不同数据源的特性，通过包管理器下载的安装包通常会包括多个不同数据源的子安装包。各数据源分别维护管理子安装包的内容，向包管理器反馈子安装包，以构成整个的安装包。在对tar文件进行拼接时，分别获取各子安装包中的一部分tar文件，在保持各一部分tar文件的顺序的情况下，将各一部分tar文件拼接在一起，即，将各子安装包中的tar文件进行混合拼接，得到的拼接tar文件中包括各子安装包中的一部分内容。在tar文件存在更新的情况下，文件下载请求方可将混合拼接得到的拼接tar文件返回给各数据源，以使各数据源分别根据自身的子安装包的更新版本，相应地对拼接tar文件中的对应部分进行更新。这样各数据源分别负责拼接tar文件中相应内容的更新，在更新完成返回至文件下载请求方时，无需重新拼接，可直接采用原先的拼接方式，节省额外的拼接的工作量。并且，各数据源都有拼接tar文件，各数据源之间可相互作为备份方，在某数据源异常的情况下，可从其他数据源处获得拼接tar文件，这样有利于增强本方案的稳定性、鲁棒性。结合前面的说明，本说明书一个或多个实施例提供了的一种应用场景下，图1中方法的一种详细流程示意图，该流程中使用了前面一些可选的方案，该流程如图2所示。在图2的流程中，将待通过包管理器下载的安装包作为第一版本的安装包，将本地已持久化的安装包作为第二版本的安装包。其中，第一版本和第二版本是基于文件更新产生的针对同一安装包的不同版本，第一版本高于第二版本，为较新版本。在流式解析第一版本的安装包的过程中，为了提高下载效率，减少下载的工作量，匹配比对第一版本和第二版本的安装包中的tar文件，若存在连续一致的tar文件，则第二版本的安装包中的该部分tar文件可直接复用，而无需重新下载第一版本的安装包中的相应文件。根据连续一致的tar文件对应的文件大小的总和，确定基准总数据量，作为复用第二版本的安装包中的tar文件的标准。根据基准总数据量，获取第二版本的安装包中对应的tar文件，拼接得到拼接tar文件，写入文件系统中。为了验证复用的准确性，将复用的第二版本的安装包中的文件与第一版本的安装包中的文件进行匹配比对，确定文件是否一致。若一致，表示复用无误，可增大基准总数据量。若不一致，表示复用出现错误，需根据第一版本的安装包中的对应tar文件，对写入文件系统的拼接tar文件进行修正，并缩小基准总数据量。如此循环进行，直至第一版本的安装包的全部tar文件均已对应写入文件系统中，确定安装完成。结合前面的说明，本说明书一个或多个实施例提供了的一种应用场景下，图1中方法的一种详细流程示意图，该流程中使用了前面一些可选的方案，该流程如图3所示。在图3的流程中，客户端预先向包管理器发送对安装包的下载请求，获得包管理器返回的响应，并缓存在响应池中。通过预先下载请求，先将响应缓存在响应池中，可降低下载过程中的响应时间。安装时，根据响应池中缓存的响应，获取对应的tar文件，对tar文件进行流式解析。通过tar解析器对tar文件进行流式解析，避免下载完成后再解析，可降低时间消耗。解析相应数量的符合条件的tar文件后，通过tar转换器对解析的tar文件进行拼接，将体积较小的tar文件合并为体积较大的tar文件，得到拼接tar文件，可减少向文件系统中写入文件的次数，以提升下载速度。将得到的各拼接tar文件写入文件系统中，完成安装包的安装过程。基于同样的思路，本说明书一个或多个实施例还提供了上述方法对应的装置和设备，如图4、图5所示。图4为本说明书一个或多个实施例提供的一种安装包处理装置的结构示意图，所述装置包括：确定模块402，确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；解析模块404，在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；拼接模块406，若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；写入模块408，将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。可选地，所述装置还包括下载模块410，预先生成针对所述tar文件的多个请求消息，并根据所述请求消息通过所述包管理器向所述tar文件的数据源提前请求下载，将通过所述包管理器返回的响应缓存在响应池；通过访问所述响应池，根据所述顺序和所述响应，获取对应的所述tar文件。可选地，所述拼接模块406根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接之前，还执行：确定所述待通过包管理器下载的安装包为第一版本；判定本地是否存在已通过所述包管理器下载并持久化的第二版本的安装包；通过对所述第二版本的安装包与至少部分已下载的所述第一版本的安装包进行比对，确定所述第二数量。可选地，所述拼接模块406，在所述第一版本的安装包的下载过程中，通过将已下载部分在所述第二版本的安装包中进行匹配比对，确定在设定的时间窗口内连续一致的tar文件；根据所述连续一致的tar文件的大小，动态地确定所述第二数量。可选地，所述拼接模块406，根据所述连续一致的tar文件的大小，确定基准总数据量；从所述第二版本的安装包中对应地连续获取所述基准总数据量的tar文件，用于生成所述拼接tar文件，并写入文件系统；下载所述第一版本的安装包的对应部分，以对所述基准总数据量的tar文件进行一致性验证；若验证通过，则不将所述对应部分写入文件系统，并增大所述基准总数据量，和/或，若验证不通过，则根据所述对应部分对已写入文件系统的所述拼接tar文件进行修正，并缩小所述基准总数据量。可选地，所述解析模块404，获取动态确定出的当前的第二数量；流式解析完总数据量达到预定值的所述当前的第二数量的所述tar文件。可选地，所述安装包包括多个不同数据源的子安装包；所述拼接模块406，分别获取各所述子安装包中的一部分tar文件；在保持各所述一部分tar文件的顺序的情况下，将各所述一部分tar文件拼接在一起；所述拼接模块在得到拼接tar文件之后，还执行；将所述拼接tar文件返回给各所述数据源，以使各所述数据源根据所述安装包的更新版本，相应地对所述拼接tar文件进行更新。可选地，所述包管理器包括Nodejs下的npm包管理器。图5为本说明书一个或多个实施例提供的一种安装包处理设备的结构示意图，所述设备包括：至少一个处理器；以及，与所述至少一个处理器通信连接的存储器；其中，所述存储器存储有可被所述至少一个处理器执行的指令，所述指令被所述至少一个处理器执行，以使所述至少一个处理器能够：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。基于同样的思路，本说明书一个或多个实施例还提供了对应于上述方法的一种非易失性计算机存储介质，存储有计算机可执行指令，所述计算机可执行指令设置为：确定待通过包管理器下载的安装包，所述安装包包含第一数量具有顺序的tar文件；在所述tar文件的下载过程中，对所述tar文件进行流式解析，以确定所述tar文件内各头文件和对应的各被归档文件之间的位置关系；若流式解析完第二数量符合条件的所述tar文件，则根据所述顺序和所述位置关系，对所述第二数量的所述tar文件进行拼接，得到拼接tar文件，所述第二数量为多个且远少于所述第一数量；将各所述拼接tar文件写入文件系统，以便完成所述安装包的安装过程。。在20世纪90年代，对于一个技术的改进可以很明显地区分是硬件上的改进还是软件上的改进。然而，随着技术的发展，当今的很多方法流程的改进已经可以视为硬件电路结构的直接改进。设计人员几乎都通过将改进的方法流程编程到硬件电路中来得到相应的硬件电路结构。因此，不能说一个方法流程的改进就不能用硬件实体模块来实现。例如，可编程逻辑器件)就是这样一种集成电路，其逻辑功能由用户对器件编程来确定。由设计人员自行编程来把一个数字系统“集成”在一片PLD上，而不需要请芯片制造厂商来设计和制作专用的集成电路芯片。而且，如今，取代手工地制作集成电路芯片，这种编程也多半改用“逻辑编译器”软件来实现，它与程序开发撰写时所用的软件编译器相类似，而要编译之前的原始代码也得用特定的编程语言来撰写，此称之为硬件描述语言，而HDL也并非仅有一种，而是有许多种，如ABEL、AHDL、Confluence、CUPL、HDCal、JHDL、Lava、Lola、MyHDL、PALASM、RHDL等，目前最普遍使用的是VHDL与Verilog。本领域技术人员也应该清楚，只需要将方法流程用上述几种硬件描述语言稍作逻辑编程并编程到集成电路中，就可以很容易得到实现该逻辑方法流程的硬件电路。控制器可以按任何适当的方式实现，例如，控制器可以采取例如微处理器或处理器以及存储可由该处理器执行的计算机可读程序代码的计算机可读介质、逻辑门、开关、专用集成电路、可编程逻辑控制器和嵌入微控制器的形式，控制器的例子包括但不限于以下微控制器：ARC625D、Atmel AT91SAM、Microchip PIC18F26K20以及Silicone Labs C8051F320，存储器控制器还可以被实现为存储器的控制逻辑的一部分。本领域技术人员也知道，除了以纯计算机可读程序代码方式实现控制器以外，完全可以通过将方法步骤进行逻辑编程来使得控制器以逻辑门、开关、专用集成电路、可编程逻辑控制器和嵌入微控制器等的形式来实现相同功能。因此这种控制器可以被认为是一种硬件部件，而对其内包括的用于实现各种功能的装置也可以视为硬件部件内的结构。或者甚至，可以将用于实现各种功能的装置视为既可以是实现方法的软件模块又可以是硬件部件内的结构。上述实施例阐明的系统、装置、模块或单元，具体可以由计算机芯片或实体实现，或者由具有某种功能的产品来实现。一种典型的实现设备为计算机。具体的，计算机例如可以为个人计算机、膝上型计算机、蜂窝电话、相机电话、智能电话、个人数字助理、媒体播放器、导航设备、电子邮件设备、游戏控制台、平板计算机、可穿戴设备或者这些设备中的任何设备的组合。为了描述的方便，描述以上装置时以功能分为各种单元分别描述。当然，在实施本说明书时可以把各单元的功能在同一个或多个软件和/或硬件中实现。本领域内的技术人员应明白，本说明书实施例可提供为方法、系统、或计算机程序产品。因此，本说明书实施例可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本说明书实施例可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本说明书是参照根据本说明书实施例的方法、设备、和计算机程序产品的流程图和/或方框图来描述的。应理解可由计算机程序指令实现流程图和/或方框图中的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的步骤。在一个典型的配置中，计算设备包括一个或多个处理器、输入/输出接口、网络接口和内存。内存可能包括计算机可读介质中的非永久性存储器，随机存取存储器和/或非易失性内存等形式，如只读存储器或闪存。内存是计算机可读介质的示例。计算机可读介质包括永久性和非永久性、可移动和非可移动媒体可以由任何方法或技术来实现信息存储。信息可以是计算机可读指令、数据结构、程序的模块或其他数据。计算机的存储介质的例子包括，但不限于相变内存、静态随机存取存储器、动态随机存取存储器、其他类型的随机存取存储器、只读存储器、电可擦除可编程只读存储器、快闪记忆体或其他内存技术、只读光盘只读存储器、数字多功能光盘或其他光学存储、磁盒式磁带，磁带磁磁盘存储或其他磁性存储设备或任何其他非传输介质，可用于存储可以被计算设备访问的信息。按照本文中的界定，计算机可读介质不包括暂存电脑可读媒体，如调制的数据信号和载波。还需要说明的是，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、商品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、商品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、商品或者设备中还存在另外的相同要素。本说明书可以在由计算机执行的计算机可执行指令的一般上下文中描述，例如程序模块。一般地，程序模块包括执行特定任务或实现特定抽象数据类型的例程、程序、对象、组件、数据结构等等。也可以在分布式计算环境中实践本说明书，在这些分布式计算环境中，由通过通信网络而被连接的远程处理设备来执行任务。在分布式计算环境中，程序模块可以位于包括存储设备在内的本地和远程计算机存储介质中。本说明书中的各个实施例均采用递进的方式描述，各个实施例之间相同相似的部分互相参见即可，每个实施例重点说明的都是与其他实施例的不同之处。尤其，对于装置、设备、非易失性计算机存储介质实施例而言，由于其基本相似于方法实施例，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。上述对本说明书特定实施例进行了描述。其它实施例在所附权利要求书的范围内。在一些情况下，在权利要求书中记载的动作或步骤可以按照不同于实施例中的顺序来执行并且仍然可以实现期望的结果。另外，在附图中描绘的过程不一定要求示出的特定顺序或者连续顺序才能实现期望的结果。在某些实施方式中，多任务处理和并行处理也是可以的或者可能是有利的。以上所述仅为本说明书的一个或多个实施例而已，并不用于限制本说明书。对于本领域技术人员来说，本说明书的一个或多个实施例可以有各种更改和变化。凡在本说明书的一个或多个实施例的精神和原理之内所作的任何修改、等同替换、改进等，均应包含在本说明书的权利要求范围之内。
