标题title
一种基于Fill Constant指令的写存储系统及方法
摘要abst
本发明提供了一种基于Fill Constant指令的写存储系统及方法，属于计算技术领域；系统包括：指令读写模块，用于读取用户输入的Fill Constant指令；Fill Constant状态控制模块，用于对指令进行解析，根据解析结果向存储模块发起写请求；存储模块，用于响应于写请求完成指令携带数据的写入。本发明通过提供专用Fill Constant指令，实现单指令对存储器写填充特定值的操作，可用于对常见的人工智能软件框架的填充函数进行硬件加速，能够简化软件编译器，提高指令执行效率，实现GPU对高性能计算的支持。
权利要求书clms
1.一种基于Fill Constant指令的写存储系统，其特征在于，所述系统包括指令读写模块、Fill Constant状态控制模块、存储模块；所述指令读写模块的输出端与所述FillConstant状态控制模块的输入端连接，所述Fill Constant状态控制模块的输出端与所述存储模块连接；其中，所述指令读写模块，用于读取用户输入的Fill Constant指令并发送给所述FillConstant状态控制模块；所述Fill Constant状态控制模块，用于对所述Fill Constant进行解析，根据解析结果向所述存储模块发起写请求；所述存储模块，用于响应于所述写请求完成所述Fill Constant指令携带数据的写入。2.根据权利要求1所述的一种基于Fill Constant指令的写存储系统，其特征在于：所述指令读写模块具体用于：从buffer中读出用户构造的Fill Constant指令，发送给所述Fill Constant状态控制模块。3.根据权利要求2所述的一种基于Fill Constant指令的写存储系统，其特征在于：用户构造的所述Fill Constant指令包含如下信息：1）Fill Constant指令操作码，用以识别本命令；2）写地址，本次写填充操作的起始目的地址；3）写数据量，本次写填充数据的总量；4）写数据，本次写填充的完整数据，内容不固定；5）安全存储标识，用以标识本次填充的目的地址是安全存储区域还是非安全存储区域；6）数据位置交换配置包括以下几种类型：无交换，16bit交换，32bit交换，64bit交换。4.根据权利要求3所述的一种基于Fill Constant指令的写存储系统，其特征在于：所述数据位置交换配置的指示说明为：1）无交换：Fill Constant数据原样写出，0xaabb-＞0xaabb；2）16bit交换：以16bit为粒度进行数据位置交换，0xaabb-＞ 0xbbaa；3）32bit交换：以32bit为粒度进行数据位置交换，0xaabbccdd-＞ 0xddccbbaa；4）64bit交换：以64bit为粒度进行数据位置交换，0xaabbccddeeff0011-＞0x1100ffeeddccbbaa。5.根据权利要求1所述的一种基于Fill Constant指令的写存储系统，其特征在于：所述Fill Constant状态控制模块具体用于：对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求。6.根据权利要求5所述的一种基于Fill Constant指令的写存储系统，其特征在于：所述Fill Constant状态控制模块还用于：在写操作过程中，自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。7.一种基于Fill Constant指令的写存储方法，其特征在于，包括如下步骤：S1，用户构造Fill Constant指令，将其写入指令读写模块的buffer中；S2，指令读写模块把所述Fill Constant指令从buffer中读出，发给Fill Constant状态控制模块；S3，所述Fill Constant状态控制模块对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求；S4，所述存储模块基于所述写请求完成所述Fill Constant指令携带数据的写入，等待用户新的指令。8.根据权利要求7所述的一种基于Fill Constant指令的写存储方法，其特征在于：所述方法还包括：在写操作过程中，所述Fill Constant状态控制模块自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。
说明书desc
技术领域本发明涉及计算技术领域，具体而言，涉及一种基于Fill Constant指令的写存储系统及方法。背景技术大数据时代，算力已成为推动数字经济发展的动力。随着对数据的计算需求越来越高，GPU已成为算力基础设施重要的组成部分。尤其对于人工智能应用，需要基于海量数据集进行训练、推理，传统的面向控制的CPU很难满足这种高性能计算需求，而面向并行计算的GPU，成为了更好的硬件加速器。当前常见的人工智能软件框架包括Google Tensorflow、百度飞桨Paddle、开源的PyTorch等，以上框架在初始化或使用内存对象时，往往需要填充特定的数据，因此，以上框架都提供了专用函数。比如，在Google Tensorflow框架中有tensorflow.zero、tensorflow.fill、tensorflow.constant函数；在百度飞桨Paddle框架中提供了paddle.fill_constant函数；在开源PyTorch框架中提供了torch.constant函数。推而广之，在其它软件领域，也普遍存在一般性的、对存储的写填充操作，比如将存储对象初始化为0；构造内存链表且内容递增等。其特点是，用户能够提前计算出写地址与写数据。下文中，统一将这一类型的填充函数称为fill函数。传统的实现方式，需要将fill函数，编译成多条存储器访问指令：生成填充数据块，下达DMA COPY指令，GPU读取填充数据，GPU将填充数据写入目的地址。然而，这增加了编译指令的复杂度，也降低了操作的效率。发明内容为了至少解决上述背景技术中存在的技术问题，本发明提供了一种基于FillConstant指令的写存储系统及方法。本发明的第一方面提供了一种基于Fill Constant指令的写存储系统，所述系统包括指令读写模块、Fill Constant状态控制模块、存储模块；所述指令读写模块的输出端与所述Fill Constant状态控制模块的输入端连接，所述Fill Constant状态控制模块的输出端与所述存储模块连接；其中，所述指令读写模块，用于读取用户输入的Fill Constant指令并发送给所述FillConstant状态控制模块；所述Fill Constant状态控制模块，用于对所述Fill Constant进行解析，根据解析结果向所述存储模块发起写请求；所述存储模块，用于响应于所述写请求完成所述Fill Constant指令携带数据的写入。进一步地，所述指令读写模块具体用于：从buffer中读出用户构造的FillConstant指令，发送给所述Fill Constant状态控制模块。进一步地，用户构造的所述Fill Constant指令包含如下信息：1）Fill Constant指令操作码，用以识别本命令；2）写地址，本次写填充操作的起始目的地址；3）写数据量，本次写填充数据的总量；4）写数据，本次写填充的完整数据，内容不固定；5）安全存储标识，用以标识本次填充的目的地址是安全存储区域还是非安全存储区域；6）数据位置交换配置包括以下几种类型：无交换，16bit交换，32bit交换，64bit交换。进一步地，所述数据位置交换配置的指示说明为：1）无交换：Fill Constant数据原样写出，0xaabb-＞0xaabb；2）16bit交换：以16bit为粒度进行数据位置交换，0xaabb-＞0xbbaa；3）32bit交换：以32bit为粒度进行数据位置交换，0xaabbccdd-＞0xddccbbaa；4）64bit交换：以64bit为粒度进行数据位置交换，0xaabbccddeeff0011-＞0x1100ffeeddccbbaa。进一步地，所述Fill Constant状态控制模块具体用于：对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求。进一步地，所述Fill Constant状态控制模块还用于：在写操作过程中，自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。本发明第二方面还提供了一种基于Fill Constant指令的写存储方法，包括如下步骤：S1，用户构造Fill Constant指令，将其写入指令读写模块的buffer中；S2，指令读写模块把所述Fill Constant指令从buffer中读出，发给FillConstant状态控制模块；S3，所述Fill Constant状态控制模块对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求；S4，所述存储模块基于所述写请求完成所述Fill Constant指令携带数据的写入，等待用户新的指令。进一步地，所述方法还包括：在写操作过程中，所述Fill Constant状态控制模块自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。本发明的有益效果在于：1）简化编译器设计，Fill Constant指令直接开放给用户和编译器，可以将软件的fill函数，直接编译为Fill Constant指令；2）效率高，专用Fill Constant指令执行状态机，单条指令完成用户的不定长写填充操作；3）灵活性高，支持用户定义的、灵活的、不同粒度的数据位置交换；4）安全性高，用户控制安全或非安全存储访问。附图说明为了更清楚地说明本发明实施例的技术方案，下面将对实施例中所需要使用的附图作简单地介绍，应当理解，以下附图仅示出了本发明的某些实施例，因此不应被看作是对范围的限定，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他相关的附图。图1是本发明实施例公开的一种基于Fill Constant指令的写存储系统的结构示意图。图2是本发明实施例公开的指令写入、读出的示意图。图3是本发明实施例公开的Fill Constant状态控制模块解析Fill Constant指令的流程图。图4是本发明实施例公开的读写数据的示意图。具体实施方式为了使本发明的目的、技术方案和优点更加清楚，下面将结合附图对本发明作进一步地详细描述，显然，所描述的实施例仅仅是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其它实施例，都属于本发明保护的范围。在本申请实施例中使用的术语是仅仅出于描述特定实施例的目的，而非旨在限制本申请。在本申请实施例和所附权利要求书中所使用的单数形式的“一种”、“所述”和“该”也旨在包括多数形式，除非上下文清楚地表示其他含义，“多种”一般包含至少两种。应当理解，本文中使用的术语“和/或”仅仅是一种描述关联对象的关联关系，表示可以存在三种关系，例如，A和/或B，可以表示：单独存在A，同时存在A和B，单独存在B这三种情况。另外，本文中字符“/”，一般表示前后关联对象是一种“或”的关系。应当理解，尽管在本申请实施例中可能采用术语第一、第二、第三等来描述……，但这些……不应限于这些术语。这些术语仅用来将……区分开。例如，在不脱离本申请实施例范围的情况下，第一……也可以被称为第二……，类似地，第二……也可以被称为第一……。取决于语境，如在此所使用的词语“如果”、“若”可以被解释成为“在……时”或“当……时”或“响应于确定”或“响应于检测”。类似地，取决于语境，短语“如果确定”或“如果检测”可以被解释成为“当确定时”或“响应于确定”或“当检测时”或“响应于检测”。还需要说明的是，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的商品或者系统不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种商品或者系统所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的商品或者系统中还存在另外的相同要素。下面结合附图详细说明本发明的优选实施例。请参阅图1，图1是本发明实施例公开的一种基于Fill Constant指令的写存储系统的结构示意图。如图1所示，针对传统内存写填充数据操作效率低下的问题，本发明实施例的一种基于Fill Constant的指令管理系统，所述系统包括指令读写模块、FillConstant状态控制模块、存储模块；所述指令读写模块的输出端与所述Fill Constant状态控制模块的输入端连接，所述Fill Constant状态控制模块的输出端与所述存储模块连接；其中，所述指令读写模块，用于读取用户输入的Fill Constant指令并发送给所述FillConstant状态控制模块；所述Fill Constant状态控制模块，用于对所述Fill Constant进行解析，根据解析结果向所述存储模块发起写请求；所述存储模块，用于响应于所述写请求完成所述Fill Constant指令携带数据的写入。本实施例中，本发明通过提供专用Fill Constant指令，实现单指令对存储器写填充特定值的操作，可用于对常见的人工智能软件框架的填充函数进行硬件加速，能够简化软件编译器，提高指令执行效率，实现GPU对高性能计算的支持。进一步地，所述指令读写模块具体用于：从buffer中读出用户构造的FillConstant指令，发送给所述Fill Constant状态控制模块。本实施例中，指令读写模块主要做指令的写入、缓存和读出，参照图2所示：最新的指令会被写到buffer下一个地址。指令buffer是一个先入先出的缓存，深度大小为M byte,地址范围为0- Byte。当指令写到buffer最后一个地址M-1后，会重新从0开始。先写入的指令会最先被读出。当Host buffer非空时，就开始读指令，并按照顺序发送给Fill Constant状态控制模块。每次发送的长度为L，L最小为1Byte，最大为指令长度。进一步地，用户构造的所述Fill Constant指令包含如下信息：1）Fill Constant指令操作码，用以识别本命令；2）写地址，本次写填充操作的起始目的地址；3）写数据量，本次写填充数据的总量；4）写数据，本次写填充的完整数据，内容不固定；5）安全存储标识，用以标识本次填充的目的地址是安全存储区域还是非安全存储区域；6）数据位置交换配置包括以下几种类型：无交换，16bit交换，32bit交换，64bit交换。进一步地，所述数据位置交换配置的指示说明为：1）无交换：Fill Constant数据原样写出，0xaabb-＞0xaabb；2）16bit交换：以16bit为粒度进行数据位置交换，0xaabb-＞0xbbaa；3）32bit交换：以32bit为粒度进行数据位置交换，0xaabbccdd-＞0xddccbbaa；4）64bit交换：以64bit为粒度进行数据位置交换，0xaabbccddeeff0011-＞0x1100ffeeddccbbaa。进一步地，所述Fill Constant状态控制模块具体用于：对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求。本实施例中，Fill Constant状态控制模块解析指令、计算写入地址、按照数据位置交换配置做数据交换、发起写请求、根据安全存储标识构造安全或非安全访问。安全存储访问标识，通常为1bit的指示信号，带在写请求中发给存储器，只有安全存储访问标识为1的请求，可以成功访问系统划定的安全存储区域。具体的状态参照图3所示：首先，在初始状态下，Fill Constant状态控制模块处于空闲状态。当FillConstant状态控制模块从指令读写模块收到Fill Constant指令后，会进入指令解析状态。得到Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换指示等信息。然后，解析完成后，进入写准备状态，计算写入地址，按照数据位置交换指示进行数据交换，按照安全存储标识进行安全等级控制。由于单次向存储器的写请求有最大突发限，比如64B、256B等等，所以Fill Constant指令的写入操作，可能需要发起多次的写请求。然后，进入写操作状态，向存储器发出写入请求，等待响应。再后，在写操作成功后，计算是否到达最后地址，如果是，则进入写完成状态；否则，回到写准备状态，继续下一次的写请求。最后，返回到空闲状态，等待下一个Fill Constant指令。进一步地，所述Fill Constant状态控制模块还用于：在写操作过程中，自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。另外，存储模块主要做变量的存储、读操作和写操作，参照图4所示：存储的方式可以为寄存器、SRAM、DDR、HBM等，不受限制。存储空间的范围为FillConstant指令中地址位宽所能表示的最大值。当存储器收到Fill Constant状态控制模块发来的写操作后，存储模块会根据写地址和写数据，将新的变量数据写入对应地址的存储单元中。在Fill Constant指令执行过程中，不涉及对存储器的读操作。本发明还提供了一种基于Fill Constant指令的写存储方法，包括如下步骤：S1，用户构造Fill Constant指令，将其写入指令读写模块的buffer中；S2，指令读写模块把所述Fill Constant指令从buffer中读出，发给FillConstant状态控制模块；S3，所述Fill Constant状态控制模块对所述Fill Constant指令做指令解析，得到所述Fill Constant指令携带的写地址、写数据量、写数据、安全存储标识、数据位置交换配置位信息，根据这些信息向存储模块发起写请求；S4，所述存储模块基于所述写请求完成所述Fill Constant指令携带数据的写入，等待用户新的指令。本实施例中，本发明的基于Fill Constant指令的写存储方法的步骤详细如下：1）用户把Fill Constant指令写入指令buffer中。最新的指令会被写到指令buffer的最后位置。指令buffer是一个先入先出的环形buffer，深度大小为M。当指令写到buffer最后一个位置后，会重新从0开始；2）当指令buffer非空时，表明已经有新指令写入。此时，指令读写模块会主动把一段指令送到Fill Constant状态控制模块。每次发送的指令长度为L；3）Fill Constant状态控制模块会做Fill Constant指令的解析。解析出FillConstant指令的写地址、写数据量、写数据、安全存储标识、数据位置交换指示等信息；4）Fill Constant状态控制模块做写入准备，计算写入地址，按照数据位置交换指示进行数据交换，按照安全存储标识进行安全等级控制。由于单次向存储器的写请求有最大突发限，比如64B、256B等等，所以Fill Constant指令的写入操作，可能需要发起多次的写请求；5）存储模块收到写操作后，根据写地址将数据写入对应的地址空间；6）Fill Constant状态控制模块在写操作成功后，计算是否到达最后地址，如果是，则进入写完成状态；否则，回到写准备状态，继续下一次的写请求；7）Fill Constant状态控制模块在完成当前指令所有写请求后，返回到空闲状态，等待下一个Fill Constant指令。进一步地，所述方法还包括：在写操作过程中，所述Fill Constant状态控制模块自动处理写地址与写数据的对应关系，自动累加、计算写地址，确保把数据写入正确的地址。下面，对本发明的方案举例说明如下：示例一）：1）用户要对起始地址0x16做长度为32B的填充，填充数据为X。用户准备的FillConstant指令信息包括：Fill Constant标识符0x2，写地址为0x16，写数据长度为32，写数据为X，安全存储器标识为0，数据位置交换指示为0。FillConstant指令长度为48Byte，包括16Byte指令头与32Byte写数据。16Byte指令头，包含前述控制信息，通常为了简化软件地址管理，定义为4B对齐。2）初始状态下，指令buffer中没有Fill Constant指令，地址为0。buffer深度大小为1MByte。因此，最新的Fill Constant指令会被写到buffer的0-47B地址。3）当指令buffer非空时，表明已经有指令写入到Host buffer中。此时，指令读写模块会主动把一段指令送到状态控制模块。每次发送的指令长度为16B，3次发完。4）Fill Constant状态控制模块会做Fill Constant指令的解析。解析出FillConstant指令的写地址、写数据量、写数据、安全存储标识、数据位置交换指示等信息。5）数据位置交换指示为0，数据不做交换。安全存储标识为0，在发出的写请求中，标识为非安全访问。如果存储器能够支持单次32B的访问，则只需要发送一次写请求，就能够完成写操作。6）存储模块收到写请求后，将数据写到以0x16为起始地址的连续32Byte的存储体中。示例二）：1）用户要对起始地址0x100做长度为128B的填充，填充数据为Y。因此，用户准备的Fill Constant指令信息包括：Fill Constant标识符0x2，写地址为0x100，写数据长度为128，写数据为Y，安全存储器标识为1，数据位置交换指示为32b交换。Fill Constant指令长度为144Byte，包括16Byte指令头与128B写数据。2）指令buffer中有其它指令，地址已经写到0x500。buffer深度大小为1MByte。因此，最新的Fill Constant指令会被写到buffer的0x500-0x58F地址。3）当指令buffer非空时，表明已经有指令写入到Host buffer中。此时，指令读写模块会主动把一段指令送到状态控制模块。每次发送的指令长度为16B，9次发完。4）Fill Constant状态控制模块会做Fill Constant指令的解析。解析出FillConstant指令的写地址、写数据量、写数据、安全存储标识、数据位置交换指示等信息。5）数据位置交换指示为16b交换，按照前述“数据位置交换”规则做交换。安全存储标识为1，在发出的写请求中，标识为安全访问。如果存储器支持单次最大32B的访问，则需要发送四次写请求，写地址分别为0x100、0x120、0x140、0x160，才能够完成写操作。6）存储模块收到写操作后，将写数据写到地址0x100开始的连续128B存储体中。本公开的实施例可以被指示为功能块组件和各种处理操作。功能块可被实现为执行特定功能的各种数量的硬件和/或软件组件。例如，本公开的实施例可实现可在一个或更多个微处理器或其他控制装置的控制下执行各种功能的直接电路组件，诸如存储器、处理电路、逻辑电路、查找表等。本公开的组件可通过软件编程或软件组件来实现。类似地，本公开的实施例可以包括由数据结构、过程、例程或其他编程组件的组合实现的各种算法，并且可以由编程或脚本语言实现。功能方面可通过由一个或更多个处理器执行的算法来实现。此外，本公开的实施例可实现用于电子环境设置、信号处理和/或数据处理的相关技术。诸如“机构”、“元件”、“单元”等的术语可以被广泛使用，并且不限于机械和物理组件。这些术语可表示与处理器等相关的一系列软件例程。在本公开中描述了作为示例的具体实施例，并且实施例的范围不限于此。虽然已经描述了本公开的实施例，但是本领域普通技术人员将理解，在不脱离由所附权利要求限定的本公开的精神和范围的状况下，可以在其中进行形式和细节上的各种改变。因此，本公开的上述实施例应当被解释为示例，并且在所有方面不限制实施例。例如，被描述为单个单元的每个组件可以以分布式方式执行，并且同样地，被描述为分布式的组件可以以组合方式执行。在本公开的实施例中使用所有示例或示例术语是为了描述本公开的实施例的目的，而不意图限制本公开的实施例的范围。此外，除非另有明确说明，否则与某些组件相关联的诸如“必要”、“重要”等的表述可不指示绝对需要所述组件。本领域普通技术人员将理解，在不脱离本公开的精神和范围的状况下，可以以修改的形式实现本公开的实施例。由于本公开允许对本公开的实施例进行各种改变，因此本公开不限于特定实施例，并且将理解，不脱离本公开的精神和技术范围的所有改变、等同物和替代物都包含在本公开中。因此，本文描述的本公开的实施例应在所有方面被理解为示例，而不应被解释为限制。此外，诸如“单元”、“模块”等的术语表示可被实现为硬件或软件或硬件和软件的组合的处理至少一个功能或操作的单元。“单元”和“模块”可被存储在将被寻址的存储介质中，并且可被实现为可能够由处理器执行的程序。例如，“单元”和“模块”可指诸如软件组件、面向对象的软件组件、类组件和任务组件的组件，并且可包括进程、功能、属性、过程、子例程、程序代码段、驱动程序、固件、微代码、电路、数据、数据库、数据结构、表、阵列或变量。在本公开中，“A可包括a1、a2和a3中的一个”的表述可以广泛地表示可被包括在元素A中的示例包括a1、a2或a3。该表述不应当被解释为限定为包括在元素A中的示例必须限定为a1、a2和a3的含义。因此，作为包括在元素A中的示例，不应当被解释为排除a1、a2和a3以外的元素。另外，该表述表示元素A可包括a1、a2或a3。该表述并不表示元素A所包括的元素必须选自要素的特定集合。也就是说，该表述不应被限制性地理解为表示必须选自包括a1、a2和a3的集合的a1、a2或a3被包括在元素A中。此外，在本公开中，表述“a1、a2和/或a3中的至少一个”表示“a1”、“a2”、“a3”、“a1和a2”、“a1和a3”、“a2和a3”、以及“a1、a2和a3”中的一个。因此，应当注意，除非明确描述为“a1中的至少一个，a2中的至少一个，以及a3中的至少一个”，否则表述“a1、a2和/或a3中的至少一个”不应被解释为“a1中的至少一个”、“a2中的至少一个”以及“a3中的至少一个”。
