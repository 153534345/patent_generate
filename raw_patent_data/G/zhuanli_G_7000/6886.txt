标题title
基于区块链和SQL的数据处理方法
摘要abst
本申请实施例中提供了一种基于区块链和SQL的数据处理方法，包括：首先获取用户信息；然后根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址；进而根据SQL数据库地址，从多个节点服务器中确定出存储智能合约对应的SQL数据库的目标节点服务器；接着获取待处理交易操作；最终根据智能合约在目标节点服务器上执行待处理交易操作，以更新SQL数据库，得到执行结果，如此设计，通过在智能合约中设置SQL数据库地址，建立了区块链与SQL数据库的连接，使得用户的能够在不具备区块链底层代码知识的基础上，便捷地利用智能合约将待处理交易操作作用于SQL数据库，得到执行结果。
权利要求书clms
1.一种基于区块链和SQL的数据处理方法，其特征在于，应用于区块链，所述区块链存储多个智能合约，所述智能合约与用户信息有绑定关系，所述区块链中包括多个节点服务器，所述方法包括：获取用户信息；根据所述绑定关系，调用所述用户信息对应的智能合约，所述智能合约包括SQL数据库地址；根据所述SQL数据库地址，从所述多个节点服务器中确定出存储所述智能合约对应的SQL数据库的目标节点服务器；获取待处理交易操作；根据所述智能合约在所述目标节点服务器上执行所述待处理交易操作，以更新所述SQL数据库，得到执行结果。2.根据权利要求1所述的方法，其特征在于，所述节点服务器配置有过滤器，所述智能合约包括执行函数，所述根据所述智能合约在所述目标节点服务器上执行所述待处理交易操作，包括：在所述执行函数通过所述过滤器的情况下，根据所述执行函数在所述目标节点服务器执行所述待处理交易操作。3.根据权利要求2所述的方法，其特征在于，判断所述执行函数是否通过所述过滤器的步骤，包括：判断所述执行函数对应的智能合约的合约标识是否与所述SQL数据库的数据库标识是否匹配；若所述合约标识与所述数据库标识匹配，则判断所述执行函数是否存在于预设执行函数范围，若所述执行函数存在于预设执行函数范围，则判定所述执行函数通过所述过滤器；若所述执行函数不存在于预设执行函数范围，则判定所述执行函数不通过所述过滤器；若所述合约标识与所述数据库标识不匹配，则判定所述执行函数不通过所述过滤器。4.根据权利要求2所述的方法，其特征在于，在所述根据所述智能合约在所述目标节点服务器上执行所述待处理交易操作之前，所述方法还包括：获取待执行的执行函数；对所述待执行的执行函数进行第一代码结构检测，得到所述待执行的执行函数对应的第一代码结构检测结果；根据所述待执行的执行函数对应的第一代码结构检测结果对所述待执行的执行函数进行第一命令来源检测处理，得到所述待执行的执行函数对应的第一命令来源检测结果，所述第一命令来源检测处理是指针对待执行的执行函数的首次命令来源检测处理；基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出所述待执行的执行函数在所述虚拟SQL数据库执行后对应的执行结果，所述虚拟SQL数据库用于通过虚拟执行算法对执行函数进行模拟分析；对所述执行结果分别进行第二代码结构检测以及第二命令来源检测处理，得到所述执行结果对应的第二代码结构检测结果以及第二命令来源检测结果，所述第二命令来源检测处理是指针对待执行的执行函数的二次命令来源检测处理，所述命令来源检测处理是指在不执行执行函数的前提下，对执行函数中的程序代码进行分析，来寻找执行函数中由风险命令内容、命令生成变量和风险目标命令组成的恶意篡改代码组，所述风险命令内容包括目标风险命令内容，所述目标风险命令内容为长度大于预设阈值的字符串变量；其中，在包含目标风险命令内容的恶意篡改代码组中，当目标风险命令内容是通过赋值方式将数据传输至风险目标命令时，所述恶意篡改代码组对应的执行函数的命令来源检测结果为执行函数无异常；当所述待执行的执行函数对应的第一代码结构检测结果、第一命令来源检测结果、所述执行结果对应的第二代码结构检测结果和第二命令来源检测结果中至少一个检测结果为执行函数异常时，确定所述待执行的执行函数为异常执行函数。5.根据权利要求4所述的方法，其特征在于，当前执行函数为所述待执行的执行函数，对所述当前执行函数进行当前阶代码结构检测，得到所述当前执行函数对应的当前阶代码结构检测结果，包括：从所述当前执行函数中提取特征信息，得到至少一个待匹配特征信息；将各个待匹配特征信息和异常执行函数特征信息进行匹配；所述异常执行函数特征信息包括异常执行函数代码信息、异常执行函数正则串信息和异常执行函数熵信息中的至少一种；当至少一个待匹配特征信息匹配成功时，确定所述当前执行函数对应的当前阶代码结构检测结果为执行函数有异常。6.根据权利要求5所述的方法，其特征在于，所述异常执行函数熵信息的生成方法包括以下步骤：获取多个异常执行函数；分别从各个异常执行函数中提取代码元素，得到各个异常执行函数对应的代码元素集合，所述代码元素集合包括多个代码元素和各个代码元素对应的位置信息；基于同一异常执行函数对应的代码元素集合生成对应的待定熵信息，得到各个异常执行函数分别对应的待定熵信息；基于各个待定熵信息生成所述异常执行函数熵信息。7.根据权利要求4所述的方法，其特征在于，所述根据所述待执行的执行函数对应的第一代码结构检测结果对所述待执行的执行函数进行第一命令来源检测处理，得到所述待执行的执行函数对应的第一命令来源检测结果，包括：当所述第一代码结构检测结果为执行函数无异常时，对所述待执行的执行函数进行第一命令来源检测处理，得到所述待执行的执行函数对应的第一命令来源检测结果。8.根据权利要求1所述的方法，其特征在于，所述节点服务器配置有私钥，所述SQL数据库配置有密码，所述私钥用于加密所述密码，在所述根据所述智能合约在所述目标节点服务器上执行所述待处理交易操作，以更新所述SQL数据库，得到执行结果之前，所述方法还包括：调用所述目标节点服务器的目标私钥对所述SQL数据库的密码进行解密；调用解密后的所述SQL数据库的密码，以使所述目标节点服务器连接至所述SQL数据库。9.根据权利要求1所述的方法，其特征在于，所述方法还包括：判断所述多个节点服务器接收的所述执行结果是否一致；若是，则判定所述执行结果正常；若否，则判定所述SQL数据被篡改。10.一种基于区块链和SQL的数据处理装置，其特征在于，应用于区块链，所述区块链存储多个智能合约，所述智能合约与用户信息有绑定关系，所述区块链中包括多个节点服务器，所述装置包括：匹配模块，用于获取用户信息；根据所述绑定关系，调用所述用户信息对应的智能合约，所述智能合约包括SQL数据库地址；根据所述SQL数据库地址，从所述多个节点服务器中确定出存储所述智能合约对应的SQL数据库的目标节点服务器；执行模块，用于获取待处理交易操作；根据所述智能合约在所述目标节点服务器上执行所述待处理交易操作，以更新所述SQL数据库，得到执行结果。11.一种计算机设备，其特征在于，所述计算机设备包括处理器及存储有计算机命令的非易失性存储器，所述计算机命令被所述处理器执行时，所述计算机设备执行权利要求1-9中任意一项所述的基于区块链和SQL的数据处理方法。12.一种可读存储介质，其特征在于，所述可读存储介质包括计算机程序，所述计算机程序运行时控制所述可读存储介质所在计算机设备执行权利要求1-9中任意一项所述的基于区块链和SQL的数据处理方法。
说明书desc
技术领域本申请涉及区块链技术，具体地，涉及一种基于区块链和SQL的数据处理方法。背景技术目前区块链的存储技术和传统数据库的存储并没有较好的结合，在现有技术中，想要对区块链的智能合约中的数据进行调整，需要技术人员基于KV数据库结构进行代码底层的操作，这使得负责人员必须有专业的技术人员担任，且修改过程和修改内容体现并不直观。发明内容本申请实施例中提供了一种基于区块链和SQL的数据处理方法、装置、计算机设备及可读存储介质。第一方面，本申请实施例提供一种基于区块链和SQL的数据处理方法，应用于区块链，区块链存储多个智能合约，智能合约与用户信息有绑定关系，区块链中包括多个节点服务器，方法包括：获取用户信息；根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址；根据SQL数据库地址，从多个节点服务器中确定出存储智能合约对应的SQL数据库的目标节点服务器；获取待处理交易操作；根据智能合约在目标节点服务器上执行待处理交易操作，以更新SQL数据库，得到执行结果。在一种可能的实施方式中，节点服务器配置有过滤器，智能合约包括执行函数，根据智能合约在目标节点服务器上执行待处理交易操作，包括：在执行函数通过过滤器的情况下，根据执行函数在目标节点服务器执行待处理交易操作。在一种可能的实施方式中，判断执行函数是否通过过滤器的步骤，包括：判断执行函数对应的智能合约的合约标识是否与SQL数据库的数据库标识是否匹配；若合约标识与数据库标识匹配，则判断执行函数是否存在于预设执行函数范围，若执行函数存在于预设执行函数范围，则判定执行函数通过过滤器；若执行函数不存在于预设执行函数范围，则判定执行函数不通过过滤器；若合约标识与数据库标识不匹配，则判定执行函数不通过过滤器。在一种可能的实施方式中，在根据智能合约在目标节点服务器上执行待处理交易操作之前，方法还包括：获取待执行的执行函数；对待执行的执行函数进行第一代码结构检测，得到待执行的执行函数对应的第一代码结构检测结果；根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果，第一命令来源检测处理是指针对待执行的执行函数的首次命令来源检测处理；基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出待执行的执行函数在虚拟SQL数据库执行后对应的执行结果，虚拟SQL数据库用于通过虚拟执行算法对执行函数进行模拟分析；对执行结果分别进行第二代码结构检测以及第二命令来源检测处理，得到执行结果对应的第二代码结构检测结果以及第二命令来源检测结果，第二命令来源检测处理是指针对待执行的执行函数的二次命令来源检测处理，命令来源检测处理是指在不执行执行函数的前提下，对执行函数中的程序代码进行分析，来寻找执行函数中由风险命令内容、命令生成变量和风险目标命令组成的恶意篡改代码组，风险命令内容包括目标风险命令内容，目标风险命令内容为长度大于预设阈值的字符串变量；其中，在包含目标风险命令内容的恶意篡改代码组中，当目标风险命令内容是通过赋值方式将数据传输至风险目标命令时，恶意篡改代码组对应的执行函数的命令来源检测结果为执行函数无异常；当待执行的执行函数对应的第一代码结构检测结果、第一命令来源检测结果、执行结果对应的第二代码结构检测结果和第二命令来源检测结果中至少一个检测结果为执行函数异常时，确定待执行的执行函数为异常执行函数。在一种可能的实施方式中，当前执行函数为待执行的执行函数，对当前执行函数进行当前阶代码结构检测，得到当前执行函数对应的当前阶代码结构检测结果，包括：从当前执行函数中提取特征信息，得到至少一个待匹配特征信息；将各个待匹配特征信息和异常执行函数特征信息进行匹配；异常执行函数特征信息包括异常执行函数代码信息、异常执行函数正则串信息和异常执行函数熵信息中的至少一种；当至少一个待匹配特征信息匹配成功时，确定当前执行函数对应的当前阶代码结构检测结果为执行函数有异常。在一种可能的实施方式中，异常执行函数熵信息的生成方法包括以下步骤：获取多个异常执行函数；分别从各个异常执行函数中提取代码元素，得到各个异常执行函数对应的代码元素集合，代码元素集合包括多个代码元素和各个代码元素对应的位置信息；基于同一异常执行函数对应的代码元素集合生成对应的待定熵信息，得到各个异常执行函数分别对应的待定熵信息；基于各个待定熵信息生成异常执行函数熵信息。在一种可能的实施方式中，根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果，包括：当第一代码结构检测结果为执行函数无异常时，对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。在一种可能的实施方式中，节点服务器配置有私钥，SQL数据库配置有密码，私钥用于加密密码，在根据智能合约在目标节点服务器上执行待处理交易操作，以更新SQL数据库，得到执行结果之前，方法还包括：调用目标节点服务器的目标私钥对SQL数据库的密码进行解密；调用解密后的SQL数据库的密码，以使目标节点服务器连接至SQL数据库。在一种可能的实施方式中，方法还包括：判断多个节点服务器接收的执行结果是否一致；若是，则判定执行结果正常；若否，则判定SQL数据被篡改。第二方面，本申请实施例提供一种基于区块链和SQL的数据处理装置，应用于区块链，区块链存储多个智能合约，智能合约与用户信息有绑定关系，区块链中包括多个节点服务器，装置包括：匹配模块，用于获取用户信息；根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址；根据SQL数据库地址，从多个节点服务器中确定出存储智能合约对应的SQL数据库的目标节点服务器；执行模块，用于获取待处理交易操作；根据智能合约在目标节点服务器上执行待处理交易操作，以更新SQL数据库，得到执行结果。第三方面，本申请实施例提供一种计算机设备，计算机设备包括处理器及存储有计算机命令的非易失性存储器，计算机命令被处理器执行时，计算机设备执行第一方面至少一种可能的实施方式中的基于区块链和SQL的数据处理方法。第四方面，本申请实施例提供一种可读存储介质，可读存储介质包括计算机程序，计算机程序运行时控制可读存储介质所在计算机设备执行第一方面至少一种可能的实施方式中的基于区块链和SQL的数据处理方法。采用本申请实施例中提供的基于区块链和SQL的数据处理方法，首先获取用户信息；然后根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址；进而根据SQL数据库地址，从多个节点服务器中确定出存储智能合约对应的SQL数据库的目标节点服务器；接着获取待处理交易操作；最终根据智能合约在目标节点服务器上执行待处理交易操作，以更新SQL数据库，得到执行结果，如此设计，通过在智能合约中设置SQL数据库地址，建立了区块链与SQL数据库的连接，使得用户的能够在不具备区块链底层代码知识的基础上，便捷地利用智能合约将待处理交易操作作用于SQL数据库，得到执行结果。附图说明此处所说明的附图用来提供对本申请的进一步理解，构成本申请的一部分，本申请的示意性实施例及其说明用于解释本申请，并不构成对本申请的不当限定。在附图中：图1为本申请实施例提供的基于区块链和SQL的数据处理系统的场景交互示意图；图2为本申请实施例提供的基于区块链和SQL的数据处理方法的步骤流程示意图；图3为本申请实施例提供的用于执行图2中基于区块链和SQL的数据处理方法的基于区块链和SQL的数据处理装置的结构示意框图；图4为本申请实施例提供的用于执行图2中基于区块链和SQL的数据处理方法的计算机设备的结构示意框图。具体实施方式为了使本申请实施例中的技术方案及优点更加清楚明白，以下结合附图对本申请的示例性实施例进行进一步详细的说明，显然，所描述的实施例仅是本申请的一部分实施例，而不是所有实施例的穷举。需要说明的是，在不冲突的情况下，本申请中的实施例及实施例中的特征可以相互组合。请结合参考图1，图1为本申请实施例提供的基于区块链和SQL的数据处理系统的场景交互示意图，基于区块链和SQL的数据处理系统包括区块链，区块链存储多个智能合约，智能合约与用户信息一一对应的绑定关系，区块链包括多个节点服务器10，节点服务器10之间可以通信连接，节点服务器10的形式可以是智能终端、云服务器等，在此不做限制。在本申请实施例的其他实施方式中，基于区块链和SQL的数据处理系统也可以由更多或者更少的组件构成，在此不做限制。请结合参阅图2，为了能够解决前述提出的技术问题，本申请实施例提供一种基于区块链和SQL的数据处理方法，该方法可以由图1中的区块链作为执行主体，下面对该基于区块链和SQL的数据处理方法进行详细的介绍。步骤S201，获取用户信息。步骤S202，根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址。步骤S203，根据SQL数据库地址，从多个节点服务器10中确定出存储智能合约对应的SQL数据库的目标节点服务器10。步骤S204，获取待处理交易操作。步骤S205，根据智能合约在目标节点服务器10上执行待处理交易操作，以更新SQL数据库，得到执行结果。在本申请实施例中，智能合约与用户信息一一对应的绑定关系，即一个用户可以单独为其分配一个智能合约，在后续用户需要进行业务操作时，即可根据该用户的用户信息确定出只属于该用户的智能合约，应当理解的是，在本申请实施例中，一个智能合约也只对应一个SQL数据库，以此来保证每个智能合约以及每个SQL数据库之间的隔离，为了能够实现上述方案，可以在传统智能合约的kv数据结构中新增dbp_th字段，存储该合约独有的SQL数据库路径，即SQL数据库地址。在获取SQL数据库地址后，便可以定位到维护该SQL数据库的目标节点服务器10，值得说明的是，在本申请实施例中，可以是由各个节点服务器10直接对SQL数据库进行维护，在本申请实施例的其他实施方式中，也可以是由各个节点服务器10对拥有SQL数据库的SQL数据库服务器进行维护，在此不做限制。同时，每个节点服务器10仅维护一个SQL数据库或者SQL数据库服务器，因此保证SQL数据库的安全。应当理解的是，在本申请实施例中，用户可以在任一节点服务器10发起上述流程，也可以利用其他终端设备接入区块链后作为节点服务器10发起上述流程，在此不做限制。在通过用户信息确定出该用户的智能合约以及SQL数据库后，可以发起待处理交易操作，便可以利用改进的智能合约直接在SQL数据库进行操作的更行，得到执行结果，对应用户来说，通过上述设计，无需掌握有关区块链的底层代码技术，仅需要具备对SQL数据库的操作知识即可执行待处理交易操作，实现了较为便捷的数据处理方法。在一种可能的实施方式中，节点服务器10配置有过滤器，智能合约包括执行函数，前述步骤S205可以通过以下详细的步骤执行实施。子步骤S205-1，在执行函数通过过滤器的情况下，根据执行函数在目标节点服务器10执行待处理交易操作。在本申请实施例中，为了能够保证不同智能合约、SQL数据库之间的隔离，可以通过设置过滤器的方式防止并不关联的智能合约与SQL数据库相互影响，例如，可以在过滤器添加预设条件，在智能合约以及SQL数据库均各自满足预设条件之后，用户方可调用正确的智能合约去更新SQL数据库中的数据，即执行待处理交易操作。应当理解的是，在本申请实施例中，基于区块链的情况下，待处理交易操作可以指利用智能合约对业务数据的新增、更新、删除等操作。同时，为了能够是的节点服务器10能够被智能合约调用，因此节点服务器10也会对应配置相关执行函数的基础功能接口封装。为了能够更加清楚的描述本申请实施例提供的方案，本申请实施例提供判断执行函数是否通过过滤器的实例，可以由以下的实施方式实现。步骤S301，判断执行函数对应的智能合约的合约标识是否与SQL数据库的数据库标识是否匹配。若合约标识与数据库标识匹配，则执行步骤S302。若合约标识与数据库标识不匹配，则执行步骤S303。步骤S302，判断执行函数是否存在于预设执行函数范围，若执行函数存在于预设执行函数范围，则执行步骤S304。若执行函数不存在于预设执行函数范围，则执行步骤S305。步骤303，若合约标识与数据库标识不匹配，则判定执行函数不通过过滤器。步骤S304，判定执行函数通过过滤器。步骤S305，判定执行函数不通过过滤器。在前述基础上，本申请实施例提供一种过滤器的具体设置方式，可以首先，判断执行函数对应的智能合约的合约标识是否与SQL数据库的数据库标识是否匹配，即判断当前的智能合约与SQL数据是否属于当前进行操作的用户，在确定匹配后，进一步判断用户想要执行的待处理交易操作是否合理，具体的，可以通过判断智能合约所包括的用于实现待处理交易操作的执行函数是否在过滤器的预设执行函数范围，若在，则可以正确执行操作，否则说明用户当前想要执行的待处理交易操作并不合理，用户无法实现对应操作。在本申请实施例中，智能合约所包括的执行函数可以有以下三类：数据结构定义语句：CREATE/ALTER/DROP/TRUNCATETABLE。数据管理语句：INSERT/DELETE/UPDATE。数据查询语句：SELECT。应当理解的是，在智能合约执行事务性语句执行函数时需要一个开始点，开始点后所有的执行函数语句才能生效，而其余非事务性语句则是执行之后直接生效。为了能够更加清楚的描述本申请实施例提供的方案，下面进行一种较为详细的实施例的描述。现有智能合约A和智能合约B，分别为两个用户提供服务，用于对数据库a和数据库b进行操作。而通过设置上述过滤器，智能合约A仅有操作数据库a的权限，智能合约A的合约标识与数据库a的数据库标识匹配与数据库b的标识不匹配，因此无法对数据库b进行任何操作。在本申请实施例的其他实施方式中，除了为智能合约和数据库配置标识，也可以采取其他方式绑定二者之间的关系，例如通过设置白名单的方式允许智能合约对SQL数据库进行操作。在一种可能的实施方式中，本申请实施例还提供以下针对执行函数本身的检测示例。步骤S402，获取待执行的执行函数。节点可以对执行函数进行异常检测，从大量的执行函数中识别出异常执行函数，以防御恶意攻击。在一种可能的实施方式中，节点可以自动触发获取待执行的执行函数，对待执行的执行函数进行异常检测。例如，节点可以每隔预设时长自动触发对本地执行函数的异常检测。或者，节点每获取到新的执行函数时，自动触发对该执行函数的异常检测。在一种可能的实施方式中，节点可以是响应于执行函数检测请求触发对执行函数的异常检测。例如，用户在节点上杀毒应用程序的杀毒界面中触发生成执行函数检测请求，节点根据该执行函数检测请求对本地执行函数进行异常检测，识别出本地的异常执行函数。节点也可以接收其他设备发送过来的执行函数检测请求，根据该执行函数检测请求对本地执行函数进行异常检测。步骤S404，对待执行的执行函数进行第一代码结构检测，得到待执行的执行函数对应的第一代码结构检测结果。其中，代码结构检测是指在不执行执行函数的前提下，通过分析执行函数中程序代码的组成部分，来寻找代码中潜在的安全问题。第一代码结构检测是指针对待执行的执行函数的首次代码结构检测。具体地，由于代码结构检测的检测速度快且适用于所有格式的执行函数，所以节点在获取到待执行的执行函数后，可以优先对待执行的执行函数进行第一代码结构检测，对待执行的执行函数的源码进行静态分析，判断待执行的执行函数中是否存在异常源码，从而得到待执行的执行函数对应的第一代码结构检测结果。在一种可能的实施方式中，可以通过特征匹配的方式进行代码结构检测。具体可以是从待执行的执行函数中提取特征信息，将提取到的特征信息和非法函数库中的特征信息进行匹配，一旦匹配成功，则表明待执行的执行函数有异常。其中，在进行特征匹配时，可以直接将待执行的执行函数对应的特征信息和非法函数库中的特征信息匹配，也可以对待执行的执行函数对应的特征信息进行统计，将统计结果和非法函数库中的特征信息匹配。例如，从待执行的执行函数中提取字符串，可以将提取到的字符串和非法函数库中的异常执行函数字符串进行匹配，也可以对提取到的字符串进行信息熵计算，将计算结果和非法函数库中的异常执行函数信息熵进行匹配。在一种可能的实施方式中，可以通过机器学习模型进行代码结构检测。可以是将已知无异常的执行函数作为正执行函数和已知有异常的执行函数作为负执行函数，将正执行函数和负执行函数作为训练执行函数，将训练执行函数输入待训练的执行函数检测模型，将训练执行函数对应的标签作为执行函数检测模型的预期输出，对执行函数检测模型进行有监督训练，得到已训练的执行函数检测模型。节点可以将待执行的执行函数输入已训练的执行函数检测模型，执行函数检测模型输出待执行的执行函数对应的第一代码结构检测结果。可以理解，可以针对不同的编程语言训练不同的执行函数检测模型，提高不同编程语言对应的执行函数的检测准确性。步骤S406，根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。其中，命令来源检测处理是指在不执行执行函数的前提下，通过词法分析，语法分析，控制流、数据流分析等技术对执行函数中的程序代码进行扫描和分析，来寻找执行函数中的恶意篡改代码组。第一命令来源检测处理是指针对待执行的执行函数的首次命令来源检测处理。具体地，在得到第一代码结构检测结果后，节点可以根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。节点可以是当第一代码结构检测结果为执行函数无异常时，才对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。当第一代码结构检测结果为执行函数异常时，节点可以迅速确定待执行的执行函数为异常执行函数，不再执行后续操作。节点也可以是当第一代码结构检测结果为执行函数异常时，继续对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。可以理解，第一代码结构检测和第一命令来源检测处理是不同的检测处理，可以检测出执行函数中不同的异常问题，因此，在已知待执行的执行函数为异常执行函数时，继续对待执行的执行函数进行后续检测处理可以最大限度地查找出待执行的执行函数中所有异常信息，全方位挖掘待执行的执行函数的异常信息，进而有助于相关人在一种可能的实施方式中，在进行第一命令来源检测处理时，节点可以对待执行的执行函数的源码进行语法解析，生成待执行的执行函数对应的SQL抽象语法树，SQL抽象语法树上的每个节点都表示源码中的一种结构。节点根据SQL抽象语法树上节点的属性和风险命令内容、风险目标命令的特性，可以从中确定风险命令内容节点和风险目标命令节点，对节点与节点之间的操作关系进行分析，判断是否存在从风险命令内容到风险目标命令的泄漏路径，当存在恶意篡改代码组并且恶意篡改代码组满足预设条件时，节点可以确定第一命令来源检测结果为待执行的执行函数有异常。进一步的，第一命令来源检测结果还可以包括待执行的执行函数对应的初始SQL抽象语法树，从而后续在基于虚拟SQL数据库下执行待执行的执行函数时，可以直接基于虚拟SQL数据库下执行初始SQL抽象语法树，从而简化检测步骤，提高检测效率。步骤S408，基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出待执行的执行函数在虚拟SQL数据库执行后对应的执行结果。其中，虚拟SQL数据库是用于对待执行的执行函数进行模拟分析，从而对经过加密、变形、混淆的执行函数进行解密还原。虚拟SQL数据库中集成了虚拟执行算法，通过虚拟执行算法可以对待执行的执行函数进行模拟分析，检测执行函数中是否使用了字符串拼接、字符串替换、base64加密等加密混淆方法，从而识别出加密、变形、混淆型执行函数，并且，当待执行的执行函数为经过加密、变形、混淆的执行函数时，还可以对待执行的执行函数进行解密，输出解密后的待执行的执行函数，还原出最原始的执行函数。执行结果为解密后的待执行的执行函数。具体地，若执行函数是加密、变形、混淆型异常执行函数时，能被外界控制的异常变量和泄漏函数会隐藏在加壳代码中，通过第一代码结构检测和第一命令来源检测处理是无法轻易识别出加密、变形、混淆型异常执行函数。因此，当第一代码结构检测和第一命令来源检测处理均未检测出异常时，节点可以进一步在虚拟SQL数据库下执行待执行的执行函数，来判断待执行的执行函数是否经过加密、变形、混淆，并对加密过的待执行的执行函数进行解密还原，得到待执行的执行函数对应的执行结果。节点再对执行结果进行第二代码结构检测和第二命令来源检测处理，从而最终判断待执行的执行函数是否为异常执行函数。当然，当基于第一代码结构检测和第一命令来源检测处理检测出待执行的执行函数有异常时，节点也可以在虚拟SQL数据库下执行待执行的执行函数，得到待执行的执行函数对应的执行结果，再进一步对执行结果进行第二代码结构检测和第二命令来源检测处理，查找出待执行的执行函数中更多的异常信息。在一种可能的实施方式中，虚拟SQL数据库还可以集成有SQL抽象语法树生成算法，因此基于虚拟执行算法执行待执行的执行函数输出待执行的执行函数对应的执行结果后，还可以进一步输出执行结果对应的目标SQL抽象语法树，从而后续在对执行结果进行第二命令来源检测处理时，节点可以直接对执行结果对应的目标SQL抽象语法树进行分析得到第二命令来源检测结果，从而可以提高检测效率。步骤S410，对执行结果分别进行第二代码结构检测以及第二命令来源检测处理，得到执行结果对应的第二代码结构检测结果以及第二命令来源检测结果。其中，第二代码结构检测是指针对待执行的执行函数的二次代码结构检测，具体是对待执行的执行函数对应的执行结果的代码结构检测。第二命令来源检测处理是指针对待执行的执行函数的二次命令来源检测处理，具体是对待执行的执行函数对应的执行结果的命令来源检测处理。具体地，在得到执行结果后，节点可以对执行结果进行第二代码结构检测得到执行结果对应的第二代码结构检测结果，对执行结果进行第二命令来源检测处理得到第二命令来源检测结果。可以理解，若待执行的执行函数经过加密、变形、混淆，直接对待执行的执行函数进行代码结构检测和命令来源检测处理是无法轻易识别出被隐藏起来的异常特征信息和恶意篡改代码组。因此，在得到待执行的执行函数对应的执行结果后，节点可以进一步对待执行的执行函数对应的执行结果进行第二代码结构检测以及第二命令来源检测处理，基于执行结果对应的第二代码结构检测结果以及第二命令来源检测结果最终确定待执行的执行函数是否为异常执行函数。步骤S412，当待执行的执行函数对应的第一代码结构检测结果、第一命令来源检测结果、执行结果对应的第二代码结构检测结果和第二命令来源检测结果中至少一个检测结果为执行函数异常时，确定待执行的执行函数为异常执行函数。具体地，当待执行的执行函数对应的第一代码结构检测结果、第一命令来源检测结果、执行结果对应的第二代码结构检测结果和第二命令来源检测结果中至少一个检测结果为执行函数异常时，节点可以确定待执行的执行函数为异常执行函数。若待执行的执行函数有异常，节点可以及时生成警告信息来提醒相关人员该执行函数有异常，及时进行防护。在一种可能的实施方式中，节点可以按照第一代码结构检测、第一命令来源检测处理、执行执行函数、第二代码结构检测、第二命令来源检测处理的顺序对待执行的执行函数进行异常检测。一旦首次出现检测结果为执行函数异常时，节点可以停止后续处理，直接确定待执行的执行函数为异常执行函数，从而节约计算机资源。并且，第一代码结构检测和第一命令来源检测处理都是对源码进行静态分析，而在虚拟SQL数据库下执行执行函数是对执行函数的源码进行模拟分析，模拟分析的资源消耗会大于静态分析。因此，优先对待执行的执行函数进行第一代码结构检测、第一命令来源检测处理，当第一代码结构检测结果和第一命令来源检测结果为执行函数无异常时，再基于虚拟执行算法执行待执行的执行函数并进行第二代码结构检测、第二命令来源检测处理，这样不仅可以减少计算机资源消耗，还可以提高异常执行函数的检测效率。在一种可能的实施方式中，节点可以按照第一代码结构检测、第一命令来源检测处理、执行执行函数、第二代码结构检测、第二命令来源检测处理的顺序对待执行的执行函数进行全套的异常检测。由于代码结构检测和命令来源检测处理是不同的检测处理，可以检测出执行函数中不同的异常问题，第一代码结构检测和第一命令来源检测处理是针对待执行的执行函数，第二代码结构检测和第二命令来源检测处理是针对待执行的执行函数对应的执行结果，因此进行全套的异常检测可以全方位检测出待执行的执行函数中多种异常信息，例如，不仅检测出加密执行函数中的异常特征信息和异常恶意篡改代码组，还检测出执行结果中的异常特征信息和异常恶意篡改代码组。节点可以将待执行的执行函数对应的所有异常信息发送至相关人员对应的终端或在本地展示待执行的执行函数对应的所有异常信息，异常信息可以辅助开发人员进行数据防护，抵御黑客攻击。节点也可以根据待执行的执行函数对应的异常信息的数量生成待执行的执行函数对应的异常等级，基于待执行的执行函数的异常等级对待执行的执行函数进行展示。例如，当待执行的执行函数对应的异常等级越高，待执行的执行函数的展示位置越靠前，并同时展示待执行的执行函数对应的异常等级。可以理解，待执行的执行函数对应的异常信息的数量越多，待执行的执行函数对应的异常等级越高。上述异常执行函数检测方法中，通过获取待执行的执行函数，对待执行的执行函数进行第一代码结构检测，得到待执行的执行函数对应的第一代码结构检测结果，根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果，基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出待执行的执行函数在虚拟SQL数据库执行后对应的执行结果，对执行结果分别进行第二代码结构检测以及第二命令来源检测处理，得到执行结果对应的第二代码结构检测结果以及第二命令来源检测结果，当待执行的执行函数对应的第一代码结构检测结果、第一命令来源检测结果、执行结果对应的第二代码结构检测结果和第二命令来源检测结果中至少一个检测结果为执行函数异常时，确定待执行的执行函数为异常执行函数。这样，先对待执行的执行函数进行资源消耗较少的第一代码结构检测和第一命令来源检测处理，可以快速得到初步检测结果，基于初步检测结果可以快速直观确定待执行的执行函数是否为异常执行函数，再进一步基于虚拟SQL数据库下执行待执行的执行函数，对待执行的执行函数进行解密，得到执行结果，最后再对执行结果进行第二代码结构检测和第二命令来源检测处理，得到目标检测结果，基于目标检测结果可以确定经过加密的待执行的执行函数是否为异常执行函数，通过代码结构检测、命令来源检测、执行函数执行的有序协作，可以扩大检测范围，从而提高异常执行函数的检测准确性。在一种可能的实施方式中，当前执行函数为待执行的执行函数，对当前执行函数进行当前阶代码结构检测，得到当前执行函数对应的当前阶代码结构检测结果，包括：步骤S502，从当前执行函数中提取特征信息，得到至少一个待匹配特征信息。具体地，以当前执行函数为例说明代码结构检测过程，当前执行函数可以是待执行的执行函数，也可以是执行结果，代码结构检测主要是针对执行函数在源码层级上的匹配检测。若当前执行函数为待执行的执行函数，则是对当前执行函数进行第一代码结构检测，得到当前执行函数对应的第一代码结构检测结果。若当前执行函数为执行结果，则是对当前执行函数进行第二代码结构检测，得到当前执行函数对应的第二代码结构检测结果。节点可以对当前执行函数进行特征提取，从当前执行函数中提取特征信息，基于提取到的特征信息得到至少一个待匹配特征信息。节点可以将执行函数中的一行代码作为一个待匹配特征信息，也可以基于执行函数中的各个代码元素和位置信息生成一个待匹配特征信息。节点也可以基于分割标识符对执行函数进行切分，将切分得到的执行函数片段作为待匹配特征信息。步骤S504，将各个待匹配特征信息和异常执行函数特征信息进行匹配；异常执行函数特征信息包括异常执行函数代码信息、异常执行函数正则串信息和异常执行函数熵信息中的至少一种。其中，异常执行函数特征信息是指异常执行函数的特征信息。异常执行函数特征信息是对大量的异常执行函数进行数据分析得到的。异常执行函数代码信息是指异常执行函数对应的字符串类型的特征信息，即用字符串描述的特征信息。异常执行函数正则串信息是指异常执行函数对应的正则串类型的特征信息，即用正则表达式描述的特征信息。异常执行函数熵信息是指异常执行函数对应的熵值类型的特征信息，是基于异常执行函数的代码框架生成的熵值信息。具体地，节点上设置有非法函数库，非法函数库中存储有异常执行函数特征信息，异常执行函数特征信息包括字符串、正则串、熵值等多种类型的异常特征信息，异常执行函数特征信息用于与当前执行函数进行相应的匹配查询来鉴定当前执行函数是否为异常执行函数。异常执行函数特征信息是对大量的异常执行函数进行数据分析得到的，可以表征异常执行函数的普遍性特征。在进行代码结构检测时，节点可以将各个待匹配特征信息分别和异常执行函数特征信息进行匹配，一旦匹配成功，就可以确定当前执行函数有异常。步骤S506，当至少一个待匹配特征信息匹配成功时，确定当前执行函数对应的当前阶代码结构检测结果为执行函数有异常。具体地，当至少一个待匹配特征信息匹配成功时，节点可以确定当前执行函数包括异常的数据，当前执行函数有异常。在一种可能的实施方式中，节点可以针对不同的编程语言建立不同的异常执行函数特征信息，即为不同执行函数格式的执行函数建立对应的异常执行函数特征信息。因此，节点在进行特征匹配时，可以先判断当前执行函数的执行函数格式，即当前执行函数中使用的目标编程语言，再获取该目标编程语言对应的目标异常执行函数特征信息，将当前执行函数对应的待匹配特征信息和目标异常执行函数特征信息进行匹配，从而快速确定当前阶代码结构检测结果。本实施例中，通过将当前执行函数的各个待匹配特征信息和异常执行函数特征信息进行匹配能够快速得到当前阶代码结构检测结果，并且在匹配的时候，支持字符串匹配、正则匹配等多种匹配规则，检测方式灵活高效。在一种可能的实施方式中，异常执行函数熵信息的生成方法包括以下步骤：获取多个异常执行函数；分别从各个异常执行函数中提取代码元素，得到各个异常执行函数对应的代码元素集合，代码元素集合包括多个代码元素和各个代码元素对应的位置信息；基于同一异常执行函数对应的代码元素集合生成对应的待定熵信息，得到各个异常执行函数分别对应的待定熵信息；基于各个待定熵信息生成异常执行函数熵信息。其中，代码元素是指执行函数源码中的特殊符号，例如，数学符号、标点符号、单位符号。待定熵信息是指基于一个异常执行函数对应的代码元素生成的熵值。异常执行函数熵信息是基于多个异常执行函数对应的熵值得到，用于代表异常执行函数熵值的普遍性、共性。具体地，同一黑客或同一黑客群体编写的执行函数通常具有特定的风格，例如采用相同或相似的代码框架。此外，代码通常是由数字、字母和特殊符号组成，其中，数字和字母可以根据实际需要进行灵活变换，而特殊符号则是代码框架的重要组成部分，相对来说是比较固定的。因此，节点可以对大量异常执行函数的代码元素进行分析，提取出大量异常执行函数之间的共性信息，得到异常执行函数熵信息。节点具体可以获取多个已知异常的异常执行函数，分别从各个异常执行函数中提取代码元素，得到各个异常执行函数对应的代码元素集合。代码元素集合中不仅包括多个代码元素，还包括各个代码元素分别对应的位置信息，基于代码元素和对应的位置信息可以确定代码的整体框架。节点可以对一个异常执行函数对应的代码元素集合进行信息熵计算，生成该异常执行函数对应的待定熵信息，从而各个异常执行函数可以得到各自对应的待定熵信息。最后，节点可以基于各个待定熵信息生成异常执行函数熵信息，例如，对各个待定熵信息进行统计分析，可以将重复次数较多的若干个待定熵信息作为异常执行函数熵信息，也可以将每个待定熵信息都作为异常执行函数熵信息。也可以对各个待定熵信息进行聚类分析，从而对各个待定熵信息进行分组，得到至少一个中间熵信息，一个中间熵信息可以表征同一黑客或同一黑客群体对应的异常执行函数的待定熵信息，将各个中间熵信息分别作为异常执行函数熵信息。聚类分析是用于对待定熵信息进行分组，使得不同的中间熵信息之间具有一定区分度。进一步的，节点可以为不同的异常执行函数熵信息分配不同的黑客标识，从而若当前执行函数对应的当前熵信息和某一异常执行函数熵信息匹配成功，则当前阶代码结构检测结果还可以包括该异常执行函数熵信息对应的黑客标识。其中，聚类分析可以采用基于密度的聚类算法、基于划分的聚类方法。本实施例中，基于异常执行函数对应的代码元素集合生成异常执行函数对应的待定熵信息，基于多个异常执行函数对应的待定熵信息生成异常执行函数熵信息，能够提高异常执行函数熵信息的可靠性。在一种可能的实施方式中，根据待执行的执行函数对应的第一代码结构检测结果对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果，包括：当第一代码结构检测结果为执行函数无异常时，对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果。具体地，为了减少计算机资源消耗，在对待执行的执行函数进行第一代码结构检测，得到待执行的执行函数对应的第一代码结构检测结果后，若第一代码结构检测结果为执行函数无异常，节点才会对待执行的执行函数进行第一命令来源检测处理，得到待执行的执行函数对应的第一命令来源检测结果，若第一代码结构检测结果为执行函数异常，节点就无需执行后续操作。在一种可能的实施方式中，当前执行函数为待执行的执行函数，对当前执行函数进行命令来源检测，得到当前执行函数对应的命令来源检测结果，包括：步骤S602，对当前执行函数进行语法解析，得到当前执行函数对应的当前SQL抽象语法树。其中，SQL抽象语法树是以树状的形式表现编程语言的代码结构，树上的每个节点都表示源代码中的一种结构，是执行函数源码代码结构的一种抽象表示。具体地，以当前执行函数为例说明命令来源检测过程，当前执行函数可以是待执行的执行函数，也可以是执行结果，命令来源检测主要是针对执行函数在源码层级上的路径检测。若当前执行函数是待执行的执行函数，则是对当前执行函数进行第一命令来源检测处理。得到当前执行函数对应的第一命令来源检测结果。若当前执行函数是执行结果，则是对当前执行函数进行第二命令来源检测处理。得到当前执行函数对应的第二命令来源检测处理。在进行当前阶命令来源检测处理时，节点先对当前执行函数进行语法解析，得到当前执行函数对应的当前SQL抽象语法树。节点具体可以对当前执行函数进行词法分析，把源码拆成多个单词，将各个单词传入分词器，经过一系列的识别器，确定各个单词的词性，从而得到当前执行函数对应的token序列。token序列包括多个token和各个token对应的属性。然后，节点可以基于语法分析器对当前执行函数对应的token序列进行语法分析，从而得到当前执行函数对应的当前SQL抽象语法树。步骤S604，将当前SQL抽象语法树中的节点类型为第一类型的变量节点、第二类型的函数节点分别和参考风险命令内容进行匹配，将匹配成功的变量节点和函数节点作为第一风险命令内容节点，将当前SQL抽象语法树中节点初始抽象语法树参数为字符串且字符串长度大于预设阈值的变量节点作为第二风险命令内容节点，基于第一风险命令内容节点和第二风险命令内容节点得到目标风险命令内容节点。其中，风险命令内容是指能被外界控制的变量或读取外界数据的函数，是最初始的异常。异常执行函数的关键作用是让攻击者可以在节点的外部让节点执行自己的命令，因此能被外界控制的变量或能读取外界数据的函数都被视为风险命令内容。参考风险命令内容是指已知能接收外部参数的一些常用变量和函数。进一步的，在实际生产场景中，异常执行函数为了防止被杀毒软件检测出来，攻击者通常会对执行函数的代码做一定的加密混淆处理，部分加密混淆处理后的代码通常包括长度较长的字符串变量。因此，风险命令内容还可以是长度大于预设阈值的字符串变量。字符串变量是指存放字符串常量的变量，其取值是字符串常量。节点初始抽象语法树参数是指变量节点的首次抽象语法树参数。当变量节点的首次抽象语法树参数为字符串，则该变量节点为字符串变量。当变量节点的首次抽象语法树参数为字符串，且字符串长度大于预设阈值，则该变量节点为长度大于预设阈值的字符串变量。具体地，SQL抽象语法树包括变量、操作、函数等多种类型的节点。基于风险命令内容的特性，节点可以将当前SQL抽象语法树中节点类型为第一类型的变量节点、第二类型的函数节点和参考风险命令内容进行匹配，将匹配成功的变量节点和函数节点作为第一风险命令内容节点。节点还可以将当前SQL抽象语法树中节点初始抽象语法树参数为字符串且字符串长度大于预设阈值的变量节点作为第二风险命令内容节点，也就是将长度大于预设阈值的字符串变量也作为风险命令内容。节点将第一风险命令内容节点和第二风险命令内容节点分别作为目标风险命令内容节点。步骤S606，将当前SQL抽象语法树中节点类型为第二类型的函数节点和参考风险目标命令进行匹配，将匹配成功的函数节点作为风险目标命令节点。其中，风险目标命令是指最终执行恶意行为的函数。具体地，基于风险目标命令的特性，节点可以将当前SQL抽象语法树中节点类型为第二类型的函数节点和参考风险目标命令进行匹配，将匹配成功的函数节点作为风险目标命令节点。在一种可能的实施方式中，节点可以针对不同的编程语言建立不同的参考风险命令内容集合和参考风险目标命令集合，即为不同执行函数格式的执行函数建立对应的参考风险命令内容集合和参考风险目标命令集合。因此，节点在确定风险命令内容节点和风险目标命令节点时，可以先判断当前执行函数的执行函数格式，即当前执行函数中使用的目标编程语言，再获取该目标编程语言对应的目标参考风险命令内容集合和目标参考风险目标命令集合，将当前执行函数对应的当前SQL抽象语法树中的节点和目标参考风险命令内容集合中的参考风险命令内容、目标参考风险目标命令集合中的参考风险目标命令进行匹配，从而快速确定风险命令内容节点和风险目标命令节点。步骤S608，在当前SQL抽象语法树中，基于目标风险命令内容节点和风险目标命令节点的位置关系得到当前执行函数对应的当前阶命令来源检测结果。具体地，恶意篡改代码组由三类节点组成：风险命令内容，命令生成变量和风险目标命令。命令生成变量是用于处理异常变量，生成新的异常变量。攻击者为了防止异常执行函数被简单地检测出来，会将风险命令内容进行一系列处理、传递后再使用，这一系列的过程中生成的变量均为命令生成变量。当风险命令内容经过一系列命令生成变量进入风险目标命令，则可以确定存在恶意篡改代码组。若存在恶意篡改代码组，节点可以确定当前执行函数对应的当前阶命令来源检测结果为执行函数有异常。进一步的，为了提高检测准确性，减少误报，节点还可以进一步对该恶意篡改代码组进行审计，当恶意篡改代码组满足预设条件时，节点才确定当前执行函数对应的当前阶命令来源检测结果为执行函数有异常。本实施例中，通过对当前执行函数进行语法解析，得到当前执行函数对应的当前SQL抽象语法树，将当前SQL抽象语法树中的节点类型为第一类型的变量节点、第二类型的函数节点分别和参考风险命令内容进行匹配，将匹配成功的变量节点和函数节点作为第一风险命令内容节点，将当前SQL抽象语法树中节点初始抽象语法树参数为字符串且字符串长度大于预设阈值的变量节点作为第二风险命令内容节点，基于第一风险命令内容节点和第二风险命令内容节点得到目标风险命令内容节点，将当前SQL抽象语法树中节点类型为第二类型的函数节点和参考风险目标命令进行匹配，将匹配成功的函数节点作为风险目标命令节点，在当前SQL抽象语法树中，基于目标风险命令内容节点和风险目标命令节点的位置关系得到当前执行函数对应的当前阶命令来源检测结果。这样，目标风险命令内容不仅包括普通风险命令内容，还包括目标风险命令内容，扩大了风险命令内容的搜索范围，进而不仅能够搜索到普通执行函数中的恶意篡改代码组，还能够搜索到部分加密执行函数中的恶意篡改代码组，从而无需执行加密执行函数也可以查找出一部分异常执行函数，有效节约了节点的资源消耗。在一种可能的实施方式中，在当前SQL抽象语法树中，基于目标风险命令内容节点和风险目标命令节点的位置关系得到当前执行函数对应的当前阶命令来源检测结果，包括：对当前SQL抽象语法树进行深度优先遍历，查询目标风险命令内容节点和风险目标命令节点之间的关联关系；基于查询结果确定当前执行函数对应的当前阶命令来源检测结果。具体地，节点对当前SQL抽象语法树进行深度优先遍历，查询目标风险命令内容节点和风险目标命令节点之间是否存在关联关系。节点可以根据查询结果确定当前执行函数对应的当前阶命令来源检测结果。若目标风险命令内容节点和风险目标命令节点之间存在关联关系、且关联关系为恶意篡改代码组，节点可以确定当前执行函数对应的命令来源检测结果为当前执行函数有异常。进一步的，为了提高检测准确性，减少误报，节点还可以进一步对该恶意篡改代码组进行审计，当恶意篡改代码组满足预设条件时，节点才确定当前执行函数对应的命令来源检测结果为执行函数有异常。本实施例中，通过对当前SQL抽象语法树进行深度优先遍历，能够准确查找到目标风险命令内容节点和风险目标命令节点之间的关联关系。在一种可能的实施方式中，基于查询结果确定当前执行函数对应的当前阶命令来源检测结果，包括：当目标风险命令内容节点和风险目标命令节点之间存在关联关系、且关联关系覆盖有除目标风险命令内容节点和风险目标命令节点之外的其他变量节点时，确定当前执行函数中存在恶意篡改代码组；当当前执行函数中存在恶意篡改代码组时，基于恶意篡改代码组确定当前执行函数对应的当前阶命令来源检测结果；当当前执行函数中不存在恶意篡改代码组时，确定当前执行函数对应的当前阶命令来源检测结果为执行函数无异常。具体地，如果当前执行函数中只包括风险命令内容或风险目标命令，没有形成有效的恶意篡改代码组，则当前执行函数对应的当前阶命令来源检测结果为执行函数无异常。只有当风险命令内容经过一系列命令生成变量进入风险目标命令，即存在恶意篡改代码组时，才需要对恶意篡改代码组进行更细致的判断来确定当前执行函数是否为异常执行函数。因此，当目标风险命令内容节点和风险目标命令节点之间存在关联关系、且关联关系覆盖有除目标风险命令内容节点和风险目标命令节点之外的其他变量节点时，节点可以确定当前执行函数中存在恶意篡改代码组。在一种可能的实施方式中，当存在恶意篡改代码组时，节点可以直接确定当前执行函数对应的当前阶命令来源检测结果为执行函数有异常。当然，节点也可以进一步对恶意篡改代码组进行更细致的审计，来确定当前执行函数对应的当前阶命令来源检测结果，从而减少误报，提高命令来源检测准确性。本实施例中，当当前执行函数中不存在恶意篡改代码组时，直接确定当前执行函数对应的当前阶命令来源检测结果为执行函数无异常，当当前执行函数中存在恶意篡改代码组时，不是直接确定当前执行函数对应的当前阶命令来源检测结果为执行函数有异常，而是进一步基于恶意篡改代码组确定当前执行函数对应的当前阶命令来源检测结果，能够提高命令来源检测的准确性。在一种可能的实施方式中，当当前执行函数中存在恶意篡改代码组时，基于恶意篡改代码组确定当前执行函数对应的当前阶命令来源检测结果，包括：当目标风险命令内容节点通过恶意篡改代码组以赋值方式将数据传输至风险目标命令节点、且目标风险命令内容节点为第二风险命令内容节点时，确定当前执行函数对应的当前阶命令来源检测结果为执行函数无异常。具体地，若存在恶意篡改代码组，就直接判断待执行的执行函数为异常执行函数，会存在一些误报情况。在实际生产环境中会有开发者由于编码习惯而把大段固定的文字或字符串写在代码变量中，即在开发者正常开发过程中可能也会存在长度过长的字符串变量，这种是开发者正常使用，而非恶意使用，但是开发人员通常不会对代码变量使用字符串拼接、字符串替换、base64加密等技术进行处理。因此，为了减少命令来源检测的误报，在确定存在恶意篡改代码组后，节点可以进行更细致的审计，对恶意篡改代码组进行进一步分析来确定当前阶命令来源检测结果。当目标风险命令内容节点通过恶意篡改代码组以赋值方式将数据传输至风险目标命令节点、且目标风险命令内容节点为第二风险命令内容节点时，节点可以确定当前执行函数对应的当前阶命令来源检测结果为执行函数无异常，而其他情况下则确定当前执行函数对应的当前阶命令来源检测结果为执行函数异常。可以理解，若参数是风险命令内容未经过任何处理，只是通过赋值这样的简单方式经过恶意篡改代码组传递到风险目标命令，则当前执行函数为安全执行函数，不会引发安全问题。若风险目标命令的参数是风险命令内容未经过任何处理，只是通过赋值的方式传递到风险目标命令的，则极大可能是开发人员在开发过程中正常使用风险目标命令函数，而非恶意使用。而攻击者为了避免被杀毒软件查杀，一般不会直接使用参数，而是会使用一系列的拼接、替换、加密函数等方法对参数进行处理。本实施例中，当目标风险命令内容节点通过恶意篡改代码组以赋值方式将数据传输至风险目标命令节点、且目标风险命令内容节点为第二风险命令内容节点时，确定当前执行函数对应的当前阶命令来源检测结果为执行函数无异常，这样能够有效减少命令来源检测的误报，提高命令来源检测的准确性。在一种可能的实施方式中，基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出待执行的执行函数在虚拟SQL数据库执行后对应的执行结果，包括：步骤S702，从待执行的执行函数对应的第一命令来源检测结果中获取待执行的执行函数对应的初始SQL抽象语法树，将初始SQL抽象语法树转换为待检测修改命令组。其中，初始SQL抽象语法树是指待执行的执行函数对应的SQL抽象语法树。修改命令是指能够被节点识别并直接执行的机器命令。待检测修改命令是指待执行的执行函数对应的修改命令。待检测修改命令组包括多个待检测修改命令。具体地，为了防止被杀毒软件检测出来，攻击者通常会对执行函数的代码做一定的加密混淆处理。第一代码结构检测和第一命令来源检测处理通常难以发现经过加密混淆处理的异常执行函数。此时，节点可以基于虚拟SQL数据库下执行待执行的执行函数，得到解密后的执行函数，从而基于执行结果最终确定待执行的执行函数是否有异常。节点可以从待执行的执行函数对应的第一命令来源检测结果中获取待执行的执行函数对应的初始SQL抽象语法树，对初始SQL抽象语法树进行编译，从而将初始SQL抽象语法树转换为待检测修改命令组。步骤S704，在虚拟SQL数据库中获取待检测修改命令组中各个待检测修改命令对应的内核处理函数，基于内核处理函数执行待检测修改命令组，得到目标执行函数。具体地，在执行待执行的执行函数时，节点先将初始SQL抽象语法树转换为待检测修改命令组，确定要执行的待检测修改命令组，然后调用各个待检测修改命令分别对应的内核处理函数并执行，从而来完成执行函数执行操作，得到目标执行函数。如果待执行的执行函数的代码中使用了字符串拼接、字符串替换、base64加密等方法，在执行待检测修改命令组时，节点会调用这些方法所对应的内核处理函数，执行内核处理函数中所实现的处理方法，从而对待执行的执行函数进行解密，得到解密后的执行函数。步骤S706，当待执行的执行函数和目标执行函数不一致时，将目标执行函数作为执行结果，并输出。具体地，如果待执行的执行函数的代码中没有使用字符串拼接、字符串替换、base64加密等混淆方法，节点基于内核处理函数执行待检测修改命令组得到的目标执行函数仍然是待执行的执行函数。如果待执行的执行函数的代码中使用了字符串拼接、字符串替换、base64加密等混淆方法，节点基于内核处理函数执行待检测修改命令组得到的目标执行函数是待执行的执行函数对应的执行结果。因此，当待执行的执行函数和目标执行函数不一致时，节点可以将目标执行函数作为执行结果并输出，对执行结果进行第二代码结构检测和第二命令来源检测处理，从而最终确定待执行的执行函数是否为异常执行函数。当待执行的执行函数和目标执行函数一致时，节点可以不进行执行函数输出。在一种可能的实施方式中，可以针对不同的编程语言建立不同的虚拟执行算法。针对不同的编程语言设计相适应的操作码命令和内核处理函数，从而有助于提高虚拟执行算法的准确性和适应性。本实施例中，基于内核处理函数可以对加密执行函数进行解密，得到执行结果，后续进一步对执行结果进行第二代码结构检测和第二命令来源检测处理，这样能够检测出经过加密的异常执行函数，提高执行函数检测的准确性。在一种可能的实施方式中，基于虚拟SQL数据库下执行经过第一命令来源检测处理的待执行的执行函数，输出待执行的执行函数在虚拟SQL数据库执行后对应的执行结果之后，方法还包括：基于虚拟SQL数据库下生成执行结果对应的目标SQL抽象语法树。对执行结果进行第二命令来源检测处理，得到执行结果对应的第二命令来源检测结果，包括：基于目标SQL抽象语法树对执行结果进行第二命令来源检测处理，得到执行结果对应的第二命令来源检测结果。具体地，节点还可以在虚拟SQL数据库中集成虚拟执行算法和SQL抽象语法树生成算法。这样，节点基于虚拟执行算法执行待执行的执行函数，输出待执行的执行函数对应的执行结果后，还可以进一步基于SQL抽象语法树生成算法生成执行结果对应的目标SQL抽象语法树，并输出。进而，节点在对执行结果进行第二命令来源检测处理时，无需重新生成执行结果对应的目标SQL抽象语法树，可以直接获取虚拟SQL数据库输出的执行结果对应的目标SQL抽象语法树，对目标SQL抽象语法树进行第二命令来源检测处理，得到执行结果对应的第二命令来源检测结果。本实施例中，在对执行结果进行第二命令来源检测处理时，可以获取虚拟SQL数据库输出的执行结果对应的目标SQL抽象语法树，直接对目标SQL抽象语法树进行分析得到执行结果对应的第二命令来源检测结果，从而能够提高执行结果的第二命令来源检测效率。本实施例中，根据执行函数检测请求触发执行函数的异常检测，能够根据实际需要触发执行函数检测，而不是盲目检测。当待执行的执行函数有异常时，生成携带待执行的执行函数对应的执行函数标识的警告信息并展示，能够及时提醒相关人员提高警惕。在一种可能的实施方式中，节点服务器10配置有私钥，SQL数据库配置有密码，私钥用于加密密码，执行步骤S205之前，本申请实施例还提供以下示例。步骤S206，调用目标节点服务器10的目标私钥对SQL数据库的密码进行解密。步骤S207，调用解密后的SQL数据库的密码，以使目标节点服务器10连接至SQL数据库。为了能够保证存储在SQL数据库中的数据的安全性，在无法利用区块链的共识机制的基础上，还可以通过令每个节点服务器10单独管理自己维护的SQL数据库的密码。例如，每个节点服务器10可以预先配置私钥，该私钥用于加密SQL数据库的密码，加密后的SQL数据库的密码则可以保存在智能合约的kv表中。而当后续需要使用该节点服务器10维护的SQL数据库时，可以由对应的智能合约提供加密后的SQL数据库的密码，然后由节点服务器10的私钥对其进行解密，以便正常使用。应当理解的是，若某个节点服务器10私钥泄露，这个节点服务器10会被舍弃。应当理解的是，上述的SQL数据库的密码可以是指SQL数据库所在服务器的密码，在本申请实施例的其他实施方式中，还可以为SQL数据库配置用户的账号密码，并配合前述过滤器进一步提升SQL数据库的安全性。在一种可能的实施方式中，本申请实施例还提供以下示例。步骤S208，判断多个节点服务器10接收的执行结果是否一致。若是，则执行步骤S209。若否，则执行步骤S210。步骤S209，判定执行结果正常。步骤S210，判定SQL数据被篡改。除了上面提出的方法，本申请实施例提供了一种判断是否出现数据篡改问题的方案，根据用户输入的待处理交易操作，各个节点服务器10对应执行实现该待处理交易操作的执行函数，会在每一个节点服务器10更新对应的执行结果，若存在不相同的执行结果，那么说明对应的SQL数据库已经被篡改。除此之外，如前所描述的，智能合约包括的执行函数有执行函数、DDL、DQL三类语句，而每个函数仅允许接收其自身类型的语句作为输入，由过滤器控制输入的SQL语句类型，这也能提高智能合约以及SQL数据的安全性。在用户首次使用时，可以为其创建专属的智能合约，同时创建对应的SQL数据库，新的智能合约和SQL数据库相互绑定，且与其他智能合约与SQL数据库完全隔离，但并不允许智能合约执行数据库CREATE操作，这可能会导致原本已经存在的SQL数据库与新创建的SQL数据库重名，进而导致管理混乱的情况发生，可以由区块链所对应的虚拟机进行创建。本申请实施例提供一种基于区块链和SQL的数据处理装置110，应用于区块链，区块链存储多个智能合约，智能合约与用户信息有绑定关系，区块链中包括多个节点服务器10，请结合参阅图3，基于区块链和SQL的数据处理装置110包括：匹配模块1101，用于获取用户信息；根据绑定关系，调用用户信息对应的智能合约，智能合约包括SQL数据库地址；根据SQL数据库地址，从多个节点服务器10中确定出存储智能合约对应的SQL数据库的目标节点服务器10。执行模块1102，用于获取待处理交易操作；根据智能合约在目标节点服务器10上执行待处理交易操作，以更新SQL数据库，得到执行结果。需要说明的是，前述基于区块链和SQL的数据处理装置110的实现原理可以参考前述基于区块链和SQL的数据处理方法的实现原理，在此不再赘述。应理解以上装置的各个模块的划分仅仅是一种逻辑功能的划分，实际实现时可以全部或部分集成到一个物理实体上，也可以物理上分开。且这些模块可以全部以软件通过处理元件调用的形式实现；也可以全部以硬件的形式实现；还可以部分模块通过处理元件调用软件的形式实现，部分模块通过硬件的形式实现。例如，匹配模块1101可以为单独设立的处理元件，也可以集成在上述装置的某一个芯片中实现，此外，也可以以程序代码的形式存储于上述装置的存储器400中，由上述装置的某一个处理元件调用并执行以上匹配模块1101的功能。其它模块的实现与之类似。此外这些模块全部或部分可以集成在一起，也可以独立实现。这里所描述的处理元件可以是一种集成电路，具有信号的处理能力。在实现过程中，上述方法的各步骤或以上各个模块可以通过处理器元件中的硬件的集成逻辑电路或者软件形式的命令完成。例如，以上这些模块可以是被配置成实施以上方法的一个或多个集成电路，例如：一个或多个特定集成电路，或，一个或多个微处理器，或，一个或者多个现场可编程门阵列等。再如，当以上某个模块通过处理元件调度程序代码的形式实现时，该处理元件可以是通用处理器，例如中央处理器或其它可以调用程序代码的处理器。再如，这些模块可以集成在一起，以片上系统的形式实现。本发明实施例提供一种计算机设备100，计算机设备100包括处理器及存储有计算机命令的非易失性存储器，计算机命令被处理器执行时，计算机设备100执行前述的基于区块链和SQL的数据处理装置110。如图4所示，图4为本发明实施例提供的计算机设备100的结构框图。计算机设备100包括基于区块链和SQL的数据处理装置110、存储器111、处理器112及通信单元113。为实现数据的传输或交互，存储器111、处理器112以及通信单元113各元件相互之间直接或间接地电性连接。例如，可通过一条或多条通讯总线或信号线实现这些元件相互之间电性连接。基于区块链和SQL的数据处理装置110包括至少一个可以软件或固件的形式存储于存储器111中或固化在计算机设备100的操作系统中的软件功能模块。处理器112用于执行存储器111中存储的基于区块链和SQL的数据处理装置110，例如基于区块链和SQL的数据处理装置110所包括的软件功能。本申请实施例提供一种可读存储介质，可读存储介质包括计算机程序，计算机程序运行时控制可读存储介质所在计算机设备执行前述至少一种可能的实施方式中的基于区块链和SQL的数据处理方法。本领域内的技术人员应明白，本申请的实施例可提供为方法、系统、或计算机程序产品。因此，本申请可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本申请可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。
