标题title
一种基于内核文件过滤驱动提升IO性能方法及系统
摘要abst
本发明提供一种基于内核文件过滤驱动提升IO性能方法及系统，涉及数据处理技术领域，检测上层模块读请求信息；申请并配置临时缓存；执行底层读取函数，从上层数据缓存，进行读取；从上层数据缓存中复制加密数据到临时缓存；对临时缓存中的加密数据进行解密，形成明文数据；从临时缓存中复制明文数据至上层数据缓存；释放临时缓存。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统从应用层复制入内核层进行处理，处理完毕后复制回应用层；提升处理效率，降低性能开销。
权利要求书clms
1.一种基于内核文件过滤驱动提升IO性能方法，其特征在于，方法包括：内核过滤驱动模块执行读数据方式：步骤101、检测上层模块读请求信息；步骤102、申请并配置临时缓存；步骤103、执行底层读取函数，从上层数据缓存，进行读取；步骤104、从上层数据缓存中复制加密数据到临时缓存；步骤105、对临时缓存中的加密数据进行解密，形成明文数据；步骤106、从临时缓存中复制明文数据至上层数据缓存；步骤107、释放临时缓存。2.根据权利要求1所述的基于内核文件过滤驱动提升IO性能方法，其特征在于，步骤106之后还包括：判断是否继续执行底层读取函数，从上层数据缓存，进行读取；如需要继续读取加密数据，则再执行步骤103至步骤106，直到所有数据均从临时缓存中复制明文数据至上层数据缓存；释放临时缓存。3.根据权利要求1所述的基于内核文件过滤驱动提升IO性能方法，其特征在于，步骤104中调用copy_from_user函数从上层数据缓存中复制加密数据到临时缓存；步骤105调用decrypt函数对临时缓存中的加密数据进行解密。4.根据权利要求1所述的基于内核文件过滤驱动提升IO性能方法，其特征在于，内核过滤驱动模块执行写数据方式：步骤201、检测上层模块写请求信息；步骤202、申请并配置临时缓存；步骤203、从原始缓存中复制原始文件至临时缓存；步骤204、对临时缓存中的原始文件进行加密处理，形成加密文件；步骤205、执行底层写入函数，写入缓存使用原始数据缓存；步骤206、释放临时缓存。5.根据权利要求4所述的基于内核文件过滤驱动提升IO性能方法，其特征在于，步骤205之后还包括：判断是否继续写文件；如需要继续写文件，则再执行步骤203，直到所有文件均写入完成；释放临时缓存。6.根据权利要求4所述的基于内核文件过滤驱动提升IO性能方法，其特征在于，步骤203中、调用copy_from_user函数从原始缓存中复制原始文件至临时缓存；步骤204、调用encrypt函数对临时缓存中的原始文件进行加密处理。7.一种基于内核文件过滤驱动提升IO性能系统，其特征在于，系统采用权利要求1至6任意一项所述的基于内核文件过滤驱动提升IO性能方法；系统包括：请求检测模块、缓存配置模块、原始缓存、内核过滤驱动模块和上层模块；上层模块设有上层数据缓存；请求检测模块用于检测上层模块的读请求信息或写请求信息，并启动内核过滤驱动模块基于上层数据缓存执行读请求进程，或基于原始缓存执行写请求进程；缓存配置模块用于在启动内核过滤驱动模块执行读请求进程或写请求进程时，向内核过滤驱动模块配置临时缓存，并在执行完读请求进程或写请求进程之后，收回临时缓存。8.根据权利要求7所述的基于内核文件过滤驱动提升IO性能系统，其特征在于，还包括：循环执行模块；循环执行模块用于根据读请求信息，使内核过滤驱动模块循环执行读请求进程，直到所有加密数据均读取及解密完成，并发送给上层数据缓存；还用于根据写请求信息，使内核过滤驱动模块循环执行写请求进程，直到所有文件均写入完成。
说明书desc
技术领域本发明涉及数据处理技术领域，尤其涉及一种基于内核文件过滤驱动提升IO性能方法及系统。背景技术在保密行业中，特殊保护文件需要透明加解密的场景。为了提升IO性能，也就是提供缓存和磁盘阵列提高存储IO性能，大多采用内核态的文件过滤驱动技术。由于内核过滤驱动没有自身的缓存，当上层向内核过滤驱动请求明文数据时，必然先向下层文件系统请求密文数据，然后进行数据过滤，最后返还所请求明文数据；或者但上层向内核过滤驱动进行明文数据写入时，必然先进行数据过滤，然后将密文写入下层文件系统。在无缓存实现和过滤驱动的性能固定的条件下，提升IO性能只能由调用下层文件系统接口进行IO的方式上。在Linux内核中，文件IO接口在文件系统的实现中，缓存参数的定义是应用层，直接将动态申请的缓存地址作为IO接口的缓存参数传入是会失败报错的，此时需要切换当前进程的内存空间，导致系统的性能开销大，导致系统运行不稳定，而且还占用系统大量资源。发明内容为了克服上述现有技术中的不足，本发明提供一种降低性能开销，避免导致系统运行不稳定的基于内核文件过滤驱动提升IO性能方法。内核过滤驱动模块执行读数据方式包括：步骤101、检测上层模块读请求信息；步骤102、申请并配置临时缓存；步骤103、执行底层读取函数，从上层数据缓存，进行读取；步骤104、从上层数据缓存中复制加密数据到临时缓存；步骤105、对临时缓存中的加密数据进行解密，形成明文数据；步骤106、从临时缓存中复制明文数据至上层数据缓存；步骤107、释放临时缓存。进一步需要说明的是，步骤106之后还包括：判断是否继续执行底层读取函数，从上层数据缓存，进行读取；如需要继续读取加密数据，则再执行步骤103至步骤106，直到所有数据均从临时缓存中复制明文数据至上层数据缓存；释放临时缓存。进一步需要说明的是，步骤104中调用copy_from_user函数从上层数据缓存中复制加密数据到临时缓存；步骤105调用decrypt函数对临时缓存中的加密数据进行解密。进一步需要说明的是，内核过滤驱动模块执行写数据方式：步骤201、检测上层模块写请求信息；步骤202、申请并配置临时缓存；步骤203、从原始缓存中复制原始文件至临时缓存；步骤204、对临时缓存中的原始文件进行加密处理，形成加密文件；步骤205、执行底层写入函数，写入缓存使用原始数据缓存；步骤206、释放临时缓存。进一步需要说明的是，步骤205之后还包括：判断是否继续写文件；如需要继续写文件，则再执行步骤203，直到所有文件均写入完成；释放临时缓存。进一步需要说明的是，步骤203中、调用copy_from_user函数从原始缓存中复制原始文件至临时缓存；步骤204、调用encrypt函数对临时缓存中的原始文件进行加密处理。本发明还提供一种基于内核文件过滤驱动提升IO性能系统，系统包括：请求检测模块、缓存配置模块、原始缓存、内核过滤驱动模块和上层模块；上层模块设有上层数据缓存；请求检测模块用于检测上层模块的读请求信息或写请求信息，并启动内核过滤驱动模块基于上层数据缓存执行读请求进程，或基于原始缓存执行写请求进程；缓存配置模块用于在启动内核过滤驱动模块执行读请求进程或写请求进程时，向内核过滤驱动模块配置临时缓存，并在执行完读请求进程或写请求进程之后，收回临时缓存。进一步需要说明的是，还包括：循环执行模块；循环执行模块用于根据读请求信息，使内核过滤驱动模块循环执行读请求进程，直到所有加密数据均读取及解密完成，并发送给上层数据缓存；还用于根据写请求信息，使内核过滤驱动模块循环执行写请求进程，直到所有文件均写入完成。从以上技术方案可以看出，本发明具有以下优点：本发明提供的基于内核文件过滤驱动提升IO性能方法及系统从应用层复制入内核层进行处理，处理完毕后复制回应用层；提升处理效率，降低性能开销。本发明可以实现复用底层文件系统IO接口的缓存参数地址，提升IO性能。附图说明为了更清楚地说明本发明的技术方案，下面将对描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本发明的提升IO性能方法中读数据流程图；图2为本发明的提升IO性能方法中写数据流程图；图3为基于内核文件过滤驱动提升IO性能系统示意图；图4为系统密钥配置示意图；图5为系统循环执行示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统中所公开的实施例描述的各示例的单元及算法步骤，能够以电子硬件、计算机软件或者二者的结合来实现，为了清楚地说明硬件和软件的可互换性，在上述说明中已经按照功能一般性地描述了各示例的组成及步骤。这些功能究竟以硬件还是软件方式来执行，取决于技术方案的特定应用和设计约束条件。专业技术人员可以对每个特定的应用来使用不同方法来实现所描述的功能，但是这种实现不应认为超出本发明的范围。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统的附图中所示的方框图仅仅是功能实体，不一定必须与物理上独立的实体相对应。即，可以采用软件形式来实现这些功能实体，或在一个或多个硬件模块或集成电路中实现这些功能实体，或在不同网络和/或处理器装置和/或微控制器装置中实现这些功能实体。在本发明提供的基于内核文件过滤驱动提升IO性能方法及系统中，应该理解到，所揭露的系统、装置和方法，可以通过其它的方式实现。例如，以上所描述的装置实施例仅仅是示意性的，例如，所述单元的划分，仅仅为一种逻辑功能划分，实际实现时可以有另外的划分方式，例如多个单元或组件可以结合或者可以集成到另一个系统，或一些特征可以忽略，或不执行。另外，所显示或讨论的相互之间的耦合或直接耦合或通信连接可以是通过一些接口、装置或单元的间接耦合或通信连接，也可以是电的，机械的或其它的形式连接。对于本发明的方法来讲，适用于无独立IO缓存实现的内核过滤驱动系统，具体而言就是，内核过滤驱动在接收到文件IO请求时不是向自身的缓存请求数据IO，而是向其底层或者被HOOK的文件系统请求数据IO。也就是说内核态的文件过滤驱动技术可以分为两类，一类为内核堆叠式文件系统，另一类为基于文件系统的文件操作HOOK。无论哪一种技术，都会面对IO性能如何提升的问题，都需要考虑明文和密文的同步问题，在缓存层次上进行优化的方法主要是双缓冲技术，所谓双缓冲技术，顾名思义就是针对同一个文件为明文和密文各开一路缓存，进而满足不同的内容访问需求，来提升系统对数据处理的效率。本发明涉及了内核过滤驱动模块执行读数据方式和内核过滤驱动模块执行写数据方式。具体来讲，如图1所示，内核过滤驱动模块执行读数据方式：步骤101、检测上层模块读请求信息；步骤102、申请并配置临时缓存；步骤103、执行底层读取函数，从上层数据缓存，进行读取；步骤104、从上层数据缓存中复制加密数据到临时缓存；这里，调用copy_from_user函数从上层数据缓存中复制加密数据到临时缓存；步骤105、对临时缓存中的加密数据进行解密，形成明文数据；其中，调用decrypt函数对临时缓存中的加密数据进行解密。其中，取读数据密钥，至临时缓存中；使用读数据密钥对临时缓存中的加密数据进行解密，形成明文数据。步骤106、从临时缓存中复制明文数据至上层数据缓存；步骤107、释放临时缓存。本发明中，步骤106之后还包括：判断是否继续执行底层读取函数，从上层数据缓存，进行读取；如需要继续读取加密数据，则再执行步骤103至步骤106，直到所有数据均从临时缓存中复制明文数据至上层数据缓存；这里是根据实际需要，读取完所有加密数据执行才完成当前读数据进程。释放临时缓存。对于本发明涉及的内核过滤驱动模块执行写数据方式来讲，如图2所示，步骤201、检测上层模块写请求信息；步骤202、申请并配置临时缓存；步骤203、从原始缓存中复制原始文件至临时缓存；这里，调用copy_from_user函数从原始缓存中复制原始文件至临时缓存；步骤204、对临时缓存中的原始文件进行加密处理，形成加密文件；调用encrypt函数对临时缓存中的原始文件进行加密处理。其中，获取写数据密钥，至临时缓存中；写数据密钥是系统预设的密钥，根据写数据进程来进行提取操作。使用写数据密钥对临时缓存中的原始文件进行加密处理，形成加密文件。步骤205、执行底层写入函数，写入缓存使用原始数据缓存；步骤206、释放临时缓存。本发明中，步骤205之后还包括：判断是否继续写文件；如需要继续写文件，则再执行步骤203，直到所有文件均写入完成；这里是根据实际需要，写入完所有文件执行才完成当前写数据进程。释放临时缓存。根据基于内核文件过滤驱动提升IO性能方法的场景和性能分析，本发明中的提升IO性能方法减少了切换进程的内存空间行为，避免导致系统的性能开销大的问题，提高系统的运算能力。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统避免使用动态申请内存直接作为底层文件系统IO接口的缓存参数，进而可以实现灵活的配置缓存方式，提高系统运行效率。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统从应用层复制入内核层进行处理，处理完毕后复制回应用层；提升处理效率，降低性能开销。本发明可以实现复用底层文件系统IO接口的缓存参数地址，提升IO性能。进一步的讲，基于上述方法本发明还提供了一种基于内核文件过滤驱动提升IO性能系统，如图3至5所示，系统包括：请求检测模块、缓存配置模块、原始缓存、内核过滤驱动模块和上层模块；上层模块设有上层数据缓存；请求检测模块用于检测上层模块的读请求信息或写请求信息，并启动内核过滤驱动模块基于上层数据缓存执行读请求进程，或基于原始缓存执行写请求进程；缓存配置模块用于在启动内核过滤驱动模块执行读请求进程或写请求进程时，向内核过滤驱动模块配置临时缓存，并在执行完读请求进程或写请求进程之后，收回临时缓存。对于本发明来讲，系统还包括：密钥配置模块；密钥配置模块用于内核过滤驱动模块执行读请求进程时，提供读数据密钥；内核过滤驱动模块执行写请求进程时，提供写数据密钥。本发明中涉及的读数据密钥和写数据密钥是预设配置到系统中，可以根据实际需要动态变换密钥。这里的密钥可以是但不限于系统公钥。本发明的系统还包括：循环执行模块；循环执行模块用于根据读请求信息，使内核过滤驱动模块循环执行读请求进程，直到所有加密数据均读取及解密完成，并发送给上层数据缓存；还用于根据写请求信息，使内核过滤驱动模块循环执行写请求进程，直到所有文件均写入完成。本发明提供的基于内核文件过滤驱动提升IO性能方法及系统是结合本文中所公开的实施例描述的各示例的单元及算法步骤，能够以电子硬件、计算机软件或者二者的结合来实现，为了清楚地说明硬件和软件的可互换性，在上述说明中已经按照功能一般性地描述了各示例的组成及步骤。这些功能究竟以硬件还是软件方式来执行，取决于技术方案的特定应用和设计约束条件。专业技术人员可以对每个特定的应用来使用不同方法来实现所描述的功能，但是这种实现不应认为超出本发明的范围。通过以上的实施方式的描述，本领域的技术人员易于理解，这里描述的本发明提供的基于内核文件过滤驱动提升IO性能方法及系统可以通过软件实现，也可以通过软件结合必要的硬件的方式来实现。因此，根据本发明提供的基于内核文件过滤驱动提升IO性能方法及系统公开实施方式的技术方案可以以软件产品的形式体现出来，该软件产品可以存储在一个非易失性存储介质中或网络上，包括若干指令以使得一台计算设备执行根据本公开实施方式的索引方法。在本发明中涉及的系统和方法是能够实现本说明书上述方法的程序产品。在一些可能的实施方式中，本公开的各个方面还可以实现为一种程序产品的形式，其包括程序代码，当所述程序产品在终端设备上运行时，所述程序代码用于使所述终端设备执行本说明书上述“示例性方法”部分中描述的根据本公开各种示例性实施方式的步骤。缓存可以是可读信号介质或者可读存储介质。缓存例如可以为但不限于电、磁、光、电磁、红外线、或半导体的系统、装置或器件，或者任意以上的组合。可读存储介质的更具体的例子包括：具有一个或多个导线的电连接、便携式盘、硬盘、随机存取存储器、只读存储器、可擦式可编程只读存储器、光纤、便携式紧凑盘只读存储器、光存储器件、磁存储器件、或者上述的任意合适的组合。对所公开的实施例的上述说明，使本领域专业技术人员能够实现或使用本发明。对这些实施例的多种修改对本领域的专业技术人员来说将是显而易见的，本文中所定义的一般原理可以在不脱离本发明的精神或范围的情况下，在其它实施例中实现。因此，本发明将不会被限制于本文所示的这些实施例，而是要符合与本文所公开的原理和新颖特点相一致的最宽的范围。
