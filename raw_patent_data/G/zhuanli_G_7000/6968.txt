标题title
一种前端升级后免清缓存的页面加载方法及装置
摘要abst
本技术运用于前端页面开发领域，提供了一种前端升级后免清缓存的页面加载方法及装置，主要解决解决了原有技术需要清除缓存并重新登录才能获取页面最新样式的难题，主要方案包括在配置文件中将版本号加入js，以便页面渲染时按照版本号加载；配置文件中将版本号加入json.js，在生成打包文件的路径中包含版本号；配置文件中版本号加入js，以便页面渲染时按照版本号加载；数据库中新建用于存储新版本号的表，将版本号对应信息写入表中，作为与前端文件版本号的比对标准；在前端页面中请求后端程序，使之同步查询版本号数据表；将查询到的版本号返回前端，前端根据返回的版本号加载js文件并渲染页面。
权利要求书clms
1.一种前端升级后免清缓存的页面加载方法，其特征在于，包括以下步骤：步骤1：在webpack配置文件webpack.base.config.js中将版本号加入js，以便页面渲染时按照版本号加载；步骤2：配置文件insertjson.js中将版本号加入json.js，在生成打包文件的路径中包含版本号；步骤3：配置文件webpack.childpro.config.js中版本号加入js，以便页面渲染时按照版本号加载；步骤4：数据库中新建用于存储新版本号的表，将版本号对应信息写入表中，作为与前端文件版本号的比对标准；步骤5：在前端页面中请求后端程序，使之同步查询版本号数据表；步骤6：springcloudgateway服务网关接到http请求后，分发给后端并执行接口逻辑，最后将查询到的版本号返回前端，前端根据返回的版本号加载js文件并渲染页面。2.根据权利要求1所述的一种前端升级后免清缓存的页面加载方法，其特征在于，所述步骤1包括以下步骤：步骤1.1：将更新后前端的版本号加入到配置文件webpack.base.config.js中，打包后的js文件后缀会包含该版本号；步骤1.2：用配置文件的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；步骤1.3：确定入口：根据配置中的entry找出所有的入口文件；步骤1.4：编译模块：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；步骤1.5：完成模块编译：在经过上一步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；步骤1.6：输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表；步骤1.7：输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统，生成后缀中包含版本号的js文件。3.根据权利要求1所述的一种前端升级后免清缓存的页面加载方法，其特征在于，所述步骤5包括以下步骤：步骤5.1：创建一个异步调用对象XMLHttpRequest；步骤5.2：创建一个新的HTTP请求查询数据库版本，并指定该HTTP请求的方法、URL及验证信息；步骤5.3：设置响应HTTP请求状态变化的函数，在该函数中判断XMLHttpRequest对象的readyState属性值，该属性值为success才继续执行；步骤5.4：设置获取服务器返回数据的语句，判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值是否等于200，只有该属性值为200，才表示异步调用成功；步骤5.5：使用XMLHttpRequest对象的send方法将HTTP请求发送到Web服务器上。4.根据权利要求1所述的一种前端升级后免清缓存的页面加载方法，其特征在于，所述步骤6包括以下步骤：步骤6.1：网页客户端向Spring Cloud Gateway发出请求；步骤6.2：在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler；步骤6.3：Gateway Web Handler再通过指定的过滤器链来将请求发送到实际的服务执行业务逻辑实现查询数据库版本号，然后将版本号返回客户端；步骤6.4：前端根据返回的版本号加载js文件并渲染页面。5.一种前端升级后免清缓存的页面加载装置，其特征在于，包括以下步骤：配置模块：在webpack配置文件webpack.base.config.js中将版本号加入js，以便页面渲染时按照版本号加载；文件路径生产模块：配置文件insertjson.js中将版本号加入json.js，在生成打包文件的路径中包含版本号；版本号加入JS模块：配置文件webpack.childpro.config.js中版本号加入js，以便页面渲染时按照版本号加载；数据表模块：数据库中新建用于存储新版本号的表，将版本号对应信息写入表中，作为与前端文件版本号的比对标准；版本号查询模块：在前端页面中请求后端程序，使之同步查询版本号数据表；渲染页面模块：springcloudgateway服务网关接到http请求后，分发给后端并执行接口逻辑，最后将查询到的版本号返回前端，前端根据返回的版本号加载js文件并渲染页面。6.根据权利要求5所述的一种前端升级后免清缓存的页面加载装置，其特征在于，配置模块：将更新后前端的版本号加入到配置文件webpack.base.config.js中，打包后的js文件后缀会包含该版本号；用配置文件的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；确定入口：根据配置中的entry找出所有的入口文件；编译模块：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；完成模块编译：在经过上一步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表；输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统，生成后缀中包含版本号的js文件。7.根据权利要求5所述的一种前端升级后免清缓存的页面加载装置，其特征在于，版本号查询模块：创建一个异步调用对象XMLHttpRequest；创建一个新的HTTP请求查询数据库版本，并指定该HTTP请求的方法、URL 及验证信息；设置响应HTTP请求状态变化的函数，在该函数中判断XMLHttpRequest对象的readyState属性值，该属性值为success才继续执行；设置获取服务器返回数据的语句，判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值是否等于200，只有该属性值为200，才表示异步调用成功；使用XMLHttpRequest对象的send方法将HTTP请求发送到Web服务器上。8.根据权利要求5所述的一种前端升级后免清缓存的页面加载装置，其特征在于，渲染页面模块：网页客户端向Spring Cloud Gateway发出请求；在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway WebHandler；Gateway Web Handler再通过指定的过滤器链来将请求发送到实际的服务执行业务逻辑实现查询数据库版本号，然后将版本号返回客户端；前端根据返回的版本号加载js文件并渲染页面。9.一种存储介质，其特征在于，所述存储介质存储有一种前端升级后免清缓存的页面加载的程序，CPU在执行所述程序时，实现如权利要求1-4所述的一种前端升级后免清缓存的页面加载方法。
说明书desc
技术领域本技术运用于前端页面开发领域，实现对前端页面加载进行控制，解决每次前端升级后用户都需要清理缓存并重新登录才能使用新功能的难题。背景技术应用系统前端代码升级后，用户在浏览器端需要清理缓存，并再次登录才能使用最新发布的功能。因浏览器端为多用户，用户体验较差，故需对前端页面加载方式进行优化，使用户不用清缓存就能使用新版功能。发明内容本方案主要解决问题是基于webpack工具对前端代码进行打包，然后通过AJAX数据交互方式，在页面加载时向后台请求和接收数据，获取前端页面最新版本号并根据该版本号渲染页面，解决了原有技术需要清除缓存并重新登录才能获取页面最新样式的难题。本发明为解决上述技术问题采用以下技术手段：一种前端升级后免清缓存的页面加载方法，包括以下步骤：步骤1：在webpack配置文件webpack.base.config.js中将版本号加入js，以便页面渲染时按照版本号加载；步骤2：配置文件insertjson.js中将版本号加入json.js，在生成打包文件的路径中包含版本号；步骤3：配置文件webpack.childpro.config.js中版本号加入js，以便页面渲染时按照版本号加载；步骤4：数据库中新建用于存储新版本号的表，将版本号对应信息写入表中，作为与前端文件版本号的比对标准；步骤5：在前端页面中请求后端程序，使之同步查询版本号数据表；步骤6：springcloudgateway服务网关接到http请求后，分发给后端并执行接口逻辑，最后将查询到的版本号返回前端，前端根据返回的版本号加载js文件并渲染页面。上述技术方案中，所述步骤1包括以下步骤：步骤1.1：将更新后前端的版本号加入到配置文件中，打包后的js文件后缀会包含该版本号；步骤1.2：用上一步配置中得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；步骤1.3：确定入口：根据配置中的entry找出所有的入口文件；步骤1.4：编译模块：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；步骤1.5：完成模块编译：在经过上一步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。步骤1.6：输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表；步骤1.7：输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统，生成后缀中包含版本号的js文件；上述技术方案中，所述步骤5包括以下步骤：步骤5.1：创建一个异步调用对象XMLHttpRequest；步骤5.2：创建一个新的HTTP请求，并指定该HTTP请求的方法、URL及验证信息；步骤5.3：设置响应HTTP请求状态变化的函数，在该函数中判断XMLHttpRequest对象的readyState属性值，该属性值为success才继续执行；步骤5.4：设置获取服务器返回数据的语句，判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值是否等于200。只有该属性值为200，才表示异步调用成功；步骤5.5：使用XMLHttpRequest对象的send方法将HTTP请求发送到Web服务器上；上述技术方案中，所述步骤6包括以下步骤：步骤6.1：客户端向Spring Cloud Gateway发出请求；步骤6.2：在Gateway Hand ler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler；步骤6.3：Gateway Web Handler再通过指定的过滤器链来将请求发送到实际的服务执行业务逻辑，然后将版本号返回客户端；步骤6.4：前端根据返回的版本号加载js文件并渲染页面。本发明还提供了一种前端升级后免清缓存的页面加载装置，包括以下步骤：配置模块：在webpack配置文件webpack.base.config.js中将版本号加入js，以便页面渲染时按照版本号加载；文件路径生产模块：配置文件insertjson.js中将版本号加入json.js，在生成打包文件的路径中包含版本号；版本号加入JS模块：配置文件webpack.childpro.config.js中版本号加入js，以便页面渲染时按照版本号加载；数据表模块：数据库中新建用于存储新版本号的表，将版本号对应信息写入表中，作为与前端文件版本号的比对标准；版本号查询模块：在前端页面中请求后端程序，使之同步查询版本号数据表；渲染页面模块：springcloudgateway服务网关接到http请求后，分发给后端并执行接口逻辑，最后将查询到的版本号返回前端，前端根据返回的版本号加载js文件并渲染页面。上述技术方案中，配置模块：将更新后前端的版本号加入到配置文件webpack.base.config.js中，打包后的js文件后缀会包含该版本号；用配置文件的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；确定入口：根据配置中的entry找出所有的入口文件；编译模块：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；完成模块编译：在经过上一步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表；输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统，生成后缀中包含版本号的js文件；上述技术方案中，版本号查询模块：创建一个异步调用对象XMLHttpRequest；创建一个新的HTTP请求查询数据库版本，并指定该HTTP请求的方法、URL及验证信息；设置响应HTTP请求状态变化的函数，在该函数中判断XMLHttpRequest对象的readyState属性值，该属性值为success才继续执行；设置获取服务器返回数据的语句，判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值是否等于200，只有该属性值为200，才表示异步调用成功；使用XMLHttpRequest对象的send方法将HTTP请求发送到Web服务器上。上述技术方案中，渲染页面模块：网页客户端向Spring Cloud Gateway发出请求；在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到GatewayWeb Handler；Gateway Web Handler再通过指定的过滤器链来将请求发送到实际的服务执行业务逻辑实现查询数据库版本号，然后将版本号返回客户端；前端根据返回的版本号加载js文件并渲染页面；本发明还提过了一种存储介质，所述存储介质存储有一种前端升级后免清缓存的页面加载的程序，CPU在执行所述程序时，实现上述的一种前端升级后免清缓存的页面加载方法。因为本发明采用了上述技术手段，因此具备以下有益效果：本方案主要解决问题是基于webpack工具对前端代码进行打包，然后通过AJAX数据交互方式，在页面加载时向后台请求和接收数据，获取前端页面最新版本号并根据该版本号渲染页面，解决了原有技术需要清除缓存并重新登录才能获取页面最新样式的难题。附图说明图1为本发明流程示意图；图2、图3均为软件运行实例截图。具体实施方式本方案采用静态模块打包工具webpack将前端文件打包成后缀包含新版本号的js文件，并通过Ajax方式请求后端获取新版本号并返回前端与前端js文件版本号匹配从而避免与缓存中的旧版js文件冲突。下面对这些技术进行简单介绍。1、webpack是一个用于JavaScript应用程序的静态模块打包工具。当webpack处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块，并生成一个或多个bundle。打包完成后会将前端文件编译成js文件。2、Ajax：即异步JavaScript和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页如果需要更新内容，必需重载整个网页面。3、Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。下面以将前端从版本V7.2.42升级为V7.2.43为例，对具体实施方式进一步阐述，流程图见图1，最终效果见图2：步骤1：在webpack.base.config.js中将版本号加入css，设置常量cons tversion＝″v7.2.43″。步骤2：在insertjson.js中将版本号加入json.js，拼接响应路径fs.writeFile步骤3：webpack.childpro.config.js中版本号加入js，拼接请求路径path：path.join步骤4：数据库中新建表valm_version，将前端对应信息写入表中：步骤5：在前端页面中请求后端程序，使之同步查询版本号表；步骤6：springcloudgateway服务网关接到http请求后，分发给后端vpm并执行接口逻辑，最后将查询到的版本号返回前端；上述技术方案中，所述步骤1包括以下步骤：步骤1.1：将更新后前端的版本号加入到配置文件中；如：const version＝”V7.2.43”；const extractLESS＝new ExtractTextPlugin；步骤1.2：用上一步配置中得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译；步骤1.3：确定入口：根据配置中的entry找出所有的入口文件；步骤1.4：编译模块：从入口文件出发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；步骤1.5：完成模块编译：在经过上一步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。步骤1.6：输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表；步骤1.7：输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统，生成如图3所示后缀中包含版本号的js文件；上述技术方案中，所述步骤5包括以下步骤：步骤5.1：创建一个异步调用对象XMLHttpRequest；步骤5.2：创建一个新的HTTP请求，并指定该HTTP请求的方法、URL及验证信息；$.ajax，data：{}，cache：false.async：true，dataType：″json″，beforeSend：function{xhr.setRequestHeader}，步骤5.3：设置响应HTTP请求状态变化的函数，在该函数中判断XMLHttpR equest对象的readyState属性值是否为success，如果是则继续执行；步骤5.4：设置获取服务器返回数据的语句，判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值是否等于200。只有该属性值为200，才表示异步调用成功；步骤5.5：使用XMLHttpRequest对象的send方法将HTTP请求发送到Web服务器上；上述技术方案中，所述步骤6包括以下步骤：步骤6.1：客户端向Spring Cloud Gateway发出请求；步骤6.2：在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler；步骤6.3：Gateway Web Handler再通过指定的过滤器链来将请求发送到实际的服务执行业务逻辑，然后将版本号返回客户端；步骤6.4：前端根据返回的版本号加载js文件并渲染页面。
