标题title
数据源管理方法、设备及存储介质
摘要abst
本发明涉及一种数据源管理方法、设备及存储介质，该数据源管理方法应用于数据源管理系统，数据源管理系统与用户端连接，数据源管理系统包括：运行缓存区、切面组件和主数据库，数据源管理方法包括以下步骤：通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源；若运行缓存区存在租户库数据源，基于连接点信息检测用户端是否关联有多个租户库数据源；若用户端未关联多个租户库数据源，将用户端连接至租户库数据源对应的租户数据库；若用户端关联有多个租户库数据源，获取用户端的访问动作的切换注解，将用户端连接至切换注解对应的注解数据源对应的租户数据库。本发明实现了降低数据源管理的成本同时保证数据源管理的安全性。
权利要求书clms
1.一种数据源管理方法，其特征在于，所述数据源管理方法应用于数据源管理系统，所述数据源管理系统与用户端连接，所述数据源管理系统包括：运行缓存区、切面组件和主数据库；其中，所述主数据库中包括多个租户数据库，各个所述租户数据库的数据业务相互隔离；所述数据源管理方法包括以下步骤：在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。2.如权利要求1所述的数据源管理方法，其特征在于，所述通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的所述租户数据库的步骤，包括：通过所述切面组件查询所述切换注解对应的注解数据源是否在所述运行缓存区；若所述注解数据源在所述运行缓存区，则通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。3.如权利要求1所述的数据源管理方法，其特征在于，在所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤之前，所述数据源管理方法还包括：将所述用户端连接至所述主数据库；通过所述切面组件解析所述访问请求得到用户端标识；所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤，包括：通过所述切面组件根据所述用户端标识，查询所述运行缓存区中是否存在与所述用户端标识对应的租户库数据源。4.如权利要求1所述的数据源管理方法，其特征在于，所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤之后，所述数据源管理方法还包括：若所述运行缓存区不存在所述租户库数据源，则通过所述切面组件创建新建数据源；在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区，并将所述用户端连接至所述新建数据源对应的租户数据库。5.如权利要求4所述的数据源管理方法，其特征在于，所述在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区的步骤之前，所述数据源管理方法还包括：检测所述新建数据源是否连通正常；在所述检测所述新建数据源是否连通正常的步骤之后，所述数据源管理方法还包括：若所述新建数据源连通异常，则将所述用户端连接至所述主数据库。6.如权利要求1至5中任一项所述的数据源管理方法，其特征在于，所述数据源管理系统还包括数据源监控组件，所述运行缓存区配置缓存算法；所述数据源管理方法还包括：通过所述数据源监控组件检测所述运行缓存区中的数据源数据量是否达到预设阈值；若所述数据源数据量达到所述预设阈值，则按照所述缓存算法更新所述运行缓存区。7.如权利要求1至5中任一项所述的数据源管理方法，其特征在于，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件；其中，所述切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解；所述数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性；所述运行时线程组件用于持有当前线程正在操作的租户库数据源key。8.一种数据源管理装置，该数据源管理装置应用于数据源管理系统，所述数据源管理系统与用户端连接，所述数据源管理系统包括：运行缓存区、切面组件和主数据库；其中，所述主数据库中包括多个租户数据库，各个所述租户数据库的数据业务相互隔离；该数据源管理装置包括：第一调用模块，用于在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；第二调用模块，用于若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；第三调用模块，用于若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；第四调用模块，用于若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。9.一种数据源管理设备，其特征在于，所述数据源管理设备包括：存储器、处理器及存储在所述存储器上并可在所述处理器上运行的数据源管理程序，所述数据源管理程序配置为实现如权利要求1至7中任一项所述的数据源管理方法的步骤。10.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质上存储有数据源管理程序，所述数据源管理程序被处理器执行时实现如权利要求1至7中任一项所述的数据源管理方法的步骤。
说明书desc
技术领域本发明涉及数据库技术领域，尤其涉及一种数据源管理方法、设备及存储介质。背景技术目前基于多租户的多数据源管理系统主要有三种方案，分别是：独立数据库，即一个租户一个数据库，这种方案可以为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。数据完全隔离，安全性最好，但成本较高。共享数据库与独立Schema，即多个或所有租户共享数据库，但是每个租户一个Schema，这种方案为安全性要求较高的租户提供了一定程度的逻辑数据隔离，每个数据库可支持更多的租户数量，但这种方案并不是完全隔离，如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据。共享数据库、共享Schema与共享数据表，即租户共享同一个数据库、同一个Schema，这是共享程度最高、隔离级别最低的模式。在使用以上方案进行数据源管理时，通常难以兼顾安全性和低成本。发明内容本发明的主要目的在于提供一种数据源管理方法、装置、设备及计算机可读存储介质，旨在降低数据源管理的成本同时保证数据源管理的安全性。为实现上述目的，本发明提供一种数据源管理方法，该数据源管理方法应用于数据源管理系统，该数据源管理系统与用户端连接，数据源管理系统包括：运行缓存区、切面组件和主数据库；其中，所述主数据库中包括多个租户数据库，各个所述租户数据库的数据业务相互隔离；数据源管理方法包括以下步骤：在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。可选地，所述通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的所述租户数据库的步骤，包括：通过所述切面组件查询所述切换注解对应的注解数据源是否在所述运行缓存区；若所述注解数据源在所述运行缓存区，则通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。可选地，在所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤之前，所述数据源管理方法还包括：将所述用户端连接至所述主数据库；通过所述切面组件解析所述访问请求得到用户端标识；所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤，包括：通过所述切面组件根据所述用户端标识，查询所述运行缓存区中是否存在与所述用户端标识对应的租户库数据源。可选地，所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的步骤之后，所述数据源管理方法还包括：若所述运行缓存区不存在所述租户库数据源，则通过所述切面组件创建新建数据源；在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区，并将所述用户端连接至所述新建数据源对应的租户数据库。可选地，所述在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区的步骤之前，所述数据源管理方法还包括：检测所述新建数据源是否连通正常；在所述检测所述新建数据源是否连通正常的步骤之后，所述数据源管理方法还包括：若所述新建数据源连通异常，则将所述用户端连接至所述主数据库。可选地，所述数据源管理系统还包括数据源监控组件，所述运行缓存区配置缓存算法；所述数据源管理方法还包括：通过所述数据源监控组件检测所述运行缓存区中的数据源数据量是否达到预设阈值；若所述数据源数据量达到所述预设阈值，则按照所述缓存算法更新所述运行缓存区。可选地，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件；其中，所述切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解；所述数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性；所述运行时线程组件用于持有当前线程正在操作的租户库数据源key。此外，为实现上述目的，本发明还提供一种数据源管理装置，该数据源管理装置应用于数据源管理系统，所述数据源管理系统与用户端连接，所述数据源管理系统包括：运行缓存区、切面组件和主数据库；其中，所述主数据库中包括多个租户数据库，各个所述租户数据库的数据业务相互隔离；该数据源管理装置包括：第一调用模块，用于在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；第二调用模块，用于若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；第三调用模块，用于若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；第四调用模块，用于若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。此外，为实现上述目的，本发明还提供一种数据源管理设备，所述数据源管理设备包括存储器、处理器及存储在所述存储器上并可在所述处理器上运行的数据源管理程序，所述数据源管理程序被所述处理器执行时实现上述数据源管理方法的步骤。此外，为实现上述目的，本发明还提供一种计算机可读存储介质，所述计算机可读存储介质上存储有数据源管理程序，所述数据源管理程序被处理器执行时实现上述的数据源管理方法的步骤。本发明中，数据源管理系统与用户端连接，数据源管理系统包括：运行缓存区、切面组件和主数据库，其中，主数据库中包括多个租户数据库，各个租户数据库的数据业务相互隔离。本发明中，数据源管理系统中主数据库包括多个租户数据库，各个租户数据库各自的数据业务相互隔离，使得各个租户之间的数据不会相互影响，维持了数据源管理系统的安全性。本发明中，通过在接收到用户端发送的访问请求时，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源；若运行缓存区存在租户库数据源，则通过切面组件解析用户端的连接点得到连接点信息，并基于连接点信息检测用户端是否关联有多个租户库数据源，其中，连接点信息包括对主数据库执行访问操作的目标方法的所属对象和参数信息；若用户端未关联多个租户库数据源，则通过切面组件将用户端连接至租户库数据源对应的租户数据库；若用户端关联有多个租户库数据源，则通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库。本发明中，通过设置运行缓存区，相比于每次访问直接查询数据库，本发明可以优先访问运行缓存区，节省了资源，降低了服务器的使用成本，并且运行缓存区避免了访问用户量大时损伤数据库，延长了数据库的使用寿命，降低了服务器的维护成本，从而降低了数据管理成本。同时，本发明在用户端关联有多个租户库数据源时，通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库，避免了用户端因为连接多数据源而导致无法访问的情况，提高了访问服务器的成功率。附图说明图1为本发明数据源管理方法第一实施例的流程示意图；图2为本发明实施例方案涉及的数据源管理装置的功能模块示意图；图3为本发明实施例方案涉及的数据源管理设备的结构示意图；图4为本发明实施例方案涉及的计算机可读存储介质的结构示意图。本发明目的的实现、功能特点及优点将结合实施例，参照附图做进一步说明。具体实施方式应当理解，此处所描述的具体实施例仅仅用以解释本发明，并不用于限定本发明。本发明实施例提供一种数据源管理系统，数据源管理系统与用户端连接，上述数据源管理系统包括：运行缓存区、切面组件和主数据库。具体地，本实施例中，主数据库中包括多个租户数据库，一个租户数据库对应一个租户ID。其中，主数据库用于存储各个租户数据库的公共数据，各个租户数据库的数据业务相互隔离。进一步地，在具体实施方式中，主数据库中也可以是包括一个租户数据库，在此不进行限制。本实施例中，通过利用独立数据库、共享数据库但独立Schema两种模式并存，本实施例为安全性要求较高的租户提供了一定程度的逻辑数据隔离，每个数据库可支持更多的租户数量。在具体实施方式中，运行缓存区用于缓存租户库数据源，用于在接收到用户端发送的访问请求时，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源。进一步地，在一实施方式中，若运行缓存区存在租户库数据源，则可以通过切面组件将用户端连接至租户库数据源对应的租户数据库；在另一实施方式中，若运行缓存区不存在租户库数据源，则可以通过切面组件创建新建数据源，在新建数据源连通正常时将新建数据源加载至运行缓存区，并将用户端连接至新建数据源对应的租户数据库。进一步地，在一些可行的实施例中，数据源管理系统还包括数据源监控组件，本实施例中，运行缓存区配置缓存算法。具体地，本实施例中，数据源监控组件用于检测运行缓存区中的数据源数据量是否达到预设阈值。本实施例中，缓存算法可以根据运行缓存区租户库数据源的访问热度自动按需剔除或保留，以更新运行缓存区。在具体实施方式中，若数据源监控组件用于检测运行缓存区中的数据源数据量达到预设阈值，则可以通过缓存算法更新运行缓存区。进一步地，运行缓存区更新后，可以在更新后的运行缓存区查询租户库数据源。需要说明的是，本实施例中，数据源管理系统还包括数据源监控组件，运行缓存区配置缓存算法。通过数据源监控组件检测运行缓存区中的数据源数据量是否达到预设阈值，若数据源数据量达到预设阈值，则按照缓存算法更新运行缓存区。本实施例实现了保持运行缓存区中不会存在长期不被访问的冷数据源，可以维持运行缓存区的性能，避免运行缓存区数据占用过多二发生故障，提高了数据源管理系统的工作性能。进一步地，在一些可行的实施例中，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件。具体地，切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解。数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性。运行时线程组件用于持有当前线程正在操作的租户库数据源key。需要说明的是，本实施例通过切换注解组件、数据源管理组件和运行时线程组件对租户库数据源进行管理，维持用户端访问租户库数据源的秩序，保证了数据源管理系统的性能。本实施例中，数据源管理系统中主数据库包括多个租户数据库，各个租户数据库各自的数据业务相互隔离，使得各个租户之间的数据不会相互影响，维持了数据源管理系统的安全性。同时，数据源管理系统中设置运行缓存区，相比于每次访问直接查询数据库，本实施例中可以优先访问运行缓存区，节省了资源，降低了服务器的使用成本。且对于访问用户量较大时，批量的操作数据库通常导致数据库负载加满，而本实施例数据源管理系统通过运行缓存区，避免了访问用户量大时损伤数据库，延长了数据库的使用寿命，降低了服务器的维护成本。基于上述数据源管理系统，提出本发明数据源管理方法第一实施例。参照图1所示，图1是本发明数据源管理方法第一实施例的流程示意图。这里将详细地对示例性实施例进行说明，其示例表示在附图中。下面的描述涉及附图时，除非另有表示，不同附图中的相同数字表示相同或相似的要素。以下示例性实施例中所描述的实施方式并不代表与本申请相一致的所有实施方式。本实施例中，执行本发明实施例数据源管理方法的可以是终端设备，例如，PC、平板电脑、便携计算机等等，以下为方便描述省略执行主体进行描述。具体地，本实施例中，数据源管理系统与用户端连接，数据源管理系统包括：运行缓存区、切面组件和主数据库。其中，主数据库中包括多个租户数据库，各个租户数据库的数据业务相互隔离。本实施例数据源管理方法包括：步骤S10：在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；本实施例中，用户可以通过用户端发送访问请求。具体地，本实施例中，在接收到用户端发送的访问请求时，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源。具体地，查询租户库数据源的依据在此不进行限制，例如，在一实施方式中，访问请求中可以携带租户数据库的信息，本实施方式中，通过切面组件根据访问请求可以查询运行缓存区中是否存在与用户端对应的租户库数据源；在另一实施方式中，访问请求中可以携带用户端标识，本实施方式中，根据用户端标识，通过切面组件也可以查询运行缓存区中是否存在与用户端对应的租户库数据源，具体可以根据实际需求进行设置。步骤S20：若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；本实施例中，接收到用户端发送的访问请求时，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源。若运行缓存区存在用户端对应的租户库数据源，则可以通过切面组件将用户端连接至租户库数据源对应的租户数据库。本实施例中，通过切面组件将用户端连接至租户库数据源对应的租户数据库之前，可以通过切面组件解析用户端的连接点的信息，检测用户端是否关联多个租户库数据源，具体地，连接点信息可以包括对数据库执行访问操作的目标方法的所属对象和参数信息。具体地，本实施例中，通过切面组件解析用户端的连接点得到连接点信息后，基于连接点信息检测用户端是否关联有多个租户库数据源。步骤S30：若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；本实施例中，若用户端未关联多个租户库数据源，则通过切面组件将用户端连接至租户库数据源对应的租户数据库。步骤S40：若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。本实施例中，通过切面组件将用户端连接至租户库数据源对应的租户数据库之前，通过切面组件解析用户端的连接点得到连接点信息。基于连接点信息检测用户端是否关联有多个租户库数据源。具体地，本实施例中，若用户端关联有多个租户库数据源，则通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库。示例性地，在一可行的实施方式中，数据源管理系统可以是用于医疗领域，数据源管理系统中的租户数据库对应的为各个医院的数据库，当用户端需要访问医院数据库时，通过切面组件查询运行缓存区中是否存在与用户端对应的医院数据库的数据源；若运行缓存区存在医院数据库的数据源，则通过切面组件解析用户端的连接点得到连接点信息，并基于连接点信息检测用户端是否关联有多个医院数据库的数据源；若用户端未关联多个医院数据库的数据源，则通过切面组件将用户端连接至医院数据库的数据源对应的医院数据库，以进行查询，在具体实施方式中，可以是查询个人的就诊信息，也可以是医生用于查询临场实验的相关信息；若用户端关联有多个医院数据库的数据源，则通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的医院数据库。本实施方式中，通过独立的租户数据库，提高了医疗数据的安全性。通过设置运行缓存区，本实施例中可以优先访问运行缓存区，节省了资源，降低了服务器的使用成本，并且运行缓存区避免了访问用户量大时损伤数据库，延长了数据库的使用寿命，降低了服务器的维护成本，从而降低了医疗数据管理成本。进一步地，在一些可行的实施例中，上述步骤S40：通过切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的所述租户数据库，可以包括：步骤S401：通过所述切面组件查询所述切换注解对应的注解数据源是否在所述运行缓存区；本实施例中，基于连接点信息检测用户端是否关联有多个租户库数据源。具体地本实施例中，若用户端关联有多个租户库数据源，则通过切面组件获取用户端的访问动作的切换注解，通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库。具体地，本实施例中，通过切面组件查询切换注解对应的注解数据源是否在运行缓存区。步骤S402：若所述注解数据源在所述运行缓存区，则通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。本实施例中，通过切面组件查询切换注解对应的注解数据源是否在运行缓存区。若注解数据源在运行缓存区，则通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库。进一步地，在一实施方式中，通过切面组件查询切换注解对应的注解数据源是否在运行缓存区。若注解数据源不在运行缓存区，则通过切面组件创建新建数据源。本实施例中，数据源管理系统中主数据库包括多个租户数据库，各个租户数据库各自的数据业务相互隔离，使得各个租户之间的数据不会相互影响，维持了数据源管理系统的安全性。本实施例中，通过在接收到用户端发送的访问请求时，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源；若运行缓存区存在租户库数据源，则通过切面组件解析用户端的连接点得到连接点信息，并基于连接点信息检测用户端是否关联有多个租户库数据源，其中，连接点信息包括对主数据库执行访问操作的目标方法的所属对象和参数信息；若用户端未关联多个租户库数据源，则通过切面组件将用户端连接至租户库数据源对应的租户数据库；若用户端关联有多个租户库数据源，则通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库。本实施例中数据源管理系统中设置运行缓存区，相比于每次访问直接查询数据库，本实施例中可以优先访问运行缓存区，节省了资源，降低了服务器的使用成本。且对于访问用户量较大时，批量的操作数据库通常导致数据库负载加满，而本实施例数据源管理系统通过运行缓存区，避免了访问用户量大时损伤数据库，延长了数据库的使用寿命，降低了服务器的维护成本。并且，本实施例在用户端关联有多个租户库数据源时，通过切面组件获取用户端的访问动作的切换注解，并通过切面组件将用户端连接至切换注解对应的注解数据源对应的租户数据库，避免了用户端因为连接多数据源而导致无法访问的情况，提高了访问服务器的成功率。进一步地，基于上述第一实施例，提出本发明第二实施例，本实施例中，在上述步骤S10：通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源之前，上述数据源管理方法还包括：步骤S50：将所述用户端连接至所述主数据库；本实施例中，在通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源之前，为了避免返回用户端错误的连接信息，首先将用户端连接至主数据库。步骤S60：通过所述切面组件解析所述访问请求得到用户端标识；本实施例中，在将用户端连接至主数据库后，通过切面组件解析访问请求得到用户端标识。在具体实施方式中，用户端标识为可以表征用户端身份的标识，具体地，用户端标识可以是用户端地址、用户端IP、用户端端口、用户ID和用户密码。上述步骤S10：通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源，可以包括：步骤S101：通过所述切面组件根据所述用户端标识，查询所述运行缓存区中是否存在与所述用户端标识对应的租户库数据源。本实施例中，通过切面组件解析访问请求得到用户端标识后，通过切面组件根据用户端标识，查询运行缓存区中是否存在与用户端标识对应的租户库数据源。需要说明的是，本实施例中，在通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源之前，首先将用户端连接至主数据库，通过切面组件解析访问请求得到用户端标识后，通过切面组件根据用户端标识，查询运行缓存区中是否存在与用户端标识对应的租户库数据源。本实施例避免了返回用户端错误的连接信息，保持了用户访问数据库的体验感。进一步地，在一些可行的实施例中，上述步骤S10：通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源之后，还包括：步骤S70：若所述运行缓存区不存在所述租户库数据源，则通过所述切面组件创建新建数据源；本实施例中，通过切面组件查询运行缓存区中是否存在与用户端对应的租户库数据源。具体地，若运行缓存区不存在用户端对应的租户库数据源，则通过切面组件创建新建数据源。在具体实施方式中，运行缓存区不存在用户端对应的租户数据库，可能是用户端对应的租户数据库的租户库数据源没有加载至运行缓存区，也可能是主数据库中没有创建租户数据库。步骤S80：在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区，并将所述用户端连接至所述新建数据源对应的租户数据库。本实施例中，若运行缓存区不存在用户端对应的租户库数据源，则通过切面组件创建新建数据源。具体地，在新建数据源连通正常时将新建数据源加载至运行缓存区，并将用户端连接至新建数据源对应的租户数据库。进一步地，在一些可行的实施例中，在上述步骤S80：在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区之前，数据源管理方法还包括：步骤S90：检测所述新建数据源是否连通正常；若运行缓存区不存在用户端对应的租户库数据源，则通过切面组件创建新建数据源。本实施例中，在将新建数据源加载至运行缓存区之前，检测新建数据源是否连通正常。在具体实施方式中，可以是检测访问请求中携带的用户信息与新建数据源维持的数据池中的租户数据库的信息是否一致，具体地，用户信息可以是用户ID、密码、用户地址和用户端口等。若访问请求中携带的用户信息与新建数据源维持的数据池中的租户数据库的信息一致，则可以确定新建数据源连通正常；若访问请求中携带的用户信息与新建数据源维持的数据池中的租户数据库的信息不一致，则可以确定新建数据源连通异常。上述步骤S90：检测所述新建数据源是否连通正常之后，数据源管理方法还包括：步骤A10：若所述新建数据源连通异常，则将所述用户端连接至所述主数据库。本实施例中，检测新建数据源是否连通正常，若新建数据源连通异常，则将用户端连接至主数据库，可以避免用户端访问数据库出错。进一步地，在一些可行的实施例中，数据源管理系统还包括数据源监控组件，运行缓存区配置缓存算法，数据源管理方法还包括：步骤A20：通过所述数据源监控组件检测所述运行缓存区中的数据源数据量是否达到预设阈值；本实施例中，数据源管理系统还包括数据源监控组件，数据源监控组件用于检测运行缓存区中的数据源数据量是否达到预设阈值。具体地，本实施例中，通过数据源监控组件检测运行缓存区中的数据源数据量是否达到预设阈值。步骤A30：若所述数据源数据量达到所述预设阈值，则按照所述缓存算法更新所述运行缓存区。本实施例中，运行缓存区配置缓存算法，缓存算法用于按照租户库数据源的访问热度，在运行缓存区中数据源数据量达到预设阈值是，自动按需剔除或保留运行缓存区的数据源，以更新运行缓存区，维持运行缓存区的性能。具体地，通过数据源监控组件检测运行缓存区中的数据源数据量是否达到预设阈值。本实施例中，若数据源数据量达到预设阈值，则按照缓存算法更新运行缓存区。需要说明的是，本实施例中，数据源管理系统还包括数据源监控组件，运行缓存区配置缓存算法。通过数据源监控组件检测运行缓存区中的数据源数据量是否达到预设阈值，若数据源数据量达到预设阈值，则按照缓存算法更新运行缓存区。本实施例实现了保持运行缓存区中不会存在长期不被访问的冷数据源，可以维持运行缓存区的性能，避免运行缓存区数据占用过多二发生故障，提高了数据源管理系统的工作性能。进一步地，在一些可行的实施例中，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件。具体地，切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解。数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性。运行时线程组件用于持有当前线程正在操作的租户库数据源key。需要说明的是，本实施例通过切换注解组件、数据源管理组件和运行时线程组件对租户库数据源进行管理，维持用户端访问租户库数据源的秩序，保证了数据源管理系统的性能。本实施例中，通过切面组件解析访问请求得到用户端标识，通过切面组件根据用户端标识，查询运行缓存区中是否存在与用户端标识对应的租户库数据源。本实施例中数据源管理系统中设置运行缓存区，相比于每次访问直接查询数据库，本实施例中可以优先访问运行缓存区，节省了资源，降低了服务器的使用成本。且对于访问用户量较大时，批量的操作数据库通常导致数据库负载加满，而本实施例数据源管理系统通过运行缓存区，避免了访问用户量大时损伤数据库，延长了数据库的使用寿命，降低了服务器的维护成本。此外，本发明还提供一种数据源管理装置，该数据源管理装置应用于数据源管理系统，所述数据源管理系统与用户端连接，所述数据源管理系统包括：运行缓存区、切面组件和主数据库；其中，所述主数据库中包括多个租户数据库，各个所述租户数据库的数据业务相互隔离；具体地，参照图2，图2为本发明实施例方案涉及的数据源管理装置的功能模块示意图，上述数据源管理装置包括：第一调用模块，用于在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；第二调用模块，用于若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；第三调用模块，用于若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；第四调用模块，用于若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。进一步地，所述第四调用模块40还用于：通过所述切面组件查询所述切换注解对应的注解数据源是否在所述运行缓存区；若所述注解数据源在所述运行缓存区，则通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。进一步地，上述数据源管理装置还包括第五调用模块，上述第五调用模块用于：将所述用户端连接至所述主数据库；通过所述切面组件解析所述访问请求得到用户端标识；上述第一调用模块10还用于：通过所述切面组件根据所述用户端标识，查询所述运行缓存区中是否存在与所述用户端标识对应的租户库数据源。进一步地，上述数据源管理装置还包括第六调用模块，上述第六调用模块用于：若所述运行缓存区不存在所述租户库数据源，则通过所述切面组件创建新建数据源；在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区，并将所述用户端连接至所述新建数据源对应的租户数据库。进一步地，上述数据源管理装置还包括第七调用模块，上述第七调用模块用于：检测所述新建数据源是否连通正常；上述第六调用模块还用于：若所述新建数据源连通异常，则将所述用户端连接至所述主数据库。进一步地，数据源管理系统还包括数据源监控组件，上述数据源管理装置还包括第八调用模块，上述第八调用模块用于：通过所述数据源监控组件检测所述运行缓存区中的数据源数据量是否达到预设阈值；若所述数据源数据量达到所述预设阈值，则按照所述缓存算法更新所述运行缓存区。进一步地，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件；其中，所述切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解；所述数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性；所述运行时线程组件用于持有当前线程正在操作的租户库数据源key。其中，数据源管理装置的各个功能模块各自在运行时，实现如上述的数据源管理方法的步骤。此外，本发明还提供一种数据源管理设备。参照图3，图3为本发明实施例方案涉及的数据源管理设备的结构示意图。本发明实施例数据源管理设备具体可以是为本地运行数据源管理系统的设备。如图3所示，本发明实施例数据源管理设备可以包括：处理器1001，例如CPU，通信总线1002，用户接口1003，网络接口1004，存储器1005。其中，通信总线1002用于实现这些组件之间的连接通信。用户接口1003可以包括显示屏、输入单元比如键盘，可选用户接口1003还可以包括标准的有线接口、无线接口。网络接口1004可选的可以包括标准的有线接口、无线接口。存储器1005设置在数据源管理设备主体上，存储器1005上存储有程序，该程序被处理器1001执行时实现相应的操作。存储器1005还用于存储供数据源管理设备使用的参数。存储器1005可以是高速RAM存储器，也可以是稳定的存储器，例如磁盘存储器。存储器1005可选的还可以是独立于前述处理器1001的存储装置。本领域技术人员可以理解，图3中示出的数据源管理设备结构并不构成对数据源管理设备的限定，可以包括比图示更多或更少的部件，或者组合某些部件，或者不同的部件布置。如图3所示，作为一种存储介质的存储器1005中可以包括操作系统、网络通信模块、用户接口模块以及数据源管理程序。在图3所示的数据源管理设备中，处理器1001可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：在接收到用户端发送的访问请求时，通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源；若所述运行缓存区存在所述租户库数据源，则通过所述切面组件解析所述用户端的连接点得到连接点信息，并基于所述连接点信息检测所述用户端是否关联有多个所述租户库数据源，其中，所述连接点信息包括对所述主数据库执行访问操作的目标方法的所属对象和参数信息；若所述用户端未关联多个所述租户库数据源，则通过所述切面组件将所述用户端连接至所述租户库数据源对应的租户数据库；若所述用户端关联有多个所述租户库数据源，则通过所述切面组件获取所述用户端的访问动作的切换注解，并通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。进一步地，处理器1001还可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：通过所述切面组件查询所述切换注解对应的注解数据源是否在所述运行缓存区；若所述注解数据源在所述运行缓存区，则通过所述切面组件将所述用户端连接至所述切换注解对应的注解数据源对应的租户数据库。进一步地，处理器1001还可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：将所述用户端连接至所述主数据库；通过所述切面组件解析所述访问请求得到用户端标识；所述通过所述切面组件查询所述运行缓存区中是否存在与所述用户端对应的租户库数据源的操作，包括：通过所述切面组件根据所述用户端标识，查询所述运行缓存区中是否存在与所述用户端标识对应的租户库数据源。进一步地，处理器1001还可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：若所述运行缓存区不存在所述租户库数据源，则通过所述切面组件创建新建数据源；在所述新建数据源连通正常时将所述新建数据源加载至所述运行缓存区，并将所述用户端连接至所述新建数据源对应的租户数据库。进一步地，处理器1001还可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：检测所述新建数据源是否连通正常；在所述检测所述新建数据源是否连通正常的操作之后，还包括：若所述新建数据源连通异常，则将所述用户端连接至所述主数据库。进一步地，处理器1001还可以用于调用存储器1005中存储的数据源管理程序，并执行如下操作：通过所述数据源监控组件检测所述运行缓存区中的数据源数据量是否达到预设阈值；若所述数据源数据量达到所述预设阈值，则按照所述缓存算法更新所述运行缓存区。进一步地，所述数据源管理系统还包括：切换注解组件、数据源管理组件和运行时线程组件；其中，所述切换注解组件用于定义租户库数据源key属性，并用于标记多数据源注解；所述数据源管理组件用于管理租户库数据源key、租户库数据源对象的键值对映射属性和主数据源对象属性；所述运行时线程组件用于持有当前线程正在操作的租户库数据源key。数据源管理设备运行时实现如上述的数据源管理方法的步骤。此外，本发明还提供一种计算机可读存储介质。参照图4，图4为本发明实施例方案涉及的计算机可读存储介质的结构示意图。计算机可读存储介质上存储有数据源管理程序，数据源管理程序被处理器执行时实现如上述的数据源管理方法的步骤。需要说明的是，在本文中，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者系统不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者系统所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括该要素的过程、方法、物品或者系统中还存在另外的相同要素。上述本发明实施例序号仅仅为了描述，不代表实施例的优劣。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到上述实施例方法可借助软件加必需的通用硬件平台的方式来实现，当然也可以通过硬件，但很多情况下前者是更佳的实施方式。基于这样的理解，本发明的技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品存储在如上述的一个计算机可读存储介质中，包括若干指令用以使得一台数据源管理设备执行本发明各个实施例所述的方法。以上仅为本发明的优选实施例，并非因此限制本发明的专利范围，凡是利用本发明说明书及附图内容所作的等效结构或等效流程变换，或直接或间接运用在其他相关的技术领域，均同理包括在本发明的专利保护范围内。
