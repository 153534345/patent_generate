标题title
一种PC场景识别方法及电子设备
摘要abst
本申请提供了一种PC场景识别方法及电子设备，应用于个人计算机PC，可以精准识别出PC当前环境，该方法包括：PC获取目标进程的进程信息；其中，目标进程的进程信息至少包括目标进程的进程名、目标进程的进程签名、目标进程对应的模块标识和目标进程对应的文件标识；PC从预设配置表中查找第一目标应用；其中，第一目标应用的配置信息中包括目标进程的进程名；若PC从预设配置表中查找到第一目标应用，基于第一目标应用的配置信息和目标进程的进程信息，判断第一目标应用与目标进程是否匹配；若第一目标应用与目标进程匹配，PC将第一目标应用的应用场景作为目标进程对应的应用场景。
权利要求书clms
1.一种PC场景识别方法，其特征在于，应用于个人计算机PC，所述PC中包括预设配置表，所述预设配置表包括多个应用中每个应用的应用名和配置信息，所述多个应用中第一应用的配置信息至少包括所述第一应用的多个进程的进程名，以及所述第一应用的应用签名、模块标识和文件标识，所述方法包括：所述PC获取目标进程的进程信息；其中，所述目标进程的进程信息至少包括所述目标进程的进程名、所述目标进程的进程签名、所述目标进程对应的模块标识和所述目标进程对应的文件标识；所述PC从预设配置表中查找第一目标应用；其中，所述第一目标应用的配置信息中包括所述目标进程的进程名；若所述PC从所述预设配置表中查找到所述第一目标应用，基于所述第一目标应用的配置信息和所述目标进程的进程信息，判断所述第一目标应用与所述目标进程是否匹配；若所述第一目标应用与所述目标进程匹配，所述PC将所述第一目标应用的应用场景作为所述目标进程对应的应用场景。2.根据权利要求1所述的PC场景识别方法，其特征在于，所述第一应用的配置信息还包括所述第一应用的匹配规则；所述第一应用的匹配规则用于规定第一进程的进程信息与所述第一应用的配置信息需满足的条件，所述第一进程是与所述第一应用匹配的进程；所述第一进程的进程信息与所述第一应用的配置信息需满足的条件，包括以下至少一项：所述第一进程的进程名与所述第一应用的配置信息中的一个进程名相同，所述第一进程的进程签名与所述第一应用的应用签名相同，所述第一进程的模块标识与所述第一应用的模块标识相同，所述第一进程的文件标识与所述第一应用的文件标识相同；其中，所述第一目标应用与所述目标进程匹配，包括：所述目标进程的进程信息满足所述第一目标应用的匹配规则。3.根据权利要求2所述的PC场景识别方法，其特征在于，所述第一应用的匹配规则是基于所述第一应用的安全等级设定的；其中，所述第一应用的安全等级越高，所述第一应用的匹配规则中规定的条件越多。4.根据权利要求1-3中任一项所述的PC场景识别方法，其特征在于，所述方法还包括：若所述PC从所述预设配置表中未查找到所述第一目标应用，则从所述预设配置表中查找第二目标应用；其中，所述第二目标应用满足以下任一个条件：所述第二目标应用的应用签名与所述目标进程的进程签名相同，所述第二目标应用的模块标识与所述目标进程的模块标识相同，所述第二目标应用的文件标识与所述目标进程的文件标识相同；若所述PC从所述预设配置表中查找到所述第二目标应用，基于所述第二目标应用的配置信息和所述目标进程的进程信息，判断所述第二目标应用与所述目标进程是否匹配；若所述第二目标应用与所述目标进程匹配，所述PC将所述第二目标应用的应用场景作为所述目标进程对应的应用场景。5.根据权利要求1-4中任一项所述的PC场景识别方法，其特征在于，所述方法还包括：若所述第一目标应用与所述目标进程不匹配，所述PC关闭所述目标进程。6.根据权利要求5所述的PC场景识别方法，其特征在于，所述方法还包括：若所述第一目标应用与所述目标进程不匹配，所述PC记录所述目标进程的异常信息，向服务器上报所述目标进程的异常信息；其中，所述目标进程的异常信息包括：所述目标进程的进程信息中，导致所述第一目标应用与所述目标进程不匹配的信息。7.根据权利要求1-6中任一项所述的PC场景识别方法，其特征在于，所述PC获取目标进程的进程信息，包括：当所述PC监控到所述目标进程的创建事件时，获取所述目标进程的进程信息。8.根据权利要求7所述的PC场景识别方法，其特征在于，当所述PC监控到所述目标进程的创建事件时，获取所述目标进程的进程信息，包括：所述PC的进程监控驱动模块对所述PC的进程进行监控，若所述进程监控驱动模块监控到所述目标进程的创建事件，所述PC的应用配置模块获取所述目标进程的进程信息。9.一种电子设备，其特征在于，所述电子设备为PC，所述电子设备包括：通信模块、显示屏、存储器和一个或多个处理器；所述通信模块、所述显示屏、所述存储器和所述处理器耦合；所述存储器用于存储计算机程序代码，所述计算机程序代码包括计算机指令，当所述计算机指令被所述电子设备执行时，使得所述电子设备执行如权利要求1-8任一项所述的方法。10.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质中存储有计算机指令，当所述计算机指令在PC中运行时，使得所述PC执行如权利要求1至8中任一项所述的方法。
说明书desc
技术领域本申请涉及场景识别技术领域，尤其涉及一种PC场景识别方法及电子设备。背景技术为了更好的了解当前个人计算机的使用状态，目前可以通过例如监控PC打开的进程、前后台程序、焦点窗口程序、系统状态等功能识别，来推测出当前用户的使用场景。由于在上述的现有方案中，一般是通过识别进程名的方式来做唯一判断。但是这种方式中，可能会出现伪造进程名等情况，导致原方案出现场景误判。发明内容本申请实施例提供一种PC场景识别方法及电子设备，可以提高PC场景识别的准确性。为达到上述目的，本申请的实施例采用如下技术方案：第一方面，提供了一种PC场景识别方法，应用于个人计算机PC，PC中包括预设配置表，预设配置表包括多个应用中每个应用的应用名和配置信息，多个应用中第一应用的配置信息至少包括第一应用的多个进程的进程名，以及第一应用的应用签名、模块标识和文件标识。该方法包括：PC获取目标进程的进程信息；其中，该目标进程的进程信息至少包括目标进程的进程名、目标进程的进程签名、目标进程对应的模块标识和目标进程对应的文件标识。PC从预设配置表中查找第一目标应用；其中，该第一目标应用的配置信息中包括目标进程的进程名。若PC从预设配置表中查找到第一目标应用，则基于第一目标应用的配置信息和目标进程的进程信息，判断第一目标应用与目标进程是否匹配。若第一目标应用与目标进程匹配，PC将第一目标应用的应用场景作为目标进程对应的应用场景。应理解，一个进程的进程名被仿冒的可能性很高；但是一个进程的进程签名、模块标识和文件标识中至少一个被仿冒的可能性较低。而一个进程的进程信息至少包括进程名、进程签名、模块标识和文件标识。因此，将一个进程的进程信息与预设配置表中对应应用的配置信息进行匹配，来查找与该进程匹配的应用，可以更加准确识别出进程对应的当前应用，也即准确识别进程对应的应用场景。在一种可能的实现方式中，第一应用的配置信息还包括第一应用的匹配规则；该匹配规则用于规定第一进程的进程信息与第一应用的配置信息需满足的条件，第一进程是与第一应用匹配的进程。其中，第一进程的进程信息与第一应用的配置信息需满足的条件，包括以下至少一项：第一进程的进程名与第一应用的配置信息中的一个进程名相同，第一进程的进程签名与第一应用的应用签名相同，第一进程的模块标识与第一应用的模块标识相同，第一进程的文件标识与第一应用的文件标识相同。其中，第一目标应用与目标进程匹配，包括：目标进程的进程信息满足第一目标应用的匹配规则。由此，PC可以根据对应的应用的匹配规则，确定进程信息与对应应用的配置信息需要满足的条件。只有进程的进程信息与应用的配置信息满足上述的条件，才认为进程与应用匹配，这样进程可以准确匹配上对应应用，不会造成进程与应用的错误匹配。在一种可能的实现方式中，第一应用的匹配规则是基于第一应用的安全等级设定的；其中，第一应用的安全等级越高，第一应用的匹配规则中规定的条件越多。由此，根据应用的不同安全等级设定不同的匹配规则，由于安全等级越高的应用规定的的条件越多，可以使得安全等级越高的应用受到更多的保护，不容易被进程错误匹配上，提高场景识别的准确性。而对于安全等级较低的应用，则可以不需要满足太多条件，以提高场景识别的效率。在一种可能的实现方式中，该方法还包括：若PC从预设配置表中未查找到第一目标应用，则从预设配置表中查找第二目标应用。其中，第二目标应用满足以下任一个条件：第二目标应用的应用签名与目标进程的进程签名相同，第二目标应用的模块标识与目标进程的模块标识相同，第二目标应用的文件标识与目标进程的文件标识相同。若PC从预设配置表中查找到第二目标应用，基于第二目标应用的配置信息和目标进程的进程信息，判断第二目标应用与所述目标进程是否匹配。若第二目标应用与目标进程匹配，PC将第二目标应用的应用场景作为目标进程对应的应用场景。也就是说，在出现PC通过进程名未查找到第一目标应用的情况时，可以通过模糊匹配的方法从预设配置表中查找第二目标应用，然后再根据第二目标应用的配置信息与目标进程的进程信息判断两者是否匹配。若通过模糊匹配从预设配置表中都查找不到对应的应用，则表示该进程是伪造的。在一种可能的实现方式中，该方法还包括：若第一目标应用与目标进程不匹配，PC关闭目标进程。在一种可能的实现方式中，该方法还包括：若第一目标应用与目标进程不匹配，PC记录目标进程的异常信息，向服务器上报目标进程的异常信息；其中，目标进程的异常信息包括：目标进程的进程信息中，导致第一目标应用与目标进程不匹配的信息。由此，通过将异常信息记录并上报，便于分析造成异常的原因，以进行优化，从而更好的保护应用。在一种可能的实现方式中，PC获取目标进程的进程信息，包括：当PC监控到目标进程的创建事件时，获取目标进程的进程信息。在一种可能的实现方式中，当PC监控到目标进程的创建事件时，获取目标进程的进程信息，包括：PC的进程监控驱动模块对PC的进程进行监控，若进程监控驱动模块监控到目标进程的创建事件，PC的应用配置模块获取目标进程的进程信息。第二方面，提供了一种电子设备，该电子设备为PC，该电子设备包括：通信模块、显示屏、存储器和一个或多个处理器；通信模块、显示屏、存储器和处理器耦合；存储器用于存储计算机程序代码，计算机程序代码包括计算机指令，当计算机指令被电子设备执行时，使得电子设备执行如上述的PC场景识别方法。第三方面，提供了一种计算机可读存储介质，所述计算机可读存储介质中存储有计算机指令，当其在计算机上运行时，使得计算机可以执行上述第一方面中任一项所述的PC场景识别方法。第四方面，提供了一种包含指令的计算机程序产品，当其在计算机上运行时，使得计算机可以执行上述第一方面中任一项所述的PC场景识别方法。第五方面，提供了一种装置，该装置包括处理器，用于支持第一设备实现上述第一方面中所涉及的功能。在一种可能的设计中，该装置还包括存储器，该存储器，用于保存第一设备必要的程序指令和数据。该装置是芯片系统时，可以由芯片构成，也可以包含芯片和其他分立器件。其中，第二方面至第五方面中任一种设计方式所带来的技术效果可参见第一方面中不同设计方式所带来的技术效果，此处不再赘述。附图说明图1为现有的一种PC系统的结构示意图；图2为现有的一种探针设计框架的示意图；图3为本申请实施例提供的一种电子设备的硬件结构示意图；图4为本申请实施例提供的一种PC场景识别方法的实现流程图；图5为本申请实施例提供的一种PC应用识别的流程示意图；图6为本申请实施例提供的一种芯片系统的结构示意图。具体实施方式下面将结合本申请实施例中的附图，对本申请实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。以下，术语“第一”、“第二”仅用于描述目的，而不能理解为指示或暗示相对重要性或者隐含指明所指示的技术特征的数量。由此，限定有“第一”、“第二”的特征可以明示或者隐含地包括一个或者更多个该特征。在本申请的描述中，除非另有说明，“多个”的含义是两个或两个以上。请参阅图1，图1为现有的一种PC系统的结构示意图。如图1所示，PC的系统分为三个模块：场景识别引擎、调度引擎和芯片调度引擎。其中，场景识别引擎以插件运行在电脑管家中，调度引擎和芯片调度引擎以独立服务运行。系统应用层包括系统探针软件开发工具包，用来监控PC的应用状态。系统探针SDK包括电源状态探针、外设状态探针、应用状态探针、应用识别探针、音视频状态探针、应用运行状态探针。其中，探针就是指监控PC状态的最小单位。电源状态探针用于监控电源状态，外设状态探针用于监控外设状态，应用状态探针用于监控应用状态，应用识别探针用于监控应用识别，音视频状态探针用于监控音视频状态，应用运行状态探针用于监控应用运行状态。该系统探针SDK用于上报PC的状态。场景管理插件中包括场景库和策略库。其中，场景库包括游戏场景、办公场景等。上述系统探针SDK上报的PC的状态用于从场景库中确定出PC的当前场景。依据场景库中确定出PC的当前场景，可以从策略库中选择对应的策略，并下发策略至执行调度模块。执行调度模块可以接收策略库下发的策略，然后控制OS层执行该策略。策略库包括游戏策略库、办公策略库等。其中，策略库中的策略与场景库中的场景一一对应。策略库中的策略可以是由策略配置模块配置在策略库中的。其中，PC系统的OS层中包括进程监控驱动，当进程监控驱动监控到有进程创建时，会上报给系统探针SDK。当系统探针SDK感知到探针状态发生切换，就会把状态上报给场景管理插件，进而识别出对应的PC用户场景。其中，应用状态发生变化一般都是系统探针SDK主动上报给场景管理插件，场景管理插件也可以向系统探针SDK查询状态。场景识别引擎的策略库和调度引擎的场景交互模块进行交互。场景识别引擎的场景库将识别出的PC用户场景，上报给策略库。策略库计算出对应的一组策略值，然后下发给调度引擎的场景交互模块。场景交互模块收到策略后，可以由调度策略融合模块、后台管控引擎和调度执行器调度底层执行该策略；之后，由场景交互模块返回策略执行结果。其中，用户场景一般都是场景库主动上报给策略库，但是策略库也可以向场景库查询用户场景。在现有的PC系统中，当进程监控驱动监控到进程创建时，就会上报给应用识别探针。应用识别探针确定创建的进程名，然后基于该进程名查询PC的预设配置表。其中，PC的预设配置表中预先存储有多个进程以及每个进程名对应的应用场景。那么，应用识别探针可以通过进程名匹配到该进程对应的应用场景。但是在上述场景识别过程中，由于进程名可以被随意修改，那么应用识别探针就无法通过修改的进程名在配置表匹配到对应的场景，也就是无法对该进程进行场景识别。以及，如果伪造了某一进程，那么应用识别探针可能会根据该伪造进程的进程名，匹配到错误的场景。由此，本申请实施例为了解决上述问题，提供了一种PC场景识别方法。该方法中，PC中保存有预设配置表，该预设配置表包括多个应用中每个应用的应用名和配置信息，一个应用的配置信息至少包括该应用的多个进程的进程名，以及该应用的应用签名、模块标识和文件标识。PC可以将一个进程的进程信息与预设配置表中对应应用的配置信息进行匹配，来查找与该进程匹配的应用，从而确定该进程对应的应用场景。应理解，一个进程的进程名被仿冒的可能性很高；但是一个进程的进程签名、模块标识和文件标识中至少一个被仿冒的可能性较低。而一个进程的进程信息至少包括进程名、进程签名、模块标识和文件标识。因此，将一个进程的进程信息与预设配置表中对应应用的配置信息进行匹配，来查找与该进程匹配的应用，可以更加准确识别出进程对应的当前应用，也即准确识别进程对应的应用场景。本申请实施例提供的方法，主要是在进程监控驱动监控到进程的创建事件时进行该进程的应用场景识别，而进程创建主要涉及系统探针SDK中的应用识别探针、应用运行状态探针。因此，本申请实施例的方法，是在上述系统框架下修改了系统探针SDK中的应用识别探针、应用运行状态探针的处理逻辑，并未修改上述系统框架的其他内容。请参阅图2，图2为现有的一种探针设计框架的示意图。如图2所示，PC系统中的探针主要分为基础探针和业务逻辑探针。其中，探针就是指监控PC状态的最小单位。例如，图2中的进程创建/退出探针也就是监控PC系统中进程的创建/退出。从图2可以看出，各个探针之间的关联关系。例如，进程创建/退出探针如果监控到进程的创建，焦点变化探针监控到焦点应用的变化，比如焦点应用变化为当前创建的进程对应的应用。那么应用切换探针监控到焦点应用的切换。然后，应用运行状态探针监控应用的运行状态，比如焦点应用在前台运行，之前的应用是否在后台运行或者关闭。然后通过应用运行状态探针监控得到的应用状态，判断是否为单一场景。图2中的混合场景的判断同理，可以根据系统工作状态探针、应用运行状态探针监控到的状态信息进行判断。其中，进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。进程可以实时反映操作系统的运行状态，运维人员通过进程信息分析计算机当前的运行状态，进而及时有效地进行决策，例如对系统上正在运行进程的进行关闭、保留或者挂起操作。从该框架上可以看出，进程创建/退出探针会由应用名字类型配置表进行识别，按照配置的识别规则，进行场景识别和校验。在现有的场景识别方案中，仅通过识别进程名的方式，来对场景进行识别，可能会出现伪造进程名等情况，导致原方案出现场景误判。为了解决上述问题，本申请实施例提供的一种PC场景识别方法。主要是在上述的框架基础上修改对进程的识别，也就是在上述的进程创建/退出探针中，修改对进程的识别方式，可以更加准确识别出进程对应的应用场景。下面将结合附图对本申请实施例的实施方式进行详细描述。本申请实施例提供的一种PC场景识别方法，应用于PC。本申请实施例中，请参阅图3，图3为本申请提供的一种电子设备300的硬件结构示意图。如图3所示，电子设备300可以包括：处理器310，控制芯片311，外部存储器接口320，内部存储器321，通用串行总线接口330，充电管理模块340，电源管理模块341，电池342，显示屏350，天线，无线通信模块360，音频模块370，扬声器370A，麦克风370C，耳机接口370B，触控板380，键盘390，以及摄像头391等。其中，上述除显示屏350之外的其他器件，调制解调处理器，图形处理器，图像信号处理器，控制器，存储器，视频编解码器，数字信号处理器，基带处理器，和/或神经网络处理器等。其中，不同的处理单元可以是独立的器件，也可以集成在一个或多个处理器中。控制器可以是电子设备300的神经中枢和指挥中心。控制器可以根据指令操作码和时序信号，产生操作控制信号，完成取指令和执行指令的控制。处理器310中还可以设置存储器，用于存储指令和数据。在一些实施例中，处理器310中的存储器为高速缓冲存储器。该存储器可以保存处理器310刚用过或循环使用的指令或数据。如果处理器310需要再次使用该指令或数据，可从所述存储器中直接调用。避免了重复存取，减少了处理器310的等待时间，因而提高了系统的效率。在一些实施例中，处理器310可以包括一个或多个接口。接口可以包括集成电路接口，集成电路内置音频接口，脉冲编码调制接口，通用异步收发传输器接口，移动产业处理器接口，通用输入输出接口，用户标识模块接口，和/或通用串行总线接口等。可以理解的是，本实施例示意的各模块间的接口连接关系，只是示意性说明，并不构成对电子设备300的结构限定。在另一些实施例中，电子设备300也可以采用上述实施例中不同的接口连接方式，或多种接口连接方式的组合。充电管理模块340用于从充电器接收充电输入，为电池342充电。电源管理模块341用于连接电池342，充电管理模块340与处理器310。电源管理模块341接收电池342和/或充电管理模块340的输入，为电子设备300的各个器件供电。电子设备300的无线通信功能可以通过天线和无线通信模块360，调制解调处理器以及基带处理器等实现。天线用于发射和接收电磁波信号。电子设备300中的每个天线可用于覆盖单个或多个通信频带。不同的天线还可以复用，以提高天线的利用率。在一些实施例中，电子设备300的天线和无线通信模块360耦合，使得电子设备300可以通过无线通信技术与网络以及其他设备通信。无线通信模块360可以提供应用在电子设备300上的包括无线局域网网络)，蓝牙，全球导航卫星系统，调频，近距离无线通信技术，红外技术等无线通信的解决方案。电子设备300可以通过GPU，显示屏350，以及应用处理器等实现显示功能。GPU为图像处理的微处理器，连接显示屏350和应用处理器。GPU用于执行数学和几何计算，用于图形渲染。处理器310可包括一个或多个GPU，其执行程序指令以生成或改变显示信息。显示屏350用于显示图像，视频等。上述触控板380中集成有触摸传感器。电子设备300可以通过触控板380和键盘390接收用户对电子设备300的控制命令。电子设备300可以通过ISP，摄像头391，视频编解码器，GPU，显示屏350以及应用处理器等实现拍摄功能。ISP用于处理摄像头391反馈的数据。在一些实施例中，ISP可以设置在摄像头391中。摄像头391用于捕获静态图像或视频。在一些实施例中，电子设备300可以包括1个或N个摄像头391，N为大于1的正整数。外部存储器接口320可以用于连接外部存储卡，例如Micro SD卡，实现扩展电子设备300的存储能力。内部存储器321可以用于存储计算机可执行程序代码，所述可执行程序代码包括指令。处理器310通过运行存储在内部存储器321的指令，从而执行电子设备300的各种功能应用以及数据处理。例如，在本申请实施例中，处理器310可以通过执行存储在内部存储器321中的指令，内部存储器321可以包括存储程序区和存储数据区。电子设备300可以通过音频模块370，扬声器370A，麦克风370C，耳机接口370B，以及应用处理器等实现音频功能。例如音乐播放，录音等。音频模块370用于将数字音频信号转换成模拟音频信号输出，也用于将模拟音频输入转换为数字音频信号。音频模块370还可以用于对音频信号编码和解码。在一些实施例中，音频模块370可以设置于处理器310中，或将音频模块370的部分功能模块设置于处理器310中。扬声器370A，也称“喇叭”，用于将音频电信号转换为声音信号。麦克风370C，也称“话筒”，“传声器”，用于将声音信号转换为电信号。耳机接口370B用于连接有线耳机。耳机接口370B可以是USB接口330，也可以是3.5mm的开放移动电子设备平台标准接口，美国蜂窝电信工业协会标准接口。以下实施例中的方法均可以在具有上述硬件结构的电子设备300中实现。本申请实施例提供的一种PC场景识别方法应用于PC。请参阅图4，图4是本申请实施例提供的一种PC场景识别方法的实现流程图。如图4所示，该PC场景识别方法可以包括S401-S409。S401、PC获取目标进程的进程信息。本申请实施例中，在当PC监控到进程的创建事件时，获取进程的进程信息。具体的，如图1所示，PC中设置有进程监控驱动模块和应用配置模块，该进程监控驱动模块对进程的创建事件进行监控，若该进程监控驱动模块监控到某一进程的创建事件时，则应用配置模块可以获取该进程的进程信息。其中，将该进程作为目标进程。其中，该目标进程的进程信息至少可以包括目标进程的进程名、目标进程的进程签名、目标进程对应的模块标识和目标进程对应的文件标识。其中，目标进程对应的模块标识也就是目标进程对应的导入表，目标进程对应的文件标识也就是目标进程对应的执行程序根目录文件标识。其中，导入表所要描述的内容为：当程序调用了动态链接库的相关函数，在进行编译和链接的时候，编译程序和链接程序就会将调用的相关信息写入最终生成的PE文件中，以告诉操作系统这些函数的执行指令字节码从哪里能够获取。其中，只有可执行程序文件运行才能称作为进程，可执行文件在动态加载时，可能会链接很多DLL文件。当exe被加载时，系统会根据exe的导入表信息来加载需要用到的DLL文件。其中，应用也封装有对应的DLL文件，根据应用的导入表确定。其中，目标进程的模块标识与第一目标应用的模块标识相同，可以理解为：目标进程加载时根据导入表信息链接到的一个DLL文件，与第一目标应用封装的一个DLL文件相同。目标进程的文件标识与第一目标应用的文件标识相同，可以理解为：目标进程对应的一个执行程序根目录文件，与第一目标应用对应的一个执行程序根目录文件相同。也就是第一目标应用对应的执行程序根目录文件中包括有目标进程对应的一个执行程序根目录文件。其中，不同的进程对应的应用可能相同也可能不同，在S401之后，PC可以查找该目标进程ne对应的目标应用。具体的，在S401之后，PC可以执行S402。S402、PC从预设配置表中查找第一目标应用。其中，PC中预先保存有预设配置表。该预设配置表包括多个应用中每个应用的应用名和配置信息。例如，PC中可以保存有表1所示的预设配置表。表1示例性的，以该多个应用中的第一应用为例，第一应用的配置信息至少可以包括该第一应用的多个进程的进程名，以及第一应用的应用签名、模块标识和文件标识。例如，假设应用1的配置信息还包括应用1的应用签名、模块标识和文件标识为例，应用1的配置信息如表2所示：表2如表2所示，应用1的配置信息包括五个进程的进程名，如进程a、进程b、进程c、进程d和进程e，应用1的应用签名a、应用1的模块标识a、应用1的文件标识a。在一些实施例中，上述预设配置表可以如表3所示。表3其中，上述预设配置表中的多个应用可以是PC用户高频率使用的应用。例如，多个应用可以是PC中使用频率高于预设频率阈值的应用。具体的，PC在获取到目标进程的进程信息之后，从进程信息中确定目标进程的进程名。然后，通过目标进程的进程名从预设配置表中查找第一目标应用。也就是，在预设配置表中查找该目标进程的进程名，若找到了该进程名，再进一步确定该进程名对应的应用。将确定的该进程名对应的应用作为第一目标应用，也即，在该第一目标应用的配置信息中包括该目标进程的进程名。S402之后，若PC从预设配置表中查找到第一目标应用，则表示预设配置表中存在包括该目标进程的应用，PC可以执行S403。若PC从预设配置表中未查找到第一目标应用，则表示预设配置表中不存在包括该目标进程的应用，PC可以执行S406。S403、PC基于第一目标应用的配置信息和目标进程的进程信息，判断第一目标应用与目标进程是否匹配。在本申请实施例中，预设配置表中的每个应用的配置信息中还可以包括该应用的匹配规则。以该多个应用中的第一应用为例，该第一应用的配置信息还可以包括该第一应用的匹配规则。例如，应用1的配置信息如表4所示：表4第一应用的匹配规则用于规定第一进程的进程信息与第一应用的配置信息需满足的条件。其中，上述第一进程是与第一应用匹配的进程。需要说明的是，一个进程只能对应一个应用，但是一个应用中包括多个进程。本申请实施例中，第一进程的进程信息与第一应用的配置信息需满足的条件，包括以下至少一项：第一进程的进程名与第一应用的配置信息中的一个进程名相同，第一进程的进程签名与第一应用的应用签名相同，第一进程的模块标识与第一应用的模块标识相同，第一进程的文件标识与第一应用的文件标识相同。其中，第一目标应用与目标进程匹配，具体是指：目标进程的进程信息满足第一目标应用的匹配规则。例如，假设第一目标应用的匹配规则中规定了，与第一目标应用匹配的进程需要满足以下条件：该进程的进程名与第一目标应用的配置信息中的一个进程名相同，该进程的进程签名与第一目标应用的应用签名相同，以及该进程的文件标识与第一目标应用的文件标识相同；但是没有要求该进程的模块标识与第一目标应用的模块标识相同。那么，如果目标进程的进程名与第一目标应用的配置信息中的一个进程名相同，目标进程的进程签名与第一目标应用的应用签名相同，以及目标进程的文件标识与第一目标应用的文件标识相同，则该第一目标应用与该目标进程匹配。如果目标进程的进程名，进程签名以及文件标识中有任意一项与第一目标应用的配置信息中对应的一项不相同，则表示目标进程的进程信息不满足第一目标应用的匹配规则。因此，该第一目标应用与该目标进程不匹配。例如，若第一目标应用的匹配规则仍如前述一样。但是，目标进程的进程名与第一目标应用的配置信息中的一个进程名相同，目标进程的进程签名与第一目标应用的应用签名相同，目标进程的文件标识与第一目标应用的文件标识不相同。那么，目标进程的进程信息不满足第一目标应用的匹配规则。本申请实施例中，可以采用n位的二级制数值表示应用的匹配规则。例如，n可以等于4，n位二级制数值中的每一位表示该应用对与该应用匹配的进程的进程信息中每一项内容的要求。例如，如表4所示，应用1的匹配规则为1011，表示：与应用1匹配的进程的进程信息中，进程1的进程名与该应用1的一个进程的进程名相同、进程1的进程签名与应用1的应用签名相同、进程1的文件标识与应用1的文件标识相同。该应用1的匹配规则不要求进程1的模块标识与应用1的模块标识相同。其中，第一应用的匹配规则是基于第一应用的安全等级设定的。第一应用的安全等级越高，第一应用的匹配规则中规定的条件越多。应用的安全等级越高，也就表示对该应用进行保护的程度越高。其中，应用的安全等级可以是应用自身预先设置的，也可以是根据用户对应用的使用习惯决定的。例如，应用1的安全等级高于应用2。那么应用1的匹配规则中规定了与应用1匹配的进程，该进程的进程名与应用1的配置信息中的一个进程名相同，该进程的进程签名与应用1的应用签名相同，该进程的模块标识与应用1的模块标识相同。而应用2的匹配规则中只规定了与应用2匹配的进程，该进程的进程名与应用2的配置信息中的一个进程名相同，该进程的进程签名与应用2的应用签名相同。应用1的匹配规则中规定的条件比应用2的匹配规则中规定的条件多。本申请实施例中，判断第一进程的进程名与第一应用的配置信息中的一个进程名是否相同，也可以称为进程名校验。判断第一进程的进程签名与第一应用的应用签名是否相同，也可以称为签名校验。判断第一进程的模块标识与第一应用的模块标识是否相同，也可以称为模块标识校验。判断第一进程的文件标识与第一应用的文件标识是否相同，也可以称为文件标识校验。一般来说，模块标识校验和文件标识校验，都需要保证唯一性。因此，在匹配规则中不能同时满足，如果匹配规则中规定了需要同时满足，那么该识别引擎会认为配置错误。比如，若匹配规则中规定了第一进程的模块标识与第一应用的模块标识相同，那么就不会规定第一进程的文件标识与第一应用的文件标识相同。反过来，若匹配规则中规定了第一进程的文件标识与第一应用的文件标识相同，那么就不会规定第一进程的模块标识与第一应用的模块标识相同。在S403之后，如果第一目标应用与目标进程匹配，则PC可以将第一目标应用的应用场景作为目标进程对应的应用场景，PC可以执行S404。如果第一目标应用与目标进程不匹配，则目标进程的应用场景识别流程结束。在这种情况下，PC可以执行S405，关闭该目标进程。S404、PC将第一目标应用的应用场景作为目标进程对应的应用场景。S405、PC关闭该目标进程。其中，如果第一目标应用与目标进程不匹配，PC不仅可以关闭该目标进程，还可以记录该目标进程的异常信息，向服务器上报目标进程的异常信息。其中，目标进程的异常信息包括：目标进程的进程信息中，导致第一目标应用与目标进程不匹配的信息。例如，若第一目标应用的匹配规则中，规定了目标进程的进程签名需要与第一目标应用的应用签名相同。但是，该目标进程的进程签名与第一目标应用的应用签名不相同，导致第一目标应用与目标进程不匹配。那么，PC需要记录并上报该异常信息，该异常信息中记录了目标进程的进程签名与第一目标应用的应用签名不相同。在S402之后，若PC从预设配置表中未查找到第一目标应用，则表示预设配置表中不存在包括该目标进程的应用。在这种情况下，PC可以按照其他的标准从预设配置表中查找第二目标应用。具体的，S402之后，若PC从预设配置表中未查找到第一目标应用，PC可以执行S406。S406、PC从预设配置表中查找第二目标应用。其中，第二目标应用满足以下任一个条件：第二目标应用的应用签名与目标进程的进程签名相同，第二目标应用的模块标识与目标进程的模块标识相同，第二目标应用的文件标识与目标进程的文件标识相同。其中，PC从预设配置表中如何查找第二目标应用的查找顺序可以自定义设置。例如，若从预设配置表中没有查找到该目标进程的进程名，可以首先进行签名校验，确定是否找到第二目标应用。如果没有，再进行模块标识校验，确定是否找到第二目标应用。如果没有，最后进行文件标识校验，确定是否找到第二目标应用。具体来说，首先直接从预设配置表中查找与该目标进程的进程签名相同的应用签名。若预设配置表中存在与该目标进程的进程签名相同的应用签名，那么该应用签名对应的应用就作为第二目标应用。若预设配置表中没有与该目标进程的进程签名相同的应用签名，那么可以继续从预设配置表中查找与该目标进程的模块标识相同的应用的模块标识。若预设配置表中存在与该目标进程的模块标识相同的模块标识，那么该模块标识对应的应用就作为第二目标应用。若预设配置表中没有与该目标进程的模块标识相同的模块标识，那么可以继续从预设配置表中查找与该目标进程的文件标识相同的应用的文件标识。若预设配置表中存在与该目标进程的文件标识相同的文件标识，那么该文件标识对应的应用就作为第二目标应用。其中，上述的查找顺序仅为示例，也可以按照其他的查找顺序从预设配置表中查找第二目标应用。可以理解的是，第一目标应用与第二目标应用并不是表示两个不同的应用，只是为了区分两种查找应用的方式。第一目标应用是通过进程名在预设配置表中找到的，而第二目标应用是通过签名校验，或模块标识校验，或文件标识校验找到的。其中，在S406之后，若PC从预设配置表中查找到第二目标应用，PC可以执行S407。若PC从预设配置表中未查找到第二目标应用，则表示预设配置表中不存在包括该目标进程的应用，PC可以执行S409，关闭该目标进程。S407、PC基于第二目标应用的配置信息和目标进程的进程信息，判断第二目标应用与目标进程是否匹配。其中，S407中，PC基于第二目标应用的配置信息和目标进程的进程信息，判断第二目标应用与目标进程是否匹配的方法，可以参考S403中，PC基于第一目标应用的配置信息和目标进程的进程信息，判断第一目标应用与目标进程是否匹配的方法，本申请实施例这里不再赘述。其中，在S407之后，若第二目标应用与目标进程匹配，PC可以执行S408。若第二目标应用与目标进程不匹配，PC可以执行S409关闭该目标进程。S408、PC将第二目标应用的应用场景作为目标进程对应的应用场景。S409、PC关闭该目标进程。本申请实施例提供的该PC场景识别方案中，PC可以根据应用的安全等级设置匹配规则，基于该匹配规则，对获取的进程的进程信息与查找到的应用的配置信息进行匹配，将该进程匹配到的应用的应用场景作为该进程对应的应用场景。由此，可以更加准确识别进程对应的应用场景，进行优化适配和调度，防止有心者通过对进程名仿造、签名伪造等手段，来攻击场景识别策略。同时也保证了策略环境不被攻击。请参阅图5，图5为本申请实施例提供的一种PC应用识别的流程示意图。当PC监控到有进程创建时，则开始图5所示的应用识别流程。首先获取该进程的进程信息，以进程2为例，进程信息中包括至少包括该进程2的进程名、进程签名、对应的模块标识和对应的文件标识。如图5所示，先基于该进程2的进程名进行进程名匹配。也就是，从预设配置表中查找是否有该进程名，若预设配置表中存在该进程名，则预设配置表中存储的该进程名对应的应用2，即为进程2对应的应用。也即表示进程2通过进程名查找到了对应的应用2。然后，PC获取应用2对应的匹配规则。匹配规则中规定了进程2的进程信息需要满足的条件，比如，进程2是否需要进行签名校验，模块标识校验或文件标识校验等。PC通过进行匹配规则中规定的校验，来确定进程2是否与应用2匹配。若匹配规则中规定的校验均通过，则表示进程2与应用2匹配。若匹配规则中规定的校验中有一项未通过，则表示进程2与应用2不匹配。其中，签名校验，模块标识校验，文件标识校验的具体含义可参考上述实施例所描述的内容。如图5所示，若进程2通过进程名未查找到对应的应用，则可以进行图5所示的模糊匹配。具体来说，先通过进程2的进程签名进行签名校验，也即在预设配置表中查找与进程2的进程签名相同的应用签名。若预设配置表中存在与进程2的进程签名相同的应用签名，那么该应用签名对应的应用就为进程2对应的应用。接着，获取进程2对应的该应用的匹配规则。再根据匹配规则确定进程2需要进行哪些校验，最终确定进程2是否与该应用匹配。若预设配置表中不存在与进程2的进程签名相同的应用签名，则表示PC没有根据进程2的签名校验查找到对应的应用。那么，PC再通过进程2的模块标识进行模块标识校验，也即在预设配置表中查找与进程2的模块标识相同的模块标识。若预设配置表中存在与进程2的模块标识相同的模块标识，那么该模块标识对应的应用就为进程2对应的应用。再根据匹配规则确定进程2需要进行哪些校验，最终确定进程2是否与该应用匹配。若预设配置表中不存在与进程2的模块标识相同的模块标识，则表示PC没有根据进程2的模块标识校验查找到对应的应用。那么，PC再通过进程2的文件标识进行文件标识校验，也即在预设配置表中查找与进程2的文件标识相同的文件标识。若预设配置表中存在与进程2的文件标识相同的文件标识，那么该文件标识对应的应用就为进程2对应的应用。再根据匹配规则确定进程2需要进行哪些校验，最终确定进程2是否与该应用匹配。若预设配置表中不存在与进程2的文件标识相同的文件标识，则表示该进程2没有匹配的应用，PC可以直接关闭该进程。可以理解的是，上述任一步骤中确定进程2与该应用不匹配时，PC均可以直接关闭该进程。由此，PC可以准确识别出该进程匹配的应用，进而确定该进程对应的应用场景。本申请实施例中，以视频1为例，来说明进程对应的应用场景。示例代码如下：＜Application id＝“4002”name＝“视频1”sceneType＝“4”matchRule＝“6”cetName＝“Company1”＞＜process num＝“0”name＝“QQLive.exe”moduleSign＝“QQLiveBase.dll”/＞＜process num＝“1”name＝“QQLivePlayer.exe”/＞＜process num＝“2”name＝“QQLivePlayerHD.exe”/＞＜process num＝“3”name＝“QQLiveBrowser.exe”/＞＜Application＞其中，在Application属性信息中，name表示应用名，sceneType表示场景类型，matchRule表示匹配规则，cetName表示公司签名。其中，Bit0表示进程名匹配，bit1表示签名匹配，bit2表示模块标识匹配，bit3表示文件标识匹配。在Process标签信息中，num表示自定义进程号，name表示进程名，moduleSign表示加载的模块标识。其中，由上述代码可知，视频1包括4个对应的进程。上述代码即为PC的预设配置表中的内容，包括一应用的应用名和对应的配置信息。从上述代码可以看出，该应用的应用名为视频1，场景类型为视频场景。视频1对应的匹配规则为6，对应的二进制数为110，即表示与视频1匹配的进程需要进行签名校验和模块标识校验。也就是说，只有签名校验和模块标识校验均成功，该进程才与视频1匹配。那么，视频1对应的视频场景，也就是与视频1匹配的进程所对应的应用场景。在一些实施例中，如果想识别进程3为游戏场景，考虑到在游戏场景下，会进行软件资源和硬件资源的适配。因此，为了防止有人故意仿造进程3，来冒名顶替达到误识别游戏场景的效果。PC可以通过查找该进程3对应的应用3，获取到应用3对应的匹配规则，基于匹配规则对该进程3的进程信息进行校验。比如，应用3对应的匹配规则中规定了需要进行进程名校验、签名校验、文件标识校验。那么，PC通过对进程3进行进程名校验、签名校验、文件标识校验，来判断进程3是否与应用3匹配。若进程3与应用3匹配，进而可以确定进程3对应的应用场景为游戏场景。并且，PC可以将攻击的信息打点上报回服务器，来知晓本次操作。其中，攻击的信息也就说上述实施例所描述的异常信息。其中，打点即当发生需要收集的行为/状态时，将其记录在日记中。上报即选择合适的时机将日志上报给服务器。本申请实施例中的发生需要收集的行为/状态，也即获取异常信息时，将异常信息记录在日志中。理论上所有的应用都可以通过此方案进行识别，只是部分应用也没有必要进行多规则的保护。也就是，安全等级极低的应用，其匹配规则不需要设置太多需要满足的条件，以提高场景识别的效率。一般而言，一个应用的应用签名与该应用中每个进程的进程签名是相同的，一个应用的模块标识与该应用中每个进程的模块标识是相同的，一个应用的文件标识与该应用中每个进程的文件标识也是相同的。因此，上述实施例中，预设配置表中应用的配置信息中包括的是对应应用的应用签名、模块标识和文件标识。但是，在一些情况下，一个应用中不同进程的进程签名可能不同，不同进程的模块标识可能不同，或者不同进程的文件标识可能不同。在这种情况下，上述第一应用的配置信息可以包括第一应用中多个进程的进程名，以及每个进程的进程签名、模块标识和文件标识。例如，PC中的预设配置表中可以包括多个应用的配置信息，每个应用的配置信息如表5所示：表5在该实施例中，第一进程的进程信息与第一应用的配置信息需满足的条件，包括以下至少一项：第一进程的进程名与第一应用的配置信息中的一个进程名相同，第一进程的进程签名与第一应用的配置信息中第二进程的应用签名相同，第一进程的模块标识与第一应用的配置信息中第二进程的模块标识相同，第一进程的文件标识与第一应用的配置信息中第二进程的文件标识相同。其中，上述的应用签名1，应用签名2和应用签名3可以是相同的，也可以是不相同的。上述的模块标识1，模块标识2和模块标识3可以是相同的，也可以是不相同的。上述的文件标识1，文件标识2和文件标识3可以是相同的，也可以是不相同的。本申请另一些实施例提供了一种电子设备，该电子设备为PC，该电子设备包括：存储器、通信模块和一个或多个处理器。该存储器、通信模块与处理器耦合。其中，存储器用于存储计算机程序代码，该计算机程序代码包括计算机指令。当计算机指令被处理器执行时，P电子设备可执行上述方法实施例中手机A执行的各个功能或者步骤。其中，该电子设备的结构可以参考图3所示的PC的结构。本申请实施例还提供一种芯片系统，如图6所示，该芯片系统600包括至少一个处理器601和至少一个接口电路602。处理器601和接口电路602可通过线路互联。例如，接口电路602可用于从其它装置接收信号。又例如，接口电路602可用于向其它装置发送信号。示例性的，接口电路602可读取存储器中存储的指令，并将该指令发送给处理器601。当所述指令被处理器601执行时，可使得电子设备执行上述实施例中的各个步骤。当然，该芯片系统还可以包含其他分立器件，本申请实施例对此不作具体限定。本申请实施例还提供一种计算机可读存储介质，该计算机可读存储介质包括计算机指令，当所述计算机指令在上述PC上运行时，使得该PC执行上述方法实施例中执行的各个功能或者步骤。本申请实施例还提供一种计算机程序产品，当所述计算机程序产品在计算机上运行时，使得所述计算机执行上述方法实施例中手机执行的各个功能或者步骤。通过以上实施方式的描述，所属领域的技术人员可以清楚地了解到，为描述的方便和简洁，仅以上述各功能模块的划分进行举例说明，实际应用中，可以根据需要而将上述功能分配由不同的功能模块完成，即将装置的内部结构划分成不同的功能模块，以完成以上描述的全部或者部分功能。在本申请所提供的几个实施例中，应该理解到，所揭露的装置和方法，可以通过其它的方式实现。例如，以上所描述的装置实施例仅仅是示意性的，例如，所述模块或单元的划分，仅仅为一种逻辑功能划分，实际实现时可以有另外的划分方式，例如多个单元或组件可以结合或者可以集成到另一个装置，或一些特征可以忽略，或不执行。另一点，所显示或讨论的相互之间的耦合或直接耦合或通信连接可以是通过一些接口，装置或单元的间接耦合或通信连接，可以是电性，机械或其它的形式。所述作为分离部件说明的单元可以是或者也可以不是物理上分开的，作为单元显示的部件可以是一个物理单元或多个物理单元，即可以位于一个地方，或者也可以分布到多个不同地方。可以根据实际的需要选择其中的部分或者全部单元来实现本实施例方案的目的。另外，在本申请各个实施例中的各功能单元可以集成在一个处理单元中，也可以是各个单元单独物理存在，也可以两个或两个以上单元集成在一个单元中。上述集成的单元既可以采用硬件的形式实现，也可以采用软件功能单元的形式实现。所述集成的单元如果以软件功能单元的形式实现并作为独立的产品销售或使用时，可以存储在一个可读取存储介质中。基于这样的理解，本申请实施例的技术方案本质上或者说对现有技术做出贡献的部分或者该技术方案的全部或部分可以以软件产品的形式体现出来，该软件产品存储在一个存储介质中，包括若干指令用以使得一个设备或处理器执行本申请各个实施例所述方法的全部或部分步骤。而前述的存储介质包括：U盘、移动硬盘、只读存储器、随机存取存储器、磁碟或者光盘等各种可以存储程序代码的介质。以上内容，仅为本申请的具体实施方式，但本申请的保护范围并不局限于此，任何在本申请揭露的技术范围内的变化或替换，都应涵盖在本申请的保护范围之内。因此，本申请的保护范围应以所述权利要求的保护范围为准。
