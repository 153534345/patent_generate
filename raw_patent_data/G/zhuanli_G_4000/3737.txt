标题title
一种提高ZNS固态硬盘NOR FLASH写入性能的方法
摘要abst
本发明涉及一种提高ZNS固态硬盘NOR FLASH写入性能的方法，以及使用该方法的电子设备和装置，所述方法包括：通过设置缓冲区，并逐步写满，同时擦除待写入区域，记录每次写入时的起始位置，以便在写入下一个log时，对NOR FLASH中下一区块进行同步擦除操作；采用该方法可以降低在SPI NOR FLASH操作时CPU的无效等待时间，从而降低反复大量写NOR FLASH时对系统性能的影响，提高NOR FLASH写入性能，同时进一步提高ZNS固态硬盘的使用寿命。
权利要求书clms
1.一种提高ZNS固态硬盘NOR FLASH写入性能的方法，具体方法包括以下步骤：步骤1、设置一个合适大小的内存缓冲区logbuf，运行时log逐个记录并写入到logbuf中；步骤2、当logbuf中数据写满，即数据大小达到与LOG_SIZE相同时，将logbuf写入到NORFLASH中；步骤3、在将上一个logbuf写入NOR FLASH之后，即将开始写入下一个logbuf的同时，开始擦除下一次即将保存的LOG_SIZE区域；步骤4、重复步骤2-3，直到所要写入的大量数据均写入到NOR FLASH中为止；其中所述步骤2的具体步骤如下：步骤2.1记录logbuf中当前数据长度；步骤2.2判断步骤2.1中当前数据长度与LOG_SIZE的大小；步骤2.3如果当前数据长度与LOG_SIZE大小相等，则表示已完成目标数据的写入，如果小于LOG_SIZE大小，则继续重复步骤2.1至步骤2.2直至logbuf写满数据；步骤2.4将步骤2.3的logbuf中的数据写入到待写入的NOR FLASH扇区中；其中步骤3中的擦除具体步骤如下：步骤3.1记录上次写操作结束时的位置sector，计算得到下次所要擦除操作的起始位置sector，其中i为LOG_SIZE的大小；步骤3.2在logbuf写入下一组log数据的同时，擦除sector至sector扇区的数据。2.根据权利要求1所述的方法，所述步骤1具体还包含以下步骤：进一步的所述步骤1中包含以下步骤：步骤1.1在NOR FLASH Flash中选取一个空物理扇区作为存储缓冲区；步骤1.2将log数据写入其对应的物理地址。3.根据权利要求1所述的方法，所述NOR FLASH的每个物理块再被划分成：一个块头部，一系列的物理页，以及根据物理块大小的不同，每个物理块尾部可能有一个剩余区，其大小小于一个物理页的大小；每个物理页又划分为备用区和数据区两部分，数据区用于存储文件数据，备用区用于存储管理物理页的管理数据。4.根据权利要求3所述的方法，所述备用区的MDR表采用带CRC校验的双备份结构，MDR表中每个用户文件信息具有独立CRC校验，如果其中一个MDR表全部或部分数据损坏，能够通过另外MDR表修复。5.一种电子设备，其特征在于，包括：一个或多个处理器；存储器，用于存储一个或多个程序；其中，当所述一个或多个程序被所述一个或多个处理器执行时，使得所述一个或多个处理器执行如权利要求1至4任一项所述方法。6.一种计算机可读存储介质，其上存储有可执行指令，其特征在于，所述可执行指令被处理器执行时使处理器执行如权利要求1至4任一项所述方法。
说明书desc
技术领域本发明涉及计算机存储领域，尤其涉及一种提高ZNS固态硬盘NOR FLASH写入性能的方法。背景技术ZNS SSD即分区命名空间固态硬盘，ZNS是从OCSSD基础上发展而来的，实现了把FTL从SSD内部迁移到上层的Host端，把SSD内部开放给了Host端，这样用户可以根据自己需要，比较灵活的拥有自己特定的FTL。ZNS SSD内部可以根据不同的应用场景将不同的zone与不同的物理位置进行映射；Config A是一种最有利于顺序读写的配置，这种方法可以保证读写过程Die的并发性最好，一般来说标准SSD都会按照这种方式写入。Config B更有利于Latency敏感的场景，每个用户控制自己的Die，从而减少相互之间的影响。ZRWA允许在SSD缓存中对数据进行随机写入和就地覆盖。与Zone Append命令相比，这种方法在SSD上需要更多的资源。ZNS SSD要求所有zone只能顺序写入，不能出现复写操作，重新使用前需要对zone执行zone reset命令等，这样应用及驱动都需要更多的配合ZNS SSD，不过当前各大存储系统及开源工具都已经或者计划完成ZNSSSD的适配与支持，标准化的接口实现了强大的软件和硬件生态系统。相比普通SSD产品，ZNS SSD主要有五大优势：消除了SSD的GC进程的WAF、消除了传统的OP空间、由于较小的映射表，DRAM更少、更高的吞吐量和更低的延迟、大幅提升SSD盘寿命。ZNS固态硬盘中的SPI NOR FLASH，对于已写入数据的sector必须要擦除才能再写入数据，而SPI NOR FLASH三大操作“读、写、擦除”中，擦除是最耗时的动作，SPI NOR FLASH在操作时，下一步的NOR FLASH操作必须在硬件上等上个NOR FLASH动作完成.当系统在做IO等消耗CPU的操作时，保存log时每次需要等擦除完NOR FLASH再写入log到NOR FLASH，擦除过程由SPI硬件完成，擦除过程中CPU处于无效等待状态，该无效等待时间对系统性能影响比较大。ZNS固态硬盘中的SPI NOR FLASH，对于写过数据的sector必须要擦除才能再写入数据，而SPI NOR FLASH三大操作“读、写、擦除”中，擦除是最耗时的动作，SPI NOR FLASH在操作时，下一步的NOR FLASH操作必须在硬件上等上个NOR FLASH操作完成。而当系统在做IO等占用CPU操作时，保存log时每次需要等擦除完NOR FLASH再写入log到NOR FLASH，擦除过程由SPI硬件完成，擦除过程中CPU处于无效等待状态，该无效等待时间对系统性能影响比较大，其中某些擦除sector耗时较多，如擦除sector需要45ms，则CPU必须要等45ms擦除完后，才能把P1的数据写入NOR FLASH，同理后续的步骤也一样，因此现有技术中ZNS固态硬盘在写NOR FLASH时降低了系统CPU的有效利用率，影响了系统总体性能。发明内容为解决上述技术问题，本发明实施例提供了一种提高ZNS固态硬盘NOR FLASH写入性能的方法。本发明具体涉及一种通过设置缓冲区，并逐步写满，同时擦除待写入区域来降低写NOR FLASH时对系统性能影响的操作方法。具体方法包括：步骤1设置一个合适大小的内存缓冲区，运行时log逐个记录并写入到logbuf中；步骤2当logbuf中数据写满，即数据大小达到与LOG_SIZE相同时，将logbuf写入到NOR FLASH中；步骤3在将上一个logbuf写入NOR FLASH之后，即将开始写入下一个logbuf的同时，开始擦除下一次即将保存的LOG_SIZE区域；步骤4重复步骤2-3，直到所要写入的大量数据均写入到NOR FLASH中为止。进一步的所述步骤1中包含以下步骤：步骤1.1在NOR FLASH Flash中选取一个空物理扇区作为存储缓冲区；步骤1.2将log数据写入其对应的物理地址。进一步的所述步骤2的具体步骤如下：步骤2.1记录logbuf中当前数据长度；步骤2.2判断步骤2.1中当前数据长度与LOG_SIZE的大小；步骤2.3如果当前数据长度与LOG_SIZE大小相等，则表示已完成目标数据的写入，如果小于LOG_SIZE大小，则继续重复步骤2.1至步骤2.2直至logbuf写满数据；步骤2.4将步骤2.3的logbuf中的数据写入到待写入的NOR FLASH扇区中。进一步的步骤3中的擦除具体步骤如下：步骤3.1记录上次写操作结束时的位置sector，计算得到下次所要擦除操作的起始位置sector，其中i为LOG_SIZE的大小；步骤3.2在logbuf写入下一组log数据的同时，擦除sector至sector扇区的数据。可选的，所述NOR FLASH存储器的每个物理块再被划分成：一个块头部，一系列的物理页，以及根据物理块大小的不同，每个物理块尾部可能有一个剩余区，其大小小于一个物理页的大小；每个物理页又划分为备用区和数据区两部分，数据区用于存储文件数据，备用区用于存储管理物理页的管理数据。可选的，所述备用区的MDR表采用带CRC校验的双备份结构，MDR表中每个用户文件信息具有独立CRC校验，如果其中一个MDR表全部或部分数据损坏，能够通过另外MDR表修复。可选的，本发明还提供一种电子设备，包括：一个或多个处理器；存储器，用于存储一个或多个程序；其中，当所述一个或多个程序被所述一个或多个处理器执行时，使得所述一个或多个处理器执行如步骤1-4所述的方法。可选的，本发明还提供一种计算机可读存储介质，其上存储有可执行指令，所述可执行指令被处理器执行时使处理器执行如步骤1-4所述的方法。本发明所提供的一种降低ZNS固态硬盘反复大量写NOR FLASH对系统性能的影响的方法，与现有技术相比具有以下有益效果：1.LOG_SIZE大小和擦除方式也会影响系统性能，本发明抛开了这2个因素的影响，以同样LOG_SIZE和以sector方式擦除为对比，以相同的时序作为基准，保存相同大小的大量数据时，本发明的方法所用时间仅为现有技术所用时间的12.4％，大幅度降低了写NOR FLASH的时间，即提高了写入效率；2.同时ZNS盘在做IO高速输出log时，采用本发明的方法可以降低大量反复存写NOR FLASH对系统性能的影响。附图说明附图以示例而非限制的方式大体示出了本文中所讨论的实施例。图1为现有技术固态硬盘写入xyz数据的示意图；图2为本发明固态硬盘写入xyz数据的示意图。具体实施方式为了能够更加详尽地了解本发明实施例的特点与技术内容，下面结合附图对本发明实施例的实现进行详细阐述，所附附图仅供参考说明之用，并非用来限定本发明实施例。以下对本发明实施例涉及到的概念进行解释说明：1)存储系统包括但不限于：单机文件系统、分布式文件系统、分布式块存储系统以及分布式对象存储系统等。2)专门用作记录日志的逻辑设备被统称为“日志盘”。日志盘服务的对象被称为“数据盘”。如非特别说明，默认使用固态硬盘作为日志盘，使用传统硬盘作为数据盘。3)在本发明实施例中，日志对应于英文释义Log一词。Log指系统运行过程中的行为记录，而非用于保证存储系统高可靠和高性能，日志盘具有非易失性。4)固态硬盘的特性与传统磁盘不同。传统磁盘没有写入次数限制，读、写、删除操作均以页为单位。固态硬盘存在写入次数限制，当达到一定写入、擦除次数时即为寿命用尽；固态硬盘的擦除操作以块为单位。本发明实施例提供一种可以降低ZNS固态硬盘反复大量数据存写SPI NOR FLASH对系统性能影响的方法，通过该方法，可以有效降低系统高速打印log时对系统的整体性能的影响。本发明实施例中，包括如下步骤：步骤1设置一个合适大小的内存缓冲区logbuf，运行时log逐个记录并写入到logbuf中；步骤2当logbuf中数据写满，即数据大小达到与LOG_SIZE相同时，将logbuf写入到NOR FLASH中；步骤3在将上一个logbuf写入NOR FLASH之后，即将开始写入下一个logbuf的同时，开始擦除下一次即将保存的LOG_SIZE区域；步骤4重复步骤2-3，直到所要写入的大量数据均写入到NOR FLASH中为止。进一步的所述步骤1中包含以下步骤：步骤1.1在NOR FLASH Flash中选取一个空物理扇区作为存储缓冲区；步骤1.2将log数据写入其对应的物理地址。进一步的所述步骤2的具体步骤如下：步骤2.1记录logbuf中当前数据长度；步骤2.2判断步骤2.1中当前数据长度与LOG_SIZE的大小；步骤2.3如果当前数据长度与LOG_SIZE大小相等，则表示已完成目标数据的写入，如果小于LOG_SIZE大小，则继续重复步骤2.1至步骤2.2直至logbuf写满数据；步骤2.4将步骤2.3的logbuf中的数据写入到待写入的NOR FLASH扇区中。进一步的步骤3中的擦除具体步骤如下：步骤3.1记录上次写操作结束时的位置sector，计算得到下次所要擦除操作的起始位置sector，其中i为LOG_SIZE的大小；步骤3.2在logbuf写入下一组log数据的同时，擦除sector至sector扇区的数据。本发明对比例中，采用以下步骤：步骤1、在待写入NOR FLASH中找到offset所在的Sector；步骤2、把Sector的A部分内容读出，与新log数据XYZ的X部分组成一个sector长度，存放到P1处的临时缓冲区buf；步骤3、擦除NOR FLASH的Sector，等待擦除结束后，写入P1处的数据到NORFLASH的Sector；步骤4、擦除Sector,等待擦除结束后，写入P2处的数据到Sector；步骤5、把Sector的E部分内容读出，与新数据XYZ的Z部分组成一个sector长度，存放到P3处的临时缓冲区buf；步骤6、擦除Sector，等待擦除结束后，写入P3处的数据到Sector。显然，与对比例相比，本发明的实施例，并不需要等待Sector中的数据擦除完成后再去写入Pi中的数据，即实施例将logbuf作为中转区间，在写入logbuf的同时，擦除待写入区域Sector，从而可以同步进行写入和擦除的过程，因此可以提高写入Nor FLASH的效率。实施例与对比例均采用表1所示的操作时序，进行12KB的数据写入；计算可以得出以下写入耗时的结果：对比例中保存12K数据耗时为45ms+16*0.4+45ms+16*0.4+45ms+16*0.4＝154.2ms；而实施例中保存12K数据耗时为16*0.4+16*0.4+16*0.4＝19.2ms。由此可见，采用本发明所述的降低写NOR FLASH对系统性能影响的方法的实施例所耗时间大幅度降低，所需时间约为对比例的12.4％，因此很大程度降低了反复写NORFLASH对系统性能的影响。表1为实施例与对比例所采用的的erase操作时序表。表1 ZNS固态硬盘中erase操作时序表/RESET pin Low period to reset the devicetRESET1μsWrite Status Register TimetW1015msPage Program TimetPP0.43msSector Erase TimetSE45400msBlock Erase TimetBE11201600msBlock Erase TimetBE21502000msChip Erase TimetCE525s本领域内的技术人员应明白，本发明的实施例可提供为方法、系统、或计算机程序产品。因此，本发明可采用硬件实施例、软件实施例、或结合软件和硬件方面的实施例的形式。而且，本发明可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本发明是参照根据本发明实施例的方法、设备、和计算机程序产品的流程图和/或方框图来描述的。应理解可由计算机程序指令实现流程图和/或方框图中的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的步骤。相应地，本发明实施例还提供一种计算机存储介质，其中存储有计算机程序，该计算机程序配置为执行本发明实施例的日志写入方法或者日志同步方法。以上所述，仅为本发明的较佳实施例而已，并非用于限定本发明的保护范围。
