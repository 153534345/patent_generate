标题title
数据处理方法、装置、计算机设备和存储介质
摘要abst
本申请涉及一种数据处理方法、装置、计算机设备、存储介质和计算机程序产品。该方法包括：根据磁盘中的有序数据集确认磁盘中的中位数数据集；将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值；在将内存中的新的数据转移到有序数据集的情况下，根据中位数浮动值，更新磁盘中的中位数与中位数数据集，并将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至将磁盘中的中位数数据集存入内存中……并将内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到内存中未存入新的数据。采用本方法能够提高数据处理的处理效率。
权利要求书clms
1.一种数据处理方法，其特征在于，所述方法包括：在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。2.根据权利要求1所述的方法，其特征在于，所述在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值，包括：在所述内存存储有新的数据的情况下，在所述内存中，对所述新的数据和所述中位数数据集中的数据进行排序，并更新排序后的数据的中位数；在所述内存中的所述新的数据和所述磁盘中的有序数据集的数据的数量总和为奇数，且所述新的数据大于所述中位数数据集的中位数的情况下，或者，在所述内存中的所述新的数据和所述磁盘中的有序数据集的数据的数量总和为偶数，且所述新的数据小于所述中位数数据集的中位数的情况下，将所述排序后的数据的中位数，与初始中位数之间的位置差异信息，确认为所述内存中的数据的中位数的变化信息；所述初始中位数为所述内存中的中位数数据集的中位数；将所述变化信息作为所述中位数浮动值。3.根据权利要求2所述的方法，其特征在于，所述排序后的数据的中位数，与初始中位数之间的位置差异信息，通过下述方式得到：确认所述初始中位数的第一数据偏移量；所述第一数据偏移量为所述初始中位数，相对于所述内存中的所述排序后的数据的首位数据的个数偏移量；确认所述内存中的所述排序后的数据的中位数的第二数据偏移量；所述第二偏移量为所述内存中的所述排序后的中位数，相对于所述内存中的所述排序后的数据的首位数据的个数偏移量；将所述第一数据偏移量和第二数据偏移量之间的差异信息，确认为所述位置差异信息。4.根据权利要求1所述的方法，其特征在于，所述在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，包括：在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值和转移所述新的数据前的有序数据集的中位数，确认转移所述新的数据后的有序数据集的中位数，作为所述有序数据集的更新后的中位数；根据所述转移所述新的数据后的有序数据集的更新后的中位数，以及所述转移所述新的数据后的有序数据集中，所述更新后的中位数前后的数据，更新所述磁盘中的中位数数据集；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述有序数据集的中位数与所述磁盘中的中位数数据集之后，还包括：删除所述内存中的中位数数据集。5.根据权利要求1所述的方法，其特征在于，所述方法还包括：根据所述内存中的所述新的数据的数量和所述中位数数据集的数据的数量，得到所述内存中的数据的总数量；在所述内存中的数据的总数量满足所述内存容量阈值的情况下，或者，在所述中位数浮动值满足预设浮动值阈值的情况下，将所述新的数据转移到所述磁盘中的有序数据集中。6.根据权利要求1至5任一项所述的方法，其特征在于，在确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数之前，还包括：在所述磁盘中的有序数据集中存在头标识的情况下，在所述有序数据集的数据中查询尾标识；所述头标识为所述内存中的有序数据中的首位数据的标识；所述尾标识为所述内存中的有序数据中的末位数据的标识；在所述磁盘中的有序数据集中存在尾标识的情况下，将所述磁盘中的有序数据集确认为从所述内存中转移成功的有序数据集；所述确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数，包括：在所述磁盘中的有序数据集为从所述内存中转移成功的有序数据集的情况下，确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数。7.一种数据处理装置，其特征在于，所述装置包括：内存数据转移模块，用于在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；中位数据确认模块，用于确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；浮动信息确认模块，用于将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；中位数据更新模块，用于在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。8.一种计算机设备，包括存储器和处理器，所述存储器存储有计算机程序，其特征在于，所述处理器执行所述计算机程序时实现权利要求1至6中任一项所述的方法的步骤。9.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1至6中任一项所述的方法的步骤。10.一种计算机程序产品，包括计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1至6中任一项所述的方法的步骤。
说明书desc
技术领域本申请涉及计算机技术领域，特别是涉及一种数据处理方法、装置、计算机设备、存储介质和计算机程序产品。背景技术随着计算机技术的发展，计算机中的数据逐渐呈现海量化；数据处理所发挥的作用也变得越来越重要。在数据处理过程中，通常采用中位数描述数据的整体分布情况。在传统的数据处理方法中，由于数据量过大，无法全部将数据读入内存进行排序，因此一般是将海量乱序的数据先保存在磁盘中，然后依次读入一部分数据到内存中进行排序，并基于排序结果生成临时文件，再将临时文件存储到磁盘中，最后对磁盘中的所有临时文件进行归并，得到排序结果，根据排序结构获取中位数。然而，在传统的数据处理方法中，磁盘在得到临时文件之后，还需要对各个临时文件进行归并才能得到中位数；因此，传统的数据处理方法的处理效率较低。发明内容基于此，有必要针对上述技术问题，提供一种能够提高处理效率的数据处理方法、装置、计算机设备、计算机可读存储介质和计算机程序产品。第一方面，本申请提供了一种数据处理方法。所述方法包括：在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。在其中一个实施例中，所述在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值，包括：在所述内存存储有新的数据的情况下，在所述内存中，对所述新的数据和所述中位数数据集中的数据进行排序，并更新排序后的数据的中位数；在所述内存中的所述新的数据和所述磁盘中的有序数据集的数据的数量总和为奇数，且所述新的数据大于所述中位数数据集的中位数的情况下，或者，在所述内存中的所述新的数据和所述磁盘中的有序数据集的数据的数量总和为偶数，且所述新的数据小于所述中位数数据集的中位数的情况下，将所述排序后的数据的中位数，与初始中位数之间的位置差异信息，确认为所述内存中的数据的中位数的变化信息；所述初始中位数为所述内存中的中位数数据集的中位数；将所述变化信息作为所述中位数浮动值。在其中一个实施例中，所述排序后的数据的中位数，与初始中位数之间的位置差异信息，通过下述方式得到：确认所述初始中位数的第一数据偏移量；所述第一数据偏移量为所述初始中位数，相对于所述内存中的所述排序后的数据的首位数据的个数偏移量；确认所述内存中的所述排序后的数据的中位数的第二数据偏移量；所述第二偏移量为所述内存中的所述排序后的中位数，相对于所述内存中的所述排序后的数据的首位数据的个数偏移量；将所述第一数据偏移量和第二数据偏移量之间的差异信息，确认为所述位置差异信息。在其中一个实施例中，所述在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，包括：在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值和转移所述新的数据前的有序数据集的中位数，确认转移所述新的数据后的有序数据集的中位数，作为所述有序数据集的更新后的中位数；根据所述转移所述新的数据后的有序数据集的更新后的中位数，以及所述转移所述新的数据后的有序数据集中，所述更新后的中位数前后的数据，更新所述磁盘中的中位数数据集；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述有序数据集的中位数与所述磁盘中的中位数数据集之后，还包括：删除所述内存中的中位数数据集。在其中一个实施例中，所述方法还包括：根据所述内存中的所述新的数据的数量和所述中位数数据集的数据的数量，得到所述内存中的数据的总数量；在所述内存中的数据的总数量满足所述内存容量阈值的情况下，或者，在所述中位数浮动值满足预设浮动值阈值的情况下，将所述新的数据转移到所述磁盘中的有序数据集中。在其中一个实施例中，在确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数之前，还包括：在所述磁盘中的有序数据集中存在头标识的情况下，在所述有序数据集的数据中查询尾标识；所述头标识为所述内存中的有序数据中的首位数据的标识；所述尾标识为所述内存中的有序数据中的末位数据的标识；在所述磁盘中的有序数据集中存在尾标识的情况下，将所述磁盘中的有序数据集确认为从内存中转移成功的有序数据集；所述确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数，包括：在所述磁盘中的有序数据集为从内存中转移成功的有序数据集的情况下，确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数。第二方面，本申请还提供了一种数据处理装置。所述装置包括：内存数据转移模块，用于在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；中位数据确认模块，用于确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；浮动信息确认模块，用于将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；中位数据更新模块，用于在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。第三方面，本申请还提供了一种计算机设备。所述计算机设备包括存储器和处理器，所述存储器存储有计算机程序，所述处理器执行所述计算机程序时实现以下步骤：在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。第四方面，本申请还提供了一种计算机可读存储介质。所述计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时实现以下步骤：在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。第五方面，本申请还提供了一种计算机程序产品。所述计算机程序产品，包括计算机程序，该计算机程序被处理器执行时实现以下步骤：在内存中的数据的数量满足内存容量阈值的情况下，将所述内存中的有序数据转移到与所述内存关联的磁盘中，作为所述磁盘中的有序数据集；确认所述磁盘中的有序数据集的中位数，作为所述磁盘中的中位数数据集的中位数；所述磁盘中的中位数数据集根据所述有序数据集的中位数，以及所述有序数据集的中位数前后的数据确定；将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值；在将所述内存中的所述新的数据转移到所述磁盘中的有序数据集的情况下，根据所述中位数浮动值，更新所述磁盘中的有序数据集的中位数与中位数数据集，并将所述磁盘中的更新后的中位数数据集作为所述磁盘中的中位数数据集，跳转至将所述磁盘中的中位数数据集存入所述内存中，在所述内存存储有新的数据的情况下，更新所述内存中的数据的中位数，并将所述内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到所述内存中未存入新的数据。上述数据处理方法、装置、计算机设备、存储介质和计算机程序产品，首先在内存中的数据的数量满足内存容量阈值的情况下，将内存中的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集；然后确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数；接着将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值；最后在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新磁盘中的有序数据集的中位数与中位数数据集，并将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到内存中未存入新的数据。这样，通过根据磁盘中的有序数据集确定得到的内存中的中位数数据集，能够在内存中存储有新的数据的情况下，根据内存中的数据的中位数变化信息，确认在新的数据存入磁盘中的有序数据集时，磁盘中的有序数据集的中位数浮动值，从而根据中位数浮动值更新有序数据集中的中位数；在此过程中，合理地发挥了内存的计算优势和磁盘的存储优势，在内存存储新的数据的同时，预测并记录表征新的数据对有序数据集的中位数的浮动影响的中位数浮动值，从而能够在新的数据存入磁盘时，不用基于磁盘中的所有数据重新定位中位数，而是直接根据中位数浮动值快速定位中位数，进而提高了数据处理的处理效率。附图说明图1为一个实施例中数据处理方法的流程示意图；图2为一个实施例中将内存中的数据的中位数的变化信息确认为中位数浮动值步骤的流程示意图；图3为另一个实施例中数据处理方法的流程示意图；图4为一个实施例中针对海量实时数据的低资源消耗中位数方法的流程示意图；图5为一个实施例中数据处理装置的结构框图；图6为一个实施例中计算机设备的内部结构图。具体实施方式为了使本申请的目的、技术方案及优点更加清楚明白，以下结合附图及实施例，对本申请进行进一步详细说明。应当理解，此处描述的具体实施例仅仅用以解释本申请，并不用于限定本申请。需要说明的是，在大数据时代，数据的意义不仅仅体现在数据的量上，更体现在数据所蕴含的信息中；充分挖掘数据背后的信息，能够辅助决策人员进行决策。通过对大数据的分析与处理，能够对数据所属的事物的特征和变化趋势进行描述，甚至还能预测数据所属的事物的发展趋势；而中位数处于一组数据的中间位置，不受数据中极端数值的影响，因此常常用中位数来描述一组数据的总体分布特征。在一示例性实施例中，如图1所示，提供了一种数据处理方法，本实施例以该方法应用于服务器进行举例说明；可以理解的是，该方法也可以应用于终端，还可以应用于包括服务器和终端的系统，并通过服务器和终端之间的交互实现。其中，服务器可以用独立的服务器或者是多个服务器组成的服务器集群来实现；终端可以但不限于是各种个人计算机、笔记本电脑、智能手机、平板电脑等。本实施例中，该方法包括以下步骤：步骤S102，在内存中的数据的数量满足内存容量阈值的情况下，将内存中的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集。其中，内存是指服务器中用于进行数据处理的内部运行空间，与内存关联的磁盘是指服务器中用于存储内存的数据处理结果的存储空间；内存容量阈值是指内存所能够存储的容量上限，在本实施例中，为了便于举例，以9个数据的内存容量阈值为例进行说明，能够理解的是，在实际的数据处理中，内存容量阈值远大于9。需要说明的是，在内存接收数据时，基于内存的运算优势，内存能够对数据进行排序，排序方法可选择冒泡排序、插入排序、快速排序等。能够理解的是，为了便于后续新的数据转移到磁盘中的有序数据集，内存中的有序数据需要有序且间隔地落入磁盘中；有序是指内存中的数据按照从大到小的顺序，或者是按照从小到大的顺序，以此转移到磁盘中；间隔是指相邻两个数据中需要间隔一定的存储空间，以预留给后续从内存转移到磁盘的数据进行存储。具体地，服务器在检测到内存中的数据的数量达到9个时，将内存中已经完成排序的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集。能够理解的时，当有序数据从内存成功转移到磁盘之后，内存中就没有存储有序数据了。举例说明，假设内存依次接收{2，6，1，4，5，8，3，7，9}，每接入一个数据就进行依次排序，在存储的数据的数量达到9个的时候，内存中的有序数据为{1，2，3，4，5，6，7，8，9}；此时服务器检测到内存中的数据的数量满足内存容量阈值，因此将内存中的有序数据移动到磁盘中，作为磁盘中的有序数据集。步骤S104，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数。其中，磁盘中的中位数数据集根据有序数据集的中位数，以及有序数据集的中位数前后的数据确定；例如，磁盘中的有序数据集为{1，2，3，4，5，6，7，8，9}，中位数为5；假设预设的中位数数据集数量为3，那么服务器以中位数5为中心，选择{4，5，6}作为中位数数据集，若预设的中位数数据集数量为5，那么服务器以中位数5为中心，选择{3，4，5，6，7}作为中位数数据集。能够理解的是，为了便于选择，预设的中位数数据集数量应该为奇数。具体地，服务器根据磁盘中的有序数据集，确认有序数据集的中位数，并将有序数据集的中位数作为磁盘中的中位数数据集的中位数，然后根据中位数数据集的中位数和预设的中位数数据集数量，确认中位数数据集。步骤S106，将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值。其中，内存中的数据的中位数变化信息，是指存储新的数据前后，内存中的数据的中位数的位置变化信息。具体地，服务器将磁盘中的中位数数据集存入到内存中，并在内存中存储新的数据的情况下，根据内存中的数据，更新内存中的数据的中位数，并将存储新的数据前后，内存中的数据的中位数的变化信息确认为中位数浮动值。举例说明，内存中的中位数数据集为{4，5，6}，内存存储新的数据3，内存中的数据变为{3，4，5，6}，中位数为原来的5变为4，即中位数的位置在集合中向左移动了一位，记变化信息为-1，并将变化信息-1确认为中位数浮动值；再比如，内存继续存储新的数据7，内存中的数据变为{3，4，5，6，7}，中位数变为5，和存储新的数据前的中位数一样，因此记变化信息记为0，并将变化信息0确认为中位数浮动值。需要说明的是，本实施例中将数据数量为偶数时的中位数定义为中间两个数中排序靠前的数，如{3，4，5，6}的中位数为4；根据实际应用的需要，也可定义为中间两个数的平均值，如{3，4，5，6}的中位数为4.5。能够理解的是，将磁盘中的中位数数据集存入内存中，是为了在内存存入新的数据的时候，更简便且快速地确认新的数据对磁盘中的有序数据集的中位数的影响。例如，假设不将中位数数据集存入内存中，那么内存每存储一个新的数据，服务器就需要记录一次内存中的新的数据和磁盘中的有序数据集的中位数的对比情况；然后在内存存储下一个新的数据时，服务器不仅需要记录下一个新的数据和有序数据集的中位数的对比情况，还需要基于下一个新的数据和上一个新的数据的对比情况，更新下一个新的数据和有序数据集的中位数的对比情况，因此会增加内存的资源消耗。步骤S108，在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新磁盘中的有序数据集的中位数与中位数数据集，并将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到内存中未存入新的数据。其中，直到内存中未存入新的数据是指，在将磁盘中的中位数数据集存入内存中后的一段时间内，内存没有接收到新的数据的情况。具体地，服务器在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据记录的中位数浮动值，对磁盘中的有序数据集的中位数进行更新，并根据更新后的有序数据集的中位数，对中位数数据集进行更新；然后将磁盘中更新后的中位数数据集作为步骤S106中的磁盘中的中位数数据集，跳转步骤S106，直到在将磁盘中的中位数数据集存入内存中后的一段时间内，内存没有接收到新的数据。需要说明的是，由于内存中的中位数数据集是根据磁盘中的中位数数据集得到的，即内存中的中位数数据集中的数据本身就存在于磁盘中的中位数数据集中，因此服务器只需要将内存中的新的数据转移到磁盘中的有序数据集即可。举例说明，假设内存中的数据为{3，4，5，6}，此时新的数据为3，中位数浮动值为-1，若服务器此时将新的数据3存入磁盘中的有序数据集中，有序数据集变为{1，2，3，3，4，5，6，7，8，9}，根据中位数浮动值-1，说明中位数向左移动一位，因此有序数据集中的中位数从5变为4；然后根据新的中位数4，和预设的中位数数据集数量3，服务器选择{3，4，5}作为新的中位数数据集，跳转至步骤S106；再举例说明，内存中的数据为{3，4，5，6，7}，此时新的数据为{3，7}，中位数浮动值为0，若服务器此时将新的数据{3，7}存入磁盘中的有序数据集中，有序数据集变为{1，2，3，3，4，5，6，7，7，8，9}，根据中位数浮动值0，说明中位数没有变化，因此有序数据集中的中位数仍然是5。上述数据处理方法中，服务器首先在内存中的数据的数量满足内存容量阈值的情况下，将内存中的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集；然后确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数；接着将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值；最后在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新磁盘中的有序数据集的中位数与中位数数据集，并将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到内存中未存入新的数据。这样，服务器通过根据磁盘中的有序数据集确定得到的内存中的中位数数据集，能够在内存中存储有新的数据的情况下，根据内存中的数据的中位数变化信息，确认在新的数据存入磁盘中的有序数据集时，磁盘中的有序数据集的中位数浮动值，从而根据中位数浮动值更新有序数据集中的中位数；在此过程中，合理地发挥了内存的计算优势和磁盘的存储优势，在内存存储新的数据的同时，预测并记录表征新的数据对有序数据集的中位数的浮动影响的中位数浮动值，从而能够在新的数据存入磁盘时，不用基于磁盘中的所有数据重新定位中位数，而是直接根据中位数浮动值快速定位中位数，进而提高了数据处理的处理效率。在一示例性实施例中，如图2所示，上述步骤S106中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值，具体包括以下步骤：步骤S202，在内存存储有新的数据的情况下，在内存中，对新的数据和中位数数据集中的数据进行排序，并更新排序后的数据的中位数。步骤S204，在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为奇数，且新的数据大于中位数数据集的中位数的情况下，或者，在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为偶数，且新的数据小于中位数数据集的中位数的情况下，将排序后的数据的中位数，与初始中位数之间的位置差异信息，确认为内存中的数据的中位数的变化信息。步骤S206，将变化信息作为中位数浮动值。其中，初始中位数为内存中的中位数数据集的中位数。具体地，服务器在内存存储有新的数据的情况下，对内存中新的数据和中位数数据集的数据进行排序，并根据更新排序后的数据得到更新排序后的数据的中位数；接着，在内存中的新的数据的数量，和磁盘中的有序数据集的数据的数量总和为奇数，且新的数据大于中位数数据集的中位数的情况下，或者是在内存中的新的数据的数量，和磁盘中的有序数据集的数据的数量总和为偶数，且新的数据小于中位数数据集的中位数的情况下，确认排序后的数据的中位数，和内存中的中位数数据集的中位数之间的位置差异信息，并将位置差异信息作为变化信息；最后将变化信息作为中位数浮动值。举例说明，内存中的中位数数据集为{4，5，6}，内存存储新的数据3，内存中排序后的数据变为{3，4，5，6}，此时的中位数变为4，新的数据的数量为1，磁盘中的有序数据集的数据的数量为9，数量总和10，且新的数据3小于初始中位数5，那么更新排序后的数据的中位数4和初始中位数5之间的位置差异信息为向左移动一位，因此服务器得到的中位数浮动值为-1。内存继续存储新的数据7，内存中排序后的数据变为{3，4，5，6，7}，此时的中位数变为5，新的数据的数量为2，磁盘中的有序数据集的数据的数量为9，数量总和11，且新的数据7大于初始中位数5，那么更新排序后的数据的中位数5和初始中位数5之间的没有位置差异信息，因此服务器得到的中位数浮动值为0。内存继续存储新的数据1，内存中排序后的数据变为{1，3，4，5，6，7}，此时的中位数变为4，新的数据的数量为3，磁盘中的有序数据集的数据的数量为9，数量总和12，且新的数据1小于初始中位数5，那么更新排序后的数据的中位数4和初始中位数5之间的位置差异信息为向左移动一位，因此服务器得到的中位数浮动值为-1。能够理解的是，在内存中的新的数据的数量，和磁盘中的有序数据集的数据的数量总和为奇数，且新的数据大于中位数数据集的中位数的情况下，中位数浮动值相对上一个新的数据确定的中位数浮动值，是不会发生变化的。例如，内存继续存储新的数据2，内存中排序后的数据变为{1，2，3，4，5，6，7}，此时的中位数为4，新的数据的数量为4，磁盘中的有序数据集的数据的数量为9，数量总和13，且新的数据2小于初始中位数5，那么更新排序后的数据的中位数4和初始中位数5之间的位置差异信息为向左移动一位，因此服务器得到的中位数浮动值仍然为-1。类似地，在内存中的新的数据的数量和磁盘中的有序数据集的数据的数量总和为偶数，且新的数据小于中位数数据集的中位数的情况下，服务器得到的中位数浮动值也不会发生变化。本实施例中，服务器通过内存中更新排序后的数据的中位数和初始中位数之间的位置差异信息，得到能够表征在新的数据移动至磁盘中的有序数据集的情况下，新的数据对磁盘中的有序数据集的中位数的影响的中位数浮动值，能够在新的数据存入磁盘中时，快速地定位中位数的位置，提高了数据处理的处理效率。此外，服务器根据内存中的新的数据的数量和磁盘中的有序数据集的数据的数量总和为奇数或偶数，以及新的数据与初始中位数的大小比较情况，将中位数浮动值的确认过程分为了两类，一类是中位数浮动值会发生变化的，需要更新中位数浮动值，一类是中位数浮动值不会发生变化的，因此不需要重复确认浮动值，从而将中位数浮动值的确认过程进行了简化，进一步提高了数据处理的处理效率。在一示例性实施例中，上述步骤S204中，排序后的数据的中位数，与初始中位数之间的位置差异信息，通过下述方式得到：确认初始中位数的第一数据偏移量；第一数据偏移量为初始中位数，相对于内存中的排序后的数据的首位数据的个数偏移量；确认内存中的排序后的数据的中位数的第二数据偏移量；第二偏移量为内存中的排序后的中位数，相对于内存中的排序后的数据的首位数据的个数偏移量；将第一数据偏移量和第二数据偏移量之间的差异信息，确认为位置差异信息。具体地，服务器首先确认初始中位数相对于内存中的排序后的数据的首位数据的个数偏移量，作为第一数据偏移量；然后确认内存中的排序后的数据的中位数，相对于内存中的排序后的数据的首位数据的个数偏移量，作为第二数据偏移量；最后将第一数据偏移量和第二数据偏移量之间的差异信息，确认为位置差异信息。举例说明，当内存中的数据为{1，3，4，5，6，7}时，第一数据偏移量为3，第二数据偏移量为2，因此服务器得到的第一数据偏移量和第二数据偏移量之间的差异信息为2-3＝-1，从而得到位置差异信息-1。本实施例中，服务器通过初始中位数的第一数据偏移量，和内存中排序后的数据的中位数的第二数据偏移量，能够快速确认两者之间的位置差异信息，从而得到内存中的数据的中位数的变化信息，进一步得到中位数浮动值，使得在后续新的数据移动到磁盘中的有序数据集时，服务器能够快速确认磁盘中的有序数据集中的中位数，进而提高了数据处理的处理效率。在一示例性实施例中，上述步骤S108中，在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新磁盘中的有序数据集的中位数与中位数数据集，具体包括以下内容：在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值和转移新的数据前的有序数据集的中位数，确认转移新的数据后的有序数据集的中位数，作为有序数据集的更新后的中位数；根据转移新的数据后的有序数据集的更新后的中位数，以及转移新的数据后的有序数据集中，更新后的中位数前后的数据，更新磁盘中的中位数数据集。在上述步骤S108，在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新有序数据集的中位数与磁盘中的中位数数据集之后，还具体包括以下内容：删除内存中的中位数数据集。具体地，服务器在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值和转移新的数据前的有序数据集的中位数，在转移新的数据后的有序数据集中，确认转移新的数据后的有序数据集的中位数，作为有序数据集更新后的中位数；并根据更新后的中位数，和更新后的中位数前后的数据，更新磁盘中的中位数数据集，得到磁盘中的更新后的中位数数据集；最后再将内存中的中位数数据集删除。举例说明，服务器将内存中的新的数据{3，7，1，2}，转移到磁盘中的有序数据集中，得到转移新的数据后的有序数据集{1，1，2，2，3，3，4，5，6，7，7，8，9}，且根据中位数浮动值-1，以及转移新的数据前的有序数据集的中位数5，确认转移新的数据后的有序数据集的中位数为5的左边一位数据，即4为有序数据集更新后的中位数；然后根据4，和4前后的数据3和5，对磁盘中的中位数数据集进行更新，得到磁盘中的更新后的中位数数据集{3，4，5}；最后服务器再将内存中的中位数数据集{4，5，6}删除。本实施例中，服务器通过中位数浮动值和转移新的数据前的有序数据集的中位数，对转移新的数据后的有序数据集的中位数进行更新，并基于更新后的中位数，更新磁盘中的中位数数据集，能够得到下一次需要存入内存中，便于确认新的数据对磁盘中的有序数据集的中位数影响的中位数浮动值的中位数数据集；同时，服务器删除内存中的中位数数据集，能够保证内存在存储新的数据的时候，不会受到原来的中位数数据集的影响。在一示例性实施例中，上述数据处理方法，具体还包括以下内容：根据内存中的新的数据的数量和中位数数据集的数据的数量，得到内存中的数据的总数量；在内存中的数据的总数量满足内存容量阈值的情况下，或者，在中位数浮动值满足预设浮动值阈值的情况下，将新的数据转移到磁盘中的有序数据集中。其中，预设浮动值阈值为中位数浮动值的范围，通常将预设浮动值阈值设定为中位数数据集数量的二分之一。若在中位数浮动值满足预设浮动值阈值的范围之后，内存继续存储新的数据，那么根据此时的新的数据确定的中位数浮动值，就无法准确更新磁盘中的有序数据集的中位数；因此需要在中位数浮动值满足预设浮动值阈值的范围，即当中位数浮动值大于中位数数据集数量的二分之一时，就将内存中的新的数据转移到磁盘的有序数据集中。例如，当内存中的数据为{1，2，3，4，5，6，7}，此时服务器记录的中位数浮动值为-1；内存继续依次存储{1，1，1}，存储第一个1时，内存中的数据变为{1，1，2，3，4，5，6，7}，内存中的中位数为3，即服务器记录的中位数浮动值为-2，此时将新的数据{1，1，2，3，7}转移到磁盘中，得到新的有序数据集{1，1，1，2，2，3，3，4，5，6，7，7，8，9}，根据中位数浮动值得到磁盘中更新后的中位数为第二个3，与内存中的中位数相同，即服务器更新得到的中位数正确。内存继续存储第二个1，内存中的数据变为{1，1，1，2，3，4，5，6，7}，此时内存中的中位数为3，服务器记录的中位数浮动值仍然为-2，此时将新的数据{1，1，1，2，3，7}转移到磁盘中，得到新的有序数据集{1，1，1，1，2，2，3，3，4，5，6，7，7，8，9}，根据中位数浮动值得到磁盘中更新后的中位数为第二个3，与内存中的中位数相同，即服务器更新得到的中位数正确。内存继续存储第三个1，内存中的数据变为{1，1，1，1，2，3，4，5，6，7}，内存中的中位数为2，即服务器记录的中位数浮动值为-3，此时服务器将新的数据{1，1，1，1，2，3，7}转移到磁盘中，得到新的有序数据集{1，1，1，1，1，2，2，3，3，4，5，6，7，7，8，9}，服务器根据中位数浮动值得到磁盘中更新后的中位数为第一个3，与内存中的中位数不同，即服务器根据中位数浮动值无法得到正确的中位数。若服务器在无法得到正确的中位数的情况下将新的数据转移到磁盘中，就有可能会导致数据的错误落盘，比如，按照内存中的中位数2，服务器应将新的数据{1，1，1，1}存储在2的前面，但由于磁盘中的中位数为第一个3，那么新的数据{1，1，1，1}就会变成存储在磁盘中的2与3之间。因此需要服务器需要在内存继续存储第一个1，即中位数浮动值-2的绝对值2，大于中位数数据集数量的二分之一3/2时，就将内存中的新的数据转移到磁盘中，避免后续中位数浮动值继续增加，导致通过中位数浮动值无法正确定位磁盘中的有序数据集的中位数，新的数据错误落盘的情况。具体地，服务器在两种情况下会触发将内存中的新的数据转移到磁盘中的有序数据集中的操作：一是当内存中的数据的总数量，即新的数据的数量和中位数数据集的数据的数量之和满足内存容量阈值；二是当中位数浮动值满足预设浮动值阈值。能够理解的是，本实施例中为了方便理解，均以较小的数值对内存容量阈值和中位数数据集数量进行举例；但在实际应用中，内存容量阈值和中位数数据集数量都会较大，因此预设浮动值阈值也会较大，服务器并不会在内存存储少量数据时触发将内存中的新的数据转移到磁盘中的有序数据集中的操作，因此也不会对磁盘进行频繁的读操作和写操作。本实施例中，服务器通过两种触发条件触发将内存中的新的数据转移到磁盘中的有序数据集中的操作，既能够避免内存中的数据总数量超出内存容量阈值导致的数据丢失，又能够避免在中位数浮动值变化过大的情况下，错误确认磁盘中的中位数，导致新的数据错误落盘的情况，提高了数据处理过程中确认中位数的准确性。在一示例性实施例中，在上述步骤S104，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数之前，还具体包括以下内容：在磁盘中的有序数据集中存在头标识的情况下，在有序数据集的数据中查询尾标识；头标识为内存中的有序数据中的首位数据的标识；尾标识为内存中的有序数据中的末位数据的标识；在磁盘中的有序数据集中存在尾标识的情况下，将磁盘中的有序数据集确认为从内存中转移成功的有序数据集。上述步骤S104，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数，具体包括以下内容：在磁盘中的有序数据集为从内存中转移成功的有序数据集的情况下，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数。其中，头标识为内存中的有序数据中的首位数据的标识，可以理解为内存中的首位数据添加一个标记，如head以表示该数据为首位数据；尾标识为内存中的有序数据的末位数据的标识，可以理解为内存中的末尾数据添加一个标记，如tail以标识该数据为末位数据。例如内存中的数据为{1，2，3，4，5，6，7，8，9}，那么拥有头标识的首位数据为1，拥有尾标识的末位数据为9。具体地，服务器在磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数之前，还需要判断内存中的有序数据是否全部成功转移到磁盘中，具体判断过程如下：服务器首先在磁盘中的有序数据集中查询是否存在头标识，若存在，则继续查询是否存在尾标识，若存在，则说明内存中的有序数据转移成功，将磁盘中的有序数据集确认为从内存中转移成功的有序数据集，然后将确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数。若服务器无法在磁盘的有序数据集中查询到头标识或是尾标识，则说明有部分内存中的有序数据转移失败，需要重新转移。本实施例中，服务器通过磁盘中的有序数据集的头标识和尾标识的查询结果，判断内存中的有序数据是否全部成功转移到磁盘中的有序数据集中，从而避免了当部分数据转移失败导致的数据遗失和中位数确认错误，增加了数据处理过程中中位数确认的准确性。在一示例性实施例中，如图3所示，提供了另一种数据处理方法，以该方法应用于服务器为例进行说明，包括以下步骤：步骤S301，在内存中的数据的数量满足内存容量阈值的情况下，将内存中的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集。步骤S302，在磁盘中的有序数据集中存在头标识的情况下，在有序数据集的数据中查询尾标识；在磁盘中的有序数据集中存在尾标识的情况下，将磁盘中的有序数据集确认为从内存中转移成功的有序数据集；在磁盘中的有序数据集为从内存中转移成功的有序数据集的情况下，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数。步骤S303，将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，在内存中，对新的数据和中位数数据集中的数据进行排序，并更新排序后的数据的中位数。步骤S304，在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为奇数，且新的数据大于中位数数据集的中位数的情况下，或者，在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为偶数，且新的数据小于中位数数据集的中位数的情况下，将排序后的数据的中位数，与初始中位数之间的位置差异信息，确认为内存中的数据的中位数的变化信息，将变化信息作为中位数浮动值。其中，初始中位数为内存中的中位数数据集的中位数。步骤S305，在内存中的数据的总数量满足内存容量阈值的情况下，或者，在中位数浮动值满足预设浮动值阈值的情况下，将新的数据转移到磁盘中的有序数据集中。步骤S306，在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值和转移新的数据前的有序数据集的中位数，确认转移新的数据后的有序数据集的中位数，作为有序数据集的更新后的中位数。步骤S307，根据转移新的数据后的有序数据集的更新后的中位数，以及转移新的数据后的有序数据集中，更新后的中位数前后的数据，更新磁盘中的中位数数据集，并删除内存中的中位数数据集。步骤S308，将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至步骤S303，直到内存中未存入新的数据。本实施例中，一方面，服务器通过内存中更新排序后的数据的中位数和初始中位数之间的位置差异信息，得到中位数浮动值，从而能够在新的数据存入磁盘中时，根据中位数浮动值快速地定位中位数的位置，提高了数据处理的处理效率。另一方面，服务器根据内存中的新的数据的数量和磁盘中的有序数据集的数据的数量总和为奇数或偶数，以及新的数据与初始中位数的大小比较情况，将中位数浮动值的确认过程分为了两类，一类是中位数浮动值会发生变化的，需要更新中位数浮动值，一类是中位数浮动值不会发生变化的，因此不需要重复确认浮动值，从而将中位数浮动值的确认过程进行了简化，进一步提高了数据处理的处理效率。此外，服务器通过中位数浮动值，对转移新的数据后的有序数据集的中位数进行更新，并基于更新后的中位数，更新磁盘中的中位数数据集，能够得到下一次需要存入内存中，便于确认新的数据对磁盘中的有序数据集的中位数影响的中位数数据集；同时，服务器删除内存中的中位数数据集，能够保证内存在存储新的数据时，不会受到原来的中位数数据集的影响。还需要说明的是，服务器通过两种触发条件触发将内存中的新的数据转移到磁盘中的有序数据集中的操作，既能够避免内存中的数据总数量超出内存容量阈值导致的数据丢失，又能够避免在中位数浮动值变化过大的情况下，错误确认磁盘中的中位数，导致新的数据错误落盘的情况，提高了数据处理过程中确认中位数的准确性；此外，服务器通过磁盘中的有序数据集的头标识和尾标识的查询结果，判断内存中的有序数据是否全部成功转移到磁盘中的有序数据集中，从而避免了当部分数据转移失败导致的数据遗失和中位数确认错误，进一步增加了数据处理过程中中位数确认的准确性。基于以上数据处理过程，服务器合理地发挥了内存的计算优势和磁盘的存储优势，在内存存储新的数据的同时，预测并记录表征新的数据对有序数据集的中位数的浮动影响的中位数浮动值，从而能够在新的数据存入磁盘时，不用基于磁盘中的所有数据更新中位数，而是直接根据中位数浮动值快速更新中位数，进而提高了数据处理的处理效率。为了更清晰阐明本申请实施例提供的数据处理方法，以下以一个具体的实施例对该数据处理方法进行具体说明。在一示例性实施例中，本申请还提供了一种如图4所示的针对海量实时数据的低资源消耗中位数方法，具体包括以下步骤：步骤1：数据接入内存。实时数据接入内存中，内存对于接入的每个数都进行排序。当内存中的数据达到一定量，代表内存即将无法容纳时，将全量数据转存入磁盘。步骤2：全量数据有序落盘。服务器将有序的全量数据转存入磁盘，保证数据的有序性落盘。在磁盘中划分成多个文件进行持久化，便于后续快速定位中位数。同时，根据内存中记录的中位数值，定位该中位数在磁盘中的存储位置，即相对于首个数据的偏移量，记作offsetα，中位数数值记作步骤3：中位数区间存入内存。服务器根据自定义的中位数区间大小β，将磁盘内偏移区间为的数据录入内存，此处存入内存的数据集记作ω1。步骤4：内存中位数的定位浮动。内存接入新的实时数据，记作新的数据集ω2，与内存中的数据集ω1进行对比，从而对内存中位数的位置定位进行上下浮动。步骤5：将内存中的新的数据集ω2转存入磁盘中。当中位数浮动值超过数据集ω1的数据数量的二分之一，导致后续接入的新的数据的中位数浮动值无法准确在磁盘中定位中位数时，或内存中的数据量过大，导致内存即将无法容纳新的数据时，服务器将内存中的新的数据集ω2转存入磁盘中。步骤6：磁盘中的数据的中位数定位。服务器根据中位数浮动值，在磁盘中快速更新中位数的定位。并根据更新后的中位数，得到新的数据集ω1。然后重复步骤2～步骤6。本实施例中，服务器考虑到数据的局部性，充分发挥内存的高性能计算优势，合理安排内存和磁盘的空间分布，实现全量数据的有序性落盘，将内存和磁盘空间整合规划。根据新接入的数据进行中位数定位的上下浮动，快速定位中位数，减少磁盘读取次数，实现了低资源消耗的中位数算法，从而提高了数据处理过程中中位数定位的效率。并且由于磁盘中的数据文件是有序的，因此可以提前利用文件名记录文件中的数据首末偏移量，从而能够保证当发生断电、服务器宕机、程序崩溃等情况时，快速重新定位中位数。应该理解的是，虽然如上所述的各实施例所涉及的流程图中的各个步骤按照箭头的指示依次显示，但是这些步骤并不是必然按照箭头指示的顺序依次执行。除非本文中有明确的说明，这些步骤的执行并没有严格的顺序限制，这些步骤可以以其它的顺序执行。而且，如上所述的各实施例所涉及的流程图中的至少一部分步骤可以包括多个步骤或者多个阶段，这些步骤或者阶段并不必然是在同一时刻执行完成，而是可以在不同的时刻执行，这些步骤或者阶段的执行顺序也不必然是依次进行，而是可以与其它步骤或者其它步骤中的步骤或者阶段的至少一部分轮流或者交替地执行。基于同样的发明构思，本申请实施例还提供了一种用于实现上述所涉及的数据处理方法的数据处理装置。该装置所提供的解决问题的实现方案与上述方法中所记载的实现方案相似，故下面所提供的一个或多个数据处理装置实施例中的具体限定可以参见上文中对于数据处理方法的限定，在此不再赘述。在一示例性实施例中，如图5所示，提供了一种数据处理装置，包括：内存数据转移模块502、中位数据确认模块504、浮动信息确认模块506以及中位数据更新模块508，其中：内存数据转移模块502，用于在内存中的数据的数量满足内存容量阈值的情况下，将内存中的有序数据转移到与内存关联的磁盘中，作为磁盘中的有序数据集。中位数据确认模块504，用于确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数；磁盘中的中位数数据集根据有序数据集的中位数，以及有序数据集的中位数前后的数据确定。浮动信息确认模块506，用于将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值。中位数据更新模块508，用于在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值，更新磁盘中的有序数据集的中位数与中位数数据集，并将磁盘中的更新后的中位数数据集作为磁盘中的中位数数据集，跳转至将磁盘中的中位数数据集存入内存中，在内存存储有新的数据的情况下，更新内存中的数据的中位数，并将内存中的数据的中位数的变化信息确认为中位数浮动值的步骤，直到内存中未存入新的数据。在一示例性实施例中，浮动信息确认模块506，还用于在内存存储有新的数据的情况下，在内存中，对新的数据和中位数数据集中的数据进行排序，并更新排序后的数据的中位数；在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为奇数，且新的数据大于中位数数据集的中位数的情况下，或者，在内存中的新的数据和磁盘中的有序数据集的数据的数量总和为偶数，且新的数据小于中位数数据集的中位数的情况下，将排序后的数据的中位数，与初始中位数之间的位置差异信息，确认为内存中的数据的中位数的变化信息；初始中位数为内存中的中位数数据集的中位数；将变化信息作为中位数浮动值。在一示例性实施例中，浮动信息确认模块506，还用于确认初始中位数的第一数据偏移量；第一数据偏移量为初始中位数，相对于内存中的排序后的数据的首位数据的个数偏移量；确认内存中的排序后的数据的中位数的第二数据偏移量；第二偏移量为内存中的排序后的中位数，相对于内存中的排序后的数据的首位数据的个数偏移量；将第一数据偏移量和第二数据偏移量之间的差异信息，确认为位置差异信息。在一示例性实施例中，中位数据更新模块508，还用于在将内存中的新的数据转移到磁盘中的有序数据集的情况下，根据中位数浮动值和转移新的数据前的有序数据集的中位数，确认转移新的数据后的有序数据集的中位数，作为有序数据集的更新后的中位数；根据转移新的数据后的有序数据集的更新后的中位数，以及转移新的数据后的有序数据集中，更新后的中位数前后的数据，更新磁盘中的中位数数据集；删除内存中的中位数数据集。在一示例性实施例中，内存数据转移模块502，还用于根据内存中的新的数据的数量和中位数数据集的数据的数量，得到内存中的数据的总数量；在内存中的数据的总数量满足内存容量阈值的情况下，或者，在中位数浮动值满足预设浮动值阈值的情况下，将新的数据转移到磁盘中的有序数据集中。在一示例性实施例中，数据处理装置还包括数据转移检验模块，用于在磁盘中的有序数据集中存在头标识的情况下，在有序数据集的数据中查询尾标识；头标识为内存中的有序数据中的首位数据的标识；尾标识为内存中的有序数据中的末位数据的标识；在磁盘中的有序数据集中存在尾标识的情况下，将磁盘中的有序数据集确认为从内存中转移成功的有序数据集。中位数据确认模块504，还用于在磁盘中的有序数据集为从内存中转移成功的有序数据集的情况下，确认磁盘中的有序数据集的中位数，作为磁盘中的中位数数据集的中位数。上述数据处理装置中的各个模块可全部或部分通过软件、硬件及其组合来实现。上述各模块可以硬件形式内嵌于或独立于计算机设备中的处理器中，也可以以软件形式存储于计算机设备中的存储器中，以便于处理器调用执行以上各个模块对应的操作。在一示例性实施例中，提供了一种计算机设备，该计算机设备可以是服务器，其内部结构图可以如图6所示。该计算机设备包括处理器、存储器、输入/输出接口和通信接口。其中，处理器、存储器和输入/输出接口通过系统总线连接，通信接口通过输入/输出接口连接到系统总线。其中，该计算机设备的处理器用于提供计算和控制能力。该计算机设备的存储器包括非易失性存储介质和内存储器。该非易失性存储介质存储有操作系统、计算机程序和数据库。该内存储器为非易失性存储介质中的操作系统和计算机程序的运行提供环境。该计算机设备的数据库用于存储待进行数据处理的数据。该计算机设备的输入/输出接口用于处理器与外部设备之间交换信息。该计算机设备的通信接口用于与外部的终端通过网络连接通信。该计算机程序被处理器执行时以实现一种数据处理方法。本领域技术人员可以理解，图6中示出的结构，仅仅是与本申请方案相关的部分结构的框图，并不构成对本申请方案所应用于其上的计算机设备的限定，具体的计算机设备可以包括比图中所示更多或更少的部件，或者组合某些部件，或者具有不同的部件布置。在一示例性实施例中，还提供了一种计算机设备，包括存储器和处理器，存储器中存储有计算机程序，该处理器执行计算机程序时实现上述各方法实施例中的步骤。在一示例性实施例中，提供了一种计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现上述各方法实施例中的步骤。在一示例性实施例中，提供了一种计算机程序产品，包括计算机程序，该计算机程序被处理器执行时实现上述各方法实施例中的步骤。需要说明的是，本申请所涉及的用户信息和数据，均为经用户授权或者经过各方充分授权的信息和数据，且相关数据的收集、使用和处理需要遵守相关国家和地区的相关法律法规和标准。本领域普通技术人员可以理解实现上述实施例方法中的全部或部分流程，是可以通过计算机程序来指令相关的硬件来完成的，所述的计算机程序可存储于一非易失性计算机可读取存储介质中，该计算机程序在执行时，可包括如上述各方法的实施例的流程。其中，本申请所提供的各实施例中所使用的对存储器、数据库或其它介质的任何引用，均可包括非易失性和易失性存储器中的至少一种。非易失性存储器可包括只读存储器、磁带、软盘、闪存、光存储器、高密度嵌入式非易失性存储器、阻变存储器、磁变存储器、铁电存储器、相变存储器、石墨烯存储器等。易失性存储器可包括随机存取存储器或外部高速缓冲存储器等。作为说明而非局限，RAM可以是多种形式，比如静态随机存取存储器或动态随机存取存储器等。本申请所提供的各实施例中所涉及的数据库可包括关系型数据库和非关系型数据库中至少一种。非关系型数据库可包括基于区块链的分布式数据库等，不限于此。本申请所提供的各实施例中所涉及的处理器可为通用处理器、中央处理器、图形处理器、数字信号处理器、可编程逻辑器、基于量子计算的数据处理逻辑器等，不限于此。以上实施例的各技术特征可以进行任意的组合，为使描述简洁，未对上述实施例中的各个技术特征所有可能的组合都进行描述，然而，只要这些技术特征的组合不存在矛盾，都应当认为是本说明书记载的范围。以上所述实施例仅表达了本申请的几种实施方式，其描述较为具体和详细，但并不能因此而理解为对本申请专利范围的限制。应当指出的是，对于本领域的普通技术人员来说，在不脱离本申请构思的前提下，还可以做出若干变形和改进，这些都属于本申请的保护范围。因此，本申请的保护范围应以所附权利要求为准。
