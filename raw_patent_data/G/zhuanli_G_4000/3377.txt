标题title
一种跨进程的独立云渲染方法、装置、设备及存储介质
摘要abst
本发明公开了一种跨进程的独立云渲染方法、装置、设备及存储介质，属于云渲染技术领域。所述方法包括：确定目标程序的框架类型；根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序；在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中；独立云渲染程序实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据；将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，在Web网页端对压缩数据进行解码后呈现在页面中。本发明大大提高了云渲染的稳定性。
权利要求书clms
1.一种跨进程的独立云渲染方法，其特征在于，包括：确定目标程序的框架类型；根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序；在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中；独立云渲染程序实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据；将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，在Web网页端对压缩数据进行解码后呈现在页面中。2.根据权利要求1所述的一种跨进程的独立云渲染方法，其特征在于，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。3.根据权利要求1所述的一种跨进程的独立云渲染方法，其特征在于，根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序，包括：若所述目标程序的框架类型为UE引擎框架，则将配套的UE插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为U3D引擎框架，则将配套的U3D插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为Cocos引擎框架，则将配套的Cocos插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架，则将配套的C++链接库文件集成至开发框架中，编译成功后启动目标程序。4.根据权利要求1所述的一种跨进程的独立云渲染方法，其特征在于，在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中，包括：绑定目标程序渲染画面时发送的通知，获取画面纹理指针；根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理；将创建的共享纹理句柄写入共享内存中。5.根据权利要求4所述的一种跨进程的独立云渲染方法，其特征在于，根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理，包括：若采用DirectX12，则创建ID3D12Resource共享纹理句柄；若采用DirectX11，则创建ID3D11Texture2D；若采用OpenGL或Vulkan，则将后台缓冲区纹理数据交由GPU创建共享纹理。6.一种跨进程的独立云渲染装置，其特征在于，包括：框架类型确定模块，用于确定目标程序的框架类型；集成模块，用于根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序；画面数据处理模块，用于在目标程序中通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中；独立云渲染程序模块，用于实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据；显示模块，用于将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，以便Web网页端将压缩数据进行解码、并呈现在页面中。7.根据权利要求6所述的一种跨进程的独立云渲染装置，其特征在于，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。8.根据权利要求6所述的一种跨进程的独立云渲染装置，其特征在于，所述画面数据处理模块具体用于绑定目标程序渲染画面时发送的通知，获取画面纹理指针，根据目标程序使用的图形渲染技术，创建可跨进程访问的GPU共享纹理，将创建的共享纹理句柄写入共享内存中。9.一种设备，其特征在于，所述设备包括处理器和存储器，所述存储器中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由所述处理器加载并执行以实现如权利要求1至5任一项所述的方法。10.一种存储介质，其特征在于，所述存储介质中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由处理器加载并执行以实现如权利要求1至5所述的方法。
说明书desc
技术领域本发明属于云渲染技术领域，特别是涉及一种跨进程的独立云渲染方法、装置、设备及存储介质。背景技术目前市面上与本发明类似的技术有两种。第一种是各大游戏引擎原生的云渲染技术，这种技术主要是游戏引擎底层将自身渲染的画面经过自身开发出的视频编解码模块以及网络通讯模块，将画面传输至Web端。该技术存在的缺陷是它和引擎是紧密连接的，在遇到云渲染过程中触发异常时，会导致整个程序崩溃退出，而重新启动耗时较长且容易丢失运行过程中的操作状态。第二种是完全独立的云渲染技术，这种技术主要有两种实现方式。一种是通过获取程序在计算机中的进程ID，获取进程句柄，并定位到对应的程序窗口后，抓取整个程序窗口中的画面并进行编码传输。该方式存在的缺陷是抓取程序窗口的画面这一步骤发生在CPU上，占用CPU计算能力，且随着程序分辨率越高其消耗就越高，加重了服务器的硬件负载压力。另一种方式是通过向目标程序注入hook.dll来实现画面截取。其主要的应用场景是游戏直播录屏。因为无法直接获取目标程序的画面数据，所以通过外部代码注入的方式获取画面，该方式的缺陷在于需要严格控制dll注入的时机，如果晚于目标程序基础图形渲染初始化，可能会出现注入失败的问题。同时该方式仍然是监测目标程序的渲染流程，占用CPU计算能力获取画面数据。发明内容本发明的目的在于克服现有技术的不足，提供一种跨进程的独立云渲染方法、装置、设备及存储介质。本发明的目的是通过以下技术方案来实现的：根据本发明的第一方面，一种跨进程的独立云渲染方法，包括：确定目标程序的框架类型；根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序；在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中；独立云渲染程序实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据；将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，在Web网页端对压缩数据进行解码后呈现在页面中。进一步地，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。进一步地，根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序，包括：若所述目标程序的框架类型为UE引擎框架，则将配套的UE插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为U3D引擎框架，则将配套的U3D插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为Cocos引擎框架，则将配套的Cocos插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架，则将配套的C++链接库文件集成至开发框架中，编译成功后启动目标程序。进一步地，在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中，包括：绑定目标程序渲染画面时发送的通知，获取画面纹理指针；根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理；将创建的共享纹理句柄写入共享内存中。进一步地，根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理，包括：若采用DirectX12，则创建ID3D12Resource共享纹理句柄；若采用DirectX11，则创建ID3D11Texture2D；若采用OpenGL或Vulkan，则将后台缓冲区纹理数据交由GPU创建共享纹理。根据本发明的第二方面，一种跨进程的独立云渲染装置，包括：框架类型确定模块，用于确定目标程序的框架类型；集成模块，用于根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序；画面数据处理模块，用于在目标程序中通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中；独立云渲染程序模块，用于实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据；显示模块，用于将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，以便Web网页端将压缩数据进行解码、并呈现在页面中。进一步地，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。进一步地，所述画面数据处理模块具体用于绑定目标程序渲染画面时发送的通知，获取画面纹理指针，根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理，将创建的共享纹理句柄写入共享内存中。根据本发明的第三方面，一种设备，所述设备包括处理器和存储器，所述存储器中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由所述处理器加载并执行以实现如根据本发明的第一方面所述的方法。根据本发明的第四方面，一种存储介质，所述存储介质中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由处理器加载并执行以实现如根据本发明的第一方面所述的方法。本发明的有益效果是：本发明可以保证在目标程序渲染画面的流程中直接通过GPU获取画面数据，不占用CPU计算能力，且对画面数据的处理流程如编码、传输模块由独立的进程进行管理，遇到崩溃不会导致目标程序崩溃，大大提高了云渲染的稳定性，具备高性能优势；本发明的云渲染程序的开发和目标程序的开发是分离的，是两个独立的程序，只是本发明通过共享内存技术建立了两者的数据通信。采用本发明的云渲染技术，云渲染程序如果崩溃了，完全不影响目标程序的正常运行，而且重启云渲染程序的速度非常快，因为它只承载云渲染这一个功能模块，体量很小；本发明不是通过外部代码注入的方式来获取目标程序的渲染画面，而是提供适配目标程序框架类型的插件或链接库，需要目标程序集成插件或链接库后，插件自启动，绑定到目标程序渲染画面的回调通知上，直接获取渲染画面，性能更高。附图说明图1为本发明中独立云渲染方法的一种实施例的流程图；图2为本发明中独立云渲染装置的一种实施例的流程图。具体实施方式下面将结合实施例，对本发明的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域技术人员在没有付出创造性劳动的前提下所获得的所有其他实施例，都属于本发明保护的范围。参阅图1至图2，本实施例提供了一种跨进程的独立云渲染方法、装置、设备及存储介质：本发明的第一方面提供了一种跨进程的独立云渲染方法。如图1所示，所述独立云渲染方法包括步骤S100至步骤S500，以下详细说明。步骤S100.确定目标程序的框架类型。在一些实施例中，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。步骤S200.根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序。一般的，适配的插件或链接库是指与目标程序的框架类型适配的插件或链接库。如果所述的目标程序的框架类型为虚幻引擎则使用适配虚幻引擎的插件；如果所述的目标程序的框架类型为原生的C或C + +程序，则使用C/C++编写的动态链接库。插件或者链接库只能存在一种，是根据所述目标程序的框架类型决定的，因此只需要集成一个至目标程序。在一些实施例中，根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序，包括：若所述目标程序的框架类型为UE引擎框架，则将配套的UE插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为U3D引擎框架，则将配套的U3D插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为Cocos引擎框架，则将配套的Cocos插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架，则将配套的C++链接库文件集成至开发框架中，编译成功后启动目标程序。步骤S300.在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中。在一些实施例中，在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中，包括：步骤S310.绑定目标程序渲染画面时发送的通知，获取画面纹理指针。步骤S320.根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理。若采用DirectX12，则创建ID3D12Resource共享纹理句柄；若采用DirectX11，则创建ID3D11Texture2D；若采用OpenGL或Vulkan，则将后台缓冲区纹理数据交由GPU创建共享纹理。步骤S330.将创建的共享纹理句柄写入共享内存中。在一些实施例中，对目标程序的画面数据进行处理，包括：如果目标程序的框架类型为虚幻引擎，则需要绑定虚幻引擎渲染画面的回调通知获取渲染硬件接口；根据渲染硬件接口的类型，获取更底层的纹理数据，如渲染硬件接口的类型为D3D11时，获取D3D11Texture2D，如渲染硬件接口的类型为D3D12时，获取D3D12Rescouce；为中获取的底层纹理创建可跨进程访问的共享纹理，并将共享纹理句柄写入共享内存，以供本发明的云渲染程序读取。插件或链接库创建的共享内存是在目标程序启动的时候创建的。在windows操作系统下共享内存是通过接口OpenFileMapping和MapViewOfFile创建的。步骤S400.独立云渲染程序实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据。具体的，独立云渲染程序实时读取共享内存中的共享纹理句柄，获取到共享纹理句柄后会将其缓存；同时会有一个独立的线程轮询获取该句柄，获得句柄数据后，将其注册为可由GPU访问的句柄；调用在GPU执行的格式转换和压缩函数，通过句柄获取到纹理数据，进行格式转换和压缩。步骤S500.将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，在Web网页端对压缩数据进行解码后呈现在页面中。本发明的第二方面提供了一种跨进程的独立云渲染装置。如图2所示，所述独立云渲染装置包括框架类型确定模块、集成模块、画面数据处理模块、独立云渲染程序模块和显示模块。框架类型确定模块用于确定目标程序的框架类型。一般的，所述目标程序的框架类型为UE引擎框架、U3D引擎框架、Cocos引擎框架或原生C/C++框架，所述原生C/C++框架为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架。集成模块用于根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序。在一些实施例中，根据所述目标程序的框架类型将适配的插件或链接库集成至目标程序，包括：若所述目标程序的框架类型为UE引擎框架，则将配套的UE插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为U3D引擎框架，则将配套的U3D插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为Cocos引擎框架，则将配套的Cocos插件集成至开发框架中，编译成功后启动目标程序；若所述目标程序的框架类型为基于OpenGL、DirectX或Vulkan图形渲染技术的原生C/C++框架，则将配套的C++链接库文件集成至开发框架中，编译成功后启动目标程序。画面数据处理模块用于在目标程序中通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中。在一些实施例中，在目标程序中，通过插件或链接库对目标程序的画面数据进行处理，将画面数据设置为可跨进程访问的共享纹理数据，并将共享纹理数据写入插件或链接库创建的共享内存中，包括：绑定目标程序渲染画面时发送的通知，获取画面纹理指针。根据目标程序使用的图形渲染技术，创建可跨进程访问的共享纹理。若采用DirectX12，则创建ID3D12Resource共享纹理句柄；若采用DirectX11，则创建ID3D11Texture2D；若采用OpenGL或Vulkan，则将后台缓冲区纹理数据交由GPU创建共享纹理。将创建的共享纹理句柄写入共享内存中。独立云渲染程序模块用于实时读取共享内存中的共享纹理数据，通过GPU访问共享纹理数据，对其进行格式转换和压缩，得到压缩数据。显示模块用于将压缩数据传输至预先与独立云渲染程序建立连接的Web网页，以便Web网页端将压缩数据进行解码、并呈现在页面中。本发明的第三方面提供了一种设备，所述设备包括处理器和存储器，所述存储器中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由所述处理器加载并执行以实现如本发明第一方面所述的方法。本发明的第四方面提供了一种存储介质，所述存储介质中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由处理器加载并执行以实现如本发明第一方面所述的方法。以上所述仅是本发明的优选实施方式，应当理解本发明并非局限于本文所披露的形式，不应看作是对其他实施例的排除，而可用于各种其他组合、修改和环境，并能够在本文所述构想范围内，通过上述教导或相关领域的技术或知识进行改动。而本领域人员所进行的改动和变化不脱离本发明的精神和范围，则都应在本发明所附权利要求的保护范围内。
