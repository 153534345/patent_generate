标题title
一种高可靠回传CDN日志的方法及装置
摘要abst
本申请提供一种高可靠回传CDN日志的方法及装置，包括：收集边缘节点的访问日志；通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。本申请通过CDN节点转发访问日志，在公网临时不可用时，可以在边缘节点本地缓存访问日志，不会因为网络不稳定导致日志丢失，实现服务异常时，服务运行情况的可分析性。
权利要求书clms
1.一种高可靠回传CDN日志的方法，其特征在于，包括：收集边缘节点的访问日志；通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。2.根据权利要求1所述高可靠回传CDN日志的方法，其特征在于，所述获取所述访问日志转发到所述数据中心，包括：判断所述访问日志是否发送，若否则按照指数回退的方式进行重试。3.根据权利要求1所述高可靠回传CDN日志的方法，其特征在于，所述访问日志用于记录资源请求情况。4.根据权利要求1所述高可靠回传CDN日志的方法，其特征在于，所述数据中心中设置有数据接口，用于根据请求对外发送所述访问日志。5.根据权利要求1~4任一所述高可靠回传CDN日志的方法，其特征在于，还包括：所述持久化存储前，将所述访问日志可视化。6.一种高可靠回传CDN日志的装置，其特征在于，包括：收集模块，用于收集边缘节点的访问日志；发送模块，用于通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；转发模块，用于根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；存储模块，用于将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。7.根据权利要求6所述高可靠回传CDN日志的装置，其特征在于，所述转发模块获取所述访问日志转发到所述数据中心，包括：判断所述访问日志是否发送，若否则按照指数回退的方法进行重试。8.根据权利要求6所述高可靠回传CDN日志的装置，其特征在于，所述访问日志用于记录资源请求情况。9.根据权利要求6所述高可靠回传CDN日志的装置，其特征在于，所述数据中心中设置有数据接口，用于根据请求对外发送所述访问日志。10.根据权利要求6~9任一所述高可靠回传CDN日志的装置，其特征在于，还包括：所述存储模块对所述访问日志持久化存储前，将所述访问日志可视化。
说明书desc
技术领域本申请涉及日志管理领域，尤其涉及一种高可靠回传CDN日志的方法。本申请还涉及一种高可靠回传CDN日志的装置。背景技术边缘节点是对边缘网关、边缘控制器、边缘服务器等边缘侧多种产品形态的基础共性能力的逻辑抽象，这些产品形态具备边缘侧实时数据分析、本地数据存储、实时网络联接等共性能力。当前，移动互联网技术的发展，使得手持设备、穿戴设备等多种多型移动互联网终端被大量的使用，产生了海量的信息。内容分发网络服务提供商是通过大量的边缘节点服务器来为客户提供加速服务的。其中，CDN网络中各个节点服务器产生的日志文件数量是巨大的。面对海量的日志文件信息，理高效地对对海量日志文件快速分析、筛选、提炼，已成解决许多问题的必要手段。但是，边缘节点服务器在收集的日志文件的缓存时间达到预设的时间或者收集的日志文件的大小满足预设的数量阈值时，会将收集的日志文件上传至对应的中央收集服务器上，再由中央收集服务器将接收的边缘节点服务器的日志文件上传至数据中心，数据中心再对日志文件进行快速分析、筛选、提炼。在将日志文件上传至中央收集服务器时，中央控制器在接收到边缘节点服务器的日志文件上传请求时，需要根据边缘节点服务器上传的自身的服务质量，以及边缘节点服务器与中央控制器或者上传服务器的服务质量，确定日志上传路线，最后上传数据，如果发生网络故障的问题，同时日志文件的大小满足预设的数量阈值时，则这些数据可能会丢失。边缘节点用于缓存用户从服务器中获取的数据，提高用户访问速度。通过对用户 CDN 资源的访问记录，获取客户端相关的部分信息，其中包括客户端地址、请求资源的地址、请求状态码、请求的文件大小、请求到的边缘节点的地址等，实现CDN边缘日志的收集，通过收集的信息，可以针对 CDN 访问的资源进行分析。例如：请求状态或者请求节点是否异常，是否存在攻击，节点分配是否按照就近分发，另外日志字段中记录着资源的文件大小，可以通过资源大小情况统计流量以及通过流量计算用户计费情况。申请号202110834285.9，专利名称：监控数据处理方法与系统的中国专利提到，监控数据处理系统包括：数据采集模块，用于监控内容分发网络，生成监控日志数据；数据存储模块，用于存储所述监控日志数据；数据流状态分析模块，用于统计所述监控日志数据的存储状态信息，获得所述监控日志数据的监控结果，并将所述监控结果发送至所述数据存储模块；数据应用模块，用于监控到所述数据存储模块中的所述监控结果为异常结果时，发出告警信息。本发明可及时发现异常监控日志数据。但是，如果边缘日志未正常收集，就无法判断整个服务的运行情况，遇到 CDN 资源请求异常时，无法快速判断异常原因，同样用户计费也受到影响。发明内容本发明的目的在于克服现有技术中日志未正常收集，就无法判断整个服务的运行情况的缺陷，提供一种高可靠回传CDN日志的方法。本申请还涉及一种高可靠回传CDN日志的装置。本申请提供一种高可靠回传CDN日志的方法，包括：收集边缘节点的访问日志；通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。可选的，所述获取所述访问日志转发到所述数据中心，包括：判断所述访问日志是否发送，若否则按照指数回退的方式进行重试。可选的，所述访问日志用于记录资源请求情况。可选的，所述数据中心中设置有数据接口，用于根据请求对外发送所述访问日志。可选的，还包括：所述持久化存储前，将所述访问日志可视化。本申请还提供一种高可靠回传CDN日志的装置，包括：收集模块，用于收集边缘节点的访问日志；发送模块，用于通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；转发模块，用于根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；存储模块，用于将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。可选的，所述转发模块获取所述访问日志转发到所述数据中心，包括：判断所述访问日志是否发送，若否则按照指数回退的方法进行重试。可选的，所述访问日志用于记录资源请求情况。可选的，所述数据中心中设置有数据接口，用于根据请求对外发送所述访问日志。可选的，还包括：所述存储模块对所述访问日志持久化存储前，将所述访问日志可视化。本申请的优点和有益效果：本申请提供一种高可靠回传CDN日志的方法，包括：收集边缘节点的访问日志；通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。本申请通过CDN节点转发访问日志，在公网临时不可用时，可以在边缘节点本地缓存访问日志，不会因为网络不稳定导致日志丢失，实现服务异常时，服务运行情况的可分析性。附图说明图1是本申请中高可靠回传CDN日志的流程示意图。图2是本申请中可视化数据第一展示界面示意图。图3是本申请中可视化数据第二展示界面示意图。图4是本申请中高可靠回传CDN日志的装置示意图。具体实施方式下面结合附图和具体实施例对本发明作进一步说明，以使本领域的技术人员可以更好地理解本发明并能予以实施。以下内容均是为了详细说明本申请要保护的技术方案所提供的具体实施过程的示例，但是本申请还可以采用不同于此的描述的其他方式实施，本领域技术人员可以在本申请构思的指引下，采用不同的技术手段实现本申请，因此本申请不受下面具体实施例的限制。本申请提供一种高可靠回传CDN日志的方法，包括：收集边缘节点的访问日志；通过所述边缘节点上设置的Nginx组件将所述边缘节点上的所述访问日志转发到本地的消息队列；根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心；将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。本申请通过CDN节点转发访问日志，在公网临时不可用时，可以在边缘节点本地缓存访问日志，不会因为网络不稳定导致日志丢失，实现服务异常时，服务运行情况的可分析性。图1是本申请中高可靠回传CDN日志的流程示意图。请参照图1所述，S101收集边缘节点的访问日志。服务器或者数据中提供数据给用户端，由于服务器或者与用户端的距离，以及服务器处理客户端请求的速度，使得用户向服务器请求数据会发生延迟、卡顿等，因此在靠近用户端的位置处，通常设置有边缘节点，以实现数据的中转和处理。在提供服务时，客户端请求数据向服务器或者数据中心请求数据时，首先该请求进入到所述边缘节点，所述边缘节点查找所述请求的数据，若没有查找到则将所述请求转发到数据中心或者服务器中进行获取。所述边缘节点接收所述服务器或者数据中心反馈给所述客户端请求的数据，并转发给客户端的同时进行存储，因此在所述客户端再次请求时，该数据无需再从所述服务器或者数据中心获取。另一方面，所述边缘节点在获取所述数据后，还可以根据所述客户端请求信息中的客户端信息，对所述数据进行处理以适应与所述客户端的规格，例如对图片进行裁剪或者尺寸转换。所述客户端请求数据是，在所述边缘节点可以产生访问日志，所述访问日志包括有：访问时间、访问内容，访问内容大小等参数。通过对用户 CDN 资源的访问记录，获取客户端相关的部分信息，其中包括客户端地址、请求资源的地址、请求状态码、请求的文件大小、请求到的边缘节点的地址等，实现CDN边缘日志的收集，通过收集的信息，可以针对 CDN 访问的资源进行分析。本申请首先从所述边缘节点中收集客户端访问所述边缘节点的访问日志，当客户端发送数据请求到所述CDN节点后，根据所述客户端的数据请求生成访问日志。所述收集访问日志可通过直接读取日志信息进行收集。具体的，可在filebeat的安装目录找到filebeat.yml配置获取日志文件的路径及输出到ES的配置；通过elasticsearch-head插件查看es索引中的日志信息，实现数据采集。进一步的，在获取到所述日志后，将所述日志进行压缩和打包，列入到发送消息队列。本申请所述日志获取可实时进行，进一步的，本申请通过设置自定义小间隔执行所述日志获取，所述小间隔并不影响所述实时性，同时可以避免数据处理高峰执行程序。具体的，所述自定义间隔根据设置，实现数据处理量判断，根据所述数据处理量确定是否执行日志获取，同时根据所述数据处理高峰的持续时间确定所述自定义间隔大小。其中，通过设置阈值实现所述数据处理量判断。请参照图1所述，S102通过所述边缘节点上设置的Nginx组件将所述边缘节点上的访问日志转发到本地的消息队列。具体的，通过Nginx组件发送到本地的消息队列，所述本地即所述边缘节点。所述Nginx组件依赖ngx_http_upstream_module模块，支持的代理方式包括：proxy_pass、fastcgi_pass、memcached_pass等。其调度算法可以分为两类，分别是静态调度算法和动态调度算法。静态调度算法：根据自身设定的规则进行分配，不考虑后端节点服务器的情况，例如：rr轮询：按客户端的请求逐一分配到配置的不同后端节点服务器；wrr权重轮询：在rr轮询的基础上加上权重，权重值越大，转发的请求越多；ip_hash：根据客户端IP的hash值进行分配，客户的IP地址相同，会被分配到同一主机；url_hash：根据访问的URL的hash值进行分配。动态调度算法：根据后端节点的当前状态来决定是否分发请求，例如：fair:根据后端节点服务器的响应时间来分配请求，响应时间短的优先分配least_conn:根据后端节点的连接数来分配，连接数少就分发。所述Nginx组件主要包括：http_proxy_module模块，用于将请求转发到另一台服务器，通过location功能匹配指定的URI，把符合匹配的URI请求通过proxy_pass指向定义好的upstream模块。所述访问日志首先根据日志内容生成所述访问日志的文本字符串，然后缓存到所述消息队列中。在此之前，可以进行所述消息队列待发送消息数量的判断，并基于所述判断进行选择是否加入所述消息队列。具体的，所述日志内容被收集完成后，在所述边缘节点进行存储，并在所述日志内容正确发送出去后对所述存储进行删除。所述存储可以是对所述日志内容的缓存，本申请中所述存储还指将所述日志内容存储到非易失性存储器中。所述非易失性存储器是设置在所述边缘节点的存储设备，以实现对客户端向服务器或者数据中心请求的内容的存储。在本申请中，所述非易失性存储中将被划分出一个独立的存储区域以存储所述日志内容，该存储区域的大小可以自由设定。所述选择是指，所述访问日志不能影响所述客户端请求数据的速度，因此需要基于所述访问日志的发送是否会对客户端与CDN的数据传输造成压力进行选择。此时，当所述数据传输的压力较大时，则可以根据上述的非易失性存储器存储所述边缘节点的访问日志。进一步的，所述压力较大可以是当所述公网临时不可用，此时则可以直接从所述非易失性存储器中读取所述访问日志。另外，所述消息队列可以不断从所述非易实现存储器中读取所述访问日志，并将所述访问日志加入所述消息队列，进行重复的发送，直到发送成功为止。在客户端请求时，日志会先缓存到进程内部缓存区，然后直接向客户端返回响应内容。本申请进行了如下设置：当异步线程会等缓冲区满了或者超过一定时间，将缓冲区中的所有内容发送到本机的消息队列。由于数据在发送到本机消息队列时采用的部署是本机的回环网卡，因此不会影响客户端的公网访问，同时数据是异步发送到消息队列的，也不会增加正在进行的请求的响应时间。本申请中，所述日志分为访问日志和错误日志。其中错误日志中包括节点状态、请求数据、连接数等监控数据，具有比其他数据高的优先级，会优先发送，以保证能及时向数据中心反馈边缘节点的工作情况。进一步的，所述日志数据发送到本机消息队列之后，设置有读取程序读取本机消息队列里的数据，将所述数据通过snappy算法压缩后再发送到数据中心。所述Snappy算法占用CPU较少，并且有比较高的压缩比。当发送速度会有一定限制，同时会根据当前网卡的使用率进行动态调节。如果网卡负载一直很高的话，访问日志将延迟发送，但错误日志不会延迟发送。本申请中，所述访问日志是否进入所述客户端的消息队列，其判断可以通过如下表达式进行：其中，所述P是已有消息队列的数据传输时间，所述是所述消息队列里第i条消息的数据量大小，所述n是消息队列消息数量，所述S是当前网速，所述M是传输间隔时间，所述G是预设阈值。当所述P小于G时，则加入消息队列，否则进行入队等待。具体的，当所述P大于G时，所述访问日志将不会立即加入所述消息队列，此时按照预设的时间间隔对所述P进行重复的计算，直到所述P小于G时，则加入所述消息队列。另外，所述还设置有入队等待时间阈值，当入队等待时间大于所述等待时间阈值时，则加入所述消息队列。具体的，加入所述消息队列的包括插队操作，基于对所述消息队列中各个消息队列消息对应的数据量进行判断，表达式如下：其中表示数据量最小的消息队列的数据量，编号c所在的消息为选择插入的位置。然后，将所述访问日志的消息插入所述消息队列。请参照图1所述，S103根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心。所述边缘节点将所述访问日志转发到数据中心，包括通过所述边缘节点缓存所述访问日志，从所述消息队列中获取所述访问日志并发送到数据中心。所述数据中心设置有边缘路由器，用于发送和接收数据信息，通过所述边缘路由器获取所述访问日志信息并发送到所述数据中心中。所述数据中心接收到所述访问日志后，根据预设的分析规则对所述访问日志进行分析，获得分析结果。具体的，所述分析基于预设的启动条件进行，即当接收所述访问数据触发预设的规则时，对所述访问日志进行调用分析。本申请中，所述预设的规则包括，当接收所述访问日志的时间间隔大于预设的最大间隔时启动，执行初步分析。基于所述初步分析结果，本申请所述数据中心可以对所述边缘节点发出控制指令，并等待回复所述访问日志的继续传输。所述边缘节点如果在转发过程中出现网络问题，消息转发服务将按照指数回退的方法进行重试，直到日志发送成功。然后基于所述访问日志分析 CDN 请求的情况、记录并统计用户使用流量情况，通过对边缘 CDN 节点日志收集，当用户遇到 CDN 请求异常时，可快速通过日志进行分析，通过日志统计用户请求流量，计算 CDN 计费使用情况，自主化的针对边缘 CDN 日志进行收集、分析，并保证收集信息的高可靠性，为用户提供分析结果，让用户更直观查看加速服务的状态。请参照图1所述，S104将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。所述数据中心获取到所述日志数据后，对所述日志数据进行可视化，包括基于日志数据的属性类别统计数据，如图2、3所示。最后将所述日志数据发送到存储设备中进行永久存储。本申请中，所述日志数据的存储包括存储和备份存储，所述存储是指在服务器或者数据中心中进行存储，所述备份存储是指将所述访问日志的数据存储到备份存储器中。在进行所述存储之前，所述日志数据基于预设的格式进行处理，以及进行可视化处理。所述访问日志的可视化可以基于显示格式以及显示项目进行设置，所述显示格式和显示项目是基于实际情况进行设定的。所述数据中心设置有数据接口，用于当用户请求所述访问日志数据时，可以向所述用户发送所述访问日志的数据。所述访问日志数据已经可视化，当用户选择显示界面时，基于所述显示界面的数据，自动生成所述访问日志的请求命令，并向所述数据中心进行数据请求。所述数据中心根据所述请求命令，筛选所述访问日志，获得要发送的数据并发送给客户端。本申请还提供一种高可靠回传CDN日志的装置，包括：收集模块201，发送模块202，转发模块203，存储模块204。图4是本申请中高可靠回传CDN日志的装置示意图。请参照图4所示，收集模块201，用于收集边缘节点的访问日志。服务器或者数据中提供数据给用户端，由于服务器或者与用户端的距离，以及服务器处理客户端请求的速度，使得用户向服务器请求数据会发生延迟、卡顿等，因此在靠近用户端的位置处，通常设置有边缘节点，以实现数据的中转和处理。在提供服务时，客户端请求数据向服务器或者数据中心请求数据时，首先该请求进入到所述边缘节点，所述边缘节点查找所述请求的数据，若没有查找到则将所述请求转发到数据中心或者服务器中进行获取。所述边缘节点接收所述服务器或者数据中心反馈给所述客户端请求的数据，并转发给客户端的同时进行存储，因此在所述客户端再次请求时，该数据无需再从所述服务器或者数据中心获取。另一方面，所述边缘节点在获取所述数据后，还可以根据所述客户端请求信息中的客户端信息，对所述数据进行处理以适应与所述客户端的规格，例如对图片进行裁剪或者尺寸转换。所述客户端请求数据是，在所述边缘节点可以产生访问日志，所述访问日志包括有：访问时间、访问内容，访问内容大小等参数。通过对用户 CDN 资源的访问记录，获取客户端相关的部分信息，其中包括客户端地址、请求资源的地址、请求状态码、请求的文件大小、请求到的边缘节点的地址等，实现CDN边缘日志的收集，通过收集的信息，可以针对 CDN 访问的资源进行分析。本申请首先从所述边缘节点中收集客户端访问所述边缘节点的访问日志，当客户端发送数据请求到所述CDN节点后，根据所述客户端的数据请求生成访问日志。所述收集访问日志可通过直接读取日志信息进行收集。具体的，可在filebeat的安装目录找到filebeat.yml配置获取日志文件的路径及输出到ES的配置；通过elasticsearch-head插件查看es索引中的日志信息，实现数据采集。进一步的，在获取到所述日志后，将所述日志进行压缩和打包，列入到发送消息队列。本申请所述日志获取可实时进行，进一步的，本申请通过设置自定义小间隔执行所述日志获取，所述小间隔并不影响所述实时性，同时可以避免数据处理高峰执行程序。具体的，所述自定义间隔根据设置，实现数据处理量判断，根据所述数据处理量确定是否执行日志获取，同时根据所述数据处理高峰的持续时间确定所述自定义间隔大小。其中，通过设置阈值实现所述数据处理量判断。请参照图4所述，发送模块202，用于通过所述边缘节点上设置的Nginx组件将所述边缘节点上的访问日志转发到本地的消息队列。具体的，通过Nginx组件发送到本地的消息队列，所述本地即所述边缘节点。所述Nginx组件依赖ngx_http_upstream_module模块，支持的代理方式包括：proxy_pass、fastcgi_pass、memcached_pass等。其调度算法可以分为两类，分别是静态调度算法和动态调度算法。静态调度算法：根据自身设定的规则进行分配，不考虑后端节点服务器的情况，例如：rr轮询：按客户端的请求逐一分配到配置的不同后端节点服务器；wrr权重轮询：在rr轮询的基础上加上权重，权重值越大，转发的请求越多；ip_hash：根据客户端IP的hash值进行分配，客户的IP地址相同，会被分配到同一主机；url_hash：根据访问的URL的hash值进行分配。动态调度算法：根据后端节点的当前状态来决定是否分发请求，例如：fair:根据后端节点服务器的响应时间来分配请求，响应时间短的优先分配least_conn:根据后端节点的连接数来分配，连接数少就分发。所述Nginx组件主要包括：http_proxy_module模块，用于将请求转发到另一台服务器，通过location功能匹配指定的URI，把符合匹配的URI请求通过proxy_pass指向定义好的upstream模块。具体的，通过Nginx组件发送到本地的消息队列，所述本地即所述边缘节点。所述访问日志首先根据日志内容生成所述访问日志的文本字符串，然后缓存到所述消息队列中。在此之前，可以进行所述消息队列待发送消息数量的判断，并基于所述判断进行选择是否加入所述消息队列。具体的，所述日志内容被收集完成后，在所述边缘节点进行存储，并在所述日志内容正确发送出去后对所述存储进行删除。所述存储可以是对所述日志内容的缓存，本申请中所述存储还指将所述日志内容存储到非易失性存储器中。所述非易失性存储器是设置在所述边缘节点的存储设备，以实现对客户端向服务器或者数据中心请求的内容的存储。在本申请中，所述非易失性存储中将被划分出一个独立的存储区域以存储所述日志内容，该存储区域的大小可以自有设定。所述选择是指，所述访问日志不能影响所述客户端请求数据的速度，因此需要对所述访问日志的发送是否会对客户端与CDN的数据传输造成压力进行选择。本申请中，所述访问日志是否进入所述客户端的消息队列，其判断可以通过如下表达式进行：其中，所述P是已有消息队列的数据传输时间，所述是所述消息队列里第i条消息的数据量大小，所述n是消息队列消息数量，所述S是当前网速，所述M是传输间隔时间，所述G是预设阈值。当所述P小于G时，则加入消息队列，否则进行入队等待。另外，所述还设置有入队等待时间阈值，当入队等待时间大于所述等待时间阈值时，则加入所述消息队列。具体的，加入所述消息队列的包括插队操作，基于对所述消息队列中各个消息队列消息对应的数据量进行判断，表达式如下：其中 表示数据量最小的消息队列的数据量，编号c所在的消息为选择插入的位置。然后，将所述访问日志的消息插入所述消息队列。具体的，当所述P大于G时，所述访问日志将不会立即加入所述消息队列，此时按照预设的时间间隔对所述P进行重复的计算，直到所述P小于G时，则加入所述消息队列。请参照图3所述，转发模块203，用于根据所述边缘节点的转发服务，从所述本地的消息队列中获取所述访问日志转发到数据中心。所述边缘节点将所述访问日志转发到数据中心，包括通过所述边缘节点缓存所述访问日志，从所述消息队列中获取所述访问日志并发送到数据中心。所述数据中心设置有边缘路由器，用于发送和接收数据信息，通过所述边缘路由器获取所述访问日志信息并发送到所述数据中心中。所述数据中心接收到所述访问日志后，根据预设的分析规则对所述访问日志进行分析，获得分析结果。具体的，所述分析基于预设的启动条件进行，即当接收所述访问数据触发预设的规则时，对所述访问日志进行调用分析。本申请中，所述预设的规则包括，当接收所述访问日志的时间间隔大于预设的最大间隔时启动，执行初步分析。基于所述初步分析结果，本申请所述数据中心可以对所述边缘节点发出控制指令，并等待回复所述访问日志的继续传输。所述边缘节点如果在转发过程中出现网络问题，消息转发服务将按照指数回退的方法进行重试，直到日志发送成功。然后基于所述访问日志分析 CDN 请求的情况、记录并统计用户使用流量情况，通过对边缘 CDN 节点日志收集，当用户遇到 CDN 请求异常时，可快速通过日志进行分析，通过日志统计用户请求流量，计算 CDN 计费使用情况，自主化的针对边缘 CDN 日志进行收集、分析，并保证收集信息的高可靠性，为用户提供分析结果，让用户更直观查看加速服务的状态。请参照图4所述，存储模块204，用于将所述数据中心中的所述访问日志发送到日志存储设备中持久化存储。所述数据中心获取到所述日志数据后，对所述日志数据进行可视化，包括基于日志数据的属性类别统计数据，如图2、3所示。最后将所述日志数据发送到存储设备中进行永久存储。本申请中，所述日志数据的存储包括存储和备份存储，所述存储是指在服务器或者数据中心中进行存储，所述备份存储是指将所述访问日志的数据存储到备份存储器中。在进行所述存储之前，所述日志数据基于预设的格式进行处理，以及进行可视化处理。所述访问日志的可视化可以基于显示格式以及显示项目进行设置，所述显示格式和显示项目是基于实际情况进行设定的。所述数据中心设置有数据接口，用于当用户请求所述访问日志数据时，可以向所述用户发送所述访问日志的数据。所述访问日志数据已经可视化，当用户选择显示界面时，基于所述显示界面的数据，自动生成所述访问日志的请求命令，并向所述数据中心进行数据请求。所述数据中心根据所述请求命令，筛选所述访问日志，获得要发送的数据并发送给客户端。本领域内的技术人员应明白，本申请的实施例可提供为方法、装置、或计算机程序产品。因此，本申请可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本申请可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本申请实施例中的方案可以采用各种计算机语言实现，例如，面向对象的程序设计语言Java和直译式脚本语言JavaScript等。本申请是参照根据本申请实施例的方法、装置、和计算机程序产品的流程图和／或方框图来描述的。应理解可由计算机程序指令实现流程图和／或方框图中的每一流程和／或方框、以及流程图和／或方框图中的流程和／或方框的结合。通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能的步骤。尽管已描述了本申请的优选实施例，但本领域内的技术人员一旦得知了基本创造性概念，则可对这些实施例作出另外的变更和修改。所以，所附权利要求意欲解释为包括优选实施例以及落入本申请范围的所有变更和修改。显然，本领域的技术人员可以对本申请进行各种改动和变型而不脱离本申请的精神和范围。这样，倘若本申请的这些修改和变型属于本申请权利要求及其等同技术的范围之内，则本申请也意图包含这些改动和变型在内。
