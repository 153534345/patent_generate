标题title
一种视频处理方法、装置、设备及可读存储介质
摘要abst
本申请公开了一种视频处理方法、装置、设备及可读存储介质，应用于计算机技术领域。本申请在获取待压缩的视频帧后，按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块；对第一数据块和第二数据块同时进行压缩操作。本申请能够提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。本申请提供的一种视频处理装置、设备及可读存储介质，也同样具有上述技术效果。
权利要求书clms
1.一种视频处理方法，其特征在于，包括：获取待压缩的视频帧；按照预设采样模式将所述视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块；对所述第一数据块和所述第二数据块同时进行压缩操作。2.根据权利要求1所述的方法，其特征在于，所述预设采样模式为：YUV422模式或YUV420模式；相应地，所述按照预设采样模式将所述视频帧中的所有列划分为多个组，包括：按照所述YUV422模式或所述YUV420模式将所述视频帧中的所有列，划分为列个数均为16的多个组。3.根据权利要求1所述的方法，其特征在于，所述预设采样模式为：YUV444模式；相应地，所述按照预设采样模式将所述视频帧中的所有列划分为多个组，包括：按照所述YUV444模式将所述视频帧中的所有列，划分为列个数均为8的多个组。4.根据权利要求1所述的方法，其特征在于，所述将各个组交替存入第一内存区和第二内存区，包括：按照所述视频帧中的所有列的列序号大小排列各个组，得到组序列；将所述组序列中排列位置为奇数的组存入所述第一内存区，将所述组序列中排列位置为偶数的组存入所述第二内存区。5.根据权利要求1所述的方法，其特征在于，所述预设采样模式为：YUV422模式或YUV420模式；相应地，所述按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照所述YUV422模式或所述YUV420模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建所述第一数据块；相应地，所述按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照所述YUV422模式或所述YUV420模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建所述第二数据块。6.据权利要求1所述的方法，其特征在于，所述预设采样模式为：YUV444模式；相应地，所述按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照所述YUV444模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建所述第一数据块；相应地，所述按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照所述YUV444模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量读取至相应缓存队列，并基于各缓存队列构建所述第二数据块。7.根据权利要求5或6所述的方法，其特征在于，所述对所述第一数据块和所述第二数据块同时进行压缩操作之后，还包括：在相应缓存队列中，使所述第一数据块和所述第二数据块的Y分量、U分量和V分量所在的地址空间存储后续新数据块的Y分量、U分量和V分量。8.根据权利要求1至6任一项所述的方法，其特征在于，所述从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块之前，还包括：若所述视频帧为RGB格式，则将所述第一内存区和所述第二内存区中存储的RGB格式的数据转换为YUV格式。9.根据权利要求1至6任一项所述的方法，其特征在于，所述对所述第一数据块和所述第二数据块同时进行压缩操作，包括：对所述第一数据块和所述第二数据块同时进行压缩操作中的DCT变换。10.根据权利要求9所述的方法，其特征在于，还包括：在所述第一数据块和所述第二数据块开始进行DCT变换时，按照所述预设采样模式将所述第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照所述预设采样模式将所述第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。11.根据权利要求1至6任一项所述的方法，其特征在于，还包括：压缩所述第一数据块和所述第二数据块得到压缩数据后，为所述压缩数据添加帧标识，并将添加有所述帧标识的压缩数据写入预设内存区域。12.一种视频处理装置，其特征在于，包括：获取模块，用于获取待压缩的视频帧；存储模块，用于按照预设采样模式将所述视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；数据块构建模块，用于从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块；压缩模块，用于对所述第一数据块和所述第二数据块同时进行压缩操作。13.根据权利要求12所述的装置，其特征在于，所述压缩模块包括：第一压缩单元，用于对所述第一数据块和所述第二数据块同时进行压缩操作中的DCT变换；第二压缩单元，用于在所述第一数据块和所述第二数据块开始进行DCT变换时，按照所述预设采样模式将所述第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照所述预设采样模式将所述第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。14.一种电子设备，其特征在于，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序，以实现如权利要求1至11任一项所述的方法。15.一种可读存储介质，其特征在于，用于保存计算机程序，其中，所述计算机程序被处理器执行时实现如权利要求1至11任一项所述的方法。
说明书desc
技术领域本申请涉及计算机技术领域，特别涉及一种视频处理方法、装置、设备及可读存储介质。背景技术目前，在对内存里的视频进行压缩时，视频数据需要被转换为一个一个的数据块，而转换数据块的过程需要利用缓存暂存构成数据块的分量。但由于缓存空间有限，且现有方案在转换数据块时，需要依次从缓存读取组成该数据块的分量，因此缓存空间资源的释放速度比较慢，依次读取分量数据还会降低视频压缩效率。而在缓存空间有限且缓存空间释放慢的情况下，缓存空间容易被占满。而缓存空间不够用时，后续数据块的分量数据就无法写入缓存，无法写入缓存的数据就会被丢弃，可见还会出现丢帧现象。因此，如何提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧，是本领域技术人员需要解决的问题。发明内容有鉴于此，本申请的目的在于提供一种视频处理方法、装置、设备及可读存储介质，以提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。其具体方案如下：第一方面，本申请提供了一种视频处理方法，包括：获取待压缩的视频帧；按照预设采样模式将所述视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块；对所述第一数据块和所述第二数据块同时进行压缩操作。可选地，所述预设采样模式为：YUV422模式或YUV420模式；相应地，所述按照预设采样模式将所述视频帧中的所有列划分为多个组，包括：按照所述YUV422模式或所述YUV420模式将所述视频帧中的所有列，划分为列个数均为16的多个组。可选地，所述预设采样模式为：YUV444模式；相应地，所述按照预设采样模式将所述视频帧中的所有列划分为多个组，包括：按照所述YUV444模式将所述视频帧中的所有列，划分为列个数均为8的多个组。可选地，所述将各个组交替存入第一内存区和第二内存区，包括：按照所述视频帧中的所有列的列序号大小排列各个组，得到组序列；将所述组序列中排列位置为奇数的组存入所述第一内存区，将所述组序列中排列位置为偶数的组存入所述第二内存区；或将所述组序列中排列位置为偶数的组存入所述第一内存区，将所述组序列中排列位置为奇数的组存入所述第二内存区。可选地，所述预设采样模式为：YUV422模式或YUV420模式；相应地，所述按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照所述YUV422模式或所述YUV420模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；相应地，所述按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照所述YUV422模式或所述YUV420模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第二数据块。可选地，所述预设采样模式为：YUV444模式；相应地，所述按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照所述YUV444模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；相应地，所述按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照所述YUV444模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量读取至相应缓存队列，并基于各缓存队列构建第二数据块。可选地，所述对所述第一数据块和所述第二数据块同时进行压缩操作之后，还包括：在相应缓存队列中，使所述第一数据块和所述第二数据块的Y分量、U分量和V分量所在的地址空间存储后续新数据块的Y分量、U分量和V分量。可选地，所述从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块之前，还包括：若所述视频帧为RGB格式，则将所述第一内存区和所述第二内存区中存储的RGB格式的数据转换为YUV格式。可选地，所述对所述第一数据块和所述第二数据块同时进行压缩操作，包括：对所述第一数据块和所述第二数据块同时进行压缩操作中的DCT变换。可选地，还包括：在所述第一数据块和所述第二数据块开始进行DCT变换时，按照所述预设采样模式将所述第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照所述预设采样模式将所述第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。可选地，还包括：压缩所述第一数据块和所述第二数据块得到压缩数据后，为所述压缩数据添加帧标识，并将添加有所述帧标识的压缩数据写入预设内存区域。第二方面，本申请提供了一种视频处理装置，包括：获取模块，用于获取待压缩的视频帧；存储模块，用于按照预设采样模式将所述视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；数据块构建模块，用于从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块；压缩模块，用于对所述第一数据块和所述第二数据块同时进行压缩操作。可选地，所述压缩模块包括：第一压缩单元，用于对所述第一数据块和所述第二数据块同时进行压缩操作中的DCT变换；第二压缩单元，用于在所述第一数据块和所述第二数据块开始进行DCT变换时，按照所述预设采样模式将所述第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照所述预设采样模式将所述第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。可选地，所述存储模块具体用于：所述预设采样模式为：YUV422模式或YUV420模式，按照所述YUV422模式或所述YUV420模式将所述视频帧中的所有列，划分为列个数均为16的多个组。可选地，所述存储模块具体用于：所述预设采样模式为：YUV444模式；按照所述YUV444模式将所述视频帧中的所有列，划分为列个数均为8的多个组。可选地，所述存储模块具体用于：按照所述视频帧中的所有列的列序号大小排列各个组，得到组序列；将所述组序列中排列位置为奇数的组存入所述第一内存区，将所述组序列中排列位置为偶数的组存入所述第二内存区；或将所述组序列中排列位置为偶数的组存入所述第一内存区，将所述组序列中排列位置为奇数的组存入所述第二内存区。可选地，数据块构建模块具体用于：所述预设采样模式为：YUV422模式或YUV420模式；按照所述YUV422模式或所述YUV420模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；可选地，数据块构建模块具体用于：所述预设采样模式为：YUV422模式或YUV420模式；按照所述YUV422模式或所述YUV420模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第二数据块。可选地，数据块构建模块具体用于：所述预设采样模式为：YUV444模式；按照所述YUV444模式，将所述目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；可选地，所述预设采样模式为：YUV444模式；按照所述YUV444模式，将所述对象地址段中存储的各像素点的Y分量、U分量和V分量读取至相应缓存队列，并基于各缓存队列构建第二数据块。可选地，还包括：缓存复用模块，用于在所述对所述第一数据块和所述第二数据块同时进行压缩操作之后，在相应缓存队列中，使所述第一数据块和所述第二数据块的Y分量、U分量和V分量所在的地址空间存储后续新数据块的Y分量、U分量和V分量。可选地，还包括：格式转换模块，用于若所述视频帧为RGB格式，则在所述从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块之前，将所述第一内存区和所述第二内存区中存储的RGB格式的数据转换为YUV格式。可选地，还包括：压缩数据存储模块，用于压缩所述第一数据块和所述第二数据块得到压缩数据后，为所述压缩数据添加帧标识，并将添加有所述帧标识的压缩数据写入预设内存区域。第三方面，本申请提供了一种电子设备，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序，以实现前述公开的视频处理方法。第四方面，本申请提供了一种可读存储介质，用于保存计算机程序，其中，所述计算机程序被处理器执行时实现前述公开的视频处理方法。通过以上方案可知，本申请提供了一种视频处理方法，包括：获取待压缩的视频帧；按照预设采样模式将所述视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；从所述第一内存区的首地址开始，按照所述预设采样模式将所述第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从所述第二内存区的首地址开始，按照所述预设采样模式将所述第二内存区中的对象地址段中存储的数据构建为第二数据块；对所述第一数据块和所述第二数据块同时进行压缩操作。可见，本申请在内存中存储视频帧时，使用了两块内存区域。具体的，按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区，如此一来，一个视频帧中的所有数据就被分开存在了两块内存区。而本申请按照预设采样模式完成此存储过程，可使两块内存区中所存储的数据为后续压缩操作提供并行执行的先决条件。本申请在转换数据块时，从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；也即：从第一内存区的首地址开始读取一段数据，以构建得到第一数据块。在构建第一数据块时，同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块；也即：从第二内存区的首地址开始读取一段数据，以构建得到第二数据块。由此本申请可实现：同一时间完成两个数据块的构建，如此也就可以尽快释放这两个数据块所占用的缓存资源，从而节约缓存空间，避免出现丢帧现象。由于本申请能在同一时间完成两个数据块的构建，因此后续也可以对两个数据块同时进行压缩操作，从而提升压缩效率。可见，本申请能够提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。相应地，本申请提供的一种视频处理装置、设备及可读存储介质，也同样具有上述技术效果。附图说明为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本申请的实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据提供的附图获得其他的附图。图1为本申请公开的一种视频处理方法流程图；图2为本申请公开的第一数据块和第二数据块的数据构成示意图；图3为本申请公开的一种压缩框架示意图；图4为本申请公开的一种视频处理装置示意图；图5为本申请公开的一种电子设备示意图。具体实施方式下面将结合本申请实施例中的附图，对本申请实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。目前，现有方案在转换数据块时，需要依次从缓存读取组成该数据块的分量，因此缓存空间资源的释放速度比较慢，依次读取分量数据还会降低视频压缩效率。而在缓存空间有限且缓存空间释放慢的情况下，缓存空间容易被占满。而缓存空间不够用时，后续数据块的分量数据就无法写入缓存，无法写入缓存的数据就会被丢弃，可见还会出现丢帧现象。为此，本申请提供了一种视频处理方案，能够提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。参见图1所示，本申请实施例公开了一种视频处理方法，包括：S101、获取待压缩的视频帧。S102、按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区。本实施例在内存中存储视频帧时，使用了两块内存区域。具体的，按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区，如此一来，一个视频帧中的所有数据就被分开存在了两块内存区。而按照预设采样模式完成此存储过程，可使两块内存区中所存储的数据为后续压缩操作提供并行执行的先决条件。其中，预设采样模式可以是YUV422模式、YUV420模式或YUV444模式，不同模式所规定的采样大小不同。YUV422模式和YUV420模式规定的采样大小为：16，而YUV444模式规定的采样大小为：8。故采用YUV422模式或YUV420模式时，每16列构成一个组；采用YUV444模式时，每8列构成一个组。在一种实施方式中，预设采样模式为：YUV422模式或YUV420模式；相应地，按照预设采样模式将视频帧中的所有列划分为多个组，包括：按照YUV422模式或YUV420模式将视频帧中的所有列，划分为列个数均为16的多个组。在一种实施方式中，预设采样模式为：YUV444模式；相应地，按照预设采样模式将视频帧中的所有列划分为多个组，包括：按照YUV444模式将视频帧中的所有列，划分为列个数均为8的多个组。假设一个视频帧共有第0-第95列，共96列，那么若按照YUV422模式或YUV420模式，第0-15列构成一个组，第16-31列构成一个组，第32-47列构成一个组……其他以此类推，可得到6个组。将这6个组交替存入第一内存区和第二内存区，也就是：将第0-15列构成的组1存入第一内存区，将第16-31列构成的组2存入第二内存区，将第32-47列构成的组3存入第一内存区，将第48-63列构成的组4存入第二内存区，将第64-79列构成的组5存入第一内存区，将第80-95列构成的组6存入第二内存区。可见，组1、组3、组5存入第一内存区，而组2、组4、组6存入第二内存区，因此实现：各个组交替存入第一内存区和第二内存区。因此在一种实施方式中，将各个组交替存入第一内存区和第二内存区，包括：按照视频帧中的所有列的列序号大小排列各个组，得到组序列；将组序列中排列位置为奇数的组存入第一内存区，将组序列中排列位置为偶数的组存入第二内存区；或将组序列中排列位置为偶数的组存入第一内存区，将组序列中排列位置为奇数的组存入第二内存区。若96列的视频帧按照YUV444模式分组，则第0-7列构成一个组，第8-15列构成一个组……其他以此类推，可得到12个组。将12个组交替存入第一内存区和第二内存区时，可参照上述示例实现，在此不再赘述。S103、从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块。需要说明的是，不同模式所规定的数据块大小不同。YUV422模式和YUV420模式规定的数据块大小为：16×16，而YUV444模式规定的数据块大小为：8×8。故采用YUV422模式或YUV420模式时，第一数据块和第二数据块为16×16的规格。采用YUV444模式时，第一数据块和第二数据块为8×8的规格。本实施例在基于第一内存区里的数据构建数据块时，从第一内存区的首地址开始读取一段数据，基于此时读取的数据可确定：用于构建第一数据块的各像素点的Y分量、U分量和V分量，而这些分量数据会写入缓存队列，而后据此缓存队列里的数据构建得到第一数据块。在构建第一数据块时，同时从第二内存区的首地址开始读取一段数据，基于此时读取的数据可确定：用于构建第二数据块的各像素点的Y分量、U分量和V分量，而这些分量数据会写入缓存队列，而后据此缓存队列里的数据构建得到第二数据块。由此可实现：同一时间完成两个数据块的构建，如此也就可以尽快释放这两个数据块所占用的缓存资源，从而节约缓存空间，避免出现丢帧现象。其中，第一内存区和第二内存区可以存储YUV格式的视频像素，也可以存储RGB格式的视频像素。若第一内存区和第二内存区存储YUV格式的视频像素，那么可直接从第一内存区和第二内存区中读取得到用于构建第一数据块和第二数据块的各像素点的Y分量、U分量和V分量。若第一内存区和第二内存区存储RGB格式的视频像素，那么从第一内存区和第二内存区中读取得到一段数据后，需要将所读取的数据转换为YUV格式，由此也就可以确定：用于构建第一数据块和第二数据块的各像素点的Y分量、U分量和V分量。但此方式需要每从内存中读取一段数据，都进行一次格式转换。为此，可以在第一内存区和第二内存区存储RGB格式的视频像素时，先将第一内存区和第二内存区存储RGB格式的视频像素统一都转换为YUV格式，而后再进行数据块的创建。因此在一种实施方式中，在从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块之前，还包括：若视频帧为RGB格式，则将第一内存区和第二内存区中存储的RGB格式的数据转换为YUV格式。在一种实施方式中，预设采样模式为：YUV422模式或YUV420模式；相应地，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照YUV422模式或YUV420模式，将目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；相应地，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照YUV422模式或YUV420模式，将对象地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第二数据块。由此显而易见，若第一内存区存储YUV格式的视频像素，目标地址段中存储的数据就是：用于构建第一数据块的各像素点的Y分量、U分量和V分量。相应地，若第二内存区存储YUV格式的视频像素，对象地址段中存储的数据就是：用于构建第二数据块的各像素点的Y分量、U分量和V分量。其中，YUV420模式下，输入到后级压缩模块的Y分量是16*16，而U/V分量是8*8，U/V分量的舍弃是在将YUV数据写入各自的FIFO时进行的。比如YUV420模式下，只保留偶数行和偶数列的U/V分量，因此U/V分量输入到后级压缩模块时是8*8的。相应地，在YUV422模式下，Y分量、U分量和V分量也按照该模式既定的规则进行舍弃或保留。在一种实施方式中，预设采样模式为：YUV444模式；相应地，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块，包括：按照YUV444模式，将目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；相应地，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块，包括：按照YUV444模式，将对象地址段中存储的各像素点的Y分量、U分量和V分量读取至相应缓存队列，并基于各缓存队列构建第二数据块。由此显而易见，若第一内存区存储YUV格式的视频像素，目标地址段中存储的数据就是：用于构建第一数据块的各像素点的Y分量、U分量和V分量。相应地，若第二内存区存储YUV格式的视频像素，对象地址段中存储的数据就是：用于构建第二数据块的各像素点的Y分量、U分量和V分量。在YUV422模式下，只保留偶数列的U/V分量，因此U/V输入到后级压缩时是16*8的。可见，在不同模式下形成数据块时，Y分量、U分量和V分量都需要按照相应模式既定的规则进行舍弃或保留。当然，在第一内存区和第二内存区存储RGB格式的视频像素时，可以在构建数据块之前，将第一内存区和第二内存区中RGB格式的视频像素统一转换为YUV格式，也可以每读取一段用于构建数据块的像素后，将当前所读取像素转换为YUV格式，由此也能得到用于构建数据块的各像素点的Y分量、U分量和V分量。在一种示例中，第一数据块和第二数据块的数据构成可参照图2。如图2所示，若按照YUV422模式或YUV420模式，BLOCK0对应视频帧的第0-15行×第0-15列，BLOCK1对应视频帧的第0-15行×第16-31列，BLOCK2对应视频帧的第0-15行×第32-47列……其他以此类推。若按照YUV444模式，那么BLOCK0对应视频帧的第0-7行×第0-7列，BLOCK1对应视频帧的第0-15行×第8-15列……其他以此类推。对于BLOCK0、BLOCK2、BLOCK4……这些第一数据块而言，构成它们的分量数据存储于第一内存区。对于BLOCK1、BLOCK3、BLOCK5……这些第二数据块而言，构成它们的分量数据存储于第二内存区。本实施例可实现：同一时间完成两个数据块的构建，如此也就可以尽快释放这两个数据块所占用的缓存资源。因此在一种实施方式中，对第一数据块和第二数据块同时进行压缩操作之后，还包括：在相应缓存队列中，使所述第一数据块和所述第二数据块的Y分量、U分量和V分量所在的地址空间存储后续新数据块的Y分量、U分量和V分量，从而使缓存队列可以继续用于构建新数据块，实现已进入压缩模块的数据块所占用缓存资源的复用，能够节约缓存空间，避免出现丢帧现象。S104、对第一数据块和第二数据块同时进行压缩操作。由于本实施例能在同一时间完成两个数据块的构建，因此后续也可以对两个数据块同时进行压缩操作，从而提升压缩效率。在一种实施方式中，对第一数据块和第二数据块同时进行压缩操作，包括：对第一数据块和第二数据块同时进行压缩操作中的DCT变换。可见，压缩操作中包括DCT变换。由于DCT变换的过程需要占用较多时间，因此如果等第一数据块和第二数据块的DCT变换完成，再进行后续数据块的压缩，会增加压缩时长。为此，本实施例，在第一数据块和第二数据块开始进行DCT变换时，按照预设采样模式将第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照预设采样模式将第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。也就是：在第一数据块和第二数据块被DCT变换模块读取后，就开始构建读取后续数据块，此时可设另一DCT变换模块，那么后续数据块可被另一DCT变换模块进行DCT变换。如此一来，就不必等待第一数据块和第二数据块的DCT变换，而可以在第一数据块和第二数据块进行DCT变换的过程中，对后续其他数据块也进行DCT变换，从而可以缩短压缩时间，提高压缩效率。请参照图2，在一种示例中，可以为所有的第一数据块设置两个DCT变换模块：DCT0和DCT2，同时为所有的第二数据块设置两个DCT变换模块：DCT1和DCT3，那么可实现如下步骤：DCT0读完BLOCK0准备进入DCT变换流程时，DCT2开始读BLOCK2，以对BLOCK2进行DCT变换，那么BLOCK0和BLOCK2的DCT变换就有了时间上的重复，从而可节约时间。在DCT0读BLOCK0时，DCT1也读BLOCK1，那么DCT1读完BLOCK1准备进入DCT变换流程时，DCT3开始读BLOCK3，以对BLOCK3进行DCT变换，那么BLOCK1和BLOCK3的DCT变换就有了时间上的重复。而由于BLOCK0和BLOCK1是同时开始DCT变换的，因此在BLOCK0和BLOCK2有DCT变换时间重复，BLOCK1和BLOCK3有DCT变换时间重复的基础上，BLOCK0、BLOCK1、BLOCK2、BLOCK3也可能有DCT变换的时间重复。可见，本实施例可以并行对多个数据块进行DCT变换，由此可提升压缩效率。当然，设置更多DCT变换模块，可以进一步提升压缩效率。在一种实施方式中，压缩第一数据块和第二数据块得到压缩数据后，为压缩数据添加帧标识，并将添加有帧标识的压缩数据写入预设内存区域。可见，本实施例在内存中存储视频帧时，使用了两块内存区域。具体的，按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区，如此一来，一个视频帧中的所有数据就被分开存在了两块内存区。而本实施例按照预设采样模式完成此存储过程，可使两块内存区中所存储的数据为后续压缩操作提供并行执行的先决条件。本实施例在转换数据块时，从第一内存区的首地址开始读取一段数据，以构建得到第一数据块。在构建第一数据块时，同时从第二内存区的首地址开始读取一段数据，以构建得到第二数据块。由此本实施例可实现：同一时间完成两个数据块的构建，如此也就可以尽快释放这两个数据块所占用的缓存资源，从而节约缓存空间，避免出现丢帧现象。由于本实施例能在同一时间完成两个数据块的构建，因此后续也可以对两个数据块同时进行压缩操作，从而提升压缩效率。可见，本实施例能够提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。需要说明的是，服务器中的基板管理控制系统压缩视频时，主机端将视频数据通过PCIe传递到基板管理控制系统中的VGA，VGA将其写入主机DDR。之后，读控制模块读取DDR中的数据，然后通过色彩空间转换模块将原始的RGB格式的视频数据转换为YUV格式的数据，然后按照BLOCK格式转换需求，将Y、U、V分量用系统内的存储资源进行FIFO缓存，由此完成YUV2BLOCK的格式转换。之后压缩模块按照BLOCK的顺序读取各个BLOCK进行压缩，压缩完成后，将压缩数据写入DDR，并通过MAC发送至远端。远端可以显示该视频数据。其中，FIFO缓存需要根据视频分辨率设定合适的深度和宽度。例如：分辨率为1920*1200时，FIFO的深度为16384，宽度为8bits，才能使FIFO不会出现满的情况。宽度指：每次往FIFO缓存写入的数据大小；深度指：FIFO缓存里可存的8bits数据的总个数。在本实施例中，VGA在将RGB原始数据写入DDR的时候，分别写入SPACE_LOW和SPACE_HIGH两块内存区域，且本实施例中的压缩模块支持YUV444、YUV422、YUV420模式。SPACE_LOW即：上述实施例所述的第一内存区；SPACE_HIGH即上述实施例所述的第二内存区。当然也可以反过来，将SPACE_LOW看作上述实施例所述的第二内存区，将SPACE_HIGH看作上述实施例所述的第一内存区。如果压缩模块采用YUV422或YUV420模式，则将一个视频帧的所有行的第0-15列，32-47列，64-79列……的RGB数据写入SPACE_LOW空间；同时将该视频帧的所有行的第16-31列，48-63列，80-95列……的RGB数据写入SPACE_HIGH空间。如果压缩模块采用YUV444模式，则将一个视频帧的将所有行的第0-7列，16-23列，32-39列……的RGB数据写入SPACE_LOW空间；同时将该视频帧的所有行的第8-15列，24-31列，40-47列……的RGB数据写入SPACE_HIGH空间。以YUV420模式为例，若从DDR中读取RGB数据，则首先读取SPACE_LOW空间的数据，一次读取16个RGB数据，之后经过RGB2YUV的色彩空间转换，输入到YUV2BLOCK_NEW_0。第二次读取SPACE_HIGH空间的数据，一次读取16个RGB数据，经过RGB2YUV的色彩空间转换后，输入到YUV2BLOCK_NEW_1。重复上述步骤，就可以将原始RGB数据分别送入YUV2BLOCK_NEW_0和YUV2BLOCK_NEW_1。其中，YUV2BLOCK_NEW_0和YUV2BLOCK_NEW_1是两个YUV转BLOCK模块，这两个模块分别对应SPACE_LOW和SPACE_HIGH这两块内存区域。如此一来，这两个YUV转BLOCK模块可同步进行BLOCK转换，从而为后续BLOCK的同步压缩提供前提条件。其中，YUV422模式时，一次读取16个RGB数据。YUV444模式时，一次读取8个RGB数据。在现有技术中，需要设置16个Y_FIFO、16个U_FIFO、16个V_FIFO才能完成BLOCK转换。本实施例设置了32个Y分量缓存队列：Y_FIFO_0_A~Y_FIFO_15_A，Y_FIFO_0_B~Y_FIFO_15_B；32个U分量缓存队列：U_FIFO_0_A~U_FIFO_15_A，U_FIFO_0_B~U_FIFO_15_B；32个V分量缓存队列：V_FIFO_0_A~V_FIFO_15_A，V_FIFO_0_B~V_FIFO_15_B。在不同采样模式下，所用的缓存队列的个数不同。在一种示例中，Y_FIFO_0_A~Y_FIFO_15_A用于缓存构成BLOCK0的Y分量，Y_FIFO_0_B~Y_FIFO_15_B用于缓存构成BLOCK2的Y分量。U_FIFO_0_A~U_FIFO_15_A用于缓存构成BLOCK0的U分量，U_FIFO_0_B~U_FIFO_15_B用于缓存构成BLOCK2的U分量，V_FIFO_0_A~V_FIFO_15_A用于缓存构成BLOCK0的V分量，V_FIFO_0_B~V_FIFO_15_B用于缓存构成BLOCK2的V分量。据此，本实施例可以同步构建BLOCK0和BLOCK2，从而为BLOCK0和BLOCK2的同步压缩提供前提基础。相应地，本实施例可以同步构建BLOCK4和BLOCK6，BLOCK8和BLOCK10，BLOCK1和BLOCK3，BLOCK5和BLOCK7，其他以此类推。YUV420模式下，需要缓存全部的Y分量，同时缓存偶数行和偶数列的U/V分量。那么缓存所有行及所有列的Y分量时，先针对视频帧的第0/16/32……行的所有Y分量，将第0-15列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第16-31列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第32-47列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第48-63列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B；将第64-79列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第80-95列的Y分量进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第96-111列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第112-127列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有Y分量的缓存。该视频帧的第1/17/33……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_1_A、Y_FIFO_1_B即可。相应地，针对该视频帧的第15/31/47……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_15_A、Y_FIFO_15_B。YUV420模式下，缓存偶数行及偶数列的U分量时，先针对视频帧的第0/16/32……行的U分量，将第0/2/4/6…14列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第16/18/20…30列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第32/34/36…46列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第48/50/52…62列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B；将第64/66/68…78列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第80/82/84…94列的U分量进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第96/98/100…110列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第112/114/116…126列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有U分量的缓存。对于第2/18/34……行的U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_1_A、U_FIFO_1_B对于第14/30/46……行的U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_7_A/U_FIFO_7_B。YUV420模式下，缓存偶数行及偶数列的V分量是，先对于第0/16/32……行的V分量，将第0/2/4/6…14列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第16/18/20…30列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第32/34/36…46列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第48/50/52…62列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B；将第64/66/68…78列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第80/82/84…94列的V分量进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第96/98/100…110列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第112/114/116…126列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有V分量的缓存。对于第2/18/34……行的V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_1_A、U_FIFO_1_B。对于第14/30/46……行的V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_7_A、V_FIFO_7_B。YUV422模式下，需要缓存全部的Y分量，同时缓存偶数列的U/V分量。那么缓存所有行及所有列的Y分量时，先针对第0行/16/32…行的Y分量，将第0-15列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第16-31列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第32-47列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第48-63列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B；将第64-79列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第80-95列的Y分量进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第96-111列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第112-127列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有Y分量的缓存。对于第1/17/33……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_1_A、Y_FIFO_1_B。对于第15/31/47……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_15_A/Y_FIFO_15_B。YUV422模式下，缓存偶数列的U分量，故针对第0行/16/32…行的U分量；将第0/2/4/6…14列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第16/18/20…30列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第32/34/36…46列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第48/50/52…62列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B；将第64/66/68…78列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第80/82/84…94列的U分量进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第96/98/100…110列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第112/114/116…126列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有U分量的缓存。对于第1/17/33……行的所有U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_1_A/U_FIFO_1_B。对于第15/31/47……行的所有U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_15_A、U_FIFO_15_B。YUV422模式下，缓存偶数列的V分量，故针对第0行/16/32…行的V分量，将第0/2/4/6…14列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第16/18/20…30列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第32/34/36…46列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第48/50/52…62列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B；将第64/66/68…78列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第80/82/84…94列的V分量进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第96/98/100…110列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第112/114/116…126列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B……其他列以此类推，直至完成第0/16/32……行的所有V分量的缓存。对于第1/17/33……行的所有V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_1_A、V_FIFO_1_B。对于第15/31/47……行的所有V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_15_A、V_FIFO_15_B。YUV444模式下，缓存全部行全部列的Y/U/V数据。那么缓存全部行全部列的Y分量时，先针对第0行/8/16…行的Y分量，第0-7列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第8-15列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第16-23列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第24-31列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B；将第32-39列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_A；将第40-47列的Y分量进YUV2BLOCK_NEW_1的Y_FIFO_0_A；将第48-55列的Y分量写进YUV2BLOCK_NEW_0的Y_FIFO_0_B；将第56-63列的Y分量写进YUV2BLOCK_NEW_1的Y_FIFO_0_B……其他列以此类推，直至完成第0行/8/16…行的所有Y分量的缓存。对于第1/9/17……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_1_A、Y_FIFO_1_B。对于第7/15/23……行的所有Y分量，也按照相应规则完成缓存，缓存队列改为：Y_FIFO_7_A、Y_FIFO_7_B。YUV444模式下，缓存全部行全部列的U分量时，先对于第0行/8/16…行的U分量，将第0-7列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第8-15列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第16-23列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第24-31列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B；将第32-39列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_A；将第40-47列的U分量进YUV2BLOCK_NEW_1的U_FIFO_0_A；将第48-55列的U分量写进YUV2BLOCK_NEW_0的U_FIFO_0_B；将第56-63列的U分量写进YUV2BLOCK_NEW_1的U_FIFO_0_B……其他列以此类推，直至完成第0行/8/16…行的所有U分量的缓存。对于第1/9/17……行的所有U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_1_A、U_FIFO_1_B。对于第7/15/23……行的所有U分量，也按照相应规则完成缓存，缓存队列改为：U_FIFO_7_A、U_FIFO_7_B。YUV444模式下，缓存全部行全部列的V分量时，先对于第0行/8/16…行的V分量，将第0-7列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第8-15列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第16-23列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第24-31列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B；将第32-39列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_A；将第40-47列的V分量进YUV2BLOCK_NEW_1的V_FIFO_0_A；将第48-55列的V分量写进YUV2BLOCK_NEW_0的V_FIFO_0_B；将第56-63列的V分量写进YUV2BLOCK_NEW_1的V_FIFO_0_B……其他列以此类推，直至完成第0行/8/16…行的所有V分量的缓存。对于第1/9/17……行的所有V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_1_A、V_FIFO_1_B。对于第7/15/23……行的所有V分量，也按照相应规则完成缓存，缓存队列改为：V_FIFO_7_A、V_FIFO_7_B。可见，在不同采样模式下，采用32个Y分量缓存队列，32个U分量缓存队列，32个V分量缓存队列可以使：一个转换模块同步构建两个BLOCK。因此本实施例能够实现数据的同步压缩，即实现：YUV2BLOCK_NEW_0和YUV2BLOCK_NEW_1同时构建得到BLOCK_0和BLOCK_1，从而使BLOCK_0和BLOCK_1同步压缩；同时，YUV2BLOCK_NEW_0同时构建BLOCK_0和BLOCK_2，而BLOCK_0和BLOCK_2的压缩有一定的时间重复，使得BLOCK_0和BLOCK_2非完全同步压缩；同理，YUV2BLOCK_NEW_1同时构建BLOCK_1和BLOCK_3，而BLOCK_1和BLOCK_3的压缩有一定的时间重复，使得BLOCK_1和BLOCK_3非完全同步压缩，从而提升压缩效率。YUV420模式下按照下述过程读缓存：读16次YUV2BLOCK_NEW_0中的Y_FIFO_0_A，同步读16次YUV2BLOCK_NEW_1中的Y_FIFO_0_A……读16次YUV2BLOCK_NEW_0中的Y_FIFO_15_A；同步读16次YUV2BLOCK_NEW_1中的Y_FIFO_15_A，从而读取一组16*16的Y分量，以构成16*16的BLOCK数据。读8次YUV2BLOCK_NEW_0中的U_FIFO_0_A，同步读8次 YUV2BLOCK_NEW_1中的U_FIFO_0_A……读8次YUV2BLOCK_NEW_0中的U_FIFO_7_A，同步读8次YUV2BLOCK_NEW_1中的U_FIFO_7_A，从而读取一组8*8的U分量，以构成8*8的BLOCK数据。读8次YUV2BLOCK_NEW_0中的V_FIFO_0_A，同步读8次YUV2BLOCK_NEW_1中的V_FIFO_0_A……读8次YUV2BLOCK_NEW_0中的V_FIFO_7_A，同步读8次 YUV2BLOCK_NEW_1中的V_FIFO_7_A，从而读取一组8*8的V分量，以构成8*8的BLOCK数据。可见，基于所读取的数据可相应构建BLOCK数据，后续可将BLOCK数据送入压缩模块中。请参见图3，按照本实施例提供的压缩框架包括：两个BLOCK转换模块：YUV2BLOCK_NEW_0和YUV2BLOCK_NEW_1；两个压缩模块：压缩模块0和压缩模块1。并且，压缩模块0中包括两个DCT单元：DCT0和DCT2，压缩模块1中包括两个DCT单元：DCT1和DCT3。具体的，YUV2BLOCK_NEW_0产生第一个BLOCK0，BLOCK0被送入压缩模块0中的DCT_0单元，以进行DCT变化处理，由于DCT变换的处理时间较长，因此在压缩模块0中的DCT_0处理BLOCK0时，仲裁模块再次产生读YUV2BLOCK_NEW_0的读时序，此时读取Y_FIFO_0_B、Y_FIFO_1_B……，以构建得到BLOCK_2，将BLOCK_2输入到压缩模块0中的DCT_1，由此BLOCK0和BLOCK2就有了压缩重复时间，因此二者可看作并行压缩。由于YUV2BLOCK_NEW_0产生BLOCK0时，YUV2BLOCK_NEW_1会同步产生BLOCK1，因此BLOCK0和BLOCK1可同步压缩。相应的，BLOCK1和BLOCK3也有压缩重复时间，因此BLOCK0、BLOCK1、BLOCK2、BLOCK4有概率同时被压缩。如此一来，YUV2BLOCK模块、压缩模块中各单元可被充分利用，极大加快了数据处理的速度。其中，压缩模块中的其他单元包括：量化单元、熵编码单元、组帧单元等。量化单元能够在保证图像质量的前提下，获得较高的压缩比，相对于高频成分对低频成分采用较小的量化间隔和较少的比特数。熵编码单元能够进一步对视频图像进行压缩，根据不同符号的概率分布进行不同码长的编码。组帧单元能够确定图像开始标志、图像结束标志、帧头标等。因为本实施例有两个压缩模块同步输出压缩数据，故需要对压缩数据加帧头帧尾、进行组帧并顺序输出到DDR。可见，本实施例能够使DDR中SPACE_LOW和SPACE_HIGH空间的数据同步压缩，并且一个YUV2BLOCK模块所构建的相邻BLOCK有压缩时间上的重复，极大加快了基板管理控制芯片中JPEG视频压缩的速度，降低了丢帧率，减少了数据在片内的缓存时间，减少了视频压缩功能对片上资源空间的占用，能够提升芯片的整体性能。下面对本申请实施例提供的一种视频处理装置进行介绍，下文描述的一种视频处理装置与上文描述的一种视频处理方法可以相互参照。参见图4所示，本申请实施例公开了一种视频处理装置，包括：获取模块401，用于获取待压缩的视频帧；存储模块402，用于按照预设采样模式将视频帧中的所有列划分为多个组，并将各个组交替存入第一内存区和第二内存区；数据块构建模块403，用于从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块；压缩模块404，用于对第一数据块和第二数据块同时进行压缩操作。在一种实施方式中，压缩模块包括：第一压缩单元，用于对第一数据块和第二数据块同时进行压缩操作中的DCT变换；第二压缩单元，用于在第一数据块和第二数据块开始进行DCT变换时，按照预设采样模式将第一内存区中的下一地址段中存储的数据构建为新的第一数据块，同时按照预设采样模式将第二内存区中的下一地址段中存储的数据构建为新的第二数据块，以对新的第一数据块和新的第二数据块同时进行压缩操作。在一种实施方式中，存储模块具体用于：预设采样模式为：YUV422模式或YUV420模式，按照YUV422模式或YUV420模式将视频帧中的所有列，划分为列个数均为16的多个组。在一种实施方式中，存储模块具体用于：预设采样模式为：YUV444模式；按照YUV444模式将视频帧中的所有列，划分为列个数均为8的多个组。在一种实施方式中，存储模块具体用于：按照视频帧中的所有列的列序号大小排列各个组，得到组序列；将组序列中排列位置为奇数的组存入第一内存区，将组序列中排列位置为偶数的组存入第二内存区；或将组序列中排列位置为偶数的组存入第一内存区，将组序列中排列位置为奇数的组存入第二内存区。在一种实施方式中，数据块构建模块具体用于：预设采样模式为：YUV422模式或YUV420模式；按照YUV422模式或YUV420模式，将目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；在一种实施方式中，数据块构建模块具体用于：预设采样模式为：YUV422模式或YUV420模式；按照YUV422模式或YUV420模式，将对象地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第二数据块。在一种实施方式中，数据块构建模块具体用于：预设采样模式为：YUV444模式；按照YUV444模式，将目标地址段中存储的各像素点的Y分量、U分量和V分量分别读取至相应缓存队列，并基于各缓存队列构建第一数据块；在一种实施方式中，预设采样模式为：YUV444模式；按照YUV444模式，将对象地址段中存储的各像素点的Y分量、U分量和V分量读取至相应缓存队列，并基于各缓存队列构建第二数据块。在一种实施方式中，还包括：缓存复用模块，用于在对第一数据块和第二数据块同时进行压缩操作之后，在相应缓存队列中，使所述第一数据块和所述第二数据块的Y分量、U分量和V分量所在的地址空间存储后续新数据块的Y分量、U分量和V分量。在一种实施方式中，还包括：格式转换模块，用于若视频帧为RGB格式，则在从第一内存区的首地址开始，按照预设采样模式将第一内存区中的目标地址段中存储的数据构建为第一数据块；同时从第二内存区的首地址开始，按照预设采样模式将第二内存区中的对象地址段中存储的数据构建为第二数据块之前，将第一内存区和第二内存区中存储的RGB格式的数据转换为YUV格式。在一种实施方式中，还包括：压缩数据存储模块，用于压缩第一数据块和第二数据块得到压缩数据后，为压缩数据添加帧标识，并将添加有帧标识的压缩数据写入预设内存区域。其中，关于本实施例中各个模块、单元更加具体的工作过程可以参考前述实施例中公开的相应内容，在此不再进行赘述。可见，本实施例提供了一种视频处理装置，能够提高视频压缩效率，节约缓存空间，避免压缩过程中出现丢帧。下面对本申请实施例提供的一种电子设备进行介绍，下文描述的一种电子设备与上文描述的一种视频处理方法及装置可以相互参照。参见图5所示，本申请实施例公开了一种电子设备，包括：存储器501，用于保存计算机程序；处理器502，用于执行所述计算机程序，以实现上述任意实施例公开的方法。进一步的，本申请实施例还提供了一种服务器来作为上述电子设备。该服务器，具体可以包括：至少一个处理器、至少一个存储器、电源、通信接口、输入输出接口和通信总线。其中，所述存储器用于存储计算机程序，所述计算机程序由所述处理器加载并执行，以实现前述任一实施例公开的视频处理方法中的相关步骤。本实施例中，电源用于为服务器上的各硬件设备提供工作电压；通信接口能够为服务器创建与外界设备之间的数据传输通道，其所遵循的通信协议是能够适用于本申请技术方案的任意通信协议，在此不对其进行具体限定；输入输出接口，用于获取外界输入数据或向外界输出数据，其具体的接口类型可以根据具体应用需要进行选取，在此不进行具体限定。另外，存储器作为资源存储的载体，可以是只读存储器、随机存储器、磁盘或者光盘等，其上所存储的资源包括操作系统、计算机程序及数据等，存储方式可以是短暂存储或者永久存储。其中，操作系统用于管理与控制服务器上的各硬件设备以及计算机程序，以实现处理器对存储器中数据的运算与处理，其可以是Windows Server、Netware、Unix、Linux等。计算机程序除了包括能够用于完成前述任一实施例公开的视频处理方法的计算机程序之外，还可以进一步包括能够用于完成其他特定工作的计算机程序。数据除了可以包括虚拟机等数据外，还可以包括虚拟机的开发商信息等数据。进一步的，本申请实施例还提供了一种终端来作为上述电子设备。该终端具体可以包括但不限于智能手机、平板电脑、笔记本电脑或台式电脑等。通常，本实施例中的终端包括有：处理器和存储器。其中，处理器可以包括一个或多个处理核心，比如4核心处理器、8核心处理器等。处理器可以采用DSP、FPGA、PLA中的至少一种硬件形式来实现。处理器也可以包括主处理器和协处理器，主处理器是用于对在唤醒状态下的数据进行处理的处理器，也称CPU；协处理器是用于对在待机状态下的数据进行处理的低功耗处理器。在一些实施例中，处理器可以在集成有GPU，GPU用于负责显示屏所需要显示的内容的渲染和绘制。一些实施例中，处理器还可以包括AI处理器，该AI处理器用于处理有关机器学习的计算操作。存储器可以包括一个或多个计算机可读存储介质，该计算机可读存储介质可以是非暂态的。存储器还可包括高速随机存取存储器，以及非易失性存储器，比如一个或多个磁盘存储设备、闪存存储设备。本实施例中，存储器至少用于存储以下计算机程序，其中，该计算机程序被处理器加载并执行之后，能够实现前述任一实施例公开的由终端侧执行的视频处理方法中的相关步骤。另外，存储器所存储的资源还可以包括操作系统和数据等，存储方式可以是短暂存储或者永久存储。其中，操作系统可以包括Windows、Unix、Linux等。数据可以包括但不限于应用程序的更新信息。在一些实施例中，终端还可包括有显示屏、输入输出接口、通信接口、传感器、电源以及通信总线。下面对本申请实施例提供的一种可读存储介质进行介绍，下文描述的一种可读存储介质与上文描述的一种视频处理方法、装置及设备可以相互参照。一种可读存储介质，用于保存计算机程序，其中，所述计算机程序被处理器执行时实现前述实施例公开的视频处理方法。本文中应用了具体个例对本申请的原理及实施方式进行了阐述，以上实施例的说明只是用于帮助理解本申请的方法及其核心思想；同时，对于本领域的一般技术人员，依据本申请的思想，在具体实施方式及应用范围上均会有改变之处，综上所述，本说明书内容不应理解为对本申请的限制。
