标题title
处理重传请求的方法及装置、数据发送端设备和存储介质
摘要abst
本申请提供一种处理重传请求的方法及装置、数据发送端设备和存储介质，属于计算机技术领域。该方法包括：接收来自数据接收端设备对于缺失数据包的重传请求；响应于重传请求，向数据接收端设备发送缺失数据包；在目标网络环境满足冗余重传条件时，在发送缺失数据包的时刻的第一时长之后，向数据接收端设备发送冗余重传数据包，冗余重传数据包的内容与已发送的缺失数据包相同；其中，冗余重传条件为用于确定网络环境是否足以负担冗余重传数据包的传输的条件，第一时长小于目标网络环境的当前的往返时延。本申请能够帮助解决现有重传策略无法满足低重传时延要求的问题。
权利要求书clms
1.一种处理重传请求的方法，应用于数据发送端设备，其特征在于，所述方法包括：接收来自数据接收端设备对于缺失数据包的重传请求；其中，所述缺失数据包为所述数据接收端设备在接收到来自所述数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包；响应于所述重传请求，向所述数据接收端设备发送所述缺失数据包；在目标网络环境满足冗余重传条件时，在发送所述缺失数据包的时刻的第一时长之后，向所述数据接收端设备发送冗余重传数据包，所述冗余重传数据包的内容与已发送的所述缺失数据包相同；其中，所述目标网络环境为所述数据发送端设备向所述数据接收端设备传输数据包时所使用的网络环境，所述冗余重传条件为用于确定网络环境是否足以负担所述冗余重传数据包的传输的条件，所述第一时长小于所述目标网络环境的当前的往返时延，所述往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。2.根据权利要求1所述的方法，其特征在于，所述方法还包括：在每个第一时长的更新周期中，将上一个更新周期内新增的往返时延添加至往返时延集合当中，删除所述往返时延集合中过期的往返时延，并将所述第一时长更新为所述往返时延集合内的往返时延的平均值的n倍，其中n为大于0.2并小于0.8的预定值。3.根据权利要求2所述的方法，其特征在于，所述方法还包括：将所述往返时延集合内的往返时延的平均值发送至所述数据接收端设备，以使所述数据接收端设备将发送重复重传请求时的最小发送间隔配置为正相关于所述往返时延的平均值和重复次数；其中，所述重复重传请求为所述数据接收端设备在发送一次对于目标数据包的重传请求之后发送的对于所述目标数据包的重传请求，所述重复次数为所述数据接收端设备已发送过的对于所述目标数据包的重传请求的次数，所述最小发送间隔为所述数据接收端设备相邻两次发送对于所述目标数据包的重传请求之间的最小间隔时长。4.根据权利要求2所述的方法，其特征在于，所述方法还包括：将min的值发送至所述数据接收端设备，以使所述数据接收端设备将发送重复重传请求时的最小发送间隔更新为max×baseretries-1, min_retry) ；其中，所述重复重传请求为所述数据接收端设备在发送一次对于目标数据包的重传请求之后发送的对于所述目标数据包的重传请求，所述最小发送间隔为所述数据接收端设备相邻两次发送对于所述目标数据包的重传请求之间的最小间隔时长，avg_rtt为所述往返时延集合内的往返时延的平均值，max_rtt为所述往返时延的预定上限值，base为大于1的预定基数，retries为所述数据接收端设备已发送过的对于所述目标数据包的重传请求的次数，min_retry为所述最小发送间隔的预定下限值。5.根据权利要求2所述的方法，其特征在于，所述方法还包括：将min的值发送至所述数据接收端设备，以使所述数据接收端设备将发送重传请求时的首次等待时长更新为min；其中，所述首次等待时长为所述数据接收端设备检测到所述缺失数据包到第一次发送对于该缺失数据包的重传请求之间的最小间隔时长，avg_rtt为所述往返时延集合内的往返时延的平均值，var_rtt为所述往返时延集合内的往返时延的均方差。6.根据权利要求2所述的方法，其特征在于，所述方法还包括：在检测到所述目标网络环境从当前的网络环境切换至另一网络环境时，将所述往返时延集合内的全部往返时延标记为所述过期的往返时延。7.根据权利要求1至6中任一项所述的方法，其特征在于，所述冗余重传条件为网络环境的剩余可用带宽大于预定下限值并且网络环境的丢包率小于预定上限值；在所述响应于所述重传请求，向所述数据接收端设备发送所述缺失数据包之前，所述方法还包括：在所述目标网络环境中被重传数据包占据的网络带宽大于或等于预设上限值时，停止响应来自所述数据接收端设备的重传请求；其中，所述重传数据包为响应于所述数据接收端设备的重传请求而发送的数据包。8.一种处理重传请求的装置，应用于数据发送端设备，其特征在于，所述装置包括：接收模块，用于接收来自数据接收端设备对于缺失数据包的重传请求；其中，所述缺失数据包为所述数据接收端设备在接收到来自所述数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包；发送模块，用于：响应于所述重传请求，向所述数据接收端设备发送所述缺失数据包；以及在目标网络环境满足冗余重传条件时，在发送所述缺失数据包的时刻的第一时长之后，向所述数据接收端设备发送冗余重传数据包，所述冗余重传数据包的内容与已发送的所述缺失数据包相同；其中，所述目标网络环境为所述数据发送端设备向所述数据接收端设备传输数据包时所使用的网络环境，所述冗余重传条件为用于确定网络环境是否足以负担所述冗余重传数据包的传输的条件，所述第一时长小于所述目标网络环境的当前的往返时延，所述往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。9.一种数据发送端设备，其特征在于，所述数据发送端设备包括：处理器；用于存储所述处理器的可执行指令的存储器；其中，所述处理器用于执行所述可执行指令，以实现如权利要求1至7中任一项所述的方法。10.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质存储有处理器的可执行指令，所述可执行指令被配置为在被处理器执行时使所述处理器实现如权利要求1至7中任一项所述的方法。
说明书desc
技术领域本申请涉及计算机技术领域，特别涉及一种处理重传请求的方法及装置、数据发送端设备和存储介质。背景技术网络通信中，在发送端与接收端之间传输的数据包可能会因为与网络通信环境有关的各种原因而缺失。为了提升网络通信的可靠性，接收端在检测到数据包缺失时会向发送端发送重传请求，以请求发送端重新发送缺失的数据包。对于一些即时性要求非常高的应用场景，比如服务器与终端之间实时传输游戏视频画面数据和终端用户数据、使得用户能够在低配置终端上畅玩线上游戏的云游戏场景，重传策略在低重传时延方面上面临着越来越严峻的挑战。发明内容本申请提供了一种处理重传请求的方法及装置、数据发送端设备和存储介质，能够帮助解决现有重传策略无法满足低重传时延要求的问题。本申请实施例的至少一个方面提供了一种处理重传请求的方法，所述方法应用于数据发送端设备，所述方法包括：接收来自数据接收端设备对于缺失数据包的重传请求；其中，所述缺失数据包为所述数据接收端设备在接收到来自所述数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包；响应于所述重传请求，向所述数据接收端设备发送所述缺失数据包；在目标网络环境满足冗余重传条件时，在发送所述缺失数据包的时刻的第一时长之后，向所述数据接收端设备发送冗余重传数据包，所述冗余重传数据包的内容与已发送的所述缺失数据包相同；其中，所述目标网络环境为所述数据发送端设备向所述数据接收端设备传输数据包时所使用的网络环境，所述冗余重传条件为用于确定网络环境是否足以负担所述冗余重传数据包的传输的条件，所述第一时长小于所述目标网络环境的当前的往返时延，所述往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。本申请实施例的至少一个方面提供了一种处理重传请求的装置，该装置应用于数据发送端设备，所述装置包括：接收模块，用于接收来自数据接收端设备对于缺失数据包的重传请求；其中，所述缺失数据包为所述数据接收端设备在接收到来自所述数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包；发送模块，用于：响应于所述重传请求，向所述数据接收端设备发送所述缺失数据包；以及在目标网络环境满足冗余重传条件时，在发送所述缺失数据包的时刻的第一时长之后，向所述数据接收端设备发送冗余重传数据包，所述冗余重传数据包的内容与已发送的所述缺失数据包相同；其中，所述目标网络环境为所述数据发送端设备向所述数据接收端设备传输数据包时所使用的网络环境，所述冗余重传条件为用于确定网络环境是否足以负担所述冗余重传数据包的传输的条件，所述第一时长小于所述目标网络环境的当前的往返时延，所述往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。本申请实施例的至少一个方面提供了一种数据发送端设备，所述数据发送端设备包括：处理器；用于存储所述处理器的可执行指令的存储器；其中，所述处理器用于执行所述可执行指令，以实现上述处理重传请求的方法。本申请实施例的至少一个方面提供了一种计算机可读存储介质，所述计算机可读存储介质存储有处理器的可执行指令，所述可执行指令被配置为在被处理器执行时使所述处理器实现上述处理重传请求的方法。本申请实施例中，数据发送端设备在冗余重传条件得到满足时在发送一次缺失数据包的第一时长之后紧接着发送内容相同的冗余重传数据包，由于数据接收端设备既收不到重传的缺失数据包也收不到冗余重传数据包的可能性很小，因而能够极大地提升数据接收端设备只发送一次重传请求就能成功收到所请求的数据包的概率，有效避免数据接收端设备针对同一数据包发送两次或两次以上重传请求所带来的重传时延，帮助解决现有重传策略无法满足低重传时延要求的问题，有助于在即时性要求非常高的应用场景中有效降低网络时延，实现更加快速和流畅的网络应用体验。附图说明图1是本申请实施例提供的一种处理重传请求的方法的应用场景示意图；图2是本申请实施例提供的相关技术中重传策略的示例过程示意图；图3是本申请实施例提供的一种处理重传请求的方法的步骤流程示意图；图4是本申请实施例提供的一种处理重传请求的方法中更新第一时长的步骤流程示意图；图5是本申请实施例提供的一个对比示例中重传策略的示例过程示意图；图6是本申请实施例提供的一种发送重传请求的方法的步骤流程示意图；图7是本申请实施例提供的又一种发送重传请求的方法的步骤流程示意图；图8是本申请实施例提供的一种发送重传请求的装置的结构框图；图9是本申请实施例提供的一种数据发送端设备的结构框图。具体实施方式为使本申请的目的、技术方案和优点更加清楚，下面将结合附图对本申请实施方式作进一步地详细描述。图1是本申请实施例提供的一种处理重传请求的方法的应用场景示意图。在如图1所示的通信系统中，数据接收端设备100与数据发送端设备200之间具有网络连接300，使得发送端200能够利用和依照规定的协议向接收端100传输数据。在一个示例中，作为发送端200的服务器向作为接收端100的用户终端实时发送屏幕画面数据，以提供包括云电脑、云手机、云应用、云游戏中至少一种的网络服务；在该示例中，用户终端可以同时向服务器发送包括键盘输入、触控屏输入、鼠标输入、按钮输入、麦克风输入、摄像头输入、传感器输入中的至少一种终端数据，以使用户能够通过用户终端与服务器上的操作系统之间进行交互。在该示例中，用户终端既是一种数据接收端设备，也是一种数据发送端设备；同样地，服务器既是一种数据发送端设备，也是一种数据接收端设备。图2是本申请实施例提供的相关技术中重传策略的示例过程示意图。参见图1，以发送端200需要向接收端100传输三个数据包A1、A2、A3为例，在发送端200向接收端100发送了三个数据包A1、A2、A3，但三个数据包A1、A2、A3在通过网络连接300传输的过程中发生了数据包缺失，只有两个数据包A1、A3被接收端100成功地接收到。由此，接收端100依照重传策略，在检测到数据包序号有缺失时，接收端100可以确定存在有已被发送但未被接收到的缺失数据包A2，从而向发送端200发送关于缺失数据包A2的重传请求NACK，使得发送端200确认先前发送的数据包A2的接收状态为“未被成功接收”，并在接收到该重传请求NACK后重新通过网络连接300向接收端100传输缺失数据包A2，使得三个数据包A1、A2、A3都能够完整地自发送端200传输到接收端100。由于重新发送的缺失数据包A2有可能会再次缺失，上述重传策略还包括在持续接收不到缺失数据包时让接收端100每隔一段间隔时长重复发送一次关于缺失数据包A2的重传请求，直至接收到缺失数据包A2或重复请求的次数过多，使得缺失数据包A2能够及时地根据重传请求来重新传输，保障了网络通信的即时性和可靠性。然而，上述重传策略在一些即时性要求很高的应用场景中无法满足低重传时延要求。例如，在服务器与终端之间实时传输游戏视频画面数据和终端用户数据、使得用户能够在低配置终端上畅玩线上游戏的云游戏场景中，为了保证用户在终端上看到的游戏画面与游戏主机时钟之间是同步的，终端几乎不对接收到的游戏视频画面数据进行缓存处理，而自开始接收起超过100ms都没有成功组帧的游戏视频画面数据都无法及时输出到终端的屏幕上，造成画面假死或卡顿；在这样的应用场景中，参见图2，如果重新发送的缺失数据包A2再次发生了丢包，那么自发现数据包A2缺失开始到缺失数据包被接收端100成功接收至少要经过传输两次重传请求所需要的时间、接收端100发送两次重传请求之间所等待的间隔时长，以及数据包A2从发送端200传输到接收端100所需要的时间，很可能会超出上述100ms的上限值而导致当前视频帧无法及时输出。对于上述即时性要求无法得到满足的问题，相关技术中较为常规的应对方式是缩短接收端100相邻两次发送重传请求之间所等待的间隔时长。但是，将间隔时长设置的过短则很容易导致更严重的问题——在网络状况不佳时，过短的间隔时长会使接收端100频繁发送重传请求并产生大量重传数据包挤占网络带宽，导致严重的网络阻塞。图3是本申请实施例提供的一种处理重传请求的方法的步骤流程示意图。针对上述问题，本申请实施例的处理重传请求的方法提供了一种可以帮助解决上述重传策略无法满足低重传时延要求的问题的可能方式。参见图3，该方法应用于数据发送端设备，并包括以下过程。在步骤301中，接收来自数据接收端设备对于缺失数据包的重传请求。在步骤302中，响应于重传请求，向数据接收端设备发送缺失数据包。在步骤303中，在目标网络环境满足冗余重传条件时，在发送缺失数据包的时刻的第一时长之后，向数据接收端设备发送冗余重传数据包，所述冗余重传数据包的内容与已发送的缺失数据包相同。其中，缺失数据包为数据接收端设备在接收到来自数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包，目标网络环境为数据发送端设备向数据接收端设备传输数据包时所使用的网络环境，冗余重传条件为用于确定网络环境是否足以负担冗余重传数据包的传输的条件，上述第一时长小于目标网络环境的当前的往返时延，所述往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。以图2所示的情形为例，不同于相关技术中图2中发送端200在接收到重传请求NACK后只向接收端100发送一个缺失数据包A2，本申请实施例中的发送端200在判定当前所处的网络环境满足冗余重传条件时进入到冗余重传工作模式，在此期间发送端200在发送上述缺失数据包A2的第一时长之后再向接收端100发送一个冗余重传数据包，其中第一时长小于一个往返时延；即，发送端200响应于重传请求NACK，以小于一个往返时延的时间间隔连续发送两个数据包A2。如此，当响应于重传请求NACK先发送的数据包A2被接收端100成功接收时，后发送的冗余重传数据包会被接收端100视为冗余数据而不再进行处理；而在响应于重传请求NACK先发送的数据包A2发生丢包而未被接收端100成功接收时，在此之后被成功接收的冗余重传数据包会代替先发送的数据包A2填充接收端100的缺失数据。如此，冗余重传工作模式下发送端200会加倍地发送重传数据包，从而极大地提升接收端100只需发送一次重传请求就能成功收到所请求的数据包的概率，帮助降低重传时延。在一个测试性网络环境中，发送端每秒向接收端发送833个视频数据包以实时显示，网损仪被配置为具有50ms的往返时延和5%的随机丢包率。在该测试性网络环境中，发送端未处于冗余重传工作模式而每次只发送一个重传数据包时，出现丢包时发送端响应于第一次发送的重传请求所发送的重传数据包再次发生丢包迫使接收端第二次发送重传请求的概率为5%×5%=0.25%，接收端对于同一个数据包发送两次重传请求后成功接收到重传数据包所产生的时延大于100ms，从而平均每秒发生约2次视频卡顿；在发送端处于冗余重传工作模式而每次均以0.5倍的往返时延的间隔连续发送两个重传数据包时，连续发送的两个重传数据包都发生丢包的概率为5%×5%×5%=0.0125%，使得视频卡顿平均每10秒才发生一次。可以看出，本申请实施例的方法在冗余重传条件得到满足时在发送一次缺失数据包的第一时长之后紧接着发送内容相同的冗余重传数据包，由于数据接收端设备既收不到重传的缺失数据包也收不到冗余重传数据包的可能性很小，因而能够极大地提升数据接收端设备只发送一次重传请求就能成功收到所请求的数据包的概率，有效避免数据接收端设备针对同一数据包发送两次或两次以上重传请求所带来的重传时延，帮助解决现有重传策略无法满足低重传时延要求的问题，有助于在即时性要求非常高的应用场景中有效降低网络时延，实现更加快速和流畅的网络应用体验。需要说明的是，上文中“在目标网络环境满足冗余重传条件时”被示例性地描述为“发送端处于冗余重传工作模式时”，而在其他示例中，发送端可以在每次发送重传数据包之后判断一次当前的目标网络环境是否满足冗余重传条件，以确定是否在第一时长之后发送冗余重传数据包，或者，发送端可以每隔一段固定时长判断一次当前的目标网络环境是否满足冗余重传条件，以确定接下来的固定时长内是否执行上述冗余重传数据包的发送。当然，本申请实施例的实现方式可以不限于以上方式。在一个示例中，冗余重传条件被设定为网络环境的剩余可用带宽大于预定下限值并且网络环境的丢包率小于预定上限值，即满足上述网络带宽和丢包率要求的网络环境会被判定为满足冗余重传条件。基于上述冗余重传条件，能够避免在剩余可用带宽不足或是丢包率过高的网络环境中执行上述冗余重传数据包的发送，从而防止这样的网络环境中高丢包率引发重传请求的频繁发送、导致短时间内大量冗余重传数据包挤占剩余可用网络带宽造成的网络阻塞。在其他示例中，依照网络环境和应用需求的不同，可以在更多方面限制冗余重传条件或者放宽冗余重传条件的限制，以在网络传输的即时性和稳定性之间取得平衡。在一个示例中，上述方法在上述步骤302之前还包括：在目标网络环境中被重传数据包占据的网络带宽大于或等于预设上限值时，停止响应来自数据接收端设备的重传请求。其中，与上文的概念一致，重传数据包为响应于数据接收端设备的重传请求而发送的数据包。例如，在总带宽为10Mbps的目标网络环境中，预先规定用于传输重传数据包的网络带宽的预订上限值为2Mbps，从而每次受到重传请求后都判断当前被重传数据包占据的网络带宽是否大于或等于该预设上限值，并在大于或等于该预设上限值时停止响应来自接收端的所有重传请求，直至被重传数据包占据的网络带宽下降至容许范围内。通过在发送端处限制用于传输重传数据包的最大网络带宽，能够有效避免大量重传数据包挤占可用网络带宽，并且能够避免传输系统陷入“高丢包率→重传数据包大量增加→剩余可用网络带宽急剧减小→丢包率升高”的恶性循环而产生长时间卡顿，更有助于在网络传输的即时性和稳定性之间取得平衡。图4是本申请实施例提供的一种处理重传请求的方法中更新第一时长的步骤流程示意图。参见图4，在上述任意一种处理重传请求的方法的基础上，该方法还包括以下步骤。在步骤401中，在每个第一时长的更新周期中，将上一个更新周期内新增的往返时延添加至往返时延集合当中，删除往返时延集合中过期的往返时延，并将第一时长更新为往返时延集合内的往返时延的平均值的n倍。其中，n为大于0.2并小于0.8的预定值；往返时延集合是存储于发送端上的数据集合，主要由过去一段时间内基于数据包的传输而产生的往返时延所组成，用来作为设定第一时长的数值的基准。以图2所示的情形为例，自发送端200发送数据包A1的时刻开始，到发送端200接收到来自接收端100确认收到数据包A1的消息的时刻结束，其之间相差的时长为对应于数据包A1的往返时延；自发送端200发送数据包A2的时刻开始，到发送端200接收到来自接收端100的重传请求NACK的时刻结束，其之间相差的时长为对应于数据包A2的往返时延。在一个示例中，发送端在每个更新周期中更新往返时延集合中的往返时延，并基于更新后的往返时延集合内的往返时延的平均值按照上述方式计算第一时长的设定值，以将第一时长更新为该设定值，用来在下一次更新第一时长之前使用该设定值处理上述冗余重传数据包的发送。由于往返时延集合随数据包的传输而更新，因而往返时延集合内的往返时延的平均值在一定程度上反映当前数据接收端设备所处的网络状态——往返时延的平均值较小说明网络状态良好，往返时延的平均值较大说明网络状态较差。在一个示例中，往返时延集合中的每个集合元素具备这样的数据结构：{往返时延，权重，产生时间}，且所述往返时延的平均值为往返时延集合内的往返时延的加权平均值。即，每个往返时延除了自身以ms为单位的数值之外还包括在计算平均值时的权重值，以及产生时间的标记。其中，权重正相关于当前时刻上述目标网络环境中被重传数据包占据的网络带宽。即，该时刻正在传输中的重传数据包的数据量越大，该往返时延的权重的值越大。如此，在上述步骤401的一个示例中，每隔5s更新一次往返时延集合，更新时将上一个5s内收集的往返时延连同其产生时间及计算好的权重添加至往返时延集合中，并删除往返时延集合中存在超过20s的往返时延。例如，当上一个5s内的往返时延的产生时间均标记为D时，当前往返时延集合中产生时间标记为C的往返时延为上上个5s内的往返时延，产生时间标记为B的往返时延为上上上个5s内的往返时延，产生时间标记为A的往返时延为上上上上个5s内的往返时延，因此除了新添加的往返时延之外产生时间标记为D的往返时延是本次需要删除的超过20s的往返时延。如此，完成本次更新周期内往返时延集合的更新，进而基于更新后的往返时延集合计算第一时长的设定值。基于权重的设置，往返时延的平均值在计算时网络状态不佳时的往返时延将占有更大的权重，从而作为配置各方面限制的基准参数的往返时延平均值对于网络状态的劣化会更加灵敏，使得上文所述的各方面配置在网络状态变差时能够更快速地配置到适当的数值上，更有利于节省系统资源和提升传输效率。在步骤402中，在检测到目标网络环境从当前的网络环境切换至另一网络环境时，将往返时延集合内的全部往返时延标记为过期的往返时延。其中，检测到目标网络环境从当前的网络环境切换至另一网络环境的情形包括而不限于：发送端与接收端建立连接；发送端或接收端切换了网络连接；发送端或接收端切换至新的基站；发送端或接收端切换了移动数据使用模式。在一个示例中，当检测到网络传输环境的切换时，发送端清空往返时延集合。如此，可以避免网络传输环境的切换时原先的网络传输环境的参数配置影响新的网络传输环境下的数据传输，有助于提升网络传输的传输效率。此外，基于发送端所存储和更新的往返时延集合，发送端能够通过向接收端提供相关数据以实现更优的传输性能。在一个示例中，上述处理重传请求的方法还包括：将往返时延集合内的往返时延的平均值发送至数据接收端设备，以使数据接收端设备将发送重复重传请求时的最小发送间隔配置为正相关于往返时延的平均值和重复次数；其中，重复重传请求为数据接收端设备在发送一次对于目标数据包的重传请求之后发送的对于目标数据包的重传请求，重复次数为数据接收端设备已发送过的对于目标数据包的重传请求的次数，最小发送间隔为数据接收端设备相邻两次发送对于目标数据包的重传请求之间的最小间隔时长。由此，能够帮助解决相关技术中的重传策略在一些场景下容易导致网络阻塞的问题。图5是本申请实施例提供的一个对比示例中重传策略的示例过程示意图。参见图5，该重传策略引起网络阻塞的对比示例中，接收端100所处的网络状态不佳，这使得接收端100用来接收数据包的可用网络带宽十分有限，并且数据包的丢包率很高。以发送端200需要向接收端100传输三个数据包A1、A2、A3为例，参见图5，在发送端200发送出三个数据包A1、A2、A3之后，低传输速率和高丢包率使得接收端100只接收到了数据包A3，此时接收端100依照上述重传策略开始每隔10ms发送一次对于缺失数据包A1、A2的重传请求NACK和NACK。但是，由于此时发送端200根据重传请求重新发送的缺失数据包A1、A2仍面临低传输速率和高丢包率的问题，这可能导致接收端100在不断重复发送重传请求的期间始终无法成功接收到所需要的缺失数据包A1、A2。最终，接收端100依据上述重传策略在重复发送重传请求的次数超过10次以后判定重传失败，并不再等待缺失数据包A1、A2，但此时发送端200可能已经数次重新发送过缺失数据包A1、A2，这使得原本就十分有限的网络带宽被重复发送多次的重传请求以及接收端100不再等待接收的缺失数据包A1、A2所挤占，不仅没有成功地实现数据包的重传、浪费了系统资源，还挤占了用来传输其他数据的带宽资源、导致网络阻塞。应当理解是，上述示例中以三个数据包A1、A2、A3为例只是为了更简洁地进行说明，但实际应用中同一时间处于传输状态的数据包的数量可能会非常庞大，且上述重传策略所导致的系统资源浪费和网络阻塞可能远比上述示例中展示的严重得多。图6是本申请实施例提供的一种发送重传请求的方法的步骤流程示意图。针对上述问题，对应于上述应用于数据发送端设备的处理重传请求的方法，本申请实施例可以帮助解决上述重传策略可能导致网络阻塞问题的可能方式。参见图6，该方法应用于数据接收端设备，并包括以下过程。在步骤601中，获取往返时延集合内的往返时延的平均值。在一个示例中，对应于上述应用于发送端的处理重传请求的方法中的步骤“将往返时延集合内的往返时延的平均值发送至数据接收端设备”，该步骤601包括接收端自存储和更新往返时延集合的发送端处获取到往返时延集合内的往返时延的平均值。在步骤602中，基于往返时延的平均值，配置发送重复重传请求时的最小发送间隔，以使最小发送间隔正相关于往返时延的平均值和重复次数。其中，重复重传请求为对于已发送过重传请求的目标数据包的重传请求，重复次数为已发送过的对于目标数据包的重传请求的次数，最小发送间隔为相邻两次发送对于目标数据包的重传请求之间的最小间隔时长。即，在整体趋势上，最小发送间隔随着重复次数的增大而增大，且重复次数相同时往返时延的平均值越大最小发送间隔越大。在步骤603中，在最小发送间隔的限制下，发送对于缺失数据包的重传请求。其中，所述缺失数据包为所述数据接收端设备检测到的已被发送但未被接收到的数据包。以图5所示的情形为例，不同于上述对比示例中的相同时间间隔，在本申请实施例中，接收端100重复发送对于同一个目标数据包A1的重传请求NACK的发送时间间隔的最小值受到上述最小发送间隔的限制——重复发送的次数越多，需要间隔越久的时间才能发送下一次的重传请求NACK；并且，当前的往返时延的平均值越大，这一间隔时间的基准值越大。比如，不同于对比示例中相邻两次重传请求NACK的发送时间间隔均为10ms，在往返时延的平均值为50ms时，第1次和第2次发送重传请求NACK之间的最小发送间隔为50ms，第2次和第3次发送重传请求NACK之间的最小发送间隔为60ms，第3次和第4次发送重传请求NACK之间的最小发送间隔为70ms，并依次类推；而在往返时延的平均值为10ms时，第1次和第2次发送重传请求NACK之间的最小发送间隔为10ms，第2次和第3次发送重传请求NACK之间的最小发送间隔为15ms，第3次和第4次发送重传请求NACK之间的最小发送间隔为20ms，并依次类推。基于上述过程，本申请实施例的方法的能够在不同的网络状态下都取得满足要求的传输效果：以图2的情形作为示例，在往返时延的平均值为10ms、网络状态良好时，网络带宽充足且丢包率较小，对于缺失数据包需要及时地发送重传请求；此时，本申请实施例的最小发送间隔如上所述被配置为10ms、15ms、20ms等等，考虑到缺失数据包再次缺失的可能性很小，这样大多数缺失数据包都能在10ms或25ms以内的时间内完成重传，从而满足了重传策略在网络状态良好时的即时性要求。在往返时延的平均值为50ms、网络状态不佳时，网络带宽有限且丢包率较高，对于缺失数据包要求在不对系统造成过大压力的前提下及早成功完成重传；此时，本申请实施例的最小发送间隔如上所述被配置为50ms、60ms、70ms等等，与图5所示的对比示例相比重复发送重传请求的频率大大降低，这样既不会如对比示例那样在约110ms后就放弃缺失数据包的接收，也不会在短时间内产生大量的重传请求和重传的缺失数据包挤占网络带宽，给系统预留了充足的反应时间，也给自身预留了合理且充足的等待缺失数据包重传的时间，并且减少了重复的重传请求和大量重传的缺失数据包对于网络带宽的占用，从而满足了上述在不对系统造成过大压力的前提下及早成功完成重传的要求。可以看出，上述应用于发送端的处理重传请求的方法和上述应用于接收端的发送重传请求的方法能够帮助解决现有重传策略可能导致网络阻塞的问题，并有助于提升网络通信中的数据传输效率和可靠性。需要说明的是，虽然图6中步骤601、步骤602和步骤603是依次执行的，但在不同的实现方式中可以不仅限于此。例如，步骤601和步骤602的更新最小发送间隔配置的过程即更新参数的过程，而步骤603的发送重传请求的过程即利用参数的过程，参数可以具有默认值并按照预定规则不断更新，而任何时刻该参数都是能够被利用的状态，从而步骤603的执行顺序不需要被限制在步骤601和步骤602之后。此外，在一个示例中，上述应用于数据发送端设备的处理重传请求的方法还包括：将min的值发送至数据接收端设备，以使数据接收端设备将发送重复重传请求时的最小发送间隔更新为max×baseretries-1, min_retry) ，其中重复重传请求为数据接收端设备在发送一次对于目标数据包的重传请求之后发送的对于目标数据包的重传请求，最小发送间隔为数据接收端设备相邻两次发送对于目标数据包的重传请求之间的最小间隔时长，avg_rtt为往返时延集合内的往返时延的平均值，max_rtt为往返时延的预定上限值，base为大于1的预定基数，retries为数据接收端设备已发送过的对于目标数据包的重传请求的次数，min_retry为最小发送间隔的预定下限值；以及，将min的值发送至数据接收端设备，以使数据接收端设备将发送重传请求时的首次等待时长更新为min；其中，首次等待时长为数据接收端设备检测到缺失数据包到第一次发送对于该缺失数据包的重传请求之间的最小间隔时长，avg_rtt为往返时延集合内的往返时延的平均值，var_rtt为往返时延集合内的往返时延的均方差。为了更清楚地说明上述技术方案，下面以数据接收端设备为主体介绍上述技术方案的可选实现方式。图7是本申请实施例提供的又一种发送重传请求的方法的步骤流程示意图。参见图7，与上述应用于数据发送端设备的处理重传请求的方法相对应，该方法应用于数据接收端设备，并包括以下过程。在步骤701中，接收数据发送端设备所发送的min的值和min的值。其中，max_rtt为往返时延的预定上限值，min表示x和y中的较小值。在一个示例中，基于图4所示的第一时长的更新过程，发送端能够基于不断更新的往返时延集合计算其中往返时延的平均值avg_rtt、往返时延集合内的往返时延的均方差var_rtt，从而计算得到上述min的值和min的值并发送给接收端。在步骤702中，将发送重传请求时的首次等待时长更新为min。其中，首次等待时长为检测到缺失数据包到第一次发送请求该缺失数据包的重传请求之间的最小间隔时长。类似于上述最小发送间隔，该首次等待时长限制了数据接收端设备从检测到某个数据包缺失到第一次发送请求该缺失数据包的重传请求之间的最小间隔时长。以图2所示的情形为例，当接收端100检测到缺失数据包A2时，依照上述首次等待时长的限制，等到经过该首次等待时长的时间后才发送对于缺失数据包A2的重传请求；由于该段时间内接收端100有可能会接收到因各种因素而比数据包A3传输得更慢的数据包A2从而取消对于缺失数据包A2的重传请求的发送，有助于节省系统资源。通过将首次等待时长更新为min，首次等待时长被以往返时延的平均值为基础而配置到了一个适当的数值上，经实际测试表明，这样的配置方式在节省系统资源与提升传输效率之间取得了较好的平衡，并能够适应于不同的网络状态。在步骤703中，将发送重复重传请求时的最小发送间隔更新为max×baseretries-1, min_retry)。其中，min的值为自发送端接收到的值，base为大于1的预定基数，retries为重复次数，min_retry为最小发送间隔的预定下限值，max表示x和y中的较大值，min表示x和y中的较小值。在一个示例中，base=1.25，max_rtt=100ms，min_retry=10ms，这使得上式变为max × 1.25retries-1, 10ms)；经实际测试表明，这样的配置方式在节省系统资源与提升传输效率之间取得了较好的平衡，并能够适应于不同的网络状态。在步骤704中，在首次等待时长和最小发送间隔的限制下，发送对于缺失数据包的重传请求。其中，所述缺失数据包为所述数据接收端设备检测到的已被发送但未被接收到的数据包。可以看出，由于步骤704的发送重传请求的过程受到了上述首次等待时长和最小发送间隔的双重限制，基于上述原因，重传请求的发送能够在节省系统资源与提升传输效率之间取得了较好的平衡，并能够适应于不同的网络状态。图8是本申请实施例提供的一种处理重传请求的装置的结构框图。参见图8，该装置应用于数据发送端设备，并包括：接收模块81，用于接收来自数据接收端设备对于缺失数据包的重传请求；其中，缺失数据包为数据接收端设备在接收到来自数据发送端设备的数据包之后检测到的已被发送但未被接收到的数据包；发送模块82，用于：响应于重传请求，向数据接收端设备发送缺失数据包；以及在目标网络环境满足冗余重传条件时，在发送缺失数据包的时刻的第一时长之后，向数据接收端设备发送冗余重传数据包，冗余重传数据包的内容与已发送的缺失数据包相同；其中，目标网络环境为数据发送端设备向数据接收端设备传输数据包时所使用的网络环境，冗余重传条件为用于确定网络环境是否足以负担冗余重传数据包的传输的条件，第一时长小于目标网络环境的当前的往返时延，往返时延为一个数据包被发送的时刻与该数据包的接收状态被确认的时刻之间相差的时长。可以看出，本申请实施例的方法在冗余重传条件得到满足时在发送一次缺失数据包的第一时长之后紧接着发送内容相同的冗余重传数据包，由于数据接收端设备既收不到重传的缺失数据包也收不到冗余重传数据包的可能性很小，因而能够极大地提升数据接收端设备只发送一次重传请求就能成功收到所请求的数据包的概率，有效避免数据接收端设备针对同一数据包发送两次或两次以上重传请求所带来的重传时延，帮助解决现有重传策略无法满足低重传时延要求的问题，有助于在即时性要求非常高的应用场景中有效降低网络时延，实现更加快速和流畅的网络应用体验。本申请实施例提供的处理重传请求的装置，其实现过程与本申请实施例提供的处理重传请求的方法一致，所能达到的效果也与本申请实施例提供的处理重传请求的方法相同，在此不再赘述。图9是本申请实施例提供的一种数据发送端设备的结构框图。参见图9，该数据发送端设备包括处理器91和用于存储该处理器91的可执行指令的存储器92；其中，该处理器91用于执行所述可执行指令，以实现上述任意一种的处理重传请求的方法。以上文所述的任意一种数据发送端设备为例，本申请实施例的数据发送端设备能够帮助解决现有重传策略可能导致网络阻塞的问题，有助于提升网络通信中的数据传输效率和可靠性。本申请实施例还提供一种计算机可读存储介质，该计算机可读存储介质为非易失性的存储介质，且该存储介质存储有处理器的可执行指令，该可执行指令被配置为在被处理器执行时使处理器实现上述任意一种的处理重传请求的方法。以上述存储器92为例，本申请实施例的计算机可读存储介质能够用来实现上述任意一种的处理重传请求的方法，因而能够帮助解决现有重传策略可能导致网络阻塞的问题，有助于提升网络通信中的数据传输效率和可靠性。以上所述仅为本申请的可选实施例，并不用以限制本申请，凡在本申请的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本申请的保护范围之内。
