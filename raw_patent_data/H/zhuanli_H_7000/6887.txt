标题title
一种Web应用安全探针管理方法、系统、电子设备及存储介质
摘要abst
本申请提供了一种Web应用安全探针管理方法、系统、电子设备及存储介质，所述方法包括云端服务器向部署在Web服务器中的Agent发送安全探针注册请求，安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；Agent基于安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入Web应用；Agent收集Web应用运行时的运行数据，并上报至云端服务器；云端服务器基于运行数据生成变更指令，并发送给Agent；Agent基于变更指令更改指定的一个或者多个安全探针的运行状态。由于安全探针是随着安全探针注册请求的发起而动态注入Web应用的，而已注入Web应用的安全探针的运行状态则是可基于Web应用的实际运行情况来进行调整的，因此安全探针的注册和管理灵活且精细可控。
权利要求书clms
1.一种Web应用安全探针管理方法，其特征在于，包括以下步骤：云端服务器向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；所述Agent收集所述Web应用运行时的运行数据，并上报至所述云端服务器；所述云端服务器基于所述运行数据生成变更指令，并发送给所述Agent；所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态。2.如权利要求1所述的Web应用安全探针管理方法，其特征在于，所述安全探针注册请求包含请求注册的一个或者多个安全探针的配置信息，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述配置信息，从所述规则库中加载所述请求注册的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置。3.如权利要求1所述的Web应用安全探针管理方法，其特征在于，所述安全探针注册请求包含请求注册的安全模块的配置信息，所述规则库中存储有多个安全模块，每个所述安全模块包含一个或者多个安全探针，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述安全模块的配置信息，从所述规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置。4.如权利要求1所述的Web应用安全探针管理方法，其特征在于，所述Agent收集所述Web应用运行时的运行数据，包括以下步骤：所述Agent收集所述Web应用运行时的系统指标，所述系统指标至少包括系统CPU占用率。5.如权利要求4所述的Web应用安全探针管理方法，其特征在于，所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：判断所述系统指标是否超出预设的第一阈值；当所述系统指标超出预设的第一阈值时，生成指示冻结指定的一个或者多个安全探针的变更指令，或者，生成指示屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针的变更指令。6.如权利要求5所述的Web应用安全探针管理方法，其特征在于，所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：判断所述系统指标是否超出预设的第一阈值；当所述系统指标超出预设的第一阈值时，生成指示冻结部分预设的高性能消耗的安全探针的变更指令。7.如权利要求5所述的Web应用安全探针管理方法，其特征在于，所述安全探针注册请求包含请求注册的安全模块的配置信息，所述规则库中存储有多个安全模块，每个所述安全模块包含一个或者多个安全探针，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述安全模块的配置信息，从所述规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置；所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：判断所述系统指标是否超出预设的第一阈值；当所述系统指标超出预设的第一阈值时，生成指示冻结指定的所述安全模块的变更指令。8.如权利要求4-7中的任一权利要求所述的Web应用安全探针管理方法，其特征在于，所述云端服务器基于所述运行数据生成变更指令，还包括以下步骤：判断所述系统指标是否超出预设的第二阈值；当所述系统指标超出预设的第二阈值时，生成移除所有已注入到所述Web应用中的安全探针的变更指令。9.如权利要求1所述的Web应用安全探针管理方法，其特征在于，当所述变更指令为指示激活或者冻结指定的一个或者多个安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：修改所述指定的一个或者多个安全探针的逻辑状态，以使得所述逻辑状态为激活状态的安全探针正常运行，所述逻辑状态为冻结状态的安全探针则不运行。10.如权利要求1所述的Web应用安全探针管理方法，其特征在于，当所述变更指令为指示屏蔽或者撤销屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：向所述指定位置注入屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均不运行，或者，撤销所述指定位置的屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均恢复正常运行。11.一种Web应用安全探针管理系统，其特征在于，包括：云端服务器，所述云端服务器包括：安全探针注册请求模块，用于向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；数据分析模块，用于基于所述Agent收集的所述Web应用运行时的运行数据生成变更指令，并发送给所述Agent；部署在Web服务器中的Agent，所述Agent包括：安全探针注入模块，用于基于所述云端服务器发送的所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；数据收集模块，用于收集所述Web应用运行时的运行数据，并上报至所述云端服务器；安全探针状态管理模块，用于基于所述变更指令更改指定的一个或者多个安全探针的运行状态。12.一种电子设备，其特征在于，包括：至少一个处理器；以及，与所述至少一个处理器通信连接的存储器；其中，所述存储器存储有可被所述至少一个处理器执行的指令，所述指令被所述至少一个处理器执行，以使所述至少一个处理器能够执行如权利要求1-10任一项所述的Web应用安全探针管理方法。13.一种存储介质，存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1-10任一项所述的Web应用安全探针管理方法。
说明书desc
技术领域本公开主要涉及计算机应用技术领域，特别涉及一种Web应用安全探针管理方法、系统、电子设备及存储介质。背景技术RASP技术作为一种新型应用安全保护技术，在2014年Gartner的应用安全报告里被列为应用安全领域的关键趋势。它将保护程序像疫苗一样注入到应用程序中，与应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遭受到实际攻击伤害，就可以自动对其进行防御，而不需要进行人工干预。现有的RASP技术往往是通过Agent的形式将安全探针一次性部署到Web应用程序的内部，当Web应用运行时，安全探针即可伴随着应用程序的运行执行其肩负的安全任务，对Web应用进行实时的安全告警或防护。然而，现有技术存在一定的局限性。一方面，在Web应用中一次性部署大量的安全探针，会对Web应用自身的运行带来大量的损耗，影响Web应用及RASP产品运行时的稳定性，也会降低Web应用用户的体验；另一方面，无法对安全探针进行选择性的注入、对已注入的安全探针的运行状态也无法进行选择性的管理，只能对整个Agent进行卸载或安装，将导致RASP产品无法适应用户不同的安全需求，灵活性较差。发明内容本公开的实施例旨在提供一种Web应用安全探针管理方法、系统、电子设备及存储介质，以解决上述问题。在本公开的第一方面中，提供了一种Web应用安全探针管理方法，包括以下步骤：云端服务器向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；所述Agent收集所述Web应用运行时的运行数据，并上报至所述云端服务器；所述云端服务器基于所述运行数据生成变更指令，并发送给所述Agent；所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态。可选地，所述安全探针注册请求包含请求注册的一个或者多个安全探针的配置信息，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述配置信息，从所述规则库中加载所述请求注册的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置。可选地，所述安全探针注册请求包含请求注册的安全模块的配置信息，所述规则库中存储有多个安全模块，每个所述安全模块包含一个或者多个安全探针，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述安全模块的配置信息，从所述规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置。可选地，所述Agent收集所述Web应用运行时的运行数据，包括以下步骤：所述Agent收集所述Web应用运行时的系统指标，所述系统指标至少包括系统CPU占用率。可选地，所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：当所述系统指标超出预设的第一阈值时，生成指示冻结指定的一个或者多个安全探针的变更指令，或者，生成指示屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针的变更指令。可选地，所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：当所述系统指标超出预设的第一阈值时，生成指示冻结部分预设的高性能消耗的安全探针的变更指令。可选地，所述安全探针注册请求包含请求注册的安全模块的配置信息，所述规则库中存储有多个安全模块，每个所述安全模块包含一个或者多个安全探针，所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用，包括以下步骤：所述Agent基于所述安全模块的配置信息，从所述规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将所述安全规则注入相应的所述Hook位置；所述云端服务器基于所述运行数据生成变更指令，包括以下步骤：当所述系统指标超出预设的第一阈值时，生成指示冻结指定的所述安全模块的变更指令。可选地，所述云端服务器基于所述运行数据生成变更指令，还包括以下步骤：当所述系统指标超出预设的第二阈值时，生成移除所有已注入到所述Web应用中的安全探针的变更指令。可选地，当所述变更指令为指示激活或者冻结指定的一个或者多个安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：修改所述指定的一个或者多个安全探针的逻辑状态，以使得所述逻辑状态为激活状态的安全探针正常运行，所述逻辑状态为冻结状态的安全探针则不运行。可选地，当所述变更指令为指示屏蔽或者撤销屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：向所述指定位置注入屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均不运行，或者，撤销所述指定位置的屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均恢复正常运行。在本公开的第二方面中，提供了一种Web应用安全探针管理系统，包括：云端服务器，所述云端服务器包括：安全探针注册请求模块，用于向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；数据分析模块，用于基于所述Agent收集的所述Web应用运行时的运行数据生成变更指令，并发送给所述Agent；部署在Web服务器中的Agent，所述Agent包括：安全探针注入模块，用于基于所述云端服务器发送的所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；数据收集模块，用于收集所述Web应用运行时的运行数据，并上报至所述云端服务器；安全探针状态管理模块，用于基于所述变更指令更改指定的一个或者多个安全探针的运行状态。本公开的实施例提供的技术方案可以有以下有益效果：本公开提出了一种Web应用安全探针管理方法，通过由云端服务器向部署在Web服务器中的Agent发起安全探针注册请求，Agent接收到注册请求后根据请求信息从规则库中加载请求注册的安全探针，向Web应用执行探针注入，之后，Agent将收集到的Web应用运行时的运行数据上报给云端服务器，由云端服务器对运行数据进行分析，生成变更指令下达给Agent，由Agent根据变更指令实现对安全探针运行状态的变更管理。本公开实际上提出了一种安全探针动态注册和管理机制，其中，安全探针是随着安全探针注册请求的发起而动态注入Web应用的；而对于已注入Web应用的安全探针，则可基于Web应用的实际运行情况，对安全探针的运行状态进行调整。因此，安全探针的注入和运行管理都是动态的、灵活的、精细可控的。应当理解，发明内容部分中所描述的内容并非旨在限定本公开的实施例的关键或重要特征，亦非用于限制本公开的范围。本公开的其它特征将通过以下的描述变得容易理解。附图说明为了更清楚地说明本公开实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单的介绍，显而易见地，下面描述中的附图仅仅是本公开的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图示出的结构获得其他的附图。图1为根据一示例性实施例示出的一种Web应用安全探针管理方法流程图；图2为根据一示例性实施例示出的一种Web应用安全探针管理方法中的Agent与云端服务器的交互流程图；图3为根据一示例性实施例示出的一种Web应用安全探针管理方法中的Agent与云端服务器的交互流程图；图4为根据一示例性实施例示出的一种Web应用安全探针管理系统的结构示意图；图5为根据一示例性实施例示出的一种电子设备的结构示意图。具体实施方式下面将参照附图更详细地描述本公开的实施例。虽然附图中显示了本公开的某些实施例，然而应当理解的是，本公开可以通过各种形式来实现，而且不应该被解释为限于这里阐述的实施例，相反提供这些实施例是为了更加透彻和完整地理解本公开。应当理解的是，本公开的附图及实施例仅用于示例性作用，并非用于限制本公开的保护范围。在本公开的实施例的描述中术语“包括”及其类似用语应当理解为开放性包含，即“包括但不限于”。术语“基于”应当理解为“至少部分地基于”。术语“一个实施例”或“该实施例”应当理解为“至少一个实施例”。术语“第一”、“第二”等等可以指代不同的或相同的对象。下文还可能包括其他明确的和隐含的定义。RASP技术作为一种新型应用安全保护技术，在2014年Gartner的应用安全报告里被列为应用安全领域的关键趋势。它将保护程序像疫苗一样注入到应用程序中，与应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遭受到实际攻击伤害，就可以自动对其进行防御，而不需要进行人工干预。现有的RASP技术往往是通过Agent的形式将安全探针一次性部署到应用程序的内部，当应用程序运行时，安全探针即可伴随着应用程序的运行执行其肩负的安全任务，对应用程序进行实时的安全告警或防护。然而，现有技术存在一定的局限性。一方面，在应用程序中一次性部署大量的安全探针，会对应用程序自身的运行带来大量的损耗，影响应用程序及RASP产品运行时的稳定性，也会降低应用程序的用户体验；另一方面，无法对安全探针进行选择性的注入、对已注入的安全探针的运行状态也无法进行选择性的管理，只能对整个Agent进行卸载或安装，将导致RASP产品无法适应用户不同的安全需求，灵活性较差。针对上述问题，本公开提出了一种Web应用安全探针管理方法，通过由云端服务器向部署在Web服务器中的Agent发起安全探针注册请求，Agent接收到注册请求后根据请求信息从规则库中加载请求注册的安全探针，向Web应用执行探针注入，之后，Agent将收集到的Web应用运行时的运行数据上报给云端服务器，由云端服务器对运行数据进行分析，生成变更指令下达给Agent，由Agent根据变更指令实现对安全探针运行状态的变更管理。本公开实际上提出了一种安全探针动态注册和管理机制，其中，安全探针是随着安全探针注册请求的发起而动态注入Web应用的；而对于已注入Web应用的安全探针，则可基于Web应用的实际运行情况，对安全探针的运行状态进行调整。因此，安全探针的注入和运行管理都是动态的、灵活的、精细可控的。本公开所提出的方法涉及的一些概念定义如下：Agent：是一种独立于应用程序的代理程序，Agent技术的特点是进程级资源隔离、语言框架无关、存算分享、基础组件与业务解耦。本公开提出的方法将Agent部署在Web服务器上，目的是为了对Web应用提供RASP安全功能。Agent能够接收来自云端服务器的指令，并能够收集Web应用的相关数据发送到云端服务器。规则与规则库：规则就是检测逻辑、响应逻辑和/或相关的数据。将某个规则插桩到指定的Hook位置上，就形成了安全探针。当Web应用程序运行时，会触发注入的安全探针的运行；安全探针运行时能够采集应用程序的上下文等运行数据，以用于安全威胁检测和响应。在本公开中，一个安全探针是将一条规则与指定的一个或者多个Hook位置绑定。为实现一种或多种安全功能，可能需要往Web应用中注入多个安全探针，也即，将多种规则插桩到指定的Hook位置。插桩技术为现有技术，本公开对此不进行详细描述。Hook位置：对于一个Web应用来说，为实现RASP功能，可以从多个层级选取不同的Hook位置。例如，在Web应用栈中，从上层到底层包括Web服务器层、中间件/插件层、Web应用代码及其依赖库层、数据库层。本公开选择分布在不同层级的关键函数位置作为Hook位置。例如，将Web服务器处理HTTP请求作为Hook位置、将应用框架关键函数作为Hook位置、将业务逻辑关键函数作为Hook位置、将一些底层敏感API作为Hook位置。云端服务器：是一组远程服务器，公开了一个端点，该端点通过安全的通信线路获取Agent收集的相关数据，并生成由Agent实现的指令。Web服务器：提供Web服务，可以处理HTTP协议、响应请求、进行页面跳转，或者把动态请求委托其它程序、Web容器）。常用的有Tomcat、Apache、Nginx、IIS等Web服务器。在实际应用中，本公开提出的Web应用安全探针管理方法可以应用于部署在Web服务器上或者Web中间件上或者Web容器中的Web应用。Web服务器、Web中间件、Web容器这几个概念相互联系、交叉。例如，常见的Web中间件有Tomcat、Weblogic、Jboss等，它是指提供Web应用软件和系统软件连接的软件的总称；容器是中间件的一种，作为操作系统和应用程序之间的桥梁，给处于其中的应用程序组件提供一个环境，使应用程序直接跟容器中的环境变量交互，而不必关注其它系统问题。例如：Tomcat，Jboss。这些容器提供的接口严格遵守J2EE规范中的Web application 标准。我们把遵守J2EE规范标准的Web服务器就叫做J2EE中的Web容器。以下结合附图，详细说明本公开各实施例提供的方法和系统。实施例一：参照图1和图2，本公开的实施例一提出了一种Web应用安全探针管理方法，包括步骤S101-S105：S101：云端服务器向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；具体地，本公开实施例提出的Web应用安全探针管理方法基于已经向Web服务器部署了Agent的场景，Agent与云端服务器之间通信连接。云端服务器向Agent发起安全探针注册请求，可选的，可以是由用户通过Web浏览器页面下达指令，从而控制云端服务器向Agent发送安全探针注册请求。其中，安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针。在一种可选的实施方式中，安全探针注册请求包含请求注册的一个或者多个安全探针的配置信息。每个安全探针的配置信息用于指示实现该安全探针功能的规则以及规则插桩的Hook位置。可选地，安全探针注册请求中可以包含Hook位置及规则的具体内容，也可以仅包含能确定Hook位置及规则的编号或者存储位置。在另一种可选的实施方式中，安全探针注册请求包含请求注册的安全模块的配置信息，规则库中存储有多个安全模块，每个安全模块包含一个或者多个安全探针。在这种实施方式中，安全探针被分组到不同的安全模块中，以模块化的形式存储在规则库中。于是用户可以请求注册某一指定安全模块所包含的所有安全探针，因此，安全探针注册请求可以仅包含请求注册的安全模块的配置信息。可选地，一个安全模块用于实现一种安全功能。例如，SQL安全模块用于检测SQL注入，那么SQL安全模块中即存储了检测SQL注入需要注入的一个或者多个安全探针；RCE安全模块用于检测RCE漏洞，那么RCE安全模块中即存储了检测RCE漏洞需要注入的一个或者多个安全探针。将用于实现同一安全功能的一个或者多个安全探针集合到一个安全模块里去，相当于在规则库中模块化地存储安全探针，从而使得用户可以根据自己的安全功能需求选择性地注册相应的安全模块，实现模块化注入。此外，还可以根据适配不同Web服务器、框架、语言等等来对安全探针进行分组，从而定义不同的安全模块。本公开对此不一一列举，也不作具体限制。本公开通过云端服务器向Agent发起安全探针注册请求，以请求在Web应用中注入一个或者多个安全探针，为用户提供了按需注册安全探针、按需启用安全功能的机制，相较于现有的Agent一次性插桩大量安全探针的机制，更具有灵活性。S102：所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；具体地，Agent接收到安全探针注册请求后，从规则库中加载请求注册的一个或者多个安全探针，注入Web应用。往Web应用中注入一个或者多个安全探针就是指将一个或者多个规则插桩到指定的一个或者多个Hook位置上。插桩技术为现有技术，本公开对此不进行详细描述。如前所述，在一种可选的实施方式中，安全探针注册请求包含请求注册的一个或者多个安全探针的配置信息。在这种实施方式中，Agent基于请求注册的一个或者多个安全探针的配置信息，从规则库中加载请求注册的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将安全规则注入相应的Hook位置。如前所述，在另一种可选的实施方式中，安全探针注册请求包含请求注册的安全模块的配置信息，规则库中存储有多个安全模块，每个安全模块包含一个或者多个安全探针。在这种实施方式中，Agent基于安全模块的配置信息，从规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则；将安全规则注入相应的Hook位置。将用于实现同一安全功能的一个或者多个安全探针集合到一个安全模块里去，相当于在规则库中模块化地存储安全探针，从而使得用户可以根据自己的安全功能需求选择性地注册相应的安全模块，当通过云端服务器向Agent发送包含请求注册的安全模块的配置信息的安全探针注册请求后，Agent可以从规则库中加载请求注册的安全模块，实现模块化注入。S103：所述Agent收集所述Web应用运行时的运行数据，并上报至所述云端服务器；具体地，Agent收集Web应用运行时的运行数据，并上报至云端服务器。在Agent内部设置一个数据收集模块，用于持续地、实时地收集Web应用运行时的运行数据并发送给云端服务器，以使云端服务器进行分析和决策。在一种可选的实施方式中，运行数据可以是指Agent注入到Web应用中的一个或者多个安全探针收集到的Web应用运行时的上下文数据。具体地，运行时的上下文数据主要包括以下四类数据：第一类是HTTP请求及响应数据与各式RPC协议，例如dubbo的请求与响应数据，以及gRPC等各式RPC框架。第二类是所关注函数的执行数据，包括动态运行时，函数所接收到的完整参数、调用函数的对象实例以及函数执行的返回值。通过获取运行时过程中函数整体执行的状态，便能够判断运行函数执行过程中是否存在所关注的数据。第三类则是函数执行过程中的调用栈。获取完整的函数调用栈，一方面便于研发进行漏洞分析与攻击分析，另一方面也可以通过函数调用栈分析攻击者的行为。常用的一些反序列化的攻击手段，都可以通过函数调用栈进行分析。第四类是应用配置信息。获取应用的各类安全配置、代码内属性配置等信息，可以完整得知该应用是否执行了安全策略。在RASP技术中，运行时的上下文数据是实现安全威胁检测和响应功能的依据；而在本公开提出的方法中，运行时的上下文数据不仅如此，它也可以是后续云端服务器生成变更指令的直接依据，是管理已注入Web应用的安全探针的运行状态的间接依据。在另一种可选的实施方式中，Agent收集Web应用运行时的系统指标，即运行数据为系统指标，所述系统指标至少包括系统CPU占用率。具体地，系统CPU占用率反映了应用程序占用的CPU资源，是反映性能最关键的指标。除了CPU占用率，系统指标还可以包括内存占用、QPS、GC频率等。可选地，Agent可以通过一个单独的线程收集Web应用运行时的系统指标。以Tomcat作为Web服务器时，可以利用JMX来获取系统指标。由于Agent工作在Web应用运行时环境，且在应用内部的多个Hook位置插桩规则以进行实时的检测和防护，不可避免地会对应用的性能造成损耗。尤其是当注入的安全探针较多时，CPU占用率甚至可能高达10%以上，内存资源消耗也较大，响应时间严重滞后，造成不良的使用体验。以XSS攻击检测为例，Agent需要在用户的请求和服务器响应中分析有无恶意脚本，现有技术常用的办法是使用正则表达式进行匹配，然而在一些使用庞大表单的应用中，XSS的正则匹配将会消耗大量的资源。因此，在这种实施方式中，通过Agent收集运行时的系统指标并上报给云端服务器，可以使云端服务器及时地了解性能损耗情况，进而作出相应的响应，即，能够实现依据运行时的系统指标来动态地管理已注入Web应用的安全探针的运行状态。运行数据可以是安全探针收集到的Web应用运行时的上下文数据，也可以是Web应用运行时的系统指标，还可以是其他可以作为管理安全探针运行状态的依据的运行数据。S104：所述云端服务器基于所述运行数据生成变更指令，并发送给所述Agent；具体地，云端服务器接收到Agent发送的运行数据后进行数据分析以作出决策，生成变更指令，并发送给Agent。变更指令用于指示Agent对安全探针的运行状态实施管理动作。在RASP技术中，运行时的上下文数据是实现安全威胁检测和响应功能的依据；而在本公开提出的方法中，运行时的上下文数据也是后续云端服务器生成变更指令的直接依据，是管理已注入Web应用的安全探针的运行状态的间接依据。云端服务器通过分析运行时的上下文数据，可以判断是否存在异常行为、安全威胁等，进而决定是否要调整安全探针的运行状态以启用或者关闭相应的安全功能。系统指标则可以使云端服务器及时地了解性能损耗情况，进而生成相应的变更指令，调整安全探针的运行状态，以维护Web应用和Agent运行的稳定性。基于Web应用运行时的上下文数据或系统指标等运行数据，云端服务器可以基于需要的管理策略确定相应的变更指令，对安全探针的运行状态进行调整。因此，本公开提出的基于运行数据的安全探针管理机制是一种反馈式的机制，借助Agent反馈的Web应用运行时的运行数据，能够动态地、灵活地、精细地管理安全探针的运行状态。S105：所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态。具体地，Agent基于云端服务器下达的变更指令，执行对指定的一个或者多个安全探针的管理动作，更改安全探针的运行状态。变更指令针对的是指定的一个或者多个安全探针，即云端服务器从已注入Web应用的安全探针中指定一个或者多个需要更改运行状态的安全探针，生成的变更指令。变更指令还包含具体的管理动作，据此，Agent能够对指定的安全探针的运行状态实施具体的更改操作。在一种可选的实施方式中，当所述变更指令为指示激活或者冻结指定的一个或者多个安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：修改所述指定的一个或者多个安全探针的逻辑状态，以使得所述逻辑状态为激活状态的安全探针正常运行，所述逻辑状态为冻结状态的安全探针则不运行。具体地，预先为每一个安全探针配置一个逻辑状态，它可以是为每个安全探针对应的规则设置一个可变更的属性值，或者在每个安全探针对应的规则入口设置一个判断条件，本公开对此具体实现方式不一一列举，也不作具体限制。当逻辑状态为激活状态时，安全探针正常运行；逻辑状态为冻结状态时，安全探针则不运行。当所述变更指令为指示激活或者冻结指定的一个或者多个安全探针时，Agent通过修改相应的指定的一个或者多个安全探针的逻辑状态以更改其运行状态。通过预先为每个安全探针配置逻辑状态相当于为每个安全探针赋予了一个“开关”，使得对安全探针运行状态的管理更加灵活、精细可控。在另一种可选的实施方式中，当所述变更指令为指示屏蔽或者撤销屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针时，所述Agent基于所述变更指令更改指定的一个或者多个安全探针的运行状态，包括以下步骤：向所述指定位置注入屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均不运行，或者，撤销所述指定位置的屏蔽逻辑以使得所述Web应用在执行到所述指定位置之后经过的所有安全探针均恢复正常运行。具体地，通过编写一段屏蔽逻辑，由Agent注入到指定位置，使得Web应用在执行到所述指定位置之后经过的所有安全探针均不运行，仅执行Web应用自身的逻辑，直到撤销此屏蔽逻辑为止。因此，一旦注入屏蔽逻辑，从开始屏蔽到撤销屏蔽整个时间跨度内，Web应用在执行到指定位置后经过的所有安全探针均不执行。这种变更方式能够使得Web应用从某一时刻开始一次性屏蔽掉大量的安全探针，无需对安全探针的逻辑状态一一进行修改，使得对安全探针运行状态的管理效率更高。参照图3，本公开的实施例一提出了一种Web应用安全探针管理方法，包括步骤S201-S208：S201：云端服务器向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；S202：所述Agent基于所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；S203：所述Agent收集所述Web应用运行时的系统指标，并上报至所述云端服务器，所述系统指标至少包括系统CPU占用率；以上三个步骤的具体实施方式参照本公开说明书前文。S204：判断所述系统指标是否超出预设的第一阈值或者预设的第二阈值；在实际应用中，可以预设一个或者多个不同的阈值，用于云端服务器判断收集到的系统指标是否超过预设的不同阈值，从而分别地生成不同的变更指令。当只预设一个阈值时，云端服务器仅需要判断系统指标是否超出这一个预设的阈值。可选地，如图3所示，可以预设一个第一阈值和一个第二阈值。预设的第二阈值比预设的第一阈值代表着更高的性能消耗。通过预设一个第一阈值和一个第二阈值，可以使得云端服务器判断当前Web应用运行时的性能消耗程度，进而在不同消耗程度下生成不同的变更指令。S205：当所述系统指标超出预设的第一阈值时，生成指示冻结指定的一个或者多个安全探针的变更指令，或者，生成指示屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针的变更指令。具体地，如图3所示，当系统指标超出预设的第一阈值时，云端服务器将生成指示冻结指定的一个或者多个安全探针的变更指令或者指示屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针的变更指令。冻结指定的一个或者多个安全探针或者屏蔽所述Web应用在执行到指定位置之后经过的所有安全探针是指暂停这些安全探针的运行状态，也就是让这些安全探针相应的规则在Web应用运行时不被执行。无论是通过冻结还是屏蔽的方式，均可达到暂停安全探针运行状态的效果。而在需要的时候，被冻结的安全探针可重新激活，被屏蔽的安全探针也可撤销屏蔽，以使得安全探针恢复正常运行。在一种可选的实施方式中，当所述系统指标超出预设的第一阈值时，生成指示冻结部分预设的高性能消耗的安全探针的变更指令。具体地，可以基于开发人员或安全人员的专业经验事先预设一些性能消耗较高的安全探针，当云端服务器发现系统指标超出预设的第一阈值时，则优先将这些预设的安全探针冻结。在另一种可选的实施方式中，如本公开前文所述的实施例，安全探针注册请求可以是包含请求注册的安全模块的配置信息，规则库中存储有多个安全模块，每个安全模块包含一个或者多个安全探针。在这种实施方式中，当通过云端服务器向Agent发送包含请求注册的安全模块的配置信息的安全探针注册请求后，Agent可以从规则库中加载请求注册的安全模块，以获取所述安全模块包含的一个或者多个安全探针的Hook位置以及与所述Hook位置对应的安全规则，实现安全探针模块化的注入。在这种实施方式中，当所述系统指标超出预设的第一阈值时，生成指示冻结指定的所述安全模块的变更指令。由于规则库以模块化的方式存储安全探针，且Agent模块化地注入了安全探针，那么，当云端服务器发现系统指标超出预设的第一阈值时，可以选择性地冻结某个或某些已注入的安全模块包含的所有安全探针，相当于关闭指定安全模块的功能。例如，用户可以在性能消耗较高的时候，选择冻结自己认为不存在或不太可能存在安全问题的相应安全模块。S206：当所述系统指标超出预设的第二阈值时，生成移除所有已注入到所述Web应用中的安全探针的变更指令。具体地，预设的第二阈值比预设的第一阈值代表着更高的性能消耗，当云端服务器发现系统指标超出预设的第二阈值时，仅暂停部分安全探针的运行仍不足以减轻系统运行的负荷，因此可以生成移除所有已注入到Web应用中的安全探针的变更指令。当系统性能消耗已经超过较高的第二阈值时，直接移除已经注入到Web应用中的所有安全探针，释放CPU、内存等资源占用，以保障Web应用自身的正常运行。不过，安全探针一旦移除，要再启用相应的安全功能，则需要再次发起注册请求，重新注入安全探针。在一种优选的实施方式中，Agent可以持续收集Web应用运行时的系统指标，并定期上报云端服务器，云端服务器随系统指标的变化生成新的变更指令。例如，若系统指标已不再高于第一阈值，则可以生成激活原先被冻结的安全探针或者撤销原先的屏蔽操作的变更指令。本领域技术人员可以基于本公开前面所描述的具体实施例予以实现，本公开对此不再详述。实施例二：基于同一发明构思，本公开实施例二提供了一种Web应用安全探针管理系统，该Web应用安全探针管理系统的具体实施可参见上述方法实施例一的相关描述，重复之处不再赘述，如图4所示，该Web应用安全探针管理系统300主要包括：云端服务器320，所述云端服务器320包括：安全探针注册请求模块321，用于向部署在Web服务器中的Agent发送安全探针注册请求，所述安全探针注册请求用于请求在Web应用中注入一个或者多个安全探针；数据分析模块322，用于基于所述Agent收集的所述Web应用运行时的运行数据生成变更指令，并发送给所述Agent；部署在Web服务器中的Agent 310，所述Agent 310包括：安全探针注入模块311，用于基于所述云端服务器发送的所述安全探针注册请求，从规则库中加载所述一个或者多个安全探针，注入所述Web应用；数据收集模块312，用于收集所述Web应用运行时的运行数据，并上报至所述云端服务器；安全探针状态管理模块313，用于基于所述变更指令更改指定的一个或者多个安全探针的运行状态。实施例三：参照图5，本公开的实施例还提出了一种电子设备400，该电子设备400包括至少一个处理器410；以及，与所述至少一个处理器410通信连接的存储器420；其中，所述存储器420存储有可被所述至少一个处理器410执行的指令，所述指令被所述至少一个处理器410执行，以使所述至少一个处理器410能够执行本公开的实施例一所述的Web应用安全探针管理方法。上述电子设备400中的上述元件可通过总线彼此连接，总线例如数据总线、地址总线、控制总线、扩展总线和局部总线之一或其任意组合。实施例四：本公开的实施例还提出了一种存储介质，其上存储有计算机程序，该程序被处理器执行时实现如本公开的实施例一所述的Web应用安全探针管理方法。本领域内的技术人员应当明白，本公开的实施例可提供为方法、系统、或计算机程序产品。因此，本公开可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本公开可采用在一个或多个其中包含有计算机可用程序代码的计算机可用非瞬时性存储介质上实施的计算机程序产品的形式。本公开是参照根据本公开的实施例的方法、装置、设备和计算机程序产品的流程图和/或方框图来描述的。应理解为可由计算机程序指令实现流程图和/或方框图中的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的步骤。以上所述仅为本公开的较佳实施例，并不用以限制本公开，凡在本公开的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本公开的保护范围之内。
