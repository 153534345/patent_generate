标题title
微服务打包合并方法、装置和电子设备
摘要abst
本申请实施例提供一种微服务打包合并方法、装置和电子设备，涉及微服务技术领域。该方法包括：响应于用户输入的打包合并指令，确定文件配置方式；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。这样不仅可以提高打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。
权利要求书clms
1.一种微服务打包合并方法，其特征在于，包括：响应于用户输入的打包合并指令，确定文件配置方式，所述文件配置方式用于指示待打包合并的多个微服务；基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，得到更新后的配置文件；以及基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入所述更新后的配置文件和所述更新后的jar包依赖文件，得到目标启动模板；基于所述目标启动模板，对所述多个微服务进行打包合并，得到合并服务。2.根据权利要求1所述的微服务打包合并方法，其特征在于，所述基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，包括：通过maven命令调用打包插件读取所述文件配置方式；基于所述文件配置方式，在所述原始配置文件中更新所述多个微服务各自的应用名称；所述基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，包括：通过所述maven命令调用所述打包插件读取所述文件配置方式；基于所述文件配置方式，在所述原始jar包依赖文件中剔除所述多个微服务各自的启动类。3.根据权利要求1或2所述的微服务打包合并方法，其特征在于，所述基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，包括：获取预设的微服务的应用名称的撰写格式，所述撰写格式下的应用名称可更新；基于所述文件配置方式，按照所述应用名称的撰写格式在所述原始配置文件中更新所述多个微服务各自的应用名称。4.根据权利要求1或2所述的微服务打包合并方法，其特征在于，所述方法还包括：在所述合并服务启动过程中，若输出启动异常提示信息，则修改所述多个微服务的类名称；其中，所述多个微服务修改后的类名称满足如下条件：实现不同功能的不同微服务修改后的类名称不同；实现相同功能的不同微服务修改后的类名称相同，且所述不同微服务注解的所述微服务的类优先级不同。5.根据权利要求3所述的微服务打包合并方法，其特征在于，所述方法还包括：在所述合并服务运行过程中，若输出调用异常提示信息，则按照所述应用名称的撰写格式在所述原始配置文件中为所述多个微服务配置各自的预留位，所述预留位用于写入基于所述文件配置方式确定的应用名称，以及基于后续打包合并指令确定的文件配置方式确定的应用名称。6.根据权利要求1或2所述的微服务打包合并方法，其特征在于，所述基于所述目标启动模板，对所述多个微服务进行打包合并，包括：确定所述多个微服务是否对应同一个数据库，且所述多个微服务各自对应的技术架构是否相同；在对应同一个数据库，且技术架构相同的情况下，基于所述目标启动模板，对所述多个微服务进行打包合并。7.根据权利要求1或2所述的微服务打包合并方法，其特征在于，所述方法还包括：在本次打包合并操作为首次打包合并操作的情况下，将创建的启动模板确定为所述空启动模板；在本次打包合并操作为非首次打包合并操作的情况下，对前一次打包合并操作对应的启动模板进行清空处理，将清空处理后的启动模板确定为所述空启动模板。8.一种微服务打包合并装置，其特征在于，包括：第一确定单元，用于响应于用户输入的打包合并指令，确定文件配置方式，所述文件配置方式用于指示待打包合并的多个微服务；处理单元，用于基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，得到更新后的配置文件；以及基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，得到更新后的jar包依赖文件；写入单元，用于在创建的空启动模板中写入所述更新后的配置文件和所述更新后的jar包依赖文件，得到目标启动模板；打包合并单元，用于基于所述目标启动模板，对所述多个微服务进行打包合并，得到合并服务。9.一种电子设备，包括存储器、处理器及存储在所述存储器上并可在所述处理器上运行的计算机程序，其特征在于，所述处理器执行所述程序时实现如权利要求1至7任一项所述的微服务打包合并方法。10.一种非暂态计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现如权利要求1至7任一项所述的微服务打包合并方法。
说明书desc
技术领域本申请涉及微服务技术领域，尤其涉及一种微服务打包合并方法、装置和电子设备。背景技术所谓微服务，就是以较小的功能集作为独立的服务进行部署。通常情况下，一个企业中会有几百甚至上千个微服务在提供服务，每一个微服务都需要占用一个服务部署资源。不同任务所需的服务不同。在某一任务的实现需要调用多个服务的情况下，若要实现该任务，则需要将该多个服务作为一个整体，重新部署其对应的微服务，这样会进一步增大服务部署资源的占用。为了降低服务部署资源的占用，可以考虑对任务所需的多个微服务执行打包合并操作，并通过运行合并服务实现相应的任务。现有技术中，对多个微服务执行打包合并操作时，通常是用户手动修改启动模板中的配置文件和jar包依赖文件，从而导致打包合并操作效率较低。发明内容本申请实施例提供一种微服务打包合并方法、装置和电子设备，可以根据用户需求，动态地对多个微服务执行打包合并操作，从而有效地提高了打包合并操作效率。本申请还提出一种微服务打包合并装置。本申请还提出一种电子设备。本申请还提出一种非暂态计算机可读存储介质。根据本申请第一方面实施例的微服务打包合并方法，该方法包括：响应于用户输入的打包合并指令，确定文件配置方式，所述文件配置方式用于指示待打包合并的多个微服务；基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，得到更新后的配置文件；以及基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入所述更新后的配置文件和所述更新后的jar包依赖文件，得到目标启动模板；基于所述目标启动模板，对所述多个微服务进行打包合并，得到合并服务。根据本申请实施例提供的微服务打包合并方法，不仅可以基于用户需求动态地选择微服务执行打包合并操作，提高了打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。根据本申请的一个实施例，所述基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，包括：通过maven命令调用打包插件读取所述文件配置方式；基于所述文件配置方式，在所述原始配置文件中更新所述多个微服务各自的应用名称；所述基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，包括：通过所述maven命令调用所述打包插件读取所述文件配置方式；基于所述文件配置方式，在所述原始jar包依赖文件中剔除所述多个微服务各自的启动类。根据本申请的一个实施例，所述基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，包括：获取预设的微服务的应用名称的撰写格式，所述撰写格式下的应用名称可更新；基于所述文件配置方式，按照所述应用名称的撰写格式在所述原始配置文件中更新所述多个微服务各自的应用名称。根据本申请的一个实施例，在所述合并服务启动过程中，若输出启动异常提示信息，则修改所述多个微服务的类名称；其中，所述多个微服务修改后的类名称满足如下条件：实现不同功能的不同微服务修改后的类名称不同；实现相同功能的不同微服务修改后的类名称相同，且所述不同微服务注解的所述微服务的类优先级不同。根据本申请的一个实施例，所述在所述合并服务运行过程中，若输出调用异常提示信息，则按照所述应用名称的撰写格式在所述原始配置文件中为所述多个微服务配置各自的预留位，所述预留位用于写入基于所述文件配置方式确定的应用名称，以及基于后续打包合并指令确定的文件配置方式确定的应用名称。根据本申请的一个实施例，基于所述目标启动模板，对所述多个微服务进行打包合并，包括：确定所述多个微服务是否对应同一个数据库，且所述多个微服务各自对应的技术架构是否相同；在对应同一个数据库，且技术架构相同的情况下，基于所述目标启动模板，对所述多个微服务进行打包合并。根据本申请第二方面实施例的微服务打包合并装置，该装置包括：第一确定单元，用于响应于用户输入的打包合并指令，确定文件配置方式，所述文件配置方式用于指示待打包合并的多个微服务；处理单元，用于基于所述文件配置方式，在原始配置文件中更新所述多个微服务各自的应用名称，得到更新后的配置文件；以及基于所述文件配置方式，在原始jar包依赖文件中剔除所述多个微服务各自的启动类，得到更新后的jar包依赖文件；写入单元，用于在创建的空启动模板中写入所述更新后的配置文件和所述更新后的jar包依赖文件，得到目标启动模板；打包合并单元，用于基于所述目标启动模板，对所述多个微服务进行打包合并，得到合并服务。根据本申请实施例提供的微服务打包合并装置，不仅可以基于用户需求动态地选择微服务执行打包合并操作，提高了打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。本申请实施例中的上述一个或多个技术方案，至少具有如下技术效果之一：在执行微服务的打包合并操作时，是响应于用户输入的打包合并指令，确定文件配置方式；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。这样不仅可以基于用户需求动态地选择微服务执行打包合并操作，提高了打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。进一步地，在本申请实施例中，增加打包插件，并基于文件配置方式更新多个微服务各自的应用名称的目的在于：能够灵活的进行微服务的打包合并，以及合并服务的拆解。进一步地，在本申请实施例中，基于文件配置方式，按照应用名称的撰写格式在原始配置文件中更新多个微服务各自的应用名称，从而实现对应用名称的更新。进一步地，在本申请实施例中，在合并服务启动过程中，若输出启动异常提示信息，说明不同微服务的内容中类名称存在重复，在该种情况下，可以修改多个微服务的类名称，实现了不同微服务的区分，从而保证合并服务的正常启动。进一步地，在本申请实施例中，在合并服务运行过程中，若输出调用异常提示信息，说明原始配置文件中的多个微服务各自的应用名称未配置，则可以按照应用名称的撰写格式在原始配置文件中为多个微服务配置各自的预留位，预留位用于写入基于文件配置方式确定的应用名称，以及基于后续打包合并指令确定的文件配置方式确定的应用名称，从而实现合并服务的正常运行。本申请的附加方面和优点将在下面的描述中部分给出，部分将从下面的描述中变得明显，或通过本申请的实践了解到。附图说明为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作一简单地介绍，显而易见地，下面描述中的附图是本申请的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本申请实施例提供的一种微服务打包合并方法的流程示意图；图2为本申请实施例提供的一种微服务打包合并装置的结构示意图；图3为本申请实施例提供的一种电子设备的实体结构示意图。具体实施方式为使本申请的目的、技术方案和优点更加清楚，下面将结合本申请中的附图，对本申请中的技术方案进行清楚、完整地描述，显然，所描述的实施例是本申请一部分实施例，而不是全部的实施例。基于本申请中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本申请保护的范围。在本申请的实施例中，“至少一个”是指一个或者多个，“多个”是指两个或两个以上。“和/或”，描述关联对象的关联关系，表示可以存在三种关系，例如，A和/或B，可以表示：单独存在A，同时存在A和B，单独存在B这三种情况，其中A，B可以是单数或者复数。在本申请的文字描述中，字符“/”一般表示前后关联对象是一种“或”的关系。本申请实施例提供的技术方案可以应用于微服务合并场景中。不同任务所需的服务不同。在某一任务的实现需要调用多个服务的情况下，若要实现该多个服务，则需要重新部署将该多个服务作为一个整体对应的微服务。例如，某一个任务的实现需要调用多个服务，该多个服务分别为服务1、服务2以及服务5，其中，服务1通过微服务1实现，服务2通过微服务2实现，服务5通过微服务5实现。若要实现该任务，则需要将这3个服务作为一个整体，重新部署这三个服务对应的微服务，这样会进一步增大服务部署资源的占用。为了降低服务部署资源的占用，可以考虑对上述任务所需的服务1、服务2以及服务5各自对应的微服务执行打包合并操作，并通过运行合并服务实现相应的任务。现有技术中，对多个微服务执行打包合并操作时，通常是用户手动修改启动模板中的配置文件和jar包依赖文件，并在创建的启动模板中写入修改后的配置文件和jar包依赖文件，得到更新后的启动模板，再基于更新后的启动模板对所述多个微服务进行打包合并。但是，采用用户手动修改启动模板中的配置文件和jar包依赖文件的方式，会导致打包合并操作效率较低。为了提高打包合并操作效率，本申请实施例提供了一种微服务打包合并方法，可以先根据用户需求确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务；并基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；再基于目标启动模板，对多个微服务进行打包合并，得到合并服务。这样不仅可以基于用户需求动态地选择微服务执行打包合并操作，提高了打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。下面，将通过下述几个具体的实施例对本申请提供的微服务打包合并方法进行详细地说明。可以理解的是，下面这几个具体的实施例可以相互结合，对于相同或相似的概念或过程可能在某些实施例不再赘述。实施例一图1为本申请实施例提供的一种微服务打包合并方法的流程示意图，该微服务打包合并方法可以由软件和/或硬件装置执行，例如微服务打包合并装置。示例地，请参见图1所示，该微服务打包合并方法可以包括：S101、响应于用户输入的打包合并指令，确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务。其中，文件配置方式是根据用户需求确定的。假设用户需要对微服务1、微服务2以及微服务5执行打包合并操作，则文件配置方式指示微服务1、微服务2以及微服务5。在根据用户需求确定文件配置方式后，就可以基于文件配置方式执行下述S102：S102、基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件。一方面，考虑到在对多个微服务执行打包合并操作后，生成的合并服务会有一个新的应用名称，因此，可以先基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，使得该多个微服务的应用名称与合并服务的应用名称相同，其他未执行打包合并操作的微服务的应用名称可以保持不变，从而得到更新后的配置文件。需要说明的是，在本申请实施例中，更新该多个微服务各自的应用名称的目的在于：为在合并服务运行时，被合并的微服务仍能对外提供能力。此外，在本申请实施例中，配置文件还可以规范化要求。例如，不同微服务之间的公共配置可以存放至共享配置里面，例如数据库、redis相关配置；不同微服务各自的特殊服务可以存放至自身特殊配中。另一方面，考虑到在对多个微服务执行打包合并操作时，为了避免对多个微服务各自执行打包操作，因此，可以基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，其他未执行打包合并操作的微服务的启动类无需剔除，从而得到更新后的jar包依赖文件。示例地，在本申请实施例中，基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称时，可以通过maven命令调用打包插件，并通过打包插件读取文件配置方式；再基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称。示例地，通过maven命令调用打包插件时，其命令格式可以为：mvn meicloud:reduceDependency，其中，mvn 表示maven命令，meicloud表示美云智数，reduceDependency表示打包工具名称。具体可以根据实际需要进行设置，在此，本申请实施例只是以这种命令格式为例进行说明，但并不代表本申请实施例仅局限于此。可以理解的是，在本申请实施例中，除了通过maven命令调用打包插件之外，还可以通过其他命令调用打包插件，例如，Gradle命令，具体可以根据实际需要进行设置，在此，本申请实施例只是以通过maven命令调用打包插件为例进行说明，但并不代表本申请实施例仅局限于此。示例地，通过打包插件读取文件配置方式时，在打包插件内，根据配置文件的相对路径进行文件流读取，从而读取到该文件配置方式。示例地，在本申请实施例中，基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称时，可以先获取预设的微服务的应用名称的撰写格式，撰写格式下的应用名称可更新；并基于文件配置方式，按照应用名称的撰写格式在原始配置文件中更新多个微服务各自的应用名称，从而实现对应用名称的更新。考虑到不同微服务之间存在feign的调用方式，示例地，在本申请实施例中，微服务的应用名称的撰写格式可以通过定义@FeignClient的value，以规划微服务的应用名称的撰写格式。其中，value可表示为：value={spring.application.name}，application.name为应用名称。需要说明的是，在本申请实施例中，增加打包插件，并基于文件配置方式更新多个微服务各自的应用名称的目的在于：能够灵活的进行微服务的打包合并，以及合并服务的拆解。示例地，在本申请实施例中，基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类时，可以通过maven命令调用打包插件读取文件配置方式；基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类。示例地，在原始jar包依赖文件中剔除微服务的启动类时，可以将pom文件中spring-boot-maven-plugin打包机制插件删掉，从而剔除微服务的启动类，这样可以有效地避免对多个微服务各自执行打包操作。在分别得到更新后的配置文件和更新后的jar包依赖文件后，就可以在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，即执行下述S103：S103、在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板。其中，空启动模板是从代码仓库拉取的公共模板工程。示例地，在从代码仓库拉取空启动模板时，可以包括两种可能的场景：在一种可能的场景中，在本次打包合并操作为首次打包合并操作的情况下，说明创建的启动模板之前并未被执行写入操作，为空的启动模板，因此，可以直接将创建的启动模板确定为空启动模板，从而获取到空启动模板。在另一种可能的场景中，在本次打包合并操作为非首次打包合并操作的情况下，说明创建的启动模板之前被执行过写入操作，为非空的启动模板，因此，可以对前一次打包合并操作对应的启动模板进行清空处理，将清空处理后的启动模板确定为空启动模板，从而获取到空启动模板。在获取到空启动模板后，就可以在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板，并执行下述S104：S104、基于目标启动模板，对多个微服务进行打包合并，得到合并服务。示例地，在本申请实施例中，对多个微服务进行打包合并时，可以通过maven命令参数对多个微服务进行打包合并，得到打包合并后的合并服务。示例地，maven命令参数格式可以为：mvn clean install -Dmaven.test.skip=true。示例地，在本申请实施例中，为了进一步提高打包合并的成功率，在对多个微服务进行打包合并时，可以先确定多个微服务是否对应同一个数据库，且多个微服务各自对应的技术架构是否相同；在对应同一个数据库，且技术架构相同的情况下，基于目标启动模板，对多个微服务进行打包合并，这样可以有效地解决因数据库不同和/或技术架构不同导致的打包合并失败的问题，从而有效地提高了打包合并的成功率。其中，技术架构相同，例如ORM架构一致、注册中心一致等。可以看出，本申请实施例中，在执行微服务的打包合并操作时，是响应于用户输入的打包合并指令，确定文件配置方式；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。这样不仅可以基于用户需求动态地选择微服务执行打包合并操作，提高了打包合并操作的灵活性，而且基于文件配置方式自动更新多个微服务各自的应用名称和剔除多个微服务各自的启动类，从而有效地提高了打包合并操作效率。基于上述图1所示的实施例，在对多个微服务进行打包合并，得到合并服务后，就可以在调用该合并服务时，启动并运行该合并服务。示例地，在合并服务启动过程中，若输出启动异常提示信息，说明不同微服务的内容中类名称存在重复，在该种情况下，可以修改多个微服务的类名称，实现了不同微服务的区分，从而保证合并服务的正常启动。其中，多个微服务修改后的类名称满足如下条件：实现不同功能的不同微服务修改后的类名称不同；实现相同功能的不同微服务修改后的类名称相同，且不同微服务注解的微服务的类优先级不同。示例地，在本申请实施例中，针对实现不同功能的不同微服务，修改类名称的方法举例如下：标明注入bean名称。@Configuration@Bean@Service@Component...通过上述举例，可以实现对不同功能的不同微服务的类名称的修改，使得实现不同功能的不同微服务修改后的类名称不同。示例地，在本申请实施例中，针对实现相同功能的不同微服务，修改类名称可以使用@ConditionalOnMissingBean注解，这样可以有效地避免多次注入。在合并服务正常启动后，就可以运行该合并服务。示例地，在合并服务运行过程中，若输出调用异常提示信息，例如404，说明原始配置文件中的多个微服务各自的应用名称未配置，可以通过检测@FeignClient中的value是否配置，若微服务不存在，则可以按照应用名称的撰写格式在原始配置文件中为多个微服务配置各自的预留位，预留位用于写入基于文件配置方式确定的应用名称，以及基于后续打包合并指令确定的文件配置方式确定的应用名称。这样通过预留位用于写入基于文件配置方式确定的应用名称，可以实现本次合并服务的正常运行，此外，预留位用于写入基于后续打包合并指令确定的文件配置方式确定的应用名称，这样可以实现后续合并服务的正常运行。下面对本申请提供的微服务打包合并装置进行描述，下文描述的微服务打包合并装置与上文描述的微服务打包合并方法可相互对应参照。图2为本申请实施例提供的一种微服务打包合并装置的结构示意图，示例地，请参见图2所示，该微服务打包合并装置20可以包括：第一确定单元201，用于响应于用户输入的打包合并指令，确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务。处理单元202，用于基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件。写入单元203，用于在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板。打包合并单元204，用于基于目标启动模板，对多个微服务进行打包合并，得到合并服务。可选地，在本申请实施例中，处理单元202，用于基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，包括：通过maven命令调用打包插件读取文件配置方式；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称；处理单元202，用于基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，包括：通过maven命令调用打包插件读取文件配置方式；基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类。可选地，在本申请实施例中，处理单元202，用于基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，包括：获取预设的微服务的应用名称的撰写格式，撰写格式下的应用名称可更新；基于文件配置方式，按照应用名称的撰写格式在原始配置文件中更新多个微服务各自的应用名称。可选地，在本申请实施例中，微服务打包合并装置20还包括修改单元；修改单元，用于在合并服务启动过程中，若输出启动异常提示信息，则修改多个微服务的类名称；其中，多个微服务修改后的类名称满足如下条件：实现不同功能的不同微服务修改后的类名称不同；实现相同功能的不同微服务修改后的类名称相同，且不同微服务注解的微服务的类优先级不同。可选地，在本申请实施例中，微服务打包合并装置20还包括配置单元；配置单元，用于在合并服务运行过程中，若输出调用异常提示信息，则按照应用名称的撰写格式在原始配置文件中为多个微服务配置各自的预留位，预留位用于写入基于文件配置方式确定的应用名称，以及基于后续打包合并指令确定的文件配置方式确定的应用名称。可选地，在本申请实施例中，打包合并，用于基于目标启动模板，对多个微服务进行打包合并，包括：确定多个微服务是否对应同一个数据库，且多个微服务各自对应的技术架构是否相同；在对应同一个数据库，且技术架构相同的情况下，基于目标启动模板，对多个微服务进行打包合并。可选地，在本申请实施例中，所述装置还包括第二确定单元；所述第二确定单元，用于在本次打包合并操作为首次打包合并操作的情况下，将创建的启动模板确定为所述空启动模板；在本次打包合并操作为非首次打包合并操作的情况下，对前一次打包合并操作对应的启动模板进行清空处理，将清空处理后的启动模板确定为所述空启动模板。本申请实施例提供的微服务打包合并装置20，可以执行上述任一实施例中微服务打包合并方法的技术方案，其实现原理以及有益效果与微服务打包合并方法的实现原理及有益效果类似，可参见微服务打包合并方法的实现原理及有益效果，此处不再进行赘述。图3为本申请实施例提供的一种电子设备的实体结构示意图，如图3所示，该电子设备可以包括：处理器310、通信接口320、存储器330和通信总线340，其中，处理器310，通信接口320，存储器330通过通信总线340完成相互间的通信。处理器310可以调用存储器330中的逻辑指令，以执行微服务打包合并方法，该方法包括：响应于用户输入的打包合并指令，确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。此外，上述的存储器330中的逻辑指令可以通过软件功能单元的形式实现并作为独立的产品销售或使用时，可以存储在一个计算机可读取存储介质中。基于这样的理解，本申请的技术方案本质上或者说对现有技术做出贡献的部分或者该技术方案的部分可以以软件产品的形式体现出来，该计算机软件产品存储在一个存储介质中，包括若干指令用以使得一台计算机设备执行本申请各个实施例所述方法的全部或部分步骤。而前述的存储介质包括：U盘、移动硬盘、只读存储器、随机存取存储器、磁碟或者光盘等各种可以存储程序代码的介质。另一方面，本申请还提供一种计算机程序产品，所述计算机程序产品包括计算机程序，计算机程序可存储在计算机可读存储介质上，所述计算机程序被处理器执行时，计算机能够执行上述各方法所提供的微服务打包合并方法，该方法包括：响应于用户输入的打包合并指令，确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。又一方面，本申请还提供一种计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现以执行上述各方法提供的微服务打包合并方法，该方法包括：响应于用户输入的打包合并指令，确定文件配置方式，文件配置方式用于指示待打包合并的多个微服务；基于文件配置方式，在原始配置文件中更新多个微服务各自的应用名称，得到更新后的配置文件；以及基于文件配置方式，在原始jar包依赖文件中剔除多个微服务各自的启动类，得到更新后的jar包依赖文件；在创建的空启动模板中写入更新后的配置文件和更新后的jar包依赖文件，得到目标启动模板；基于目标启动模板，对多个微服务进行打包合并，得到合并服务。以上所描述的装置实施例仅仅是示意性的，其中所述作为分离部件说明的单元可以是或者也可以不是物理上分开的，作为单元显示的部件可以是或者也可以不是物理单元，即可以位于一个地方，或者也可以分布到多个网络单元上。可以根据实际的需要选择其中的部分或者全部模块来实现本实施例方案的目的。本领域普通技术人员在不付出创造性的劳动的情况下，即可以理解并实施。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到各实施方式可借助软件加必需的通用硬件平台的方式来实现，当然也可以通过硬件。基于这样的理解，上述技术方案本质上或者说对现有技术做出贡献的部分可以以软件产品的形式体现出来，该计算机软件产品可以存储在计算机可读存储介质中，如ROM/RAM、磁碟、光盘等，包括若干指令用以使得一台计算机设备执行各个实施例或者实施例的某些部分所述的方法。最后应说明的是：以上实施例仅用以说明本申请的技术方案，而非对其限制；尽管参照前述实施例对本申请进行了详细的说明，本领域的普通技术人员应当理解：其依然可以对前述各实施例所记载的技术方案进行修改，或者对其中部分技术特征进行等同替换；而这些修改或者替换，并不使相应技术方案的本质脱离本申请各实施例技术方案的精神和范围。
