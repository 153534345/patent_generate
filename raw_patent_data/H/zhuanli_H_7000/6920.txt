标题title
一种工业协议动态解析方法及系统
摘要abst
本发明公开了一种工业协议动态解析方法及系统，包括：根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从接收指令中获取接收解释字符模板；根据各接收解释字符模板，依次配置接收指令模板对协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板；依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送；根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用协议解释类，本发明能够将协议解释和业务逻辑进行分离，便于业务逻辑的理解和后期应用开发和维护。
权利要求书clms
1.一种工业协议动态解析方法，其特征在于，包括：根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板；根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板；依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送；根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。2.如权利要求1所述的工业协议动态解析方法，其特征在于，所述根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类，包括：根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类源代码；循环读取接收指令模板，对应生成协议解释类源代码中的事件类源代码和生成对应的解释接收指令，并调用所述接收指令模板对应的相关的事件类源代码；根据所述接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中；直到循环读取完所有接收指令模板，并将对应的事件协议类保存到指定路径下并加入到项目中，以便业务代码直接调用所述协议解释类。3.如权利要求2所述的工业协议动态解析方法，其特征在于，所述生成对应的解释接收指令进行解释，具体为：根据配置参数过滤所述接收指令中的无效字符，并选择一个接收指令模板作为最优接收指令模板；判断所述最优接收指令模板是否为空，若所述最优接收指令模板不为空，则根据所述最优接收指令模板调用对应的事件；对所述接收指令模板进行指令截取和转换，得到包含解释的字段名和对应的实际值的接收解释包。4.如权利要求2所述的工业协议动态解析方法，其特征在于，在循环读取完所有接收指令模板之后，还包括：将各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码。5.如权利要求1所述的工业协议动态解析方法，其特征在于，所述根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板，包括：依次判断所述接收解释字符模板中是否存在变量，若所述接收解释字符模板中存在变量，则自动设置所述变量的转换类型、变量名或者补齐符；若所述接收解释字符模板中不存在变量，则直接根据所述接收解释字符模板中的数据，生成对应的接收指令模板。6.如权利要求5所述的工业协议动态解析方法，其特征在于，所述自动设置所述变量的转换类型、变量名或者补齐符，包括：判断所述接收解释字符模板的变量的转换类型是否存在指定转换，若所述接收解释字符模板的变量的转换类型存在指定转换，则添加自动解释设置进行指定转换，并返回对应的限定接口，生成对应的接收指令模板；或者，通过自定义函数对指定转换的变量进行截取和指定转换，生成对应的接收指令模板。7.如权利要求5所述的工业协议动态解析方法，其特征在于，所述自动设置所述变量的转换类型、变量名或者补齐符，还包括：当所述接收解释字符模板中变量的实际长度小于定义的占位符长度时，通过补齐字符进行对齐，转换为符合所述占位符长度的值。8.如权利要求1所述的工业协议动态解析方法，其特征在于，在动态生成对应的协议解释类之后，还包括：对协议进行修改时，重新生成一次协议类，并对修改的协议类的属性或者事件进行提示。9.如权利要求1所述的工业协议动态解析方法，其特征在于，所述根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，还包括：直接调用MakeClassFile函数在指定路径下生成所述协议解释类。10.一种工业协议动态解析系统，其特征在于，包括：接收解释字符模板生成模块，用于根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板；接收指令模板生成模块，用于根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板；发送指令模板生成模块，用于依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送；协议解释类生成模块，用于根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。
说明书desc
技术领域本发明涉及工业协议数据解析技术领域，尤其涉及一种工业协议动态解析方法及系统。背景技术工业通讯协议中TCP协议常以特定字符串形式进行交互，现有上位机TCP解释程序都有下面特点：协议解释和业务逻辑混合在一起，代码混乱，后期如果修改协议，很难从混乱的代码结构中快速找到关键点进行快速修改；业务代码中含有大量的字符串解释，但字符串的解释很容易因为不小心误加或误减一个字符就出现解释错误和前后代码衔接在一起，并且后期很难发现；协议解释跟业务代码无法分离出来，在代码交接时交接人很难在短时间理解业务逻辑。因此，亟需一种工业协议数据解析方法能够将协议解释和业务逻辑进行分离，便于业务逻辑的理解和避免协议解释和业务逻辑衔接造成的混乱，并便于后期应用开发和维护。发明内容本发明的目的是针对上述现有技术的不足，提出工业协议动态解析方法及系统，以解决协议解释和业务逻辑衔接造成混乱的问题，能够将协议解释和业务逻辑进行分离，便于业务逻辑的理解和后期应用开发和维护。第一方面，本发明提供了一种工业协议动态解析方法，包括：根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板；根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板；依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送；根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。本发明采用根据预设的接收解释字符模板的规则，从接收指令中获取接收解释字符模板，并根据各接收解释字符模板，依次配置接收指令模板和对应的发送指令模板，通过生成的接收指令模板对协议进行解释，并生成对应的发送指令模板对接收指令模板中的参数进行发送，业务代码只需调用由接收指令模板和发送指令模板生成的协议解释类，就能够动态获取到协议当中的参数，无需再对协议进行解析，避免协议更改后业务代码无法适应的情况发生，即实现协议解析和业务逻辑的分离，能够提高协议解析的适用性，并便于业务逻辑的理解和后期应用开发和维护；根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类，能够对不同的接收指令进行对应的动态封装，进一步提高协议解析的适用性，能够动态适应不同的接受指令，业务代码无需了解协议解释的具体结构和数据处理过程，直接通过动态生成对应的协议解释类获取协议中的数据即可，能够提高对协议的读取速度，从而加快根据协议执行对应功能的速度，进而提高可配置的协议解析的性能。进一步，所述根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类，包括：根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类源代码；循环读取接收指令模板，对应生成协议解释类源代码中的事件类源代码和生成对应的解释接收指令，并调用所述接收指令模板对应的相关的事件类源代码；根据所述接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中；直到循环读取完所有接收指令模板，并将对应的事件协议类保存到指定路径下并加入到项目中，以便业务代码直接调用所述协议解释类。本发明采用根据接收指令模板，进行对应事件的执行，并将接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中，分别配置接收指令模板和发送指令模板，接收指令模板处理接收解释字符模板中的数据，能够对协议做出更加清晰地解释，发送指令模板根据对应的发送指令模板生成发送函数源代码，能够将发送指令模板中的数据通过发送函数源代码进行发送，有利于由接收指令模板和发送指令模板生成的协议解释类进行封装，有利于动态封装后的协议解释类对业务逻辑提供解析后的协议数据，实现业务逻辑和协议解析之间的数据直接交互，能够提高协议解析的适用性，并便于业务逻辑的理解和后期应用开发和维护。进一步，所述生成对应的解释接收指令进行解释，具体为：根据配置参数过滤所述接收指令中的无效字符，并选择一个接收指令模板作为最优接收指令模板；判断所述最优接收指令模板是否为空，若所述最优接收指令模板不为空，则根据所述最优接收指令模板调用对应的事件；对所述接收指令模板进行指令截取和转换，得到包含解释的字段名和对应的实际值的接收解释包。在循环读取完所有接收指令模板之后，还包括：将各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码。本发明采用对各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码，能够进一步加快对协议的读取速度，从而加快根据协议执行对应功能的速度，进而提高可配置的协议解析的性能。进一步，所述根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板，包括：依次判断所述接收解释字符模板中是否存在变量，若所述接收解释字符模板中存在变量，则自动设置所述变量的转换类型、变量名或者补齐符；若所述接收解释字符模板中不存在变量，则直接根据所述接收解释字符模板中的数据，生成对应的接收指令模板。进一步，所述自动设置所述变量的转换类型、变量名或者补齐符，包括：判断所述接收解释字符模板的变量的转换类型是否存在指定转换，若所述接收解释字符模板的变量的转换类型存在指定转换，则添加自动解释设置进行指定转换，并返回对应的限定接口，生成对应的接收指令模板；或者，通过自定义函数对指定转换的变量进行截取和指定转换，生成对应的接收指令模板。所述自动设置所述变量的转换类型、变量名或者补齐符，还包括：当所述接收解释字符模板中变量的实际长度小于定义的占位符长度时，通过补齐字符进行对齐，转换为符合所述占位符长度的值。进一步，在动态生成对应的协议解释类之后，还包括：对协议进行修改时，重新生成一次协议类，并对修改的协议类的属性或者事件进行提示。本发明采用对修改后的协议进行提示，可以避免后期因为人为忽略修改而造成业务代码无法进行自适应的情况，能够主动对修改的协议进行提示，从而提醒业务代码需要进行修改，以适应修改后的协议，能够提高业务代码执行效率，进而提高可配置的协议解析的性能。进一步，所述根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，还包括：直接调用MakeClassFile函数在指定路径下生成所述协议解释类。第二方面，本发明还提供了一种工业协议动态解析系统，包括：接收解释字符模板生成模块，用于根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板；接收指令模板生成模块，用于根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板；发送指令模板生成模块，用于依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送；协议解释类生成模块，用于根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。附图说明图1是本发明实施例提供的工业协议动态解析的流程示意图；图2是本发明实施例提供的工业协议动态解析的流程示意图；图3是本发明实施例提供的工业协议动态解析系统的结构示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。参见图1，是本发明实施例提供的工业协议动态解析的流程示意图，包括步骤S11～步骤S14，具体为：步骤S11、根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板。步骤S12、根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板。其中，依次判断所述接收解释字符模板中是否存在变量，若所述接收解释字符模板中存在变量，则自动设置所述变量的转换类型、变量名或者补齐符；若所述接收解释字符模板中不存在变量，则直接根据所述接收解释字符模板中的数据，生成对应的接收指令模板。具体地，自动设置所述变量的转换类型、变量名或者补齐符，包括：判断所述接收解释字符模板的变量的转换类型是否存在指定转换，若所述接收解释字符模板的变量的转换类型存在指定转换，则添加自动解释设置进行指定转换，并返回对应的限定接口，生成对应的接收指令模板；或者，通过自定义函数对指定转换的变量进行截取和指定转换，生成对应的接收指令模板。此外，还包括：当所述接收解释字符模板中变量的实际长度小于定义的占位符长度时，通过补齐字符进行对齐，转换为符合所述占位符长度的值。本发明通过对接收解释字符模板中的变量进行是否存在变量的判断，并对存在变量的情况进行转换类型、变量名或者补齐符的格式进行统一处理，能够对协议中的数据进行清晰地解释，能够保证业务代码通过发送函数源代码获取协议中的参数的格式一致，能够对不同的接收解释字符模板进行对应的解释，进一步提高协议解析的适用性，便于业务逻辑的理解和后期应用开发和维护。示例性地，获取到一条包含协议解释的名称及变长的字符串的待解释数据的接收解释字符模板，其中，接收解释字符模板的名称为“Position”，变长的字符串的待解释数据为“POSITION{M}{PPPP}{XXXXXX}{Y6}{Z6}000000END”是变长的字符串的待解释数据，需要通过接收指令模板进行解释。根据预设的接收解释字符模板的规则，将待解释的数据中动态可变内容用花括号包含，如果变量及其占位符有两种格式，第一种为花括号中第一位为变量标识，变量ID后为占位符的长度，第二种为花括号有重复多次的变量ID，重复次数为该变量ID的占位符长度。示例性地，在“POSITION{M}{PPPP}{XXXXXX}{Y6}{Z6}000000END”中，表示包含5个变量，分别包含变量ID为M、占用1个字符，变量ID为P、占用4个字符，变量ID为X、占用6个字符，变量ID为Y，占用6个字符，变量ID为Z、占用6个字符，“000000END”是结束标识，“POSITION”是全大写的变量名。其中，对有变量ID的接收解释字符模板配置接收指令模板，需要设置对应变量ID的类型。示例性地，对待解释数据中有效数据{M}{PPPP}{XXXXXX}{Y6}{Z6}”进行解释，可以表示为：AddVarExplain＜CameraMode＞.SetItem.SetItem.AddVarExplain＜int＞.AddVarExplain＜int＞.AddVarExplain＜int＞.AddVarExplain＜int＞；其中，.AddVarExplain函数为对变量进行解释，CameraMode为变量的转换类型进行指定转换，SetItem为预设指定转换规则，具体为：当SetItem中的第一个字符串为“2”时会指定转换为CameraMode._2D，为“3”时会指定转换为CameraMode._3D，AddVarExplain函数返回为一个限定接口，可以限定设置的值的类型必须为CameraMode类型，可以防止误操作设置不合适的值。示例性地，还可以通过SetConvert函数来设置特殊的指定转换，具体为：AddVarExplain＜CTest＞.SetConvert＝＞{stringss＝cmd.Split；CTest ct＝new CTest；ct.Key1＝double.Parse；ifct.Key2＝double.Parse；ifct.Key3＝double.Parse；return ct；})值得说明的是，SetConvert函数实现指令转为CTest类型的转换，由于预设限定的转换结果类型为CTest类型，所以函数限制最终转换为CTest类型，其中，先按字符“,”来拆分指令，CTest的Key1属性为拆分的第一个字符转双精型，如果拆分字符长度大于1，即能拆分2个字符串以上，那么Key2属性为第2个拆分字符串转双精型，Key3类似，如果拆分字符串有3个或以上，那么Key3为第3个字符串转双精型。示例性地，对变量进行补齐符进行对齐时，变量X为6个字符，当实际值为35时，只占用2个字符，所以需要补齐字符来填充对齐即“000035”。步骤S13、依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送。优选地，通过与配置接收指令模板的规则设置AddSendExplain函数配置对应的发送指令模板。步骤S14、根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。值得说明的是，协议解释类源代码生成后在项目中可以直接使用。协议解释类就是直接解释跟PLC的协议，主要用于业务处理，即业务处理可以和PLC的协议进行分离，在业务处理过程中不需要过于关注协议的解释和转换，因为生成的协议解释类已实现此功能。具体地，步骤S14包括子步骤S141～子步骤S144，具体为：子步骤S141、根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类源代码。子步骤S142、循环读取接收指令模板，对应生成协议解释类源代码中的事件类源代码和生成对应的解释接收指令，并调用所述接收指令模板对应的相关的事件类源代码。值得说明的是，事件是编程语言的一种类型，订阅了相关事件后，当系统执行到要实现该事件后，订阅该事件的函数就会被调用。接收事件源代码就是协议解释类是由系统生成的源代码，其中，接收事件就是由当初定义的接收模板来生成的，初始时定义了多少接收模板就会生成多少个事件，事件的生成是要靠代码去定义的，所以接收事件源代码就是整个协议解释类的源代码中的事件类源代码。其中，生成对应的解释接收指令进行解释，具体为：根据配置参数过滤所述接收指令中的无效字符，并选择一个接收指令模板作为最优接收指令模板；判断所述最优接收指令模板是否为空，若所述最优接收指令模板不为空，则根据所述最优接收指令模板调用对应的事件；对所述接收指令模板进行指令截取和转换，得到包含解释的字段名和对应的实际值的接收解释包。值得说明的是，根据配置参数过滤接收指令中的无效字符，包括：由于PLC方协议编写能力有可能会产生一些无效字符；根据定义的接收指令模板，选择一个最优接收模板，如果没有返回空，并且如果订阅了错误事件则调用错误事件；根据接收指令模板的规则，获取到对应的接收解释包，它实际是一个字典，包含解释的字段名和对应实际的值，这个过程即对协议进行解释和转换。子步骤S143、根据所述接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中。值得说明的是，发送函数就是把对应发送的参数最终转换为一条发送指令，发送函数是由最开始定义的发送模板，而生成的函数，定义了多少个发送模板就会最终生成多少个发送函数，发送函数中的参数也是由发送模板中进行定义的，发送函数是由发送模板动态生成的。具体包括：循环按照定义的发送指令模板生成发送函数源代码，并把发送函数源代码添加到协议解释类中。子步骤S144、直到循环读取完所有接收指令模板，并将对应的事件协议类保存到指定路径下并加入到项目中，以便业务代码直接调用所述协议解释类。值得说明的是，事件协议类是根据接收模板来生成的，定义多少个接收模板就会动态生成多少个事件协议类，因为事件的定义函数中有两个参数，一个是协议解释类对象，另一个是对应的事件协议类，事件协议类中包括解释这条指令后生成的参数的值，这个作为接收事件的一个参数类型，包括：循环获取所有的接收指令模板，根据定义接收指令模板的类名来生成对应类，并再循环获取该接收指令模板下的所有字段定义来生成这个类的属性。本发明采用根据接收指令模板，进行对应事件的执行，并将接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中，分别配置接收指令模板和发送指令模板，接收指令模板处理接收解释字符模板中的数据，能够对协议做出更加清晰地解释，发送指令模板根据对应的发送指令模板生成发送函数源代码，能够将发送指令模板中的数据通过发送函数源代码进行发送，有利于由接收指令模板和发送指令模板生成的协议解释类进行封装，有利于动态封装后的协议解释类对业务逻辑提供解析后的协议数据，实现业务逻辑和协议解析之间的数据直接交互，能够提高协议解析的适用性，并便于业务逻辑的理解和后期应用开发和维护。在子步骤S144中，在循环读取完所有接收指令模板之后，还包括：将各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码。本发明采用对各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码，能够进一步加快对协议的读取速度，从而加快根据协议执行对应功能的速度，进而提高可配置的协议解析的性能。此外，在动态生成对应的协议解释类之后，还包括：对协议进行修改时，重新生成一次协议类，并对修改的协议类的属性或者事件进行提示。并且，根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，还包括通过直接调用MakeClassFile函数在指定路径下生成所述协议解释类。本发明采用对修改后的协议进行提示，可以避免后期因为人为忽略修改而造成业务代码无法进行自适应的情况，能够主动对修改的协议进行提示，从而提醒业务代码需要进行修改，以适应修改后的协议，能够提高业务代码执行效率，进而提高可配置的协议解析的性能。本发明还提供了完整的工业协议动态解析的流程图，参见图2，是本发明实施例提供的工业协议动态解析的流程示意图，图中，包括接收指令模板和发送指令模板的配置过程及业务代码的调用过程。参见图3，是本发明实施例提供的工业协议动态解析系统的结构示意图，包括：接收解释字符模板生成模块31、接收指令模板生成模块32、发送指令模板生成模块33和协议解释类生成模块34，具体为：接收解释字符模板生成模块31，用于根据协议，获取接收指令，并根据预设的接收解释字符模板的规则，从所述接收指令中获取接收解释字符模板。接收指令模板生成模块32，用于根据各接收解释字符模板，依次配置接收指令模板对所述协议进行解释，直到将所有的接收指令都配置为对应的接收指令模板。其中，依次判断所述接收解释字符模板中是否存在变量，若所述接收解释字符模板中存在变量，则自动设置所述变量的转换类型、变量名或者补齐符；若所述接收解释字符模板中不存在变量，则直接根据所述接收解释字符模板中的数据，生成对应的接收指令模板。具体地，自动设置所述变量的转换类型、变量名或者补齐符，包括：判断所述接收解释字符模板的变量的转换类型是否存在指定转换，若所述接收解释字符模板的变量的转换类型存在指定转换，则添加自动解释设置进行指定转换，并返回对应的限定接口，生成对应的接收指令模板；或者，通过自定义函数对指定转换的变量进行截取和指定转换，生成对应的接收指令模板。此外，还包括：当所述接收解释字符模板中变量的实际长度小于定义的占位符长度时，通过补齐字符进行对齐，转换为符合所述占位符长度的值。发送指令模板生成模块33，用于依次配置与所述接收指令模板对应的发送指令模板，直到对所有接收指令模板都对应配置为发送指令模板，以使为对应的接收指令模板中的参数进行发送。协议解释类生成模块34，用于根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类。具体地，协议解释类生成模块34包括：协议解释类源代码生成子模块341、读取接收指令模板子模块342、发送函数源代码生成子模块343和协议解释类事件添加子模块344，具体为：协议解释类源代码生成子模块341，用于根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类源代码。读取接收指令模板子模块342，用于循环读取接收指令模板，对应生成协议解释类源代码中的事件类源代码和生成对应的解释接收指令，并调用所述接收指令模板对应的相关的事件类源代码。发送函数源代码生成子模块343，用于根据所述接收指令模板对应的所述发送指令模板，将对应发送的参数对应生成发送函数源代码，并将所述发送函数源代码添加到所述协议解释类源代码中。其中，生成对应的解释接收指令进行解释，具体为：根据配置参数过滤所述接收指令中的无效字符，并选择一个接收指令模板作为最优接收指令模板；判断所述最优接收指令模板是否为空，若所述最优接收指令模板不为空，则根据所述最优接收指令模板调用对应的事件；对所述接收指令模板进行指令截取和转换，得到包含解释的字段名和对应的实际值的接收解释包。协议解释类事件添加子模块344，用于直到循环读取完所有接收指令模板，并将对应的事件协议类保存到指定路径下并加入到项目中，以便业务代码直接调用所述协议解释类。其中，在循环读取完所有接收指令模板之后，还包括：将各接收指令模板和各发送指令模板分别进行存储，并根据存储的接收指令模板和发送指令模板，生成协议类源代码。此外，在动态生成对应的协议解释类之后，还包括：对协议进行修改时，重新生成一次协议类，并对修改的协议类的属性或者事件进行提示。并且，根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，还包括通过直接调用MakeClassFile函数在指定路径下生成所述协议解释类。本发明采用根据预设的接收解释字符模板的规则，从接收指令中获取接收解释字符模板，并根据各接收解释字符模板，依次配置接收指令模板和对应的发送指令模板，通过生成的接收指令模板对协议进行解释，并生成对应的发送指令模板对接收指令模板中的参数进行发送，业务代码只需调用由接收指令模板和发送指令模板生成的协议解释类，就能够动态获取到协议当中的参数，无需再对协议进行解析，避免协议更改后业务代码无法适应的情况发生，即实现协议解析和业务逻辑的分离，能够提高协议解析的适用性，并便于业务逻辑的理解和后期应用开发和维护；根据各接收指令模板和各发送指令模板，动态生成对应的协议解释类，以便业务代码直接调用所述协议解释类，能够对不同的接收指令进行对应的动态封装，进一步提高协议解析的适用性，能够动态适应不同的接受指令，业务代码无需了解协议解释的具体结构和数据处理过程，直接通过动态生成对应的协议解释类获取协议中的数据即可，能够提高对协议的读取速度，从而加快根据协议执行对应功能的速度，进而提高可配置的协议解析的性能。本领域内的技术人员应明白，本申请的实施例还可提供包括计算机程序产品。因此，本申请可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本申请可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本申请是参照根据本申请实施例的方法、设备、和计算机程序产品的流程图和/或方框图来描述的。应理解可由计算机程序指令实现流程图和/或方框图中的每一流程和/或方框、以及流程图和/或方框图中的流程和/或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和/或方框图一个方框或多个方框中指定的功能的步骤。以上所述仅是本发明的优选实施方式，应当指出，对于本技术领域的普通技术人员来说，在不脱离本发明技术原理的前提下，还可以做出若干改进和变形，这些改进和变形也应视为本发明的保护范围。
