标题title
一种数据存储系统、方法、存储介质及电子设备
摘要abst
本说明书公开了一种数据存储系统、方法、存储介质及电子设备。所述数据存储系统包括：所述数据存储系统包括：服务端、客户端以及控制端，控制端用于，根据编程信息生成配置文件，并将配置文件发送给客户端以及服务端；客户端用于，根据配置文件生成封装规则，以及，生成存储请求，基于封装规则对存储请求进行封装，得到消息报文，并将消息报文发送给服务端；服务端用于，根据配置文件生成提取单元和动作单元，以及对消息报文进行解析，将目标信息写入各提取单元，从指定提取单元中读取动作信息并确定与动作信息相匹配的动作单元，作为目标动作单元，执行目标动作单元对应的存储动作，以对目标信息的字节流数据进行存储。
权利要求书clms
1.一种数据存储系统，其特征在于，所述数据存储系统包括：服务端、客户端以及控制端；所述控制端用于，为第一用户提供编程环境，根据所述第一用户在所述编程环境中写入的编程信息生成配置文件，并将所述配置文件发送给所述客户端以及所述服务端；所述客户端用于，接收所述配置文件，根据所述配置文件中的第一配置信息生成封装规则，以及，响应于第二用户的指定操作，生成目标信息的字节流所对应的存储请求，基于所述封装规则对所述存储请求进行封装，得到消息报文，并将所述消息报文发送给所述服务端；所述服务端用于，接收所述配置文件，根据所述配置文件中的第二配置信息生成与所述封装规则相匹配的至少一个提取单元，根据所述配置文件中的第三配置信息生成至少一组存储动作所对应动作单元，以及在接收到所述消息报文后，对所述消息报文进行解析，得到所述目标信息，将所述目标信息写入各提取单元，从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，执行所述目标动作单元对应的存储动作，以对所述目标信息的字节流数据进行存储。2.如权利要求1所述的数据存储系统，其特征在于，所述客户端包括：可编程封装模块以及封装指令集；所述可编程封装模块用于，加载所述配置文件，根据所述第一配置信息生成至少一个封装单元，并将各封装单元进行排序，得到所述封装规则；所述封装指令集用于，对通过所述封装规则对所述目标信息的字节流进行封装过程中涉及的操作进行抽象。3.如权利要求1所述的数据存储系统，其特征在于，所述服务端包括：可编程提取模块、可编程动作模块以及可编程服务模块；所述可编程提取模块用于，加载所述配置文件，根据所述第二配置信息生成各提取单元，以及，按照所述配置文件对所述消息报文进行解析，以提取所述目标信息并写入各提取单元对应的提取寄存器中；所述可编程动作模块用于，加载所述配置文件，根据所述第三配置信息从预设的动作指令集中选取各目标指令，将所述各目标指令所对应的存储动作进行组合，并根据各组存储动作生成各动作单元；所述可编程服务模块用于，加载所述配置文件，根据所述配置文件中的第四配置信息，将存储在所述指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据所述匹配值对所述目标动作单元进行匹配。4.如权利要求3所述的数据存储系统，其特征在于，所述服务端还用于，根据所述配置文件，更新所述可编程提取模块、所述可编程动作模块以及所述可编程服务模块所对应的配置。5.如权利要求3所述的数据存储系统，其特征在于，所述可编程提取模块的配置包括：提取位置偏移量、提取字符长度、提取终止符以及关联的提取寄存器；所述偏移量包括固定值和可变值，所述可变值基于所述终止符进行确定；所述字符长度包括固定长度和可变长度，所述可变长度基于所述终止符进行确定。6.如权利要求3所述的数据存储系统，其特征在于，所述可编程动作模块包括：基础动作表和动作单元，所述动作单元用于从所述基础动作表中选取指定寄存器对应的存储动作并进行关联。7.如权利要求1所述的数据存储系统，其特征在于，所述服务端用于，根据所述配置文件中的第四配置信息生成服务表，并在所述服务表中将各指定提取单元与各动作单元进行关联，以及根据所述指定提取单元中的动作信息检索所述服务表，将在所述服务表中检索到的动作单元作为所述目标动作单元。8.如权利要求1所述的数据存储系统，其特征在于，所述服务端还用于，将所述目标动作单元对应存储动作的执行结果返回所述客户端。9.一种数据存储的方法，其特征在于，所述方法包括：服务端获取客户端发送的消息报文，对所述消息报文进行解析，得到目标信息，其中，所述消息报文是客户端响应于第二用户的指定操作，生成所述目标信息的字节流所对应的存储请求，基于封装规则对所述存储请求进行封装后得到的，所述封装规则是根据控制端发送的配置文件中的第一配置信息生成的，所述配置配文件是所述控制端根据第一用户在编程环境中写入的编程信息生成的；将所述目标信息写入各提取单元；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，其中，所述服务端包括根据所述配置文件中的第二配置信息生成的至少一个提取单元以及根据所述配置文件中的第三配置信息生成的至少一个动作单元，各提取单元与所述封装规则相匹配，每个动作单元对应一组存储动作；执行所述目标动作单元对应的存储动作，以对所述目标信息的字节流数据进行存储。10.如权利要求9所述的方法，其特征在于，所述客户端包括：可编程封装模块以及封装指令集；所述封装规则是所述可编程封装模块加载所述配置文件，根据所述第一配置信息生成至少一个封装单元并将各封装单元进行排序后得到的，所述封装规则对所述目标信息的字节流进行封装过程中涉及的操作通过所述封装指令集进行抽象。11.如权利要求9所述的方法，其特征在于，所述服务端中设置有可编程动作模块以及可编程服务模块中的至少一种；对所述消息报文进行解析之前，所述方法还包括：通过所述服务端中的可编程动作模块，加载所述配置文件，根据所述第三配置信息从预设的动作指令集中选取各目标指令，将所述各目标指令所对应的存储动作进行组合，并根据各组存储动作生成各动作单元；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，具体包括：通过所述服务端中的可编程服务模块，加载所述配置文件，根据所述配置文件中的第四配置信息，将存储在所述指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据所述匹配值对所述目标动作单元进行匹配。12.如权利要求11所述的方法，其特征在于，所述服务端中还设置有：可编程提取模块；所述方法还包括：根据所述配置文件，更新所述可编程提取模块、所述可编程动作模块以及所述可编程服务模块所对应的配置信息。13.如权利要求12所述的方法，其特征在于，所述可编程提取模块的配置信息包括：提取位置偏移量、提取字符长度、提取终止符以及关联的提取寄存器，所述偏移量包括固定值和可变值，所述可变值基于所述终止符进行确定，所述字符长度包括固定长度和可变长度，所述可变长度基于所述终止符进行确定。14.如权利要求11所述的方法，其特征在于，所述可编程动作模块包括：基础动作表和动作单元；根据各组存储动作生成所述各动作单元，具体包括：通过所述动作单元，从所述基础动作表中选取指定寄存器对应的存储动作并进行关联。15.如权利要求9所述的方法，其特征在于，在对所述消息报文进行解析之前，所述方法还包括：所述服务端用于，根据所述配置文件中的第四配置信息生成服务表，并在所述服务表中将各指定提取单元与各动作单元进行关联；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，具体包括：根据所述指定提取单元中的动作信息检索所述服务表，将在所述服务表中检索到的动作单元作为所述目标动作单元。16.如权利要求9所述的方法，其特征在于，所述方法还包括：将所述目标动作单元对应存储动作的执行结果返回所述客户端。17.一种计算机可读存储介质，其特征在于，所述存储介质存储有计算机程序，所述计算机程序被处理器执行时实现上述权利要求9~16任一项所述的方法。18.一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，其特征在于，所述处理器执行所述程序时实现上述权利要求9~16任一项所述的方法。
说明书desc
技术领域本说明书涉及计算机技术领域，尤其涉及一种数据存储系统、方法、存储介质及电子设备。背景技术近些年，以软件定义网络为代表的可编程网络系统正在兴起，与传统网络相比，可编程网络系统可以针对用户不断变化的需求，快速实现网络协议、网络拓扑等服务的自定义设计和部署，从而摆脱硬件对网络架构的限制。然而，目前的可编程网络主要针对的是网络请求的转发功能，在面向字节流的存储业务时，无法对存储业务的网络配置进行动态的设计与更新，灵活性不足，难以满足用户对于存储业务的动态设计和部署的需求。因此，如何实现对网络字节流存储业务的动态化编程与更新，满足用户的动态设计和部署需求，是一个亟待解决的问题。发明内容本说明书提供一种数据存储系统、方法、存储介质及电子设备，以部分的解决现有技术存在的上述问题。本说明书采用下述技术方案：本说明书提供了一种数据存储系统，包括：服务端、客户端以及控制端；所述控制端用于，为第一用户提供编程环境，根据所述第一用户在所述编程环境中写入的编程信息生成配置文件，并将所述配置文件发送给所述客户端以及所述服务端；所述客户端用于，接收所述配置文件，根据所述配置文件中的第一配置信息生成封装规则，以及，响应于第二用户的指定操作，生成目标信息的字节流所对应的存储请求，基于所述封装规则对所述存储请求进行封装，得到消息报文，并将所述消息报文发送给所述服务端；所述服务端用于，接收所述配置文件，根据所述配置文件中的第二配置信息生成与所述封装规则相匹配的至少一个提取单元，根据所述配置文件中的第三配置信息生成至少一组存储动作所对应动作单元，以及在接收到所述消息报文后，对所述消息报文进行解析，得到所述目标信息，将所述目标信息写入各提取单元，从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，执行所述目标动作单元对应的存储动作，以对所述目标信息的字节流数据进行存储。可选地，所述客户端包括：可编程封装模块以及封装指令集；所述可编程封装模块用于，加载所述配置文件，根据所述第一配置信息生成至少一个封装单元，并将各封装单元进行排序，得到所述封装规则；所述封装指令集用于，对通过所述封装规则对所述目标信息的字节流进行封装过程中涉及的操作进行抽象。可选地，所述服务端包括：可编程提取模块、可编程动作模块以及可编程服务模块；所述可编程提取模块用于，加载所述配置文件，根据所述第二配置信息生成各提取单元，以及，按照所述配置文件对所述消息报文进行解析，以提取所述目标信息并写入各提取单元对应的提取寄存器中；所述可编程动作模块用于，加载所述配置文件，根据所述第三配置信息从预设的动作指令集中选取各目标指令，将所述各目标指令所对应的存储动作进行组合，并根据各组存储动作生成各动作单元；所述可编程服务模块用于，加载所述配置文件，根据所述配置文件中的第四配置信息，将存储在所述指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据所述匹配值对所述目标动作单元进行匹配。可选地，所述服务端还用于，根据所述配置文件，更新所述可编程提取模块、所述可编程动作模块以及所述可编程服务模块所对应的配置。可选地，所述可编程提取模块的配置包括：提取位置偏移量、提取字符长度、提取终止符以及关联的提取寄存器；所述偏移量包括固定值和可变值，所述可变值基于所述终止符进行确定；所述字符长度包括固定长度和可变长度，所述可变长度基于所述终止符进行确定。可选地，所述可编程动作模块包括：基础动作表和动作单元，所述动作单元用于从所述基础动作表中选取指定寄存器对应的存储动作并进行关联。可选地，所述服务端用于，根据所述配置文件中的第四配置信息生成服务表，并在所述服务表中将各指定提取单元与各动作单元进行关联，以及根据所述指定提取单元中的动作信息检索所述服务表，将在所述服务表中检索到的动作单元作为所述目标动作单元。可选地，所述服务端还用于，将所述目标动作单元对应存储动作的执行结果返回所述客户端。本说明书提供了一种数据存储的方法，所述方法包括：服务端获取客户端发送的消息报文，对所述消息报文进行解析，得到目标信息，其中，所述消息报文是客户端响应于第二用户的指定操作，生成所述目标信息的字节流所对应的存储请求，基于封装规则对所述存储请求进行封装后得到的，所述封装规则是根据控制端发送的配置文件中的第一配置信息生成的，所述配置配文件是所述控制端根据第一用户在编程环境中写入的编程信息生成的；将所述目标信息写入各提取单元；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，其中，所述服务端包括根据所述配置文件中的第二配置信息生成的至少一个提取单元以及根据所述配置文件中的第三配置信息生成的至少一个动作单元，各提取单元与所述封装规则相匹配，每个动作单元对应一组存储动作；执行所述目标动作单元对应的存储动作，以对所述目标信息的字节流数据进行存储。可选地，所述客户端包括：可编程封装模块以及封装指令集；所述封装规则是所述可编程封装模块加载所述配置文件，根据所述第一配置信息生成至少一个封装单元并将各封装单元进行排序后得到的，所述封装规则对所述目标信息的字节流进行封装过程中涉及的操作通过所述封装指令集进行抽象。可选地，所述服务端中设置有可编程动作模块以及可编程服务模块中的至少一种；对所述消息报文进行解析之前，所述方法还包括：通过所述服务端中的可编程动作模块，加载所述配置文件，根据所述第三配置信息从预设的动作指令集中选取各目标指令，将所述各目标指令所对应的存储动作进行组合，并根据各组存储动作生成各动作单元；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，具体包括：通过所述服务端中的可编程服务模块，加载所述配置文件，根据所述配置文件中的第四配置信息，将存储在所述指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据所述匹配值对所述目标动作单元进行匹配。可选地，所述服务端中还设置有：可编程提取模块；所述方法还包括：根据所述配置文件，更新所述可编程提取模块、所述可编程动作模块以及所述可编程服务模块所对应的配置信息。可选地，所述可编程提取模块的配置信息包括：提取位置偏移量、提取字符长度、提取终止符以及关联的提取寄存器，所述偏移量包括固定值和可变值，所述可变值基于所述终止符进行确定，所述字符长度包括固定长度和可变长度，所述可变长度基于所述终止符进行确定。可选地，所述可编程动作模块包括：基础动作表和动作单元；根据各组存储动作生成所述各动作单元，具体包括：通过所述动作单元，从所述基础动作表中选取指定寄存器对应的存储动作并进行关联。可选地，在对所述消息报文进行解析之前，所述方法还包括：根据所述配置文件中的第四配置信息生成服务表，并在所述服务表中将各指定提取单元与各动作单元进行关联；从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，具体包括：根据所述指定提取单元中的动作信息检索所述服务表，将在所述服务表中检索到的动作单元作为所述目标动作单元。可选地，所述方法还包括：将所述目标动作单元对应存储动作的执行结果返回所述客户端。本说明书提供了一种计算机可读存储介质，所述存储介质存储有计算机程序，所述计算机程序被处理器执行时实现上述数据存储的方法。本说明书提供了一种电子设备，包括存储器、处理器及存储在存储器上并可在处理器上运行的计算机程序，所述处理器执行所述程序时实现上述数据存储的方法。本说明书采用的上述至少一个技术方案能够达到以下有益效果：在本说明书提供的数据存储系统包括：服务端、客户端以及控制端，控制端用于，根据编程信息生成配置文件，并将配置文件发送给客户端以及服务端；客户端用于，根据配置文件生成封装规则，以及，生成存储请求，基于封装规则对存储请求进行封装，得到消息报文，并将消息报文发送给服务端；服务端用于，根据配置文件生成提取单元和动作单元，以及对消息报文进行解析，将目标信息写入各提取单元，从指定提取单元中读取动作信息并确定与动作信息相匹配的动作单元，作为目标动作单元，执行目标动作单元对应的存储动作，以对目标信息的字节流数据进行存储。从上述方法可以看出，在本方案中第二用户可以随时在控制端对服务端以及客户端进行配置，以在客户端生成封装规则并在服务端对动作单元以及提取单元进行抽象，而后将抽象后的各个模块进行可编程的功能配置和调度，实现可动态更新和编辑的字节流数据存储服务，使得开发者可以自行对封装规则以及存储动作进行增加或修改等配置，能够灵活、快速地响应用户不断变化的服务需要，缩短开发和部署的时间，适应更加复杂的应用场景。附图说明此处所说明的附图用来提供对本说明书的进一步理解，构成本说明书的一部分，本说明书的示意性实施例及其说明用于解释本说明书，并不构成对本说明书的不当限定。在附图中：图1为本说明书中提供的一种数据存储系统的结构示意图；图2为本说明书中提供的一种客户端发送消息报文的过程示意图；图3为本说明书中提供的一种消息报文的解析过程示意图；图4为本说明书中提供的一种动作单元的配置结构示意图；图5为本说明书中提供的一种服务表的结构示意图；图6为本说明书中提供的一种数据存储的方法的流程示意；图7为本说明书提供的一种对应于图6的电子设备示意图。具体实施方式为使本说明书的目的、技术方案和优点更加清楚，下面将结合本说明书具体实施例及相应的附图对本说明书技术方案进行清楚、完整地描述。显然，所描述的实施例仅是本说明书一部分实施例，而不是全部的实施例。基于本说明书中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本说明书保护的范围。以下结合附图，详细说明本说明书各实施例提供的技术方案。图1为本说明书中提供的一种数据存储系统示意图，该数据存储系统包括：客户端、服务端以及控制端。控制端用于，为第一用户提供编程环境，根据第一用户在编程环境中写入的编程信息，将编程信息转化为配置文件，并将配置文件分别发送给客户端以及服务端。在本说明书中，第一用户可以为业务系统的开发人员或管理人员。上述编程环境包括直接编程和间接编程，对于直接编程，第一用户可以直接编写配置文件，然后通过控制端将配置文件直接下发，相当于以机器码或者汇编语言进行计算机编程的过程。对于间接编程就是，第一用户首先开发一套编译环境，而后再通过高级语言进行编程，编程完成后，通过编译环境对编程结果进行编译，生成配置文件后再通过控制端下发。间接编程方式有众多成熟方案可供参考，例如当前用于可编程交换机的P4编程、编译系统。在本说明书中，第一用户可以通过直接编程的方式编写配置文件。在本说明书中，配置文件格式可以为对象表示法格式，从而复用已有的json处理库和相关接口。控制端将配置文件当中的json串封装在传输控制协议消息的消息体中，通过tcp套接字下发到客户端和服务端。客户端和服务端的收发模块维护一个多路复用的套接字列表，用于时刻监听来自控制端的json配置信息。客户端包括用户交互接口、收发模块、可编程封装模块、封装指令集和封装寄存器，在对存储系统进行配置的过程中，客户端可以接收控制端下发的配置文件，根据配置文件中的第一配置信息调用可编程封装模块资源，生成封装规则，并为执行网络字节流存储服务的第二用户提供交互接口。在存储请求的执行过程中，客户端可以响应于第二用户的指定操作，生成网络字节流的存储请求；将存储请求根据上述封装规则进行封装，生成网络消息报文；将消息报文发送给服务端，并接收服务端的响应信息；将接收到的响应信息通过与第二用户的交互接口反馈给用户。需要说明的是，由于封装规则是由多个封装单元构成的，所以该封装规则可以表示为多个封装单元构成的列表。其中，客户端的用户交互接口用于接收用户的服务请求，将用户请求信息存入封装寄存器，获取到系统的响应结果后再反馈给用户。收发模块用于和控制端以及服务端之间建立通信连接，接收控制端发送的配置文件，并与服务端之间收发消息。可编程封装模块用于加载控制端下发的配置文件，根据配置文件中的第一配置信息生成具有唯一性标识的封装单元，将各封装单元进行排序生成封装规则，并根据封装规则对目标信息的字节流所对应的存储请求进行封装。所述封装指令集用于，对通过所述封装规则对所述目标信息的字节流进行封装过程中涉及的操作进行抽象，包括但不限于取字段长度、整数与字符串之间的转换、拷贝字符串。封装寄存器用于保存第二用户输入的存储请求信息。具体的，客户端运行的与用户的交互接口，获取目标信息的字节流，通过空格将第二用户输入的字节流分割成字节段，并以换行符作为单次输入的字节流的终止标识。完成分割后客户端调用封装单元对分割后的字节段进行信息填充，完成信息填充后客户端收发模块根据封装单元的信息，封装成消息报文并发送给服务端。为了便于理解，本说明书中提供了一种客户端发送消息报文的过程示意图，如图2所示。图2为本说明书中提供的一种客户端发送消息报文的过程示意图。其中，配置文件中的第一配置信息的代码可以表示为：{“name”： “programmableBuild”,“version”：1,"fields"：}客户端的收发模块获取到json格式的配置文件，第一配置信息中“fields”项的值为一个数组类型，数组当中的每一项即对应一个封装单元的配置。封装单元的配置主要包括长度信息和内容信息。长度信息分为两种类型：固定长度和可变长度，内容信息也包括两种：固定内容和可变内容。定长例如图2中封装规则表中的封装单元0，固定以三个字节的长度填入acii字符‘*’、‘
’和‘
’，在该封装单元中，int length = 1，char *buf = “*”，用于标识整个字节流服务请求的开始。封装规则表中的封装单元1采用可变长度和可变内容的类型，调用了toString封装指令，将封装寄存器B0当中的int类型的信息转化成字符串，并填充到自身的buf当中。在该封装单元中，int length = 1，char *buf = “3”，在调用cmd接口后赋值，表示为：cmd_t*cmd = toString)。封装寄存器用于保存第一用户输入的目标信息，当第一用户输入网络字节流“sethello world”对应的存储请求时，中B0固定用于保存用户单词输入的字节流请求的信息项的数量，B1 - Bn则依次保存用户输入的各个信息项的内容。本实施例中，客户端的用户交互采用命令行交互，以空格作为各个信息项的分隔符，并以换行符作为单次交互命令的终止符。封装指令集是预先制定的一系列封装行为动作的接口函数，该封装指令集中可以包括get Num、get Length、get String、toString等逻辑动作。接口函数的输入参数有两种，分别为封装寄存器的内容或者其他接口函数的返回值；相对应的，接口函数的返回值也有两种用途，一是作为其他接口函数的输入参数，二是写入到封装单元的内容缓冲区当中。在实际应用中，封装指令集、封装寄存器和封装单元，若以C语言或go语言等实现则可以定义为结构体，若以C++或python等语言实现则可以定义为类。本说明书可以采用C语言实现一个具备基本功能的客户端，额外定义封装寄存器等结构体，并将配置文件中定义的封装单元连接成一个顺序链表。如图2所示，当用户输入“SET HELLO WORLD”的字节流存储请求，那么响应的封装寄存器、封装规则表、封装单元内的信息如图2所示进行填充，最终收发模块按照封装规则表当中的信息，拼接成消息报文的字符串“*3
$3
set
$5
hello
$5
 world
”，而后发送给服务器。服务端包括：收发模块、可编程提取模块、可编程动作模块以及可编程服务模块，在对存储系统进行配置的过程中，服务端可以接收控制端下发的配置文件，根据配置文件中的第二配置信息调用可编程提取模块资源，生成多个携带唯一标识的提取单元，根据配置文件中的第三配置信息调用可编程动作模块资源，生成多个携带唯一标识的动作单元，根据配置文件中的第四配置信息生成服务表，并在服务表中将服务表信息与指定提取单元以及各动作单元进行关联。其中，上述指定提取单的提取寄存器中所存储的信息用于指示存储请求所对应的存储动作。在执行存储请求的过程中，服务端可以接收来自客户端的消息报文，获取网络消息，调用可编程提取模块接口，向各个提取单元中写入信息，根据指定提取单元中的信息检索服务表，获取到关联的动作单元，执行动作单元当中的动作，将执行结果通过收发模块反馈给客户端。其中，收发模块用于和客户端之间进行消息的收发。可编程提取模块用于加载控制端下发的配置文件，并按照配置文件中的第二配置信息，对接收到的客户端传来的存储请求的消息报文进行解析，以提取该存储请求对应的目标信息。而后将提取到的目标信息保存到各提取单元对应的提取寄存器当中。可编程动作模块用于加载控制端下发的配置文件，根据配置文件中的第三配置信息从动作指令集中选取目标指令对应的存储动作进行组合，从而形成一套逻辑动作的组合，并为每一组存储动作进行唯一性标识或命名，形成一个动作单元。需要说明的是，可编程动作模块中设置有基础动作表和上述动作单元，动作单元从基础动作表中选取指定寄存器对应的存储动作并进行关联。可编程服务模块用于构造服务表，根据所述配置文件中的第四配置信息，将存储在所述指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据该匹配值对目标动作单元进行匹配，待完成匹配时，则执行目标动作单元中的存储动作。服务端接收到配置文件后，更新可编程提取模块配置，包括提取位置偏移量、提取字符长度、提取终止符以及关联的提取寄存器；偏移量包括固定值和可变值，可变值是基于终止符进行定位，提取字符长度包括固定长度和可变长度，可变长度基于终止符进行长度计算。为了便于理解，本说明书提供了一种消息报文的解析过程示意图，如图3所示。图3为本说明书中提供的一种消息报文的解析过程示意图。其中，第二配置信息的代码可以表示为：{“name”：“programmable Extract”, “version”：1,"fields"： }可编程提取模块中单个的提取寄存器定义为一个结构体，使每个提取寄存器对应一个提取单元，消息报文的结构体当中包含了状态信息和数据缓存区两部分，可编程提取模块将字节流当中特定字段的数据依次提取到提取寄存器的数据缓冲区当中，并更新对应的状态信息。多个提取寄存器的结构体组成一个列表，方便后续的遍历操作。服务端接收到配置文件后，更新可编程动作模块配置，可编程动作单元包括基础动作表和动作单元，动作单元从基础动作表中选取特定动作，与上述指定提取寄存器相关联，并进行唯一性的标识或命名，从而得到动作单元的配置。为了便于理解，本说明书中还提供了一种动作单元的配置结构示意图，如图4所示。图4为本说明书中提供的一种动作单元的配置结构示意图。其中，第三配置信息的代码可以表示为：{ “name”：“programmableAction”, “version”：1,"actions"：}其中，基础动作表当中的动作就是对各个数据存储动作的抽象，包括了对字符串、字典类型的数据的存取，以及设置超时等等。根据配置文件当中的第三信息，设置了多个动作单元，图4当中列出了四个动作单元的配置，分别选用setStr、getStr、setDict、getDict等基础动作表中的动作，并选取特定的提取寄存器作为参数。实际上基础动作表采用结构体实现，结构体当中的项即为函数指针，对应图2中封装指令集的动作名称。函数的具体实现可以直接复用go语言等已经封装好的库。服务端接收到配置文件后，服务器可以根据配置文件中的第四配置信息更新可编程服务模块配置，具体包括构造一个服务表，包括匹配寄存器、匹配值以及动作信息，所述匹配寄存器为上述指定提取单元所对应的寄存器，匹配值从配置文件中获取并写入服务表，动作信息为所述具有唯一性标识或命名的动作单元。服务器可以将存储在指定提取单元对应提取寄存器中的动作信息作为匹配对象并确定匹配值，根据该匹配值对目标动作单元进行匹配，待完成匹配时，则执行目标动作单元中的存储动作。为了便于理解，本说明书提供了一种服务表的结构示意图，如图5所示。图5为本说明书中提供的一种服务表的结构示意图。其中，上述第四配置文件的代码可以表示为：{ “name”：“programmableServe”, “version”：1,"serve"  }服务表可以将提取寄存器、动作单元以及结果寄存器通过“匹配值“进行关联，本实施例采用go语言的map数据结构来实现服务表。所述map表的键即为匹配值，匹配值可以包括“set”、“get”、“hset”、“hget”等，并且与指定的提取寄存器进行绑定。图5中以提取寄存器E4设置为匹配寄存器，根据前述信息，E4当中保存的是第二用户输入的命令行的第一个单词。当E4中被写入了信息，可编程服务单元即根据E4中的信息查询服务表，获取到动作信息，即为签署已经定义好的可编程动作单元，执行相关的动作逻辑，并将结果写入到结果寄存器R1当中。服务端获取到执行结果后，通过收发模块返回给客户端。执行动作单元后，服务器可以根据set函数的返回值判断当前存储动作是否执行成功。在本说明书中，命令都是串行执行的，因而不需要在set函数等命令接口函数中增加输出缓冲区指针参数，转而采用一个全局数据缓冲区，作为服务端各个命令的输出结果的缓存。例如执行了上述的“SET HELLO WORLD”指令后，如果执行成功，则R1内写入“OK”，错误则写入“ERROR”；相对应的，如果执行的是“GET HELLO”指令，即获取“HELLO”键所对应的值，那么R1中写入的数据为“WORLD”。客户端接收到服务端返回的执行结果，通过交互接口反馈给第二用户。在本实施例中，客户端默认情况下采用阻塞模式，即用户通过客户端输入“SETHELLO WORLD”等命令后，在得到服务端的回复之前，不再响应其他的命令交互请求。等到客户端从服务端获取到返回的执行结果后，直接将执行接口通过交互接口反馈给第二用户，第二用户可以获取到命令的执行结果。以上为本说明书中提供的一种数据存储系统，以下将从方法的角度，对本说明书中提供的一种应用于上述数据存储系统的数据存储的方法进行说明，如图6所示。图6为本说明书中提供的一种数据存储的方法的流程示意图，包括一下步骤：S601：服务端获取客户端发送的消息报文，对所述消息报文进行解析，得到目标信息，其中，所述消息报文是客户端响应于第二用户的指定操作，生成所述目标信息的字节流所对应的存储请求，基于封装规则对所述存储请求进行封装后得到的，所述封装规则是根据控制端发送的配置文件中的第一配置信息生成的，所述配置配文件是所述控制端根据第一用户在编程环境中写入的编程信息生成的；S602：将所述目标信息写入各提取单元；S603：从指定提取单元中读取动作信息并确定与所述动作信息相匹配的动作单元，作为目标动作单元，其中，所述服务端包括根据所述配置文件中的第二配置信息生成的至少一个提取单元以及根据所述配置文件中的第三配置信息生成的至少一个动作单元，各提取单元与所述封装规则相匹配，每个动作单元对应一组存储动作；S604：执行所述目标动作单元对应的存储动作，以对所述目标信息的字节流数据进行存储。在存储系统进行配置的过程中，客户端可以根据配置文件中的第一配置信息调用可编程封装模块资源，生成封装规则，并为执行网络字节流存储服务的第二用户提供交互接口。服务端可以根据配置文件中的第二配置信息调用可编程提取模块资源，生成多个携带唯一标识的提取单元，根据配置文件中的第三配置信息调用可编程动作模块资源，生成多个携带唯一标识的动作单元，根据配置文件生成服务表，并在服务表中将服务表信息与指定提取单元以及各动作单元进行关联。其中，上述指定提取单的提取寄存器中所存储的信息用于指示存储请求所对应的存储动作。在执行存储请求的过程中，客户端可以生成网络字节流的存储请求；将存储请求根据上述封装规则进行封装，生成网络消息报文；将消息报文发送给服务端，并接收服务端的响应信息；将接收到的响应信息通过与第二用户的交互接口反馈给用户。服务端可以接收来自客户端的消息报文，获取网络消息，调用可编程提取模块接口，向各个提取单元中写入信息，根据指定提取单元中的信息检索服务表，获取到关联的动作单元，执行动作单元当中的动作，将执行结果通过收发模块反馈给客户端。从上述内容中可以看出，本方案通过将客户端和服务端的资源进行抽象，以可编程封装、提取、动作等单元的形态提供给用户，并通过控制端进行灵活配置，是可发人员可以基于自己的需求灵活地配置客户端和服务端的服务内容，大大扩展了应用的场景和使用的灵活性。本说明书还提供了一种计算机可读存储介质，该存储介质存储有计算机程序，计算机程序可用于执行上述图6提供的一种数据存储的方法。本说明书还提供了图7所示的一种对应于图6的电子设备的示意结构图。如图7所述，在硬件层面，该电子设备包括处理器、内部总线、网络接口、内存以及非易失性存储器，当然还可能包括其他业务所需要的硬件。处理器从非易失性存储器中读取对应的计算机程序到内存中然后运行，以实现上述图6所述的数据存储的方法。当然，除了软件实现方式之外，本说明书并不排除其他实现方式，比如逻辑器件抑或软硬件结合的方式等等，也就是说以下处理流程的执行主体并不限定于各个逻辑单元，也可以是硬件或逻辑器件。对于一个技术的改进可以很明显地区分是硬件上的改进还是软件上的改进。然而，随着技术的发展，当今的很多方法流程的改进已经可以视为硬件电路结构的直接改进。设计人员几乎都通过将改进的方法流程编程到硬件电路中来得到相应的硬件电路结构。因此，不能说一个方法流程的改进就不能用硬件实体模块来实现。例如，可编程逻辑器件）就是这样一种集成电路，其逻辑功能由用户对器件编程来确定。由设计人员自行编程来把一个数字系统“集成”在一片PLD上，而不需要请芯片制造厂商来设计和制作专用的集成电路芯片。而且，如今，取代手工地制作集成电路芯片，这种编程也多半改用“逻辑编译器”软件来实现，它与程序开发撰写时所用的软件编译器相类似，而要编译之前的原始代码也得用特定的编程语言来撰写，此称之为硬件描述语言，而HDL也并非仅有一种，而是有许多种，如ABEL、AHDL、Confluence、CUPL、HDCal、JHDL、Lava、Lola、MyHDL、PALASM、RHDL等，目前最普遍使用的是VHDL与Verilog。本领域技术人员也应该清楚，只需要将方法流程用上述几种硬件描述语言稍作逻辑编程并编程到集成电路中，就可以很容易得到实现该逻辑方法流程的硬件电路。控制器可以按任何适当的方式实现，例如，控制器可以采取例如微处理器或处理器以及存储可由该处理器执行的计算机可读程序代码的计算机可读介质、逻辑门、开关、专用集成电路、可编程逻辑控制器和嵌入微控制器的形式，控制器的例子包括但不限于以下微控制器：ARC 625D、Atmel AT91SAM、Microchip PIC18F26K20 以及Silicone Labs C8051F320，存储器控制器还可以被实现为存储器的控制逻辑的一部分。本领域技术人员也知道，除了以纯计算机可读程序代码方式实现控制器以外，完全可以通过将方法步骤进行逻辑编程来使得控制器以逻辑门、开关、专用集成电路、可编程逻辑控制器和嵌入微控制器等的形式来实现相同功能。因此这种控制器可以被认为是一种硬件部件，而对其内包括的用于实现各种功能的装置也可以视为硬件部件内的结构。或者甚至，可以将用于实现各种功能的装置视为既可以是实现方法的软件模块又可以是硬件部件内的结构。上述实施例阐明的系统、装置、模块或单元，具体可以由计算机芯片或实体实现，或者由具有某种功能的产品来实现。一种典型的实现设备为计算机。具体的，计算机例如可以为个人计算机、膝上型计算机、蜂窝电话、相机电话、智能电话、个人数字助理、媒体播放器、导航设备、电子邮件设备、游戏控制台、平板计算机、可穿戴设备或者这些设备中的任何设备的组合。为了描述的方便，描述以上装置时以功能分为各种单元分别描述。当然，在实施本说明书时可以把各单元的功能在同一个或多个软件和/或硬件中实现。本领域内的技术人员应明白，本说明书的实施例可提供为方法、系统、或计算机程序产品。因此，本说明书可采用完全硬件实施例、完全软件实施例、或结合软件和硬件方面的实施例的形式。而且，本说明书可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本说明书是参照根据本说明书实施例的方法、设备、和计算机程序产品的流程图和／或方框图来描述的。应理解可由计算机程序指令实现流程图和／或方框图中的每一流程和／或方框、以及流程图和／或方框图中的流程和／或方框的结合。可提供这些计算机程序指令到通用计算机、专用计算机、嵌入式处理机或其他可编程数据处理设备的处理器以产生一个机器，使得通过计算机或其他可编程数据处理设备的处理器执行的指令产生用于实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能的装置。这些计算机程序指令也可存储在能引导计算机或其他可编程数据处理设备以特定方式工作的计算机可读存储器中，使得存储在该计算机可读存储器中的指令产生包括指令装置的制造品，该指令装置实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能。这些计算机程序指令也可装载到计算机或其他可编程数据处理设备上，使得在计算机或其他可编程设备上执行一系列操作步骤以产生计算机实现的处理，从而在计算机或其他可编程设备上执行的指令提供用于实现在流程图一个流程或多个流程和／或方框图一个方框或多个方框中指定的功能的步骤。在一个典型的配置中，计算设备包括一个或多个处理器、输入/输出接口、网络接口和内存。内存可能包括计算机可读介质中的非永久性存储器，随机存取存储器和/或非易失性内存等形式，如只读存储器或闪存。内存是计算机可读介质的示例。计算机可读介质包括永久性和非永久性、可移动和非可移动媒体可以由任何方法或技术来实现信息存储。信息可以是计算机可读指令、数据结构、程序的模块或其他数据。计算机的存储介质的例子包括，但不限于相变内存、静态随机存取存储器、动态随机存取存储器、其他类型的随机存取存储器、只读存储器、电可擦除可编程只读存储器、快闪记忆体或其他内存技术、只读光盘只读存储器、数字多功能光盘或其他光学存储、磁盒式磁带，磁带磁磁盘存储或其他磁性存储设备或任何其他非传输介质，可用于存储可以被计算设备访问的信息。按照本文中的界定，计算机可读介质不包括暂存电脑可读媒体，如调制的数据信号和载波。还需要说明的是，术语“包括”、“包含”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、商品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、商品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、商品或者设备中还存在另外的相同要素。本领域技术人员应明白，本说明书的实施例可提供为方法、系统或计算机程序产品。因此，本说明书可采用完全硬件实施例、完全软件实施例或结合软件和硬件方面的实施例的形式。而且，本说明书可采用在一个或多个其中包含有计算机可用程序代码的计算机可用存储介质上实施的计算机程序产品的形式。本说明书可以在由计算机执行的计算机可执行指令的一般上下文中描述，例如程序模块。一般地，程序模块包括执行特定任务或实现特定抽象数据类型的例程、程序、对象、组件、数据结构等等。也可以在分布式计算环境中实践本说明书，在这些分布式计算环境中，由通过通信网络而被连接的远程处理设备来执行任务。在分布式计算环境中，程序模块可以位于包括存储设备在内的本地和远程计算机存储介质中。本说明书中的各个实施例均采用递进的方式描述，各个实施例之间相同相似的部分互相参见即可，每个实施例重点说明的都是与其他实施例的不同之处。尤其，对于系统实施例而言，由于其基本相似于方法实施例，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。以上所述仅为本说明书的实施例而已，并不用于限制本说明书。对于本领域技术人员来说，本说明书可以有各种更改和变化。凡在本说明书的精神和原理之内所作的任何修改、等同替换、改进等，均应包含在本说明书的权利要求范围之内。
