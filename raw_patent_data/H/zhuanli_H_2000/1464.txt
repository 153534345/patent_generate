标题title
用于并行熵译码中的比特流索引的压缩
摘要abst
本文描述了用于视频译码的技术，包括用于基于神经网络的视频译码和/或并行熵译码的比特流索引的压缩。一个示例包括：获得视频数据序列；识别视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；以及生成可并行熵译码视频数据序列。然后，生成可并行熵译码视频数据序列的索引，该索引标识可并行熵译码视频数据序列内的可单独熵译码包。
权利要求书clms
1.一种用于对视频数据进行编码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。2.根据权利要求1所述的装置，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的。3.根据权利要求2所述的装置，其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。4.根据权利要求3所述的装置，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。5.根据权利要求3所述的装置，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据、以及关于所述可单独熵译码包的信息。6.根据权利要求5所述的装置，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。7.根据权利要求1所述的装置，其中，所述可单独熵译码包中的最大包与最小包之间的差小于门限差。8.根据权利要求1所述的装置，其中，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。9.根据权利要求8所述的装置，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。10.根据权利要求9所述的装置，其中，所述堆栈还是利用通用码字集来初始化的。11.根据权利要求9所述的装置，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。12.根据权利要求1所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包中的包定义为前向包或反向包；其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包。13.根据权利要求12所述的装置，其中，当所述可单独熵译码包的数量为偶数时，所述索引包括N/2个入口点，并且当所述可单独熵译码包的数量为奇数时，所述索引包括+1个入口点。14.根据权利要求12所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包存储在所述存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。15.根据权利要求14所述的装置，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。16.根据权利要求1所述的装置，其中，所述索引使用如在对经编码的比特流中的所述视频数据序列的编码之后识别的入口点来标识所述可单独熵译码包。17.根据权利要求1所述的装置，其中，所述索引标识所述可单独熵译码包，包括标识从所述视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置。18.根据权利要求1所述的装置，还包括：发射机，其耦合到所述一个或多个处理器并且被配置为发送如使用所述索引和所述可单独熵译码包进行熵编码的所述视频数据序列。19.根据权利要求1所述的装置，还包括：显示器，其耦合到所述一个或多个处理器并且被配置为显示所述视频数据序列的图像。20.一种计算机实现的方法，包括：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。21.根据权利要求20所述的计算机实现的方法，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的；并且其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。22.根据权利要求21所述的计算机实现的方法，还包括：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。23.根据权利要求21所述的计算机实现的方法，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据、以及关于所述可单独熵译码包的信息。24.根据权利要求23所述的计算机实现的方法，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。25.根据权利要求20所述的计算机实现的方法，还包括：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。26.根据权利要求25所述的计算机实现的方法，还包括：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。27.根据权利要求25所述的计算机实现的方法，还包括：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。28.根据权利要求20所述的计算机实现的方法，还包括：将所述可单独熵译码包中的包定义为前向包或反向包，其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包；以及将所述可单独熵译码包存储在存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。29.一种用于对视频数据进行解码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用如根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。30.一种计算机实现的方法，包括：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用如根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。
说明书desc
技术领域概括而言，本公开内容涉及图像和视频译码，包括对图像和/或视频的编码和解码。本公开内容的各方面涉及用于对图像和/或视频的并行熵译码的技术。背景技术许多设备和系统允许视频数据被处理和输出以供消费。数字视频数据包括大量数据，以满足消费者和视频提供者的需求。例如，视频数据的消费者期望高质量视频，包括高保真度、高分辨率、高帧速率等。结果，满足这些需求所需要的大量视频数据为处理和存储视频数据的通信网络和设备带来了负担。各种视频译码技术可以用于对视频数据进行压缩。视频译码的目标是将视频数据压缩为使用较低比特率的形式，同时避免或最小化对视频质量的降级。随着不断发展的视频服务变得可用，需要具有更好的译码效率的编码技术。发明内容描述了用于利用并行熵译码来对图像和/或视频内容进行译码的系统和技术。数据和媒体译码的常规方法是将全部信息译码在按顺序处理的比特流中。对于许多要求很高的应用，单个比特流可能会造成数据瓶颈。使用熵译码的标准和通用视频译码)使用单个比特流结构来对用于比特流的其它部分的数据执行多个处理通路，使得并行结构打破了依赖于单个比特流的先前处理的部分的译码系统。因此，对这样的译码系统的常规修改是不可行的，因为由于比特流的不同部分之间的相互依赖性，这样的比特流的包是不可独立译码的。本文描述的示例使用压缩技术来利用新的译码方法广泛地并行化熵译码。另外，示例通过将比特流分段成具有独立入口点的小块来实现大规模并行化，使得这些块可以被并发地编码和解码。本文描述的示例实现与系统的这样的并行化以限制与对额外索引信息进行译码相关联的编码索引开销和计算复杂性。在一个说明性示例中，提供了一种处理视频数据的方法。所述方法包括：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。在另一示例中，提供了一种具有存储在其上的指令的非暂时性计算机可读介质，所述指令在由一个或多个处理器执行时使得所述一个或多个处理器进行以下操作：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。在另一示例中，提供了一种用于对视频数据进行编码的装置。所述装置包括：用于获得视频数据序列的单元；用于识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置的单元；用于生成所述可并行熵译码视频数据序列的单元；以及用于生成用于所述可并行熵译码视频数据序列的索引的单元，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。在另一示例中，提供了一种用于对视频数据进行编码的装置。所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据、以及关于所述可单独熵译码包的信息。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述可单独熵译码包中的最大包与最小包之间的差小于门限差。在一些方面中，上述方法、装置和计算机可读介质进一步操作，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述堆栈还是利用通用码字集来初始化的。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包中的包定义为前向包或反向包；其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，当所述可单独熵译码包的数量为偶数时，所述索引包括N/2个入口点，并且当所述可单独熵译码包的数量为奇数时，所述索引包括+1个入口点。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包存储在所述存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述索引使用在对经编码的比特流中的所述视频数据序列的编码之后识别的入口点来标识所述可单独熵译码包。在一些方面中，上述方法、装置和计算机可读介质进一步操作，其中，所述索引标识所述可单独熵译码包，包括标识从所述视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置。在一些方面中，上述方法、装置和计算机可读介质还包括：发射机，其耦合到所述一个或多个处理器并且被配置为发送使用所述索引和所述可单独熵译码包进行熵编码的所述视频数据序列。在一些方面中，上述方法、装置和计算机可读介质还包括：显示器，其耦合到所述一个或多个处理器并且被配置为显示所述视频数据序列的图像。在一些方面中，所述装置包括：移动设备、可穿戴设备、扩展现实设备设备、增强现实设备或混合现实设备)、个人计算机、膝上型计算机、视频服务器、电视、车辆、或其它设备。在一些方面中，所述装置还包括用于捕获一个或多个图像或视频帧的至少一个相机。例如，所述装置可以包括用于捕获包括视频帧的一个或多个图像和/或一个或多个视频的相机或多个相机。在一些方面中，所述装置包括用于显示一个或多个图像、视频、通知或其它可显示数据的显示器。在一些方面中，所述装置包括发射机，其被配置为在传输介质上向至少一个设备发送一个或多个视频帧和/或语法数据。在一些方面中，处理器包括神经处理单元、中央处理单元、图形处理单元或其它处理设备或组件。该发明内容既不旨在标识所要求保护的主题的关键或必要特征，也不旨在单独用于确定所要求保护的主题的范围。该主题应当是通过参照本专利的整个说明书的适当部分、任何或全部附图以及每个权利要求来理解的。在参考以下说明书、权利要求和附图之后，前述内容以及其它特征和实施例将变得更加显而易见。附图说明下文参照以下附图来详细地描述本申请的说明性实施例：图1是示出根据一些示例的编码设备和解码设备的示例的框图；图2是示出用于执行本公开内容的技术的滤波器单元的示例实现方式的图；图3是示出根据本文描述的示例的用于可独立熵译码包的并行译码的各方面的图；图4是示出根据本文描述的示例的描述入口点的索引的各方面的图，所述入口点将可独立熵译码包分离以进行并行熵译码；图5A示出了用于与本文描述的示例一起使用的描述对分操作的树结构的层级；图5B示出了可以与本文描述的示例一起使用的前缀码的各方面；图5C示出了可以与本文描述的示例一起使用的前缀码的各方面；图5D示出了可以与本文描述的示例一起使用的前缀码的各方面；图5E示出了可以与本文描述的示例一起使用的前缀码的各方面；图5F示出了可以与本文描述的示例一起使用的前缀码的各方面；图6是示出根据本文描述的示例的用于可独立熵译码包的并行译码的各方面的图；图7示出了根据本文描述的示例的用于与视频数据序列的可独立熵译码包的并行译码一起使用的文件结构；图8A示出了根据本文描述的示例的对视频数据进行编码的方法；图8B示出了根据本文描述的示例的对视频数据进行编码的方法；图9示出了根据本文描述的示例的可以与神经网络系统一起用于对视频数据进行编码的示例系统；图10A示出了根据本文描述的示例的完全连接的神经网络的示例；图10B示出了根据本文描述的示例的局部连接的神经网络的示例；图10C示出了根据本文描述的示例的卷积神经网络的示例；图10D示出了根据本文描述的示例的被设计为从图像辨识视觉特征的深度卷积网络的详细示例；图11是示出根据本文描述的示例的深度卷积网络的框图；图12是示出根据一些示例的系统的示例的图，该系统包括可操作以使用基于神经网络的系统来执行图像和/或视频译码的设备；图13示出了可以实现本文描述的各种技术的示例计算设备的示例计算设备架构。具体实施方式下文提供了本公开内容的某些方面和实施例。如对于本领域技术人员将显而易见的，这些方面和实施例中的一些可以独立地应用，并且它们中的一些可以相结合地应用。在以下描述中，出于解释的目的，阐述了具体细节以便提供对本申请的实施例的全面理解。然而，将显而易见的是，可以在没有这些具体细节的情况下实践各个实施例。附图和描述并不旨在是限制性的。随后的描述仅提供了示例实施例，并且不旨在限制本公开内容的范围、适用性或配置。确切而言，对示例实施例的随后描述将向本领域技术人员提供用于实现示例实施例的可行描述。应当理解的是，在不脱离如在所附的权利要求书中阐述的本申请的精神和范围的情况下，可以对元素的功能和排列进行各种改变。数字视频数据可以包括大量数据，尤其是随着对高质量视频数据的需求持续增长。例如，视频数据的消费者通常期望越来越高质量的视频，具有高保真度、高分辨率、高帧速率等。然而，满足这样的需求所需要的大量视频数据可能为通信网络以及处理和存储视频数据的设备带来了显著负担。视频译码设备实现视频压缩技术以对视频数据高效地编码和解码。视频压缩技术可以包括应用不同的预测模式或帧内预测)、时间预测或帧间预测)、层间预测、和/或其它预测技术)，以减少或去除在视频序列中固有的冗余。视频编码器可以将原始视频序列的每个图片分割为矩形区域，所述矩形区域被称为视频块或译码单元。可以使用特定的预测模式来对这些视频块进行编码。视频块可以以一种或多种方式划分为一组或多组更小的块。块可以包括译码树块、预测块、变换块和/或其它适当的块。除非另外指定，否则通常对“块”的引用可以指代这样的视频块。此外，这些块中的每个块在本文中也可以被互换地称为“单元”、译码单元、预测单元、变换单元等)。在一些情况下，单元可以指示被编码在比特流中的译码逻辑单元，而块可以指示过程所针对的视频帧缓冲器中的一部分。对于帧间预测模式，视频编码器可以搜索在帧中位于另一时间位置上的与正被编码的块类似的块，被称为参考帧或参考图片。对于帧内预测模式，视频编码器可以基于来自相同图片内的先前编码的相邻块的数据，使用空间预测技术来形成经预测的块。视频编码器可以确定预测误差。例如，可以将预测误差确定为在正被编码的块与经预测的块中的图像样本或像素值之间的差。视频编码器还可以将变换应用于预测误差或其它适当的变换)以生成变换系数。在变换之后，视频编码器可以对变换系数进行量化。经量化的变换系数和运动矢量可以使用语法元素来表示，并且与控制信息一起形成视频序列的译码表示。然后，视频编码器可以对语法元素进行熵译码，从而进一步减少需要用于其表示的比特数量。在许多视频译码系统中，熵译码是数据压缩的最后过程，其中信息被转换成比特，比特形成要用于存储或传输的经压缩的比特流。视频解码器可以使用以上讨论的语法元素和控制信息来构造用于对当前帧进行解码的预测数据。例如，视频解码器可以将经预测的块和经压缩的预测误差相加。视频解码器可以通过使用经量化的系数对变换基函数进行加权来确定经压缩的预测误差。在经重构的帧与原始帧之间的差被称为重构误差。各种技术可以用于对视频数据进行译码。例如，可以根据特定的视频译码标准或译码过程来执行视频译码。示例视频译码标准包括高效率视频译码、高级视频译码、运动图像专家组译码、以及通用视频译码等。视频译码通常使用预测方法，预测方法利用在视频图像或序列中存在的冗余。视频译码技术的共同目标是将视频数据压缩为使用较低比特率的形式，同时避免或最小化视频质量的降级。然而，HEVC、AVC、VVC和许多其它这样的译码标准依赖单线程处理作为预测方法的一部分。简单地将流分解为多个包会导致使用这样的译码标准无法译码这些包。不可译码性可能是由于使用来自比特流的一部分的数据进行译码的预测方法和其它这样的译码技术的影响而导致的。因此，仅当视频数据被分段成可以并发地被编码和解码的块时，才可能进行大规模并行化。这样的并行化产生了两个与压缩和计算效率相关的问题。一个问题与限制用于对与独立可译码的数据段相关联的索引进行编码的开销相关。另一个问题是处理对额外索引信息进行译码的计算复杂性。本文描述的示例提供了具有用于进行索引的有限计算复杂性和低开销的索引结构。所述示例利用大规模并行化来实现用于视频译码的改进的设备操作，以提高译码速度并且避免单比特流瓶颈，同时限制与来自并行译码的改进相关联的开销。本文描述了用于视频数据的并行熵译码的系统、装置、方法和计算机可读介质。所述系统和技术至少部分地通过将视频数据分段并且在将分段的视频数据编码为可单独熵译码包时向视频数据添加额外信息来提供视频数据的并行熵译码。所述系统和技术可以使用对分的两个嵌套应用，在本文中被称为嵌套对分译码。从要进行熵译码的经编码的视频数据开始，第一对分应用将经编码的视频数据划分为两个子序列。在一些示例中，基于数据的特性，两个子序列的划分点可以是伪随机的，使得当编码完成时，划分点将成为经编码的视频流的入口点。然后，两个子序列可以在层级中进一步被划分为额外子序列，其中每个额外子序列具有与将成为经编码的视频数据中的入口点相关联的位置。第二对分应用将额外信息添加到由来自上述第一对分应用的位置确定的视频数据的每个子序列。这样的额外信息可以是关于与视频数据相关联的子序列中的数字的尺度的信息。利用来自原始视频数据序列的数据对开销数据进行编码，以生成可单独熵译码包。这些包一起组成了可并行熵译码视频数据序列，其中入口点是与解码器可以知道执行并行解码的适当状态的位置相关联的。在一些示例中，系统和技术可以生成索引来存储解码器可以用来识别可单独熵译码包的信息。索引可以与并行可熵译码视频数据序列一起存储或发送。索引可以是被解码的第一项，以允许解码器单元执行对视频数据的并行解码。下文关于各个附图提供了额外细节。图1是示出包括编码设备104和解码设备112的系统100的示例的框图，其在高层次上描述熵译码过程。示例系统100可以使用下文描述的并行结构来根据本文描述的示例进行并行熵编码或解码。在与如上所述的单线程处理系统相比时，并行译码结构和索引可以改进系统100的操作。在系统100中，编码设备104可以是源设备的一部分，并且解码设备112可以是接收设备的一部分。源设备和/或接收设备可以包括电子设备，诸如移动或固定电话手机、台式计算机、膝上型计算机或笔记本计算机、平板计算机、机顶盒、电视机、相机、显示设备、数字媒体播放器、视频游戏控制台、视频流设备、互联网协议相机或任何其它适当的电子设备。在一些示例中，源设备和接收设备可以包括用于无线通信的一个或多个无线收发机。本文描述的译码技术适用于在各种多媒体应用中的视频译码，包括流式视频传输、电视广播或传输、对用于存储在数据存储介质上的数字视频的编码、对被存储在数据存储介质上的数字视频的解码、或其它应用。在一些示例中，系统100可以支持单向或双向视频传输，以支持诸如视频会议、视频流式传输、视频回放、视频广播、游戏和/或视频电话的应用。来自视频源102的视频数据可以包括一个或多个输入图片。图片也可以被称为“帧”。图片或帧是静止图像，其在一些情况下是视频的一部分。在一些示例中，来自视频源102的数据可以是不作为视频的一部分的静止图像。图片可以包括三个样本阵列，其被表示为SL、SCb和SCr。SL是亮度样本的二维阵列，SCb是Cb色度样本的二维阵列，并且SCr是Cr色度样本的二维阵列。色度样本在本文中也可以被称为“色度”样本。像素可以指图片内包括亮度分量、Cb分量和Cr分量的位置。在其它情况下，图片可以是单色的，并且可以仅包括亮度样本的阵列。编码设备104的编码器引擎106对视频数据进行编码以生成经编码的视频比特流。在一些示例中，经编码的视频比特流是一系列的一个或多个经译码的视频序列。编码器引擎106通过分割每个图片来生成图片的译码表示。不同的分区可以包含亮度和色度样本阵列。在一些示例中，亮度和色度阵列可以被进一步拆分为预测块。PB是亮度分量或色度分量的样本块，其使用相同的运动参数来进行帧间预测或块内复制预测。亮度PB和一个或多个色度PB连同关联的语法一起形成预测单元。对于帧间预测，运动参数集是在用于每个PU的比特流中用信号通知的，并且用于亮度PB和一个或多个色度PB的帧间预测。运动参数也可以被称为运动信息。作为熵译码的一部分，编码器引擎106使用预测模式来预测每个PU。然后从原始视频数据中减去预测单元或预测块以获得残差。可以使用语法数据在比特流内用信号通知预测模式。预测模式可以包括帧内预测或帧间预测。例如，可以在CU级别处作出是使用图片间预测还是使用图片内预测来对图片区域进行译码的决定。编码设备104然后可以执行变换和量化。例如，在预测之后，编码器引擎106可以计算与预测相对应的残差值。残差值可以包括在正被译码的像素的当前块与用于预测当前块的预测块之间的像素差值。例如，在生成预测块之后，编码器引擎106可以通过从当前块中减去由预测单元产生的预测块来生成残差块。残差块包括像素差值集合，其对在当前块的像素值与预测块的像素值之间的差进行量化。在一些示例中，可以用二维块格式来表示残差块。在这样的示例中，残差块是像素值的二维表示。编码器引擎106可以执行变换系数的量化。量化通过对变换系数进行量化以减少用于表示系数的数据量来提供进一步的压缩。例如，量化可以减少与系数中的一些或全部系数相关联的比特深度。在一个示例中，具有n比特值的系数可以在量化期间向下舍入为m比特值，其中n大于m。在执行量化时，经译码的视频比特流包括经量化的变换系数、预测信息、分割信息以及任何其它适当的数据。经译码的视频比特流的不同元素然后可以由编码器引擎106进行熵编码。在一些示例中，编码器引擎106可以利用预定义的扫描顺序来扫描经量化的变换系数，以产生可以被熵编码的串行化矢量。在一些示例中，编码器引擎106可以执行自适应扫描。在扫描经量化的变换系数以形成矢量之后，编码器引擎106可以对该矢量进行熵编码。例如，编码器引擎106可以使用上下文自适应可变长译码、上下文自适应二进制算术译码、基于语法的上下文自适应二进制算术译码、概率区间分割熵译码或另一种适当的熵编码技术。编码设备104的输出110可以在通信链路120上将组成经编码的视频比特流数据的单元发送给接收设备的解码设备112。解码设备112的输入114可以接收单元。通信链路120可以包括由无线网络、有线网络或有线网络和无线网络的组合提供的信道。无线网络可以包括任何无线接口或无线接口的组合，并且可以包括任何适当的无线网络、UWB、WiFi直连、蜂窝、长期演进、WiMaxTM等)。有线网络可以包括任何有线接口等)。可以使用各种装置来实现有线和/或无线网络，诸如基站、路由器、接入点、桥接器、网关、交换机等。可以根据诸如无线通信协议的通信标准来调制经编码的视频比特流数据，并且将其发送给接收设备。在一些示例中，编码设备104可以将经编码的视频比特流数据存储在存储单元108中。输出110可以从编码器引擎106或从存储单元108取得经编码的视频比特流数据。存储单元108可以包括各种各样的分布式或本地访问的数据存储介质中的任何一者。例如，存储单元108可以包括硬盘驱动器、存储盘、闪存、易失性或非易失性存储器、或用于存储经编码的视频数据的任何其它适当的数字存储介质。存储单元108还可以包括用于存储供在帧间预测中使用的参考图片的解码图片缓冲器。编码器引擎106和解码器引擎116可以被配置为根据本文所述的并行译码操作进行操作，其中使用索引中的包细节来独立地对每个可独立熵译码包进行编码和解码。解码设备112的输入114接收经编码的视频比特流数据，并且可以将视频比特流数据提供给解码器引擎116，或者提供给存储单元118以供解码器引擎116稍后使用。解码设备112的输入114接收经编码的视频比特流数据，并且可以将视频比特流数据提供给解码器引擎116，或者提供给存储单元118以供解码器引擎116稍后使用。例如，存储单元118可以包括用于存储供在帧间预测中使用的参考图片的DPB。包括解码设备112的接收设备可以经由存储单元108来接收要被解码的经编码的视频数据。可以根据诸如无线通信协议的通信标准来对经编码的视频数据进行调制，并且将其发送给接收设备。解码器引擎116可以通过熵解码并且提取组成经编码的视频数据的一个或多个经编码的视频序列的元素，从而对经编码的视频比特流数据进行解码。解码器引擎116然后可以重新缩放经编码的视频比特流数据并且对其执行逆变换。残差数据然后被传递到解码器引擎116的预测阶段。然后，解码器引擎116根据用于数据的包的译码结构来预测像素的块，如下所述。解码设备112可以将经解码的视频输出到视频目的地设备122，视频目的地设备122可以包括用于将经解码的视频数据显示给内容的消费者的显示器或其它输出设备。在一些方面中，视频目的地设备122可以是包括解码设备112的接收设备的一部分。在一些方面中，视频目的地设备122可以是不同于接收设备的单独设备的一部分。图2是示出滤波器单元200的示例实现方式的图，包括将参考图片放置在可以通过参考图片表标识的参考图片存储单元208中。滤波器单元200可以是任何编码元件或解码元件的一部分，并且因此可以用于根据本文描述的示例进行并行熵译码。如图所示的滤波器单元200包括解块滤波器202、样本自适应偏移滤波器204和通用滤波器206，但是可以包括比图2中所示更少的滤波器和/或可以包括额外的滤波器。此外，图2所示的特定滤波器可以以不同的顺序实现。其它环路滤波器也可以用于平滑像素转换或以其它方式改善视频质量。当在译码环路中时，给定帧或图片中的经解码的视频块然后被存储在解码图片缓冲器中，其将参考数据存储为参考图片存储单元208的一部分。DPB可以是存储经解码的视频以供稍后在显示设备上呈现的额外存储器的一部分或与该额外存储器分离。如果系统100和滤波器单元200是单线程处理系统，则它们可以使用显著的预测来提高压缩和译码性能。然而，本文描述的使用多个滤波器单元的系统可以以索引开销和并行译码硬件为代价极大地提高译码速度。对于并行编码，解码器被配置为达到编码器在对特定元素进行译码时的相同状态。因此，在某种程度上，仅通过拆分比特流并且创建与编码器和解码器状态被重置为已知值的位置相对应的访问位置来实现随机访问。这样的入口点标识在比特流中的比特流的后续部分变为可独立熵译码的位置。通过在比特流内配置这样的入口点和某种程度上规则的位置，入口点之间的数据变为比特流的这样的可独立熵译码部分，其在本文中被称为数据包、包或可独立熵译码包。下文详细描述了与这样的包的结构和索引相关的额外细节。图3是示出根据本文描述的示例的用于可独立熵译码包的并行译码的各方面的图。图3示出了具有多个编码器单元310A、310B、310C和310N的结构300，每个编码器单元被配置为执行对可独立熵译码包的并行编码。缓冲器320A、320B、320C和320N对应于编码器单元，并且可以缓冲用于存储、传输或用于生成索引330的任何处理的数据。每个编码器单元和缓冲器对在单个并行处理操作期间输出对应的包，其中包被示为包332A、332B、332C和332N。每个编码器单元可以针对给定的视频数据序列处理任意数量的包。例如，如果视频数据序列被划分为10000个包，并且并行编码系统使用50个编码器单元，则每个编码器单元可以生成平均200个可独立熵译码包。在操作期间，如果一些编码器单元对较长或较短的包进行编码，则单元可能对与其它编码单元相比更多或更少的包进行编码，这取决于系统的结构。结构300支持并行熵编码和解码，其中将经压缩的数据比特流划分为包。每个包中的字节数量是随机的或伪随机的，以适应每个包的内部依赖性或可译码性。正如上文描述的单线程译码，其中单线程的划分可能会破坏可译码性，包不是简单的固定数量的比特，因为某些划分可能使视频数据段不可译码。利用每个包的随机或伪随机的经编码的比特数量，经编码的比特被保存到分别的存储器缓冲器，并且当可单独熵译码包的编码完成时，包的数据可以被连续地复制到单个压缩数据字节数组以进行存储或传输。在一些示例中，只要保持可单独熵译码包的完整性以及由索引330标识的包之间的关系，可以使用除单个压缩数据字节数组之外的不同结构。包索引330用于描述包之间的关系，并且保持压缩数据的完整性，即使数据被分段成可以独立并行译码的包。当数据从存储单元解码或作为传输的一部分被接收时，索引330中的信息用于使用解码器单元来管理对包的解码。如图所示，编码器单元向特定解码器单元发送数据。然而，在各种示例中，来自单个编码器单元的包可以由任意数量的不同解码器单元解码。图4是示出根据本文描述的示例的具有索引430的经编码的比特流400的各方面的图，其描述了将可独立熵译码包分离以进行并行熵译码的入口点。图4的经编码的比特流400可以例如包括如上所述被安排用于存储或传输的图3的包332A-N，或者可以是根据本文描述的示例的针对并行译码而译码的任何这样的视频数据。经编码的比特流400包括包440、441、442和449。从视频数据序列创建的经编码的比特流的其它示例可以具有任意数量的包。每个包具有相关联的入口点。如图所示，入口点460对应于包440，入口点461对应于包441，入口点462对应于包442，以及入口点469对应于包449。入口点463对应于包442之后的包。每个入口点与经编码比特流中的位置相关联，在该位置，解码的状态对于根据本文描述的示例配置的解码器是可知的，从而允许包可由解码器单元并行地独立地解码。索引430是数据结构，在一些示例中，该数据结构在每个包或者等效地在每个入口点的数组位置中包含多个字节。包索引430数据然后可以用于从经存储或发送的经编码的比特流400中标识包，以及重新组装用于生成经编码的比特流400的视频数据序列。由于需要包索引430来对经编码的比特流400进行解码，因此索引430与经编码的比特流400的包保存在一起。任何解码都从对索引430的解码开始，以识别与独立的可解码包相关的信息。另外，为了有效地识别包，将用于对包入口点进行编码的比特数量添加到对该包进行编码所需的总比特数量中。因此，对索引430中的包的识别使用经编码的比特流中的入口点来考虑编码，或者考虑每个包的比特流中的比特数量和位置来类似地容纳用于编码的任何比特。在一些示例中，为了有效的并行化，视频比特流可能会产生许多具有相对少量字节的包。在这样的示例中，除了使用具有小的包大小的预测的有限能力之外，对索引进行译码的开销也可能使压缩降级。例如，为了简化硬件设计并且使成本最小化，一些示例可以将包大小限制在16-64字节的范围内。在其它示例中，可以使用其它门限限制或范围。对于具有该大小的包，每个包若干字节的开销会转化为显著更差的压缩。本文描述的示例通过限制用于对整个包索引进行编码的比特数量来提供对如何限制增加的开销的技术问题的技术解决方案。假设N个包，要译码的信息是具有由每个包使用的随机字节数量的序列，由下式表示：由于包数据解码依赖于这些数字，因此在数字被解码之前无法开始解码，并且使用低复杂度的方法来对数字进行译码在解码时提供了改进的设备性能。此外，本文描述的示例可以使用可以用于任何类型的统计分布和任何范围的尺度的单个译码方法，以允许跨许多不同系统的兼容性的益处。通用码字集适用于任何大小的整数。在通用码字集中，Elias gamma码被用于若干视频压缩标准中，因为它易于实现并且允许可接受的设备性能。Elias gamma码用于对正整数n进行译码的比特数量为Elias delta码可以利用渐进较小比特数量来对正整数进行译码，等于然而，在实践中，该码通常不用于对大量整数进行译码，因为它针对每个数字使用两个对数计算。其它译码方法实现起来更复杂，因为它们只能应用于有限的整数集，从而要求用于处理集合外的数字的特殊策略，并且只能优化到预知的概率分布。本文描述的示例使用了被描述为也可以普遍使用的嵌套对分译码的操作。当与上述一般通用码字集使用相比时，这样的操作可以改进设备的操作，而不依赖于对数字的统计或其尺度范围的任何假设。例如，通用码字集的一个基本限制是，它们旨在没有关于要译码的整数的任何先验信息的情况下使用。因此，当使用一般通用码字结构时，需要一些额外的比特来对关于数字的尺度的信息进行编码，接着是数字的二进制表示的比特。在与一般通用码字使用相比时，本文描述的示例通过利用如上所述的视频数据包是具有许多非负整数的数据集的事实来进一步改进了设备操作。更具体地说，本文描述的示例基于使用由全部要译码的数字共享的关于尺度的信息以及尺度之间的某种相似性来提供益处。为了实施导致来自本文描述的示例的益处的条件，编码系统可以将门限限制应用于针对并行编码而构造的包。例如，一些实现方式可以包括包之间的大小差异的门限限制。用于提供在本文描述的示例中的益处的额外信息包括：示例译码操作由简单且高效的算法隐式地定义，而不是由预定义的二进制码字集来定义，以及操作包括对编码过程期间的信息的累积。上述特性一起实现操作以利用具有有限开销的并行译码来改进译码设备的功能。为了能够使用全部上述特性，在一个说明性示例中，定义了以下单调序列：其中并且将包开始的字节位置序列定义为对序列中的整数进行编码等同于对序列/＞中的数量进行编码。可以顺序地对序列中的整数进行译码，利用在每个值被译码之后收集一些信息的过程以改进对下一值的译码。可以以分层的方式高效地收集信息。上述被称为嵌套对分译码的示例译码操作使用对分的两个嵌套应用。在对分的第一应用)中，确定对序列的元素进行编码的顺序，以及根据树数据结构来聚合译码信息。图5A示出了描述用于与本文描述的示例一起使用的对分操作的树结构的层级。图5A具体示出了上述对分的第一应用的各方面。在两种类型的整数集中完成对分搜索。一个整数集是索引的开区间和位置的一个闭区间，其可以表示为：,其中＝{imin+1,imin+2,…,imax-2,imax-1}，并且＝{pmin,pmin+1,…,pmax-1,pmax}，图5A的树结构示出了对分期间的信息的累积。图5A的每个框512、522、524、542、544、546、548、552、554、556和558与经译码的比特流的入口点相关联，该入口点与经编码的比特流中的位置相关联。当按照预排序树遍历序列对框中的每个值进行译码时，该值可以使用先前译码的值来减少关于在确定全部值时在两个值之间定义的包的数字范围的不确定性，并且因此使译码更高效。树的顶层级的框需要更多的比特来译码，但是开销相对较小，因为框的数量随着树的深度呈指数增长。值510示出每个层级处的值的数量，第一层级处的框512从单个值开始，每一层级加倍。也可以按如下来考虑外部对分枚举的操作。从视频数据序列开始，通过选择视频数据序列中的位置，将序列拆分成两个子序列。所选择的位置将与经编码的视频比特流中的入口点相关联。第一选择的位置与图5A的树结构中的第一位置处的第一框512相关联。然后将这两个子序列对分，以选择与第二层级的框522和524相关联的两个值。第二层级对分产生四个子序列，它们然后可以被类似地对分以识别框542、544、546和548的值。正如上所述，每个值与什么将成为经编码的视频比特流中的入口点相关联。通过对视频数据序列的子序列的层级进行对分来重复该过程，以生成通过额外序列之间的额外入口点和视频数据序列的两个包之间的额外入口点定义的额外子序列，以生成视频数据序列的单独的可译码包，其中，单独的可译码包由视频数据序列的入口点标识。在最后的层级处，在对子序列进行对分时识别的每个点与入口点相关联，并且点之间的数据是单独可译码包的数据。对分操作可以使用规则来在用于入口点的数据中识别适当的点。如上所述，由于不是一致地而是基于数据的特性来对段进行拆分，所以对分位置最终为随机或伪随机的。例如，伪随机特性可能导致1000比特长的一个序列被对分为20比特子序列和980比特序列。如果包的最小序列长度为16比特，则20比特子序列不被进一步对分，并且树的该分支在该层级处停止，而980比特序列被进一步对分。当相关联的序列不包含入口点的合适位置，或者进一步的对分将导致序列低于可接受的比特长度时，每个分支可以终止进一步的对分。在其它示例中，可以使用用于结束外部对分枚举的其它这样的标准。在外部对分枚举完成时，全部包的数据连同包之间的数据边界是已知的。图5A的每个框可以被视为与对分操作相关联，并且位置与被编码为可并行熵译码视频数据序列的数据的入口点相关联。框512与初始视频数据序列的对分相关联，并且在将额外数据添加到数据的最终子序列之后，与框512相关联的位置将成为入口点。框512下面的额外框与额外层级中的数据子序列的对分相关联。当选择每个位置并且将子序列的额外层级对分时，数据的子序列变得更小，直到通过最终对分位置来选择数据的最终子序列。最终的完整位置集合定义了来自完整视频数据集合的将成为单独的包的数据子序列。在用于最终子序列的数据是单独的可译码的之前，添加额外信息以将来自视频数据的最终子序列数据转换成可单独熵译码包。然后，接下来的操作对数据进行译码，并且考虑在识别针对索引的包信息时的译码开销。使用上述内容，操作可以继续处理来自外部对分枚举的值，值之间的每个子序列的数据连同任何开销数据可以被编码为包。在一个示例中，堆栈数据结构与来自外部对分枚举的值一起使用，其中使用与上述相同的标记来描述以下操作。使用通用码字集来对通过外部对分枚举确定的包数量N和字节总数S进行编码。通过推集合来在存储器中初始化堆栈：＝,＝；如上所述。然后，只要堆栈不为空，就使用以下操作：上托堆栈以取回当前间隔集：,新索引被定义为：并且对分用于对以下项进行编码：pi∈如果则集合,被推到堆栈中，并且如果/＞则将“集合,推到堆栈中。然后重复上述等式10之后的操作，直到和/＞此时，整个视频数据序列已被译码成单独的可解码包，其可以被并行地解码为经编码的视频比特流，并且全部需要的信息都可用于索引。在根据上述操作的一个示例中，按如下来执行用于对pi∈进行编码的对分：给定pi和pmin,pmax，初始化变量a←pmin；当c≠a时，重复以下操作：如果c≤pi，则对比特“1”进行编码并且设置a←c。当c＝a时，对比特“0”进行编码并且设置b←c。更新解码算法类似于上述编码操作。对于解码，给定pi和pmin,pmax，初始化变量a←pmin；b←pmax；当c≠a时，重复以下操作。如果经解码的比特为“1”，则设置a←c，否则设置b←c。更新/＞并且返回经解码的值pi＝a。上述示例示出了根据本文描述的实施例的译码操作的各方面，但是将显而易见的是，其它示例和实现方式是可能的。下文进一步示出示例编码实现方式的各方面：/＞类似地，下文示出了示例解码实现方式的各方面：上述操作或根据本文描述的示例的类似操作可以用于数据压缩，其中熵译码的并行化用于利用并行编码或解码来改进视频处理的设备性能。与类似设备相比，本文描述的示例允许具有减少的处理资源和功耗的并行熵译码，这是由于具有上述对分操作的开销和包识别的结构。示例可以结合基于神经网络的视频处理编解码器来实现低成本并行编码和解码，以改进对高分辨率视频数据、高帧速率数据、改进的颜色分辨率和改进的动态范围视频数据的处理。由于视频质量的这样的改进增加了视频数据，因此与并行译码相比，上述单线程熵译码的瓶颈可能会显著损害性能。使用本文描述的操作的并行译码可以利用具有可接受的功耗和与并行化相关联的改进的数据吞吐量的低开销和高效的处理电路来执行。本文描述的基于对分的译码示例要求大约log2个执行步骤来对索引元素进行译码。对于可以高效地计算函数|log2|的系统，可以使用一类前缀码。前缀码通常针对数据符号的某种概率分布进行优化。然而，如前所述，一些系统不假设概率分布的知识。当要编码的数字n是使得n∈{0,1,2,…,2B-1}时，设备可以利用等于B的固定数量的比特来高效地对该数字进行编码。在一般情况下，当n∈{0,1,2,…,Np-1}时，对于一些值，可以使用个比特来对数量n进行译码，并且对于剩余的值，可以使用个比特来对数量n进行译码。一些示例使用以下方法来指定如何代替基于对分的译码示例来针对简单且高效的系统对值进行译码。一些这样的示例通过在可能值集合中的第一值和最后的值中将用于对值进行译码的比特数量从个比特顺序地增加到/＞下文的表1示出了Np从4到8的整数值的前缀码的示例，其中图5B-5F示出了这些码的树表示。nNp＝4Np＝5Np＝6Np＝7Np＝80000000000000001010101001000121010101000103111111110114–0010010011005––0110111016–––1011107––––111表1-二进制码字图5B示出了可以与本文描述的示例一起使用的前缀码的各方面。图5B是Np＝4的码值的树表示560。从起始位置561到n值位置562-565的路径示出了每个码值是如何生成的。对于n＝0码，从起始位置561到n＝0位置561的路径给出的码为00。类似地，从起始位置561到n＝1位置562、n＝2位置563和n＝3位置565的路径分别为01、10和11。图5C示出了可以与本文描述的示例一起使用的前缀码的各方面。图5C是Np＝5的码值的树表示568。如树表示570和从起始位置560到位置563、564和565的路径所示，值n＝1、n＝2和n＝3的码对于Np＝5和Np＝4是相同的。对于Np＝4不存在的新的n＝4位置572为001，并且n＝0位置571具有值为000的额外比特。图5D示出了可以与本文描述的示例一起使用的前缀码的各方面。图5E示出了可以与本文描述的示例一起使用的前缀码的各方面。图5F示出了可以与本文描述的示例一起使用的前缀码的各方面。这些图中的每个图示出了对应的树表示570、580和590，其示出了Np＝6-8的码值。在每个增加的Np值树表示处，最低完整分支层级中的最低值位置将被替换为下面的层级中的两个值。从Np＝5到Np＝6，位置563被从该位置分支的两个位置573和574替换。从Np＝6到Np＝7，位置564被从该位置分支的两个位置575和576替换。从Np＝6到Np＝7，位置565被从该位置分支的两个位置577和578替换。对于所示的树中的每个树，从初始位置561分支到每个分支的最低层级位置的路径给出了对应的n值的码值。上文所示的码不同于众所周知的规范的Huffman码，其中比特数量随着译码值的增加而增加。规范的Huffman码更容易编码和解码，而无需生成码字列表及其比特数量。然而，所示的码允许通过以下编码和解码算法描述所示的一组类似简单的前缀码。示例编码算法为：1、输入：n和Np的值，使得n∈{0,1,2,…,Np-1}；2、计算和M＝2B；3、使用B个比特来对k＝nmodM进行编码；4、如果k+M＜Np，则：a、利用一比特来对进行编码。示例对应的解码算法为：1、输入：Np的值；2、计算和M＝2B；3、使用B个比特来对k进行解码，并且设置n＝k；4、如果k+M＜Np，则：a、对一比特进行解码，并且如果其值为1，则设置n＝k+M；5、返回值n。然后，本文描述的一些示例可以使用上述译码和解码索引元素来代替本描述的其它部分中描述的基于对分的译码。图6是示出根据本文描述的示例的用于可独立熵译码包的并行译码的各方面的图。图6示出了与图3的图类似的图，其具有额外的改进以减少用于熵译码的并行化的译码开销。如上所述，索引标识包和入口点，使用用于每个包的比特数量和位置，或者使用入口点。由于相邻包共享公共边界，因此可以使用单个入口点定义两个包的位置。在这样的示例中，包可以被定义为前向包或反向包。编码器单元610和缓冲器620可以像图3的编码器单元和缓冲器一样操作，不是如图4中描述地在每个包的开始或结束处识别入口点，而是可以与包之间的共享边界相关联地识别各对包，并且索引630中的入口点可以减半。例如，如图所示，图6包括前向包632、633和634以及反向包642、643和644。这些包形成在入口点652、653和654处联合的包，使得第一对包632和642通过入口点652联合，第二对包633和643通过入口点653联合，以及第三对包634和644通过入口点654联合。如图所示，将前向包和后向包定义为具有共享入口点的对允许用于并行熵译码的双向字节打包，其中索引630中的入口点数量为未进行双向字节打包的索引430的一半。然后，前向包由前向解码器单元662、663和664解码，以及后向包由后向解码器单元672、673和674解码。解码器可以利用上述实现方式来操作，但是前向解码器在解码期间递增字节计数器，并且后向解码器递减字节计数器以解码对应的包。如上所述，包对保持独立可解码，并且不需要由特定的解码器单元对进行解码。在一些示例中，解码器可以被配置为对前向或后向包进行解码，而在其它单元中，解码器被定制为高效地对前向或后向包而不是两者进行解码，如图6所示。这样的示例通过降低开销、提高吞吐量和降低功耗来进一步改进译码系统和译码系统中的设备的操作。图7示出了根据本文描述的示例的用于与视频数据序列的可独立熵译码包的并行译码一起使用的文件结构710。文件结构710包括P部分以及文件索引702，类似于如上所述的索引630。图7的示例中的文件结构720的部分包括B个块，并且块结构730的块各自包含S个区段。用于并行熵译码的示例结构提供了统一的层次结构，其可以与上述包一起使用并且具有最小开销。该结构可以允许用户控制文件打开和关闭操作，并且在文件结构710的任何部分元素处开始和停止操作。例如，在一些实现方式中，部分元素可以用于视频帧，并且部分结构720的块可以与视频编解码器功能调用相关联。主块可以包括针对部分的标量，其中单独的非主块包含矢量数据。在一些实现方式中，可以使用神经网络译码结合上述并行熵译码操作来自动化区段和包使用。区段结构740包括用于包对的结构，该包对包括如上所述的前向包和后向包。在一些情况下，可能存在奇数个包，使得一个区段可能只包含向前包或后向包，但是这些区段的对结构允许如上关于图6描述的字节打包。然后，每个前向包可以具有由前向包结构750定义的Nf个字节，并且每个后向包可以具有由后向包结构760定义的Nb个字节。如上所述，可以对字节数量施加门限，并且在一些示例中，对于前向包和后向包，门限可以相同或不同。在任一种情况下，门限都可以包括关于针对给定包所允许的字节数量的上限和下限，以允许视频数据的有序对分，并且通过限制要译码的包大小的变化来简化译码和改进译码设备的操作。图8A是示出根据本文描述的示例的使用用于并行熵译码的操作来对视频进行编码的过程800的示例的流程图。在一些示例中，过程800由包括存储器和一个或多个处理器的装置来执行。在其它示例中，过程800被实现为存储介质中的计算机可读指令，该计算机可读指令在由处理电路执行时使得执行译码操作。在一些示例中，设备使用诸如编码设备104的编码设备来执行过程800。在一些示例中，可以利用神经网络来执行熵编码的各方面，以便与译码系统进行复杂的大规模并行化，如下文进一步描述的。在框802处，过程800包括获得视频数据序列的操作。如上所述，视频数据序列可以是要使用本文描述的并行熵编码进行编码以用于存储或传输的任何视频数据。当单线程译码产生诸如超高分辨率视频、高帧速率视频、以更宽的色彩分辨率或色域、高动态范围或高质量的数据流的形式的增加的数据的瓶颈时，这样的并行译码尤其可以提供益处。对视频数据序列的并行译码也可以用于人工智能分析或机器学习，其中机器以不受标准时间显示约束的方式分析视频数据。这样的并行熵译码可以允许机器学习或人工智能系统以与单线程译码系统相比高得多的速率来解码和处理视频数据。在框804处，过程800包括识别视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置的操作。在一些示例中，入口点是至少部分地通过执行对视频数据序列的对分枚举来识别的。在一些示例中，执行对分枚举包括：对分视频数据序列以识别位置中的初始位置。初始位置与第一入口点和被初始位置划分的子序列相关联。执行对分枚举还可以包括：对分子序列的层级以识别位置的剩余部分。其它示例可以使用前缀码，诸如上文关于图5B-5F描述的前缀码。在一些方面中，与框804相关联的操作可以包括确定译码信息，译码信息包括与用于可单独熵译码包的入口点相关联的信息。一些示例可以包括：对视频数据序列执行外部对分枚举以确定译码信息。上述关于图5A描述了这样的外部对分枚举的示例的细节。在一些示例中，框804可以包括：对分视频数据序列以识别入口点中的第一入口点的操作，第一入口点定义视频数据序列的两个子序列以及可单独熵译码包中的两个包之间的第一边界。框804还可以包括：重复地对分视频数据序列的子序列的层级，以生成由额外序列之间的额外入口点和视频数据序列的相邻包之间的额外入口点定义的额外子序列，以生成视频数据序列的单独的可译码包，其中，单独的可译码包是通过用于视频数据序列的入口点来识别的。如上所述，在一些示例中，外部对分枚举将可单独熵译码包中的最大包和最小包之间的差限制为小于门限差。在框804的其它示例中，操作可以通过重复对分具有P比特的值的视频数据序列来选择包数量N，以根据下式来定义可单独熵译码包的集合：＝{imin+1,imin+2,…,imax-2,imax-1}，其中大小＝{pmin,pmin+1,…,pmax-1,pmax}加起来等于P比特的值。在这样的示例中，每个i是可单独熵译码包，imin是可单独熵译码包的集合中的第一可单独熵译码包，并且imax是可单独熵译码包的集合中的最后的可单独熵译码包。类似地，在这样的示例中，每个p是可单独熵译码包的对应的可单独熵译码包的比特的大小，pmin是第一可单独熵译码包的比特大小，并且pmax是最后的可单独熵译码包的比特大小。在框806处，过程800包括生成可并行熵译码视频数据序列的操作。在一些示例中，这样的操作是至少部分地通过执行对分搜索来实现的，对分搜索将与可单独熵译码包相关联的信息跟来自视频数据序列的由位置确定的数据进行编码以生成可单独熵译码包。在一些方面中，与框804相关联的操作可以包括：在确定可单独熵译码包的大小时执行内部对分搜索，该内部对分搜索将视频数据序列的信息并行地编码为可单独熵译码包。在框806的一个示例中，包括使用通用码字集来对包数量N和总字节数量S进行编码的操作，其中＝,＝。操作还可以通过将集合＝,＝推到堆栈中来进一步初始化存储器中的堆栈，并且对视频数据流进行编码。在一些示例中，在框806中对流进行编码包括以下操作：分析堆栈以取回当前间隔集,；定义新索引；使用对分来对pi∈进行编码；当/＞时，利用集合,来更新堆栈；以及当/＞时，利用集合,来更新堆栈。重复这些操作，直到堆栈为空。在框806的一些这样的示例中，通用码字集是Elias delta码。此外，在框806的一些示例中，使用对分来对pi∈进行编码的操作包括以下操作：初始化变量a←pmin；b←pmax；c←然后，当c≠a时，重复以下操作：当c≤pi时，对比特“1”进行编码并且设置a←c；当c＞pi时，对比特“0”进行编码并且设置b←c；以及更新/＞当c＝a时，上述重复操作完成并且编码完成。在框808处，过程800包括：生成用于可并行熵译码视频数据序列的索引。该索引使用与入口点相关联的信息来标识可并行熵译码视频数据序列内的可单独熵译码包。如上所述，可以以不同的方式构造索引，使用位置和包长度数据、入口点数据、或这样的数据的任何组合来定义要用于并行解码的经编码的比特流的结构。在框808的一些示例中，诸如上文关于图8描述的，索引可以被构造为各对包，其中一对包对具有单个入口点，以及针对每个包的包大小。在这样的示例中，索引中定义了每隔一个的入口点，并且未包括的入口点可以根据所包括的入口点和包大小推导出。在一个这样的示例中，框808可以包括将可单独熵译码包的包定义为前向包或反向包的操作，其中对应的包对包括由索引中的单个共享入口点定义的对应的前向包和对应的反向包。一些这样的示例将在以下情况下操作：当可单独熵译码包的数量为偶数时，索引包括N/2个入口点，并且当可单独熵译码包的数量为奇数时，索引包括+1个入口点。然后，过程800的一些示例可以将可单独熵译码包存储在存储器中，可单独熵译码包被构造为具有包括索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于对应的包对的对应的前向包和对应的反向包的前向包结构和反向包结构。然后，过程800的其它示例可以将经编码的数据保存在存储器中，或者发送经编码的数据。一些示例在以下情况下操作：过程800包括发送包括索引和单独的可熵译码包的文件的操作。另外，在过程800的一些示例中，可单独熵译码包的大小是可单独熵译码包的比特的整数值。在过程800的一些示例中，索引使用在对经编码的比特流中的视频数据序列的编码之后识别的入口点来标识可单独熵译码包。在过程800的一些示例中，索引通过标识从视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置来标识可单独熵译码包。图8B是示出根据本文描述的示例的使用用于并行熵译码的操作来对视频进行解码的过程850的示例的流程图。过程850可以被认为是图8A的编码过程800的对应的解码过程。正如上文对于过程800所述，在一些示例中，过程850由包括存储器和一个或多个处理器的装置来执行。在其它示例中，过程850被实现为存储介质中的计算机可读指令，该计算机可读指令在由处理电路执行时使得执行译码操作。在一些示例中，设备使用诸如解码设备112的解码设备来执行过程850。在一些示例中，可以利用神经网络来执行熵编码的各方面，以便与译码系统进行复杂的大规模并行化，如下文进一步描述的。在框852处，过程850包括获得包括索引的经编码的视频数据流的操作。可以使用上述方法800来对经编码的视频数据进行数据编码，包括来自框806的视频数据序列和来自框808的视频数据。如上所述，视频数据序列可以是要使用本文描述的并行熵编码进行编码以用于存储或传输的任何视频数据。当单线程译码产生诸如超高分辨率视频、高帧速率视频、以更宽的色彩分辨率或色域、高动态范围或高质量的数据流的形式的增加的数据的瓶颈时，这样的并行译码尤其可以提供益处。视频数据序列的并行译码也可以用于人工智能分析或机器学习，其中机器以不受标准时间显示约束的方式分析视频数据。这样的并行熵译码可以允许机器学习或人工智能系统以与单线程译码系统相比高得多的速率来解码和处理视频数据。在框854处，过程850包括根据索引解码可单独熵译码包的大小的操作。在框856处，过程850包括：使用索引的入口点来从经编码的视频数据流中识别视频数据序列的可单独熵译码包的操作。框854的操作可以被视为操作804的逆操作，其中然后使用在框854中识别的包大小来识别在编码期间在框804中识别的位置，以在框856中识别单独的可熵译码包。这些操作使用来自操作808的索引值来允许识别相关信息以允许对可并行熵译码视频数据序列的解码。在框858处，过程800包括使用可单独熵译码包的经解码的大小来从经编码的视频数据流并行地解码可单独熵译码包的操作。如本文描述的，框858可以包括并行操作，以允许并行解码系统中的包独立地解码来自视频数据序列内的不同位置的包。在对视频数据序列的全部包进行解码之后，然后可以对包进行整合，以生成可以存储或输出到显示器的完整视频数据序列。除了上述方法800和850中描述的对分枚举和对分搜索操作之外，其它实现方式可以使用图5B-5F中描述的前缀码作为上述对分枚举和对分搜索操作的替代。在任一情况下，索引值用于对如本文描述的单独的可熵译码的包进行编码和解码。在一些示例中，本文描述的过程可以由计算设备或装置来执行。在一个示例中，过程800可以由具有实现本文描述的任何架构的计算设备架构1300的计算设备来执行。在一些示例中，计算设备可以包括移动设备、可穿戴设备、扩展现实设备设备、增强现实设备或混合现实设备)、个人计算机、膝上型计算机、视频服务器、电视、车辆、机器人设备和/或具有执行本文描述的过程的资源能力的任何其它计算设备。在一些示例中，本文描述的系统和技术可以用于使用一个或多个机器学习系统来执行图像和/或视频译码。如上所述，对视频数据序列的并行译码也可用于人工智能分析或机器学习，其中机器以不受标准时间显示约束的方式分析视频数据。对文件的并行解码可以由机器学习系统执行，以便以最高可能的速度分析视频文件。在一些示例中，在机器学习系统被配置为以视频数据可以被解码的速度“观看”和/或处理超高清电影时，并行熵译码可以极大地提高机器处理时间。这样的并行熵译码可以允许机器学习或人工智能系统以与单线程译码系统高得多的速率来解码和处理视频数据。通常，ML是人工智能的子集。ML系统可以包括算法和统计模型，计算机系统可以使用这些算法和统计模型，以通过依赖于模式和推理而执行各种任务，而无需使用显式指令。ML系统的一个示例是神经网络，其可以包括一组相互连接的人工神经元。神经网络可以用于各种应用和/或设备，诸如图像和/或视频译码、图像分析和/或计算机视觉应用、互联网协议相机、物联网设备、自主车辆、服务机器人等。神经网络中的各个节点可以通过采用输入数据并且对数据执行简单运算来模拟生物神经元。对输入数据执行的简单运算的结果被选择性地传递给其它神经元。权重值与网络中的每个向量和节点相关联，并且值约束输入数据如何与输出数据相关。例如，可以将每个节点的输入数据乘以相应的权重值，并且可以对乘积求和。可以通过可选的偏置来调整乘积的总和，并且可以将激活函数应用于结果，从而产生节点的输出信号或“输出激活”。权重值最初可以由通过网络的训练数据的迭代流来确定。存在不同类型的神经网络，诸如卷积神经网络、递归神经网络、生成性对抗网络、多层感知器神经网络等。例如，卷积神经网络是一种类型的前馈人工神经网络。卷积神经网络可以包括人工神经元的集合，每个人工神经元具有感受野并且共同地平铺输入空间。RNN的工作原理是保存层的输出，并且将该输出反馈回输入，以帮助预测层的结果。GAN是一种形式的生成性神经网络，其可以学习输入数据中的模式，使得神经网络模型可以生成新的合成输出，这些合成输出可能合理地来自原始数据集。GAN可以包括一起操作的两个神经网络，包括生成合成输出的生成性神经网络和评估输出真实性的判别性神经网络。在MLP神经网络中，可以将数据馈送给输入层，并且一个或多个隐藏层向数据提供抽象级别。然后，可以基于经抽象的数据在输出层上进行预测。在分层神经网络架构中，第一层人工神经元的输出成为第二层人工神经元的输入，第二层人工神经元的输出成为第三层人工神经元的输入，等等。例如，可以对CNN进行训练以辨识特征的层次结构。CNN架构中的计算可以分布在可以被配置在一个或多个计算链中的一群处理节点上。这样的多层架构可以每次训练一个层，并且可以使用反向传播进行微调。常规的压缩方法被设计用于顺序译码和计算，并且因此其结构仅具有若干独立的数据块。基于神经网络的压缩可以实现大规模并行计算和译码，其利用大量独立的数据块。本文描述的示例能够高效地索引大量数据包。在没有这样的索引的情况下，包索引开销会显著降低整体压缩。本文描述的示例避免了用于基于神经网络的译码的整体压缩中的这样的降级。图9示出了片上系统900的示例实现方式，SOC 900可以包括被配置为执行本文描述的一个或多个功能的中央处理单元902或多核CPU。参数或变量、与计算设备相关联的系统参数、延迟、频段信息、任务信息以及其它信息可以被存储在与神经处理单元908相关联的存储器块中，被存储在与CPU 902相关联的存储器块中，被存储在与图形处理单元904相关联的存储器块中，被存储在与数字信号处理器906相关联的存储器块中，被存储在存储器块918中，和/或可以分布在多个块之间。在CPU 902处执行的指令可以是从与CPU 902相关联的程序存储器加载的，或者可以是从存储器块918加载的。SOC 900还可以包括针对特定功能定制的额外处理块，例如，GPU 904、DSP 906、连接块910连接、第四代长期演进连接、Wi-Fi连接、USB连接、蓝牙TM连接等)、以及多媒体处理器912。在一种实现方式中，在CPU 902、DSP 906和/或GPU 904中实现NPU。SOC 900还可以包括传感器处理器914、图像信号处理器916和/或导航模块920。在一些示例中，SOC 900可以是基于ARM指令集的。在本公开内容的一方面中，被加载到CPU 902中的指令可以包括用于在与输入值和滤波器权重的乘法乘积相对应的查找表中搜索被存储的乘法结果的代码。被加载到CPU 902中的指令还可以包括用于当检测到乘法乘积的查找表命中时在乘法乘积的乘法运算期间禁用乘法器的代码。另外，被加载到CPU 902中的指令可以包括用于当检测到乘法乘积的查找表未命中时存储输入值和滤波器权重的计算出的乘法乘积的代码。SOC 900和/或其组件可以被配置为使用根据本文所讨论的本公开内容的各方面的机器学习技术来执行视频压缩和/或解压缩。通过使用深度学习架构来执行视频压缩和/或解压缩，本公开内容的各方面可以提高设备上的视频压缩和/或解压缩的效率。例如，使用所描述的视频译码技术的设备可以使用基于机器学习的技术来对视频更高效地压缩，可以将经压缩的视频发送给另一设备，并且另一设备可以使用本文描述的基于机器学习的技术来对经压缩的视频更高效地解压缩。如上所述，神经网络是机器学习系统的示例，并且可以包括输入层、一个或多个隐藏层和输出层。从输入层的输入节点提供数据，由一个或多个隐藏层的隐藏节点执行处理，并且通过输出层的输出节点产生输出。深度学习网络通常包括多个隐藏层。神经网络的每个层可以包括特征图或激活图，特征图或激活图可以包括人工神经元。特征图可以包括滤波器、内核等。节点可以包括用于指示这些层中的一个或多个层的节点的重要性的一个或多个权重。在一些情况下，深度学习网络可以具有一系列的许多隐藏层，其中初期的层用于确定输入的简单且低级的特性，以及后期的层建立更复杂且抽象的特性的层次结构。深度学习架构可以学习特征的层次结构。例如，如果以视觉数据来呈现，则第一层可以学习辨识输入流中的相对简单的特征，例如边缘。在另一示例中，如果以听觉数据来呈现，则第一层可以学习辨识特定频率中的频谱功率。采用第一层的输出作为输入的第二层可以学习辨识特征的组合，例如，用于视觉数据的简单形状或用于听觉数据的声音的组合。例如，较高层可以学习表示视觉数据中的复杂形状或者听觉数据中的词语。再高层可以学习辨识常见的视觉对象或口语短语。当被应用于具有自然层次结构的问题时，深度学习架构可能表现得特别好。例如，对机动运载工具的分类可以得益于首先学习辨识车轮、挡风玻璃和其它特征。这些特征可以在较高层处以不同的方式进行组合，以辨识汽车、卡车和飞机。神经网络可以被设计为具有各种各样的连接模式。在前馈网络中，信息是从较低层传递到较高层的，其中给定层中的每个神经元与较高层中的神经元进行通信。如上所述，可以在前馈网络的连续层中建立层次表示。神经网络也可以具有循环或反馈连接。在循环连接中，来自给定层中的神经元的输出可以被传送给相同层中的另一个神经元。循环架构可以有助于识别横跨多于一个的按顺序被递送给神经网络的输入数据大块的模式。从给定层的神经元到较低层的神经元的连接被称为反馈连接。当辨识高级概念可以辅助辨别输入的特定低级特征时，具有许多反馈连接的网络可以是有帮助的。神经网络的各层之间的连接可以是完全连接的或者局部连接的。图10A示出了完全连接神经网络1002的示例。在完全连接神经网络1002中，第一层中的神经元可以将其输出传送给第二层中的每个神经元，使得第二层中的每个神经元将接收来自第一层中的每个神经元的输入。图10B示出了局部连接神经网络1004的示例。在局部连接神经网络1004中，第一层中的神经元可以连接到第二层中的有限数量的神经元。更一般而言，局部连接神经网络1004的局部连接层可以被配置为使得一层中的每个神经元将具有相同或相似的连接模式，但是具有带有不同的值的连接强度。局部连接的连接性模式可以在较高层中造成空间上不同的感受野，这是因为给定区域中的较高层神经元可以接收通过训练而调谐到针对网络的总输入的受限部分的属性的输入。局部连接神经网络的一个示例是卷积神经网络。图10C示出了卷积神经网络1006的示例。卷积神经网络1006可以被配置为使得与针对第二层中的每个神经元的输入相关联的连接强度被共享。卷积神经网络可以非常适于其中输入的空间位置有意义的问题。根据本公开内容的各方面，卷积神经网络1006可以用于执行视频压缩和/或解压缩的一个或多个方面。一种类型的卷积神经网络是深度卷积网络。图10D示出了DCN 1000的详细示例，DCN1000被设计为从图像1026中辨识视觉特征，图像1026是从诸如车载相机的图像捕获设备1030输入的。可以对当前示例的DCN 1000进行训练以识别交通标志和在交通标志上提供的数字。当然，DCN 1000可以被训练用于其它任务，例如识别车道标线或识别交通灯。可以利用有监督学习来训练DCN 1000。在训练期间，可以向DCN 1000呈现图像，并且然后可以计算前向传递以产生输出1022。DCN 1000可以包括特征提取区段和分类区段。在接收到图像1026时，卷积层1032可以将卷积核应用于图像1026以生成第一特征图集合1018。作为示例，用于卷积层1032的卷积核可以是生成108x28特征图的5x5核。在本示例中，因为在第一特征图集合1018中生成四个不同的特征图，所以在卷积层1032处对图像1026应用四个不同的卷积核。卷积核也可以被称为滤波器或卷积滤波器。第一特征图集合1018可以由最大池化层二次采样以生成第二特征图集合1020。最大池化层减少第一特征图集合1018的尺寸。即，第二特征图集合1020的尺寸小于第一特征图集合1018的尺寸。减少的尺寸向后续层提供类似的信息，同时减少存储器消耗。第二特征图集合1020可以经由一个或多个后续卷积层被进一步卷积以生成一个或多个后续特征图集合。在图10D的示例中，对第二特征图集合1020进行卷积以生成第一特征向量1024。此外，对第一特征向量1024进一步卷积以生成第二特征向量1028。第二特征向量1028的每个特征可以包括对应于图像1026的可能特征的数字。softmax函数可以将第二特征向量1028中的数字转换为概率。这样，DCN 1000的输出1022是图像1026包括一个或多个特征的概率。在本示例中，在输出1022中的针对“符号”和“60”的概率高于输出1022的其它项的概率。在训练之前，由DCN 1000产生的输出1022可能是不正确的。因此，可以计算输出1022和目标输出之间的误差。目标输出是图像1026的地面真值。然后，可以调整DCN 1000的权重，使得DCN 1000的输出1022与目标输出更紧密地对齐。为了调整权重，学习算法可以计算针对权重的梯度向量。梯度可以指示关于在权重被调整的情况下误差将增加或减少的量。在顶层，梯度可以直接地对应于将倒数第二层中的激活神经元和输出层中的神经元进行连接的权重的值。在较低层中，梯度可以取决于权重的值和所计算出的较高层的误差梯度。然后可以调整权重以减少误差。这种调整权重的方式可以被称为“反向传播”，因为其涉及通过神经网络的“后向传递”。在实践中，权重的误差梯度可以通过少量示例来计算，使得所计算出的梯度接近真实误差梯度。这种近似方法可以被称为随机梯度下降。可以重复随机梯度下降，直到整个系统的可实现误差率已经停止下降或直到误差率已经达到目标水平。在学习之后，可以向DCN呈现新图像，并且通过网络的前向传递可以产生可以被认为是DCN的推断或预测的输出222。深度信念网络是包括多层隐藏节点的概率模型。DBN可以用于提取训练数据集的层次表示。DBN可以通过将受限玻尔兹曼机的各层进行叠加来获得。RBM是一种类型的人工神经网络，其可以学习在输入集合上的概率分布。由于RBM可以在不存在关于每个输入应当被分类到的类别的信息的情况下学习概率分布，因此RBM通常在无监督学习中使用。使用混合的无监督和有监督范式，DBN的底部RBM可以以无监督的方式来训练并且可以充当特征提取器，以及顶部RBM可以以有监督的方式来训练并且可以充当分类器。深度卷积网络是卷积网络的网络，其被配置有额外的池化和归一化层。DCN在许多任务上都已经实现了最先进的性能。DCN可以使用有监督学习来训练，并且通过使用梯度下降方法来修改网络的权重。DCN可以是前馈网络。此外，如上所述，从DCN的第一层中的神经元到下一较高层中的一组神经元的连接是在第一层中的神经元之间共享的。DCN的前馈和共享连接可以用于快速处理。例如，DCN的计算负担可以比包括循环或反馈连接的类似尺寸的神经网络的计算负担小得多。对卷积网络的每个层的处理可以被认为空间不变模板或基投影。如果首先将输入分解为多个通道，则在该输入上训练的卷积网络可以被认为是三维的，其中两个空间维度沿着图像的轴线，并且第三维度捕获色彩信息。卷积连接的输出可以被认为形成后续层中的特征图，其中，特征图的每个元素接收来自先前的层中的一系列神经元和来自多个通道中的每个通道的输入。可以利用非线性max)来进一步处理特征图中的值。来自相邻神经元的值可以被进一步池化，并且可以提供额外的局部不变性和降维。图11是示出深度卷积网络1150的示例的框图。深度卷积网络1150可以包括基于连接性和权重共享的多个不同类型的层。如图11所示，深度卷积网络1150包括卷积块1154A、1154B。卷积块1154A、1154B中的每一者可以被配置为具有卷积层1156、归一化层1158和最大池层1160。卷积层1156可以包括一个或多个卷积滤波器，其可以被应用于输入数据1152以生成特征图。尽管仅示出了两个卷积块1154A、1154B，但是本公开内容并不限制于此，而相反，根据设计偏好，任何数量的卷积块可以被包括在深度卷积网络1150中。归一化层1158可以对卷积滤波器的输出进行归一化。例如，归一化层1158可以提供白化或横向抑制。最大池化层1160可以提供在空间上的下采样聚合以用于局部不变性和降维。例如，深度卷积网络的并行滤波器组可以被加载在SOC 900的CPU902或GPU904上，以实现高性能和低功耗。在替代实施例中，并行滤波器组可以被加载在SOC900的DSP 906或ISP 916上。此外，深度卷积网络1150可以访问可以在SOC 900上存在的其它处理块，诸如分别专用于传感器和导航的传感器处理器914和导航模块920。深度卷积网络1150还可以包括一个或多个完全连接层，诸如层1162A和层1162B。深度卷积网络1150还可以包括逻辑回归层1164。在深度卷积网络1150的每个层1156、1158、1160、1162A、1162B、1164之间是要被更新的权重。这些层中的每个层的输出可以充当深度卷积网络1150的层中的随后一个层的输入，以根据在卷积块1154A的开始提供的输入数据1152学习层次特征表示。深度卷积网络1150的输出是针对输入数据1152的分类得分1166。分类得分1166可以是概率集合，其中，每个概率是输入数据包括来自特征集合的特征的概率。如上文所提到的，数字视频数据可以包括大量数据，这可能为通信网络以及处理和存储视频数据的设备带来显著负担。例如，记录未经压缩的视频内容通常导致随着所记录的视频内容的分辨率增加而大大增加的较大的文件大小。在一个说明性示例中，以1080p/24记录的未经压缩的每通道16比特视频可能占用每帧12.4兆字节或每秒297.6兆字节。以每秒24个帧的12K分辨率记录的未经压缩的每通道16比特视频可能占用每帧129.8兆字节或每秒1195.2兆字节。网络带宽是大视频文件可能变得有问题的另一约束。例如，视频内容通常在无线网络上、WiFiTM、蓝牙TM或其它无线网络)递送，并且可能组成消费者互联网流量的很大一部分。尽管在无线网络中的可用带宽量方面取得了进步，但是可能仍然期望减少用于在这些网络中递送视频内容的带宽量。由于未经压缩的视频内容可能导致大文件，大文件可能涉及用于物理存储的相当大的存储器和用于传输的大量带宽，因此可以利用视频译码技术来压缩以及然后解压缩这样的视频内容。为了减少视频内容的大小，以及从而减少存储视频内容所涉及的存储量以及传送视频内容所涉及的带宽量，可以根据特定的视频译码标准来执行视频译码技术。视频译码通常使用预测方法，预测方法利用在视频图像或序列中存在的冗余。视频译码技术的共同目标是将视频数据压缩为使用较低比特率的形式，同时避免或最小化视频质量的降级。随着对视频服务的需求增长以及新的视频服务变得可用，需要具有更好的译码效率、性能和速率控制的译码技术。通常，编码设备根据视频译码标准来对视频数据进行编码，以生成经编码的视频比特流。在一些示例中，经编码的视频比特流是一系列的一个或多个经译码的视频序列。编码设备可以通过将每个图片分割为多个切片来生成图片的译码表示。切片是独立于其它切片的，使得该切片中的信息是不依赖于来自在相同图片内的其它切片的数据来译码的。切片包括一个或多个切片段，其包括独立的切片段以及依赖于先前切片段的一个或多个从属切片段。在HEVC中，然后将切片分割为亮度样本和色度样本的译码树块。亮度样本的CTB和色度样本的一个或多个CTB连同用于样本的语法一起被称为译码树单元。CTU还可以被称为“树块”或“最大译码单元”。CTU是用于HEVC编码的基本处理单元。CTU可以被拆分为具有不同大小的多个译码单元。CU包含被称为译码块的亮度和色度样本阵列。亮度和色度CB可以被进一步拆分为预测块。PB是亮度分量或色度分量的样本的块，其使用相同的运动参数来进行帧间预测或块内复制预测。亮度PB和一个或多个色度PB连同关联的语法一起形成预测单元。对于帧间预测，运动参数集是在用于每个PU的比特流中用信号通知的，并且用于亮度PB和一个或多个色度PB的帧间预测。运动参数也可以被称为运动信息。CB也可以被分割为一个或多个变换块。TB表示色彩分量的样本的正方形块，其中残差变换被应用于TB以对预测残差信号进行译码。变换单元表示亮度和色度样本的TB以及对应的语法元素。下文更加详细地描述变换译码。可以使用TU来执行变换。可以基于在给定CU内的PU的大小来设定TU的大小。TU可以具有与PU相同的大小或者小于PU。在一些示例中，可以使用被称为残差四叉树的四叉树结构来将与CU相对应的残差样本细分为更小的单元。RQT的叶节点可以对应于TU。与TU相关联的像素差值可以被变换以产生变换系数。然后可以由编码设备对变换系数进行量化。在视频数据的图片被分割为CU时，编码设备使用预测模式来预测每个PU。然后从原始视频数据中减去预测单元或预测块以获得残差。对于每个CU，可以使用语法数据在比特流内用信号通知预测模式。预测模式可以包括帧内预测或帧间预测。帧内预测利用在图片内在空间上相邻的样本之间的相关性。例如，使用帧内预测，每个PU是从在相同图片中的相邻图像数据进行预测的，使用例如DC预测以寻找用于PU的平均值，使用平面预测以使平面表面适配PU，使用方向预测以从相邻数据进行外推，或者使用任何其它适当的预测类型。帧间预测使用在图片之间的时间相关性，以便推导出用于图像样本的块的运动补偿预测。例如，使用帧间预测，每个PU是使用运动补偿预测来根据在一个或多个参考图片中的图像数据进行预测的。例如，可以在CU级别处作出是使用图片间预测还是使用图片内预测来对图片区域进行译码的决策。在使用帧内预测和/或帧间预测执行预测之后，编码设备可以执行变换和量化。例如，在预测之后，编码设备可以计算与PU相对应的残差值。残差值可以包括在正被译码的像素的当前块与用于预测当前块的预测块之间的像素差值。例如，在生成预测块之后，编码设备可以通过从当前块中减去由预测单元产生的预测块来生成残差块。残差块包括像素差值集合，其对在当前块的像素值与预测块的像素值之间的差进行量化。在一些示例中，可以用二维块格式来表示残差块。在这样的示例中，残差块是像素值的二维表示。使用块变换来对在执行预测之后可能剩余的任何残差数据进行变换，块变换可以是基于离散余弦变换、离散正弦变换、整数变换、小波变换、其它适当的变换函数、或其任何组合的。在一些情况下，可以将一个或多个块变换应用于每个CU中的残差数据。在一些实施例中，可以将TU用于由编码设备实现的变换和量化过程。具有一个或多个PU的给定CU也可以包括一个或多个TU。如下文进一步详细描述的，残差值可以使用块变换来被变换为变换系数，并且然后可以使用TU进行量化和扫描，以产生用于熵译码的串行化变换系数。编码设备可以执行变换系数的量化。量化通过对变换系数进行量化以减少用于表示系数的数据量来提供进一步的压缩。例如，量化可以减少与系数中的一些或全部系数相关联的比特深度。在一个示例中，具有n比特值的系数可以在量化期间向下舍入为m比特值，其中n大于m。在执行量化时，经译码的视频比特流包括经量化的变换系数、预测信息、分割信息以及任何其它适当的数据。经译码的视频比特流的不同元素然后可以由编码设备进行熵编码。在一些示例中，编码设备可以利用预定义的扫描次序来扫描经量化的变换系数，以产生可以被熵编码的串行化向量。在一些示例中，编码设备可以执行自适应扫描。在扫描经量化的变换系数以形成向量之后，编码设备可以对该向量进行熵编码。例如，编码设备可以使用上下文自适应变长译码、上下文自适应二进制算术译码、基于语法的上下文自适应二进制算术译码、概率区间分割熵译码或另一种适当的熵编码技术。编码设备可以存储经编码的视频比特流和/或可以在通信链路上向接收设备发送经编码的视频比特流数据。解码设备可以通过熵解码并且提取组成经编码的视频数据的一个或多个经译码的视频序列的元素，从而对经编码的视频比特流数据进行解码。解码设备然后可以重新缩放经编码的视频比特流数据并且对经编码的视频比特流数据执行逆变换。残差数据然后被传递给解码设备的预测阶段。解码设备然后使用帧内预测、帧间预测、IBS和/或其它类型的预测来预测像素的块。在一些示例中，将预测与逆变换的输出相加。解码设备可以将经解码的视频输出到视频目的地设备，视频目的地设备可以包括用于将经解码的视频数据显示给内容的消费者的显示器或其它输出设备。本公开内容的说明性方面包括：方面1、一种用于对视频数据进行编码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。方面2A、根据方面1所述的装置，其中，所述索引是通过在所述视频数据序列的可能值集合中的第一值和最后的值中将用于对值进行译码的比特数量顺序地从比特增加到/＞来生成的。方面2B、根据方面1所述的装置，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的。方面3、根据方面2B所述的装置，其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。方面4、根据方面3所述的装置，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。方面5、根据方面3所述的装置，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据、以及关于所述可单独熵译码包的信息。方面6、根据方面5所述的装置，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。方面7、根据方面3所述的装置，其中，所述可单独熵译码包中的最大包与最小包之间的差小于门限差。方面8、根据方面3所述的装置，其中，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的包大小的从第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。方面9、根据方面8所述的装置，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。方面10、根据方面9所述的装置，其中，所述堆栈还是利用通用码字集来初始化的。方面11、根据方面9所述的装置，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。方面12、根据方面3所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包中的包定义为前向包或反向包；其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包。方面13、根据方面11所述的装置，其中，当所述可单独熵译码包的数量为偶数时，所述索引包括N/2个入口点，并且当所述可单独熵译码包的数量为奇数时，所述索引包括+1个入口点。方面14、根据方面11所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包存储在所述存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。方面15、根据方面13所述的装置，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。方面16、根据方面3所述的装置，其中，所述索引使用在对经编码的比特流中的所述视频数据序列的编码之后识别的入口点来标识所述可单独熵译码包。方面17、根据方面3所述的装置，其中，所述索引标识所述可单独熵译码包，包括标识根据所述视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置。方面18、根据方面3所述的装置，还包括：发射机，其耦合到所述一个或多个处理器并且被配置为发送使用所述索引和所述可单独熵译码包进行熵编码的所述视频数据序列。方面19、根据方面3所述的装置，还包括：显示器，其耦合到所述一个或多个处理器并且被配置为显示所述视频数据序列的图像。方面20、一种计算机实现的方法，包括：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。方面21、根据方面20所述的计算机实现的方法，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的；并且其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。方面22、根据方面21所述的计算机实现的方法，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。方面23、根据方面21所述的计算机实现的方法，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据、以及关于所述可单独熵译码包的信息。方面24、根据方面21所述的计算机实现的方法，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。方面25、根据方面21所述的计算机实现的方法，其中，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的从第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。方面26、根据方面25所述的计算机实现的方法，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。方面27、根据方面25所述的计算机实现的方法，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。方面28、根据方面27所述的计算机实现的方法，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。方面29、一种用于对视频数据进行解码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。方面30、一种计算机实现的方法，包括：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。方面31、一种用于对视频数据进行编码的装置，所述装置包括：用于获得视频数据序列的单元；用于识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置的单元；用于生成所述可并行熵译码视频数据序列的单元；以及用于生成用于所述可并行熵译码视频数据序列的索引的单元，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。方面32、根据方面31所述的装置，还包括：用于执行对所述视频数据序列的对分枚举的单元。方面33、根据方面32所述的装置，还包括：用于利用用于执行对分搜索的单元来生成所述可并行熵译码视频数据序列的单元，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。方面34、根据方面32所述的装置，还包括用于执行根据上述方面1-33的任何操作的单元。方面35、一种非暂时性计算机可读介质，包括在由一个或多个处理器执行时使得设备执行上述方面1-33中任何方面的操作的指令。图12描绘了系统1200，其包括被配置为执行视频编码和解码系统1210的设备1202。设备1202耦合到相机1207和存储介质1214。在一些实现方式中，相机1207被配置为将图像数据1208提供给处理器1204，以供系统1210进行编码。在一些实现方式中，设备1202可以耦合到和/或可以包括多个相机。在一些情况下，设备1202可以耦合到麦克风和/或其它输入设备。在一些示例中，相机1207、存储介质1214、麦克风和/或其它输入设备可以是设备1202的一部分。设备1202还经由传输介质1218耦合到第二设备1290。例如，传输介质1218可以包括由无线网络、有线网络、或者有线和无线网络的组合提供的信道。传输介质1218可以形成基于分组的网络的一部分，例如，局域网、广域网或诸如互联网的全球网络。传输介质1218可以包括路由器、交换机、基站或可以用于促进从源设备到接收设备的通信的任何其它设备。无线网络可以包括任何无线接口或无线接口的组合，并且可以包括任何合适的无线网络、UWB、WiFi直连、蜂窝、长期演进、WiMaxTM等)。有线网络可以包括任何有线接口等)。有线和/或无线网络可以使用各种设备来实现，例如，基站、路由器、接入点、桥接器、网关、交换机等。经编码的视频比特流数据可以根据诸如无线通信协议的通信标准进行调制，并且被发送给接收设备。设备1202包括一个或多个处理器1204，其耦合到存储器1206、第一接口1212和第二接口1216。处理器1204被配置为从相机1207、从存储器1206和/或从存储介质1214接收图像数据1208。处理器12012经由第一接口1212耦合到存储介质1214，并且经由第二接口1216耦合到传输介质1218。处理器1204包括系统1210。系统1210包括编码器部分1262和解码器部分1266。在一些实现方式中，系统1210可以包括一个或多个自动编码器。编码器部分1262被配置为接收输入数据1270并处理输入数据1270，以至少部分地基于输入数据1270来生成输出数据1274。在一些实现方式中，系统1210的编码器部分1262被配置为执行对输入数据1270的有损压缩以生成输出数据1274，使得输出数据1274具有与输入数据1270相比较少的比特。可以对编码器部分1262进行训练以对输入数据1270进行压缩，而不使用基于任何先前表示的运动补偿。例如，编码器部分1262可以仅使用来自视频帧的视频数据来压缩该视频帧，而不使用先前重构的帧的任何数据。由编码器部分1262处理的视频帧在本文中可以被称为经帧内预测的帧。在一些实现方式中，可以对系统1210的编码器部分1262进行训练以使用基于如所描述的独立的可熵译码包内的先前表示的运动补偿来压缩输入数据1270。例如，编码器部分1262可以使用来自视频帧的视频数据并且使用先前重构的帧的数据或者来自帧的部分的数据或作为如本文描述的可以并行地处理的单个包的一部分的其它数据来压缩该视频帧。由编码器部分1262处理的视频帧在本文中可以被称为经帧内预测的帧。运动补偿可以用于通过描述来自先前重构的帧的像素如何移动到当前帧中的新位置以及残差信息来确定当前帧的数据。如图所述，系统1210的编码器部分1262可以包括神经网络1263和量化器1264。神经网络1263可以包括生成中间数据1272的一个或多个卷积神经网络、一个或多个完全连接神经网络、一个或多个门控循环单元、一个或多个长短期记忆网络、一个或多个ConvRNN、一个或多个ConvGRU、一个或多个ConvLSTM、一个或多个GAN、其任何组合、和/或其它类型的神经网络架构。中间数据1272被输入到量化器1264。量化器1264被配置为执行对中间数据1272的量化以及在一些情况下执行对中间数据1272的熵译码，以产生输出数据1274。输出数据1274可以包括经量化的数据。由量化器1264执行的量化操作可以导致从中间数据1272生成量化码。量化码也可以被称为隐码或隐量。被应用于隐量的熵模型在本文中可以被称为“先验”。在一些示例中，可以使用当根据现有的视频译码标准来编码和/或解码视频数据时执行的现有的量化和/或熵译码操作，来执行量化和熵译码操作。在一些示例中，量化和/或熵译码操作可以由系统1210在用于识别视频数据的可独立熵译码包的对分操作之后完成。在一个说明性示例中，可以使用有监督训练来训练系统1210，其中在训练期间，残差数据被用作输入，并且量化码和熵码被用作已知输出。系统1210的解码器部分1266被配置为接收输出数据1274。解码器部分1266可以处理输出数据1274，以至少部分地基于输出数据1274来生成输入数据1270的表示1276。在一些示例中，系统1210的解码器部分1266包括神经网络1268，其可以包括一个或多个CNN、一个或多个完全连接神经网络、一个或多个GRU、一个或多个长短期记忆网络、一个或多个ConvRNN、一个或多个ConvGRU、一个或多个ConvLSTM、一个或多个GAN、其任何组合、和/或其它类型的神经网络架构。处理器1204被配置为将输出数据1274发送给传输介质1218或存储介质1214中的至少一者。例如，可以将输出数据1274存储在存储介质1214处，以供解码器部分1266稍后取回和解码以生成输入数据1270的表示1276作为经重构的数据。经重构的数据可以用于各种目的，例如以用于回放已被编码/压缩来生成输出数据1274的视频数据。在一些实现方式中，可以在与解码器部分1266匹配的另一解码器设备处解码输出数据1274，以生成输入数据1270的表示1276作为经重构的数据。例如，第二设备1290可以包括与解码器部分1266匹配的解码器，并且可以经由传输介质1218将输出数据1274发送给第二设备1290。第二设备1290可以处理输入数据1274，以生成输入数据1270的表示1276作为经重构的数据。系统1200的组件可以包括电子电路或其它电子硬件和/或可以使用电子电路或其它电子硬件来实现，电子电路或其它电子硬件可以包括一个或多个可编程电子电路、数字信号处理器、中央处理单元、和/或其它适当的电子电路)，和/或可以包括计算机软件、固件或其任何组合，和/或使用计算机软件、固件或其任何组合来实现，以执行本文描述的各种操作。虽然系统1200被示为包括某些组件，但是本领域普通技术人员将明白的是，系统1200可以包括比在图12中所示的组件更多或更少的组件。例如，在一些情况下，系统1200还可以包括输入设备和输出设备，或者可以是包括输入设备和输出设备的计算设备的一部分。在一些实现方式中，系统1200还可以包括以下各项或者可以是包括以下各项的计算设备的一部分：一个或多个存储器设备组件、只读存储器组件、高速缓存存储器组件、缓冲器组件、数据库组件、和/或其它存储器设备)、与一个或多个存储器设备相通信和/或电连接到一个或多个存储器设备的一个或多个处理设备、用于执行无线通信的一个或多个无线接口、用于在一个或多个硬接线连接上执行通信的一个或多个有线接口输入的串行接口、照明连接器、和/或其它有线接口)、和/或在图12中未示出的其它组件。在一些实现方式中，系统1200可以由计算设备本地实现和/或被包括在计算设备中。例如，计算设备可以包括移动设备、个人计算机、平板计算机、虚拟现实设备或其它VR设备)、增强现实设备、可穿戴设备、服务器系统或其它基于服务器的系统中)、电视机、和/或具有执行本文描述的技术的资源能力的任何其它计算设备。在一个示例中，系统1210可以被并入便携式电子设备，便携式电子设备包括：存储器1206，其耦合到处理器1204并且被配置为存储可由处理器1204执行的指令；以及无线收发机，其耦合到天线和处理器1204并且可操作为将输出数据1274发送给远程设备。在一些示例中，本文描述的系统和技术可以用于在基于神经网络的译码系统的输入处使用卷积和归一化阶段组合的其它编码器-解码器子网络，该基于神经网络的译码系统与用于并行译码的可独立熵译码包结构兼容。在一些情况下，计算设备或装置可以包括各种组件，诸如一个或多个输入设备、一个或多个输出设备、一个或多个处理器、一个或多个微处理器、一个或多个微型计算机、一个或多个发射机、接收机或经组合的发射机-接收机、一个或多个相机、一个或多个传感器和/或被配置为执行本文描述的过程的步骤的其它组件。在一些示例中，计算设备可以包括显示器、被配置为传送和/或接收数据的网络接口、其任何组合和/或其它组件。网络接口可以被配置为传送和/或接收基于互联网协议的数据或其它类型的数据。计算设备的组件可以在电路中实现。例如，组件可以包括和/或可以使用电子电路或其它电子硬件来实现，所述电子电路或其它电子硬件可以包括一个或多个可编程电子电路、数字信号处理器、中央处理单元、神经处理单元、和/或其它适当的电子电路)，和/或可以包括计算机软件、固件或其任何组合和/或使用计算机软件、固件或其任何组合来实现，以执行本文描述的各种操作。过程800和850被示为逻辑流程图，逻辑流程图的操作表示可以在硬件、计算机指令或其组合中实现的一系列操作。在计算机指令的背景下，所述操作表示被存储在一个或多个计算机可读存储介质上的计算机可执行指令，所述计算机可执行指令在由一个或多个处理器执行时执行所记载的操作。通常，计算机可执行指令包括执行特定功能或实现特定数据类型的例程、程序、对象、组件、数据结构等。描述操作的顺序并不旨在被解释为限制，并且可以以任何顺序和/或并行地组合任何数量的所描述的操作以实现这些过程。另外，本文描述的过程可以在被配置有可执行指令的一个或多个计算机系统的控制下执行，并且可以被实现为在一个或多个处理器上共同执行的代码，通过硬件来实现，或其组合。如上文所记载的，代码可以例如以包括可由一个或多个处理器执行的多个指令的计算机程序的形式存储在计算机可读或机器可读存储介质上。计算机可读存储介质或机器可读存储介质可以是非暂时性的。图13示出了可以实现本文描述的各种技术的示例计算设备的示例计算设备架构1300。在一些示例中，计算设备可以包括移动设备、可穿戴设备、扩展现实设备设备、增强现实设备或混合现实设备)、个人计算机、膝上型计算机、视频服务器、车辆或其它设备。例如，计算设备架构1300可以实现图6的系统。计算设备架构1300的组件被示为使用连接1305彼此电通信。示例计算设备架构1300包括处理单元1310和计算设备连接1305，计算设备连接1305将包括计算设备存储器13151313和随机存取存储器1325)的各种计算设备组件耦合到处理器1310。计算设备架构1300可以包括高速存储器的高速缓存，高速缓存直接与处理器1310连接、靠近处理器1310或被整合为处理器1310的一部分。计算设备架构1300可以将数据从存储器1315和/或存储设备1330复制到高速缓存1312，以供处理器1310快速访问。以这种方式，高速缓存可以提供性能提升，其避免处理器1310在等待数据时延迟。这些模块和其它模块可以控制或被配置为控制处理器1310以执行各种操作。其它计算设备存储器1315也可以可供使用。存储器1315可以包括具有不同性能特性的多种不同类型的存储器。处理器1310可以包括任何通用处理器以及硬件或软件服务，硬件或软件服务被配置为控制处理器1310以及其中软件指令被并入处理器设计中的专用处理器。处理器1310可以是自包含系统，其包含多个核或处理器、总线、存储器控制器、高速缓存等。多核处理器可以是对称的或非对称的。为了实现用户与计算设备架构1300的交互，输入设备1345可以表示任何数量的输入机制，诸如用于语音的麦克风、用于手势或图形输入的敏感触摸屏、键盘、鼠标、运动输入、语音等。输出设备1335还可以是本领域技术人员已知的多种输出机制中的一种或多种输出机制，诸如显示器、投影仪、电视机、扬声器设备等。在一些情况下，多模态计算设备可以使得用户能够提供多种类型的输入以与计算设备架构1300进行通信。通信接口1340通常可以控制和管理用户输入和计算设备输出。对在任何特定硬件排列上的操作没有限制，并且因此，此处的基本特征可以容易地被改进的硬件或固件配置所取代。存储设备1330是非易失性存储器，并且可以是硬盘或可以存储可由计算机访问的数据的其它类型的计算机可读介质，诸如磁带、闪存卡、固态存储器设备、数字多功能磁盘、盒式磁带、随机存取存储器1325，只读存储器1320、以及其混合物。存储设备1330可以包括用于控制处理器1310的服务1332、1334、1336。预期其它硬件或软件模块。存储设备1330可以连接到计算设备连接1305。在一个方面中，执行特定功能的硬件模块可以包括被存储在计算机可读介质中的软件组件，该计算机可读介质与执行该功能所必要的硬件组件相连接。本公开内容的各方面适用于包括或耦合到一个或多个有源深度感测系统的任何适当的电子设备。尽管下文关于具有或耦合到一个光投影器的设备进行了描述，但是本公开内容的各方面适用于具有任何数量的光投影器的设备，并且因此不限于特定设备。术语“设备”不限于一个或特定数量的物理对象。如本文所使用的，设备可以是具有可以实现本公开内容的至少一些部分的一个或多个部件的任何电子设备。尽管以下描述和示例使用术语“设备”来描述本公开内容的各个方面，但是术语“设备”不限于特定配置、类型或数量的对象。另外，术语“系统”不限于多个组件或特定实施例。例如，系统可以在一个或多个印刷电路板或其它基板上实现，并且可以具有可移动或静态的组件。尽管本文的描述和示例使用术语“系统”来描述本公开内容的各个方面，但是术语“系统”不限于特定配置、类型、或数量的对象。在以上描述中提供了具体细节以提供对本文提供的实施例和示例的全面理解。然而，本领域普通技术人员将理解的是，可以在没有这些具体细节的情况下实践这些实施例。为了解释清楚，在一些情况下，本文的技术可以被呈现为包括包含如下的功能块的单独的功能块，这些功能块包括设备、设备组件、以软件体现的方法中的步骤或例程、或者硬件和软件的组合。除了在各图中所示和/或本文描述的组件之外，还可以使用额外的组件。例如，电路、系统、网络、过程和其它组件可以以框图形式被示为组件，以便不会在不必要的细节上模糊这些实施例。在其它情况下，公知的电路、过程、算法、结构和技术可以被示为不具有不必要的细节，以便避免模糊这些实施例。上文可以将各个实施例描述为过程或方法，该过程或方法被描绘为流程图、流程示意图、数据流程图、结构图或框图。虽然流程图可以将操作描述为顺序的过程，但是这些操作中的许多操作可以并行或并发地执行。另外，可以重新排列操作的次序。过程在其操作完成时被终止，但是可以具有未被包括在图中的额外步骤。过程可以对应于方法、函数、进程、子例程、子程序等。当过程对应于函数时，其终止可以对应于该函数返回到调用函数或主函数。根据上述示例的过程和方法可以使用计算机可执行指令来实现，计算机可执行指令被存储在计算机可读介质中或者以其它方式可从计算机可读介质得到。这样的指令可以包括例如指令或数据，指令或数据使得通用计算机、专用计算机或处理设备执行特定功能或特定的一组功能或者以其它方式将其配置为执行特定功能或特定的一组功能。可以通过网络访问所使用的计算机资源的部分。计算机可执行指令可以是例如二进制文件、诸如汇编语言的中间格式指令、固件、源代码等。术语“计算机可读介质”包括但不限于便携式或非便携式存储设备、光学存储设备以及能够存储、包含或携带指令和/或数据的各种其它介质。计算机可读介质可以包括可以在其中存储数据的非暂时性介质，并且不包括无线地或在有线连接上传播的载波和/或暂时性电子信号。非暂时性介质的示例可以包括但不限于磁盘或磁带、光学存储介质、存储器或存储器设备、磁盘或光盘、闪存、提供有非易失性存储器的USB设备、联网的存储设备、压缩光盘或数字多功能光盘、其任何适当的组合等等。计算机可读介质可以具有存储在其上的代码和/或机器可执行指令，其可以表示过程、函数、子程序、程序、例程、子例程、模块、软件包、类、或指令、数据结构或程序语句的任何组合。代码段可以通过传递和/或接收信息、数据、自变量、参数或存储器内容来耦合到另一代码段或硬件电路。信息、自变量、参数、数据等可以经由包括存储器共享、消息传递、令牌传递、网络传输等的任何适当的手段来传递、转发或发送。在一些实施例中，计算机可读存储设备、介质和存储器可以包括包含比特流等的电缆或无线信号。然而，当提及时，非暂时性计算机可读存储介质明确地不包括诸如能量、载波信号、电磁波和信号本身的介质。实现根据这些公开内容的过程和方法的设备可以包括硬件、软件、固件、中间件、微代码、硬件描述语言或其任何组合，并且可以采用各种各样的形状因子中的任何形状因子。当在软件、固件、中间件或微代码中实现时，用于执行必要任务的程序代码或代码段可以被存储在计算机可读或机器可读介质中。处理器可以执行必要任务。形状因子的典型示例包括膝上型计算机、智能电话、移动电话、平板设备或其它小型形状因子的个人计算机、个人数字助理、机架式设备、独立设备等。本文描述的功能还可以体现在外围设备或插件卡中。通过另外的举例，这样的功能还可以在单个设备中执行的不同芯片或不同过程之间的电路板上实现。指令、用于传送这样的指令的介质、用于执行它们的计算资源以及用于支持这样的计算资源的其它结构是用于提供在本公开内容中描述的功能的示例单元。在前面的描述中，参考本申请的特定实施例描述了本申请的各方面，但是本领域技术人员将认识到，本申请不限于此。因此，尽管本文已经详细描述了本申请的说明性实施例，但是应理解的是，可以以其它方式不同地体现和采用本发明构思，并且所附的权利要求旨在被解释为包括这样的变型，除了由现有技术限制的变型。可以单独地或共同地使用上述应用的各个特征和方面。此外，在不脱离本说明书的更宽泛的精神和范围的情况下，实施例可以在除了本文描述的环境和应用之外的任何数量的环境和应用中使用。因此，说明书和附图被认为是说明性的而不是限制性的。为了说明的目的，以特定次序描述了方法。应当明白的是，在替代实施例中，可以以与所描述的次序不同的次序来执行所述方法。本领域普通技术人员将明白的是，在不脱离本说明书的范围的情况下，本文中使用的小于和大于符号或术语可以分别用小于或等于以及大于或等于符号来替换。在将组件描述为“被配置为”执行某些操作的情况下，这样的配置可以例如通过以下方式来实现：将电路或其它硬件设计为执行该操作，将可编程电路编程为执行该操作，或其任何组合。短语“耦合到”指代直接或间接地物理连接到另一组件的任何组件、和/或直接或间接地与另一组件通信的任何组件。记载集合中的“至少一个”和/或集合中的“一个或多个”的权利要求语言或其它语言指示该集合中的一个成员或者该集合中的多个成员满足该权利要求。例如，记载“A和B中的至少一个”或“A或B中的至少一个”的权利要求语言意指A、B、或者A和B。在另一示例中，记载“A、B和C中的至少一个”或“A、B或C中的至少一个”的权利要求语言意指A、B、C、或A和B、或A和C、或B和C、或A和B和C。语言集合中的“至少一个”和/或集合中的“一个或多个”不将该集合限制为在该集合中列出的项目。例如，记载“A和B中的至少一个”或“A或B中的至少一个”的权利要求语言可以意指A、B、或A和B，并且可以另外包括在A和B的集合中未列出的项。结合本文公开的实施例描述的各种说明性的逻辑框、模块、电路和算法步骤可以被实现为电子硬件、计算机软件、固件或其组合。为了清楚地说明硬件和软件的这种可互换性，上文已经对各种说明性的组件、框、模块、电路和步骤围绕其功能进行了总体描述。这样的功能被实现为硬件还是软件取决于特定的应用和被施加在整个系统上的设计约束。熟练的技术人员可以针对每种特定应用以不同的方式来实现所描述的功能，但是这样的实现方式决策不应当被解释为导致脱离本申请的范围。本文描述的技术还可以在电子硬件、计算机软件、固件或其任何组合中实现。这样的技术可以在各种设备中的任何设备中实现，诸如通用计算机、无线通信设备手机或具有多种用途的集成电路设备。被描述为模块或组件的任何特征都可以在集成逻辑设备中一起实现，或者分别作为分立但是可互操作的逻辑设备来实现。如果在软件中实现，则所述技术可以至少部分地由计算机可读数据存储介质来实现，计算机可读数据存储介质包括程序代码，程序代码包括在被执行时执行上述方法中的一种或多种方法的指令。计算机可读数据存储介质可以形成计算机程序产品的一部分，计算机程序产品可以包括包装材料。计算机可读介质可以包括存储器或数据存储介质，诸如随机存取存储器)、只读存储器、非易失性随机存取存储器、电可擦除可编程只读存储器、闪存、磁或光数据存储介质等。另外或替代地，所述技术可以至少部分地由以指令或数据结构的形式携带或传送程序代码并且可以由计算机访问、读取和/或执行的计算机可读通信介质来实现。程序代码可以由处理器执行，处理器可以包括一个或多个处理器，诸如一个或多个数字信号处理器、通用微处理器、专用集成电路、现场可编程逻辑阵列或其它等效的集成或分立逻辑电路。这样的处理器可以被配置为执行在本公开内容中描述的任何技术。通用处理器可以是微处理器，但是在替代方式中，处理器可以是任何常规的处理器、控制器、微控制器或状态机。处理器也可以被实现为计算设备的组合，例如，DSP和微处理器的组合、多个微处理器、一个或多个微处理器与DSP核的结合、或任何其它这样的配置。因此，如本文所使用的术语“处理器”可以指代任何前述结构、前述结构的任何组合、或适于实现本文描述的技术的任何其它结构或装置。本公开内容的说明性方面如下：方面1：一种用于对视频数据进行编码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。方面2：根据权利要求1所述的装置，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的。方面3：根据权利要求2所述的装置，其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。方面4：根据权利要求3所述的装置，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。方面5：根据权利要求3或4中任何项所述的装置，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据，以及关于所述可单独熵译码包的信息。方面6：根据权利要求5所述的装置，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。方面7：根据权利要求1至6中任何项所述的装置，其中，所述可单独熵译码包中的最大包与最小包之间的差小于门限差。方面8：根据权利要求1至7中任何项所述的装置，其中，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。方面9：根据权利要求8所述的装置，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后一个包的集合来更新所述堆栈。方面10：根据权利要求9所述的装置，其中，所述堆栈还是利用通用码字集来初始化的。方面11：根据权利要求9或10中任何项所述的装置，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。方面12：根据权利要求1至11中任何项所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包中的包定义为前向包或反向包；其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包。方面13：根据权利要求12所述的装置，其中，当所述可单独熵译码包的数量为偶数时，所述索引包括N/2个入口点，并且当所述可单独熵译码包的数量为奇数时，所述索引包括+1个入口点。方面14：根据权利要求12或13中任何项所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包存储在所述存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。方面15：根据权利要求14所述的装置，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。方面16：根据权利要求1至15中任何项所述的装置，其中，所述索引使用在对经编码的比特流中的所述视频数据序列的编码之后识别的入口点来标识所述可单独熵译码包。方面17：根据权利要求1至16中任何项所述的装置，其中，所述索引标识所述可单独熵译码包，包括标识从所述视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置。方面18：根据权利要求1至17中任何项所述的装置，还包括：发射机，其耦合到所述一个或多个处理器并且被配置为发送使用所述索引和所述可单独熵译码包进行熵编码的所述视频数据序列。方面19：根据权利要求1至18中任何项所述的装置，还包括：显示器，其耦合到所述一个或多个处理器并且被配置为显示所述视频数据序列的图像。方面20：一种对视频数据进行编码的方法，包括：获得视频数据序列；识别所述视频数据序列中的与用于可并行熵译码视频数据序列的可单独熵译码包的入口点相关联的位置；生成所述可并行熵译码视频数据序列；以及生成用于所述可并行熵译码视频数据序列的索引，所述索引标识所述可并行熵译码视频数据序列内的所述可单独熵译码包。方面21：根据权利要求20所述的装置，其中，所述入口点是至少部分地通过执行对所述视频数据序列的对分枚举来识别的。方面22：根据权利要求21所述的装置，其中，所述可并行熵译码视频数据序列是至少部分地通过执行对分搜索来生成的，所述对分搜索将与所述可单独熵译码包相关联的信息跟来自所述视频数据序列的由所述位置确定的数据进行编码以生成所述可单独熵译码包。方面23：根据权利要求22所述的装置，其中，为了执行所述对分枚举，所述一个或多个处理器被配置为：对分所述视频数据序列以识别所述位置中的初始位置，其中，所述初始位置与第一入口点和被所述初始位置划分的子序列相关联；以及对分子序列的层级以识别所述位置的剩余部分。方面24：根据权利要求22或23中任何项所述的装置，其中，所述可单独熵译码包包括来自所述视频数据序列的由所述位置确定的对应数据，以及关于所述可单独熵译码包的信息。方面25：根据权利要求24所述的装置，其中，关于所述可单独熵译码包的信息是关于来自所述视频数据序列的所述对应数据的二进制表示的尺度的信息。方面26：根据权利要求20至25中任何项所述的装置，其中，所述可单独熵译码包中的最大包与最小包之间的差小于门限差。方面27：根据权利要求20至26中任何项所述的装置，其中，为了生成所述可并行熵译码序列，所述一个或多个处理器被配置为：识别多个包以定义从具有在最小包大小和最大包大小之间的大小的第一包到最后的包的可单独熵译码包的集合，其中，所述多个包的包大小的总和为所述可并行熵译码序列的大小。方面28：根据权利要求27所述的装置，其中，为了生成所述可并行熵译码视频数据序列，所述一个或多个处理器被配置为：初始化所述存储器中的堆栈，所述堆栈包括多个包和用于所述多个包的对应数据的二进制表示的尺度；以及至少部分地通过执行以下操作来生成所述可并行熵译码视频数据序列，直到所述堆栈为空：分析所述堆栈以取回当前间隔集；通过将用于包的新索引定义为所述当前间隔集的平均值来选择所述包；使用对分来使用所述当前间隔集的所述平均值对所述包的比特进行编码；当所述包不是所述第一包时，利用从所述第一包到所述包的集合来更新所述堆栈；以及当使用的所述包不是所述最后的包时，利用从所述包到所述最后的包的集合来更新所述堆栈。方面29：根据权利要求28所述的装置，其中，所述堆栈还是利用通用码字集来初始化的。方面30：根据权利要求28或29中任何项所述的装置，其中，为了使用对分来对所述包的所述比特进行编码，所述一个或多个处理器被配置为：将第一变量初始化为所述最小包大小，将第二变量初始化为所述最大包大小，并且将第三变量初始化为所述最小包大小和所述最大包大小的平均值；访问所述包的二进制表示的尺度的值；当所述第三变量小于或等于所述值时，对第一比特进行编码；当所述第三变量大于所述值时，对第二比特进行编码；以及将所述第三变量更新为所述第一变量和所述第二变量的新平均值。方面31：根据权利要求20至30中任何项所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包中的包定义为前向包或反向包；其中，对应的包对包括使用所述索引中的单个共享入口点定义的对应的前向包和对应的反向包。方面32：根据权利要求31所述的装置，其中，当所述可单独熵译码包的数量为偶数时，所述索引包括N/2个入口点，并且当所述可单独熵译码包的数量为奇数时，所述索引包括+1个入口点。方面33：根据权利要求31或32中任何项所述的装置，其中，所述一个或多个处理器还被配置为：将所述可单独熵译码包存储在所述存储器中，所述可单独熵译码包被构造为具有包括所述索引和多个部分的文件结构的文件，每个部分包括多个块，每个块包括多个区段，并且每个区段包括用于所述对应的包对的所述对应的前向包和所述对应的反向包的前向包结构和反向包结构。方面34：根据权利要求33所述的装置，其中，所述一个或多个处理器还被配置为：发送包括所述索引和所述可单独熵译码包的所述文件。方面35：根据权利要求20至34中任何项所述的装置，其中，所述索引使用在对经编码的比特流中的所述视频数据序列的编码之后识别的入口点来标识所述可单独熵译码包。方面36：根据权利要求20至35中任何项所述的装置，其中，所述索引标识所述可单独熵译码包，包括标识从所述视频数据序列生成的经编码的视频比特流中的每个包的比特长度和位置。方面37：根据权利要求20至36中任何项所述的装置，还包括：发射机，其耦合到所述一个或多个处理器并且被配置为发送使用所述索引和所述可单独熵译码包进行熵编码的所述视频数据序列。方面38：根据权利要求20至37中任何项所述的装置，还包括：显示器，其耦合到所述一个或多个处理器并且被配置为显示所述视频数据序列的图像。方面39：一种具有存储在其上的指令的非暂时性计算机可读介质，所述指令在由一个或多个处理器执行时使得所述一个或多个处理器执行根据方面1至38中任何项所述的操作。方面40：一种用于对视频数据进行编码的装置，包括用于执行根据方面1至38中任何项所述的操作的单元。方面41、一种用于对视频数据进行解码的装置，所述装置包括：存储器；以及耦合到所述存储器的一个或多个处理器，所述一个或多个处理器被配置为：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。方面42、一种计算机实现的方法，包括：获得包括索引和可并行熵译码视频数据序列的经编码的视频数据流，所述可并行熵译码视频数据序列包括使用所述索引可识别的可单独熵译码包；对用于与所述可单独熵译码包相关联的数据的所述索引进行解码；使用来自所述索引的所述数据来从所述经编码的视频数据流中识别所述可单独熵译码包；以及使用根据所述索引解码的所述数据来从所述经编码的视频数据流中并行地解码所述可单独熵译码包。方面43：一种具有存储在其上的指令的非暂时性计算机可读介质，所述指令在由一个或多个处理器执行时使得所述一个或多个处理器执行根据方面1至38、41和42中任何项所述的操作。方面44：一种用于对视频数据进行编码的装置，包括用于执行根据方面1至38、41和42中任何项所述的操作的单元。
