标题title
数据处理方法、装置及电子设备
摘要abst
本申请公开了一种数据处理方法、装置及电子设备，涉及计算机技术领域。方法包括：获取关联数据请求；在关联数据请求中提取虚拟机标识；基于虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。本申请首先获取关联数据请求，这里的关联数据请求通常包括携带云网络Overlay与Underlay关联数据的带内遥测报文。进而在关联数据请求中提取虚拟机标识；基于虚拟机标识，利用哈希表和有向图这两种数据结构来存储Overlay与Underlay的关联数据。通过将云计算网络中Overlay与Underlay关联数据存储到哈希表和有向图中，不仅能够完整地记录下关联数据，同时可以避免数据的冗余存储，减少存储空间的消耗。
权利要求书clms
1.一种数据处理方法，其特征在于，包括：获取关联数据请求；在所述关联数据请求中提取虚拟机标识；基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。2.根据权利要求1所述的方法，其特征在于，所述基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储，包括：基于所述虚拟机标识，在哈希表中查找是否存在所述虚拟机的存储记录；若否，则将所述虚拟机标识作为关键字在哈希表中创建新表项，并确定对应的Underlay链路的源节点和第一路径序列号；利用有向图，根据所述源节点和所述第一路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点；若是，则在哈希表中对所述虚拟机标识对应的表项创建新路径，并确定对应的Underlay链路的源节点和第二路径序列号；利用有向图，通过所述源节点和第二所述路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。3.根据权利要求1所述的方法，其特征在于，所述方法还包括：在接收到查询数据请求后，确定查询类型；根据所述查询类型，在哈希表和有向图中搜索目标信息。4.根据权利要求3所述的方法，其特征在于，所述查询类型包括Overlay层的虚拟机标识查询类型、Underlay层的设备标识查询类型和Underlay层链路的路径序列号查询类型；所述目标信息包括Overlay层的虚拟机标识和/或Underlay链路信息；根据所述查询类型，在哈希表和有向图中搜索目标信息，包括：获取Overlay层的虚拟机标识，在哈希表和有向图中搜索所述虚拟机标识对应的至少一条Underlay链路信息；或，获取Underlay层的设备标识，在哈希表和有向图中搜索所述设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识；或，获取Underlay层链路的路径序列号，在哈希表和有向图中搜索所述路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。5.根据权利要求4所述的方法，其特征在于，所述获取Overlay层的虚拟机标识，在哈希表和有向图中搜索所述虚拟机标识对应的至少一条Underlay链路信息，包括：基于所述Overlay层的虚拟机标识，在哈希表中搜索所述虚拟机标识对应的Underlay链路的数量、路径序列号以及源节点；利用有向图从所述源节点出发，对每一条Underlay链路上的所有节点依次遍历，并将遍历的链路信息作为所述目标信息返回，直至下一节点是虚拟机节点。6.根据权利要求4所述的方法，其特征在于，所述获取Underlay层的设备标识，在哈希表和有向图中搜索所述设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于所述Underlay层的设备标识，在有向图中找到所述设备标识对应的节点，并确定经过所述节点的所有Underlay链路的链路信息；在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识；将经过所述节点的所有Underlay链路的链路信息和每一条Underlay链路对应的Overlay虚拟机标识作为所述目标信息返回。7.根据权利要求4所述的方法，其特征在于，所述获取Underlay层链路的路径序列号，在哈希表和有向图中搜索所述路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于Underlay层链路的路径序列号，在哈希表中查找对应的Overlay层的虚拟机标识；利用所述虚拟机标识，确定所述虚拟机标识在有向图中的源节点；在有向图中从所述源节点进行遍历，得到所述源节点对应的每一条Underlay链路的链路信息；将所述虚拟机标识和每一条Underlay链路的链路信息作为所述目标信息返回。8.根据权利要求1所述的方法，其特征在于，所述方法还包括：在获取到更新数据请求后，基于待更新的Underlay链路的链路信息，在有向图中对所述待更新的Underlay链路进行更新；或，获取节点状态发生改变的Underlay节点，对所述Underlay节点与对应的虚拟机标识的关联关系进行更新。9.根据权利要求8所述的方法，其特征在于，所述获取节点状态发生改变的Underlay节点，对所述Underlay节点与对应的虚拟机标识的关联关系进行更新，包括：在有向图中获取节点状态发生改变的Underlay节点对应的全部Underlay链路的路径序列号；根据所述路径序列号，在有向图中删除每一条Underlay链路对应的链路信息；从哈希表中获取Overlay层的虚拟机标识，并基于所述虚拟机标识获取当前对应的Underlay链路对应的链路信息；将当前对应的Underlay链路对应的链路信息存储至有向图中。10.一种数据处理装置，其特征在于，包括：获取单元，被配置为获取关联数据请求；提取单元，被配置为在所述关联数据请求中提取虚拟机标识；处理单元，被配置为基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。11.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1至9中任一项所述的方法。12.一种电子设备，包括存储介质、处理器及存储在存储介质上并可在处理器上运行的计算机程序，其特征在于，所述处理器执行所述计算机程序时实现权利要求1至9中任一项所述的方法。
说明书desc
技术领域本申请涉及计算机技术领域，具体涉及一种数据处理方法、装置及电子设备。背景技术在目前的云计算网络中，Overlay要比Underlay复杂更加复杂。在虚拟大二层网络中，Underlay是底层承载网，Overlay是基于底层网络Underlay互联互通的基础上构建的虚拟网络。在Underlay内每个物理服务器可以托管数百个虚拟机和容器，它们都是Overlay内一些路径的潜在端点。因此，将Underlay和Overlay进行数据关联十分具有挑战性。另一方面，这些Overlay端点之间的服务质量QoS对网络的运维与管控十分重要。一旦监测到或者用户上报的Overlay网络拥塞和静默故障等信息，管理员可通Overlay和Underlay的关联关系来迅速定位Underlay故障的根本原因。因此，当前亟需一种将云计算网络Overlay与Underlay的数据关联处理的方法。发明内容有鉴于此，本申请提供了一种数据处理方法、装置及电子设备，主要目的在于提供了一种将云计算网络Overlay与Underlay的数据关联处理的方法。第一方面，本申请提供了一种数据处理方法，包括：获取关联数据请求；在所述关联数据请求中提取虚拟机标识；基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。可选地，所述基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储，包括：基于所述虚拟机标识，在哈希表中查找是否存在所述虚拟机的存储记录；若否，则将所述虚拟机标识作为关键字在哈希表中创建新表项，并确定对应的Underlay链路的源节点和第一路径序列号；利用有向图，根据所述源节点和所述第一路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点；若是，则在哈希表中对所述虚拟机标识对应的表项创建新路径，并确定对应的Underlay链路的源节点和第二路径序列号；利用有向图，通过所述源节点和第二所述路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。可选地，所述方法还包括：在接收到查询数据请求后，确定查询类型；根据所述查询类型，在哈希表和有向图中搜索目标信息。可选地，所述查询类型包括Overlay层的虚拟机标识查询类型、Underlay层的设备标识查询类型和Underlay层链路的路径序列号查询类型；所述目标信息包括Overlay层的虚拟机标识和/或Underlay链路信息；根据所述查询类型，在哈希表和有向图中搜索目标信息，包括：获取Overlay层的虚拟机标识，在哈希表和有向图中搜索所述虚拟机标识对应的至少一条Underlay链路信息；或，获取Underlay层的设备标识，在哈希表和有向图中搜索所述设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识；或，获取Underlay层链路的路径序列号，在哈希表和有向图中搜索所述路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。可选地，所述获取Overlay层的虚拟机标识，在哈希表和有向图中搜索所述虚拟机标识对应的至少一条Underlay链路信息，包括：基于所述Overlay层的虚拟机标识，在哈希表中搜索所述虚拟机标识对应的Underlay链路的数量、路径序列号以及源节点；利用有向图从所述源节点出发，对每一条Underlay链路上的所有节点依次遍历，并将遍历的链路信息作为所述目标信息返回，直至下一节点是虚拟机节点。可选地，所述获取Underlay层的设备标识，在哈希表和有向图中搜索所述设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于所述Underlay层的设备标识，在有向图中找到所述设备标识对应的节点，并确定经过所述节点的所有Underlay链路的链路信息；在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识；将经过所述节点的所有Underlay链路的链路信息和每一条Underlay链路对应的Overlay虚拟机标识作为所述目标信息返回。可选地，所述获取Underlay层链路的路径序列号，在哈希表和有向图中搜索所述路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于Underlay层链路的路径序列号，在哈希表中查找对应的Overlay层的虚拟机标识；利用所述虚拟机标识，确定所述虚拟机标识在有向图中的源节点；在有向图中从所述源节点进行遍历，得到所述源节点对应的每一条Underlay链路的链路信息；将所述虚拟机标识和每一条Underlay链路的链路信息作为所述目标信息返回。可选地，所述方法还包括：在获取到更新数据请求后，基于待更新的Underlay链路的链路信息，在有向图中对所述待更新的Underlay链路进行更新；或，获取节点状态发生改变的Underlay节点，对所述Underlay节点与对应的虚拟机标识的关联关系进行更新。可选地，所述获取节点状态发生改变的Underlay节点，对所述Underlay节点与对应的虚拟机标识的关联关系进行更新，包括：在有向图中获取节点状态发生改变的Underlay节点对应的全部Underlay链路的路径序列号；根据所述路径序列号，在有向图中删除每一条Underlay链路对应的链路信息；从哈希表中获取Overlay层的虚拟机标识，并基于所述虚拟机标识获取当前对应的Underlay链路对应的链路信息；将当前对应的Underlay链路对应的链路信息存储至有向图中。第二方面，本申请提供了一种数据处理装置，包括：获取单元，被配置为获取关联数据请求；提取单元，被配置为在所述关联数据请求中提取虚拟机标识；处理单元，被配置为基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。第三方面，本申请提供了一种计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时实现第一方面所述的数据处理方法。第四方面，本申请提供了一种电子设备，包括存储介质、处理器及存储在存储介质上并可在处理器上运行的计算机程序，所述处理器执行所述计算机程序时实现第一方面所述的数据处理方法。借由上述技术方案，本申请提供的一种数据处理方法、装置及电子设备，首先获取关联数据请求，这里的关联数据请求通常包括携带云网络Overlay与Underlay关联数据的带内遥测报文。进而，在关联数据请求中提取虚拟机标识；基于虚拟机标识，利用哈希表和有向图这两种数据结构来存储Overlay与Underlay的关联数据。通过将云计算网络中Overlay与Underlay关联数据存储到哈希表和有向图中，不仅能够完整地记录下关联数据，同时可以避免数据的冗余存储、减少存储空间的消耗。上述说明仅是本申请技术方案的概述，为了能够更清楚了解本申请的技术手段，而可依照说明书的内容予以实施，并且为了让本申请的上述和其它目的、特征和优点能够更明显易懂，以下特举本申请的具体实施方式。附图说明此处的附图被并入说明书中并构成本说明书的一部分，示出了符合本申请的实施例，并与说明书一起用于解释本申请的原理。为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，对于本领域普通技术人员而言，在不付出创造性劳动性的前提下，还可以根据这些附图获得其他的附图。图1示出了本申请实施例提供的一种数据处理方法的流程示意图；图2示出了本申请实施例提供的一种数据处理方法的系统架构示意图；图3示出了本申请实施例提供的一种哈希表在数据处理方法中的示意图；图4示出了本申请实施例提供的一种有向图在数据处理方法中的示意图；图5示出了本申请实施例提供的另一种数据处理方法的流程示意图；图6示出了本申请实施例提供的另一种数据处理方法的流程示意图；图7示出了本申请实施例提供的一种数据处理装置的结构示意图。具体实施方式为了能够更清楚地理解本申请的上述目的、特征和优点，下面将对本申请的方案进行进一步描述。需要说明的是，在不冲突的情况下，本申请的实施例及实施例中的特征可以相互组合。本实施例所提出的一种数据处理方法，应用于一种数据处理装置或电子设备上，该装置或电子设备可以安装或集成于一些带内遥测服务器设备或系统中，在运行时可以执行如下述提到的任一种数据处理方法。本实施例提供了一种可编程交换机的Overlay与Underlay包括关联数据存储、查询和更新的数据处理方法，如图1所示，该方法包括：S101、获取关联数据请求。首先，本实施例所提出的数据处理方法一般是基于带内遥测服务器端，能够与可编程交换机通过不同功能的请求和指令的方式进行通信。在带内网络遥测架构中，交换设备转发处理携带遥测指令的数据包。当遥测数据包经过该设备时，这些遥测指令告诉具备网络遥测功能的网络设备应该收集并写入何种网络状态信息。在本实施例中，关联数据指令中通常还包括云网络Overlay与Underlay关联数据，以及虚拟机标识以及节点信息等。S102、在关联数据请求中提取虚拟机标识。在关联数据请求中提取出虚拟机标识，其中虚拟机标识通常选用一对Overlay层面的虚拟机的IP地址。因为一对虚拟机间可能会关联多条Underlay链路。S103、基于虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。其中，哈希表以云计算网络中Overlay层面的一对虚拟机IP地址为关键字，关联的数据包括这对虚拟机对应的所有Underlay链路的路径序列号和每条Underlay链路在有向图中的源节点。有向图则采用邻接表的方法进行实现，邻接表中的每个节点表示单个Underlay层面的设备，有向图中还记录了此节点的邻居节点，以及经过它和邻居节点的链路状态信息。注意，对于Underlay链路上的最后一个节点，其邻居节点是Overlay层面的虚拟机地址。本实施例在接收到携带云网络Overlay与Underlay关联数据的带内遥测报文后，用哈希表和有向图这两种数据结构来存储Overlay与Underlay的关联数据。首先获取关联数据请求，这里的关联数据请求通常包括携带云网络Overlay与Underlay关联数据的带内遥测报文。进而，在关联数据请求中提取虚拟机标识；基于虚拟机标识，利用哈希表和有向图这两种数据结构来存储Overlay与Underlay的关联数据。通过哈希表的方式进行关联数据的存储的优势在于，由于负载匀衡、冗余备份或高可靠等功能的存在，Overlay层面的同一对虚拟机通信时可能存在多条不同的Underlay链路，哈希表用路径序列号进行标识不同链路。源节点是拿到路径序列号之后到有向图中获取完整Underlay链路信息时的入口；由于不同Underlay链路的入口可能不同，因此要记录每条Underlay链路的源节点。而通过有向图的方式，以节点表示单个Underlay层面的设备，且还记录了此节点的邻居节点，以及经过它和邻居节点的链路状态信息，使得链路信息更加完整。通过将云计算网络中Overlay与Underlay关联数据存储到哈希表和有向图中，不仅能够完整地记录下关联数据，同时可以避免数据的冗余存储、减少存储空间的消耗。可选地，基于虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储，包括：基于虚拟机标识，在哈希表中查找是否存在虚拟机的存储记录；若否，则将虚拟机标识作为关键字在哈希表中创建新表项，并确定对应的Underlay链路的源节点和第一路径序列号；利用有向图，根据源节点和第一路径序列号依次确定下一节点，且在经过下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点；若是，则在哈希表中对虚拟机标识对应的表项创建新路径，并确定对应的Underlay链路的源节点和第二路径序列号；利用有向图，通过源节点和第二路径序列号依次确定下一节点，且在经过下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。在本实施例中，介绍了关联数据通过哈希表和有向图进行存储时的过程。具体地，以虚拟机标识为一对Overlay层面的IP地址为例，首先查询该IP地址是否已经存在于哈希表，原因是需要存储的关联数据的虚拟机已经有其他的Underlay链路，本次存储的是新增的关联数据。若不存在，则说明当前哈希表中没有该对虚拟机的信息，则将该对Overlay层面的IP地址作为关键字，在哈希表中创建新表项，并给此条Underlay链路赋值一个全局唯一的路径序列号，链路的首节点即为此哈希表表项的源节点。进而利用有向图，通过源节点和第二路径序列号依次确定下一节点，且在经过下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。若哈希表中已存在该IP地址对应的虚拟机，则在哈希表中该IP地址对应的表项创建一条新路径，并确定对应的Underlay链路的源节点和第二路径序列号。源节点与上述的源节点是一致的，但第二路径序列号区别于第一路径序列号，表明该条Underlay链路虽然源节点相同，但与第一路径序列号对应的Underlay链路不同。进而利用有向图，通过源节点和第二路径序列号依次确定下一节点，且在经过下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。可选地，方法还包括：在接收到查询数据请求后，确定查询类型；根据查询类型，在哈希表和有向图中搜索目标信息。在本实施例中，在接收到云计算网络Overlay或Underlay数据的查询请求后，通过查找哈希表和有向图后返回结果。其中，在查询云计算网络中Overlay与Underlay的关联数据时，既支持给定云计算网络Overlay虚拟机的前提下获得Underlay链路的数据，也支持在给定Underlay链路或者设备的前提下获得Overlay虚拟机的数据。可选地，查询类型包括Overlay层的虚拟机标识查询类型、Underlay层的设备标识查询类型和Underlay层链路的路径序列号查询类型；目标信息包括Overlay层的虚拟机标识和/或Underlay链路信息；根据查询类型，在哈希表和有向图中搜索目标信息，包括：获取Overlay层的虚拟机标识，在哈希表和有向图中搜索虚拟机标识对应的至少一条Underlay链路信息；或，获取Underlay层的设备标识，在哈希表和有向图中搜索设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识；或，获取Underlay层链路的路径序列号，在哈希表和有向图中搜索路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。在本实施例中，Overlay层的虚拟机标识、Underlay层的设备标识和Underlay层链路的路径序列号，给定一个信息就可以通过哈希表和有向图的方式查询到另外两个的信息。具体地，可以通过虚拟机标识，在哈希表和有向图中搜索到对应的至少一条链路信息。或根据Underlay层的设备标识，在哈希表和有向图中搜索设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。或根据Underlay层链路的路径序列号，在哈希表和有向图中搜索路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。可选地，获取Overlay层的虚拟机标识，在哈希表和有向图中搜索虚拟机标识对应的至少一条Underlay链路信息，包括：基于Overlay层的虚拟机标识，在哈希表中搜索虚拟机标识对应的Underlay链路的数量、路径序列号以及源节点；利用有向图从源节点出发，对每一条Underlay链路上的所有节点依次遍历，并将遍历的链路信息作为目标信息返回，直至下一节点是虚拟机节点。在本实施例中，具体地基于Overlay层的一对虚拟机的IP地址，从哈希表中搜索对应的Underlay链路的数量、路径序列号以及源节点；再利用有向图从该源节点触发，对每一条Underlay链路上的所有节点依次遍历，从而将遍历的链路信息作为目标信息返回，直至下一节点是虚拟机节点。可选地，获取Underlay层的设备标识，在哈希表和有向图中搜索设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于Underlay层的设备标识，在有向图中找到设备标识对应的节点，并确定经过节点的所有Underlay链路的链路信息；在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识；将经过节点的所有Underlay链路的链路信息和每一条Underlay链路对应的Overlay虚拟机标识作为目标信息返回。体现了上述中给定三者中一个信息就可以通过哈希表和有向图的方式查询到另外两个的信息，提高了查询效率。在本实施例中，基于Underlay层的设备标识，在有向图中找到设备标识对应的节点，并确定经过节点的所有Underlay链路的链路信息；在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识；最后将经过节点的所有Underlay链路的链路信息和每一条Underlay链路对应的Overlay虚拟机标识作为目标信息返回。可选地，获取Underlay层链路的路径序列号，在哈希表和有向图中搜索路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识，包括：基于Underlay层链路的路径序列号，在哈希表中查找对应的Overlay层的虚拟机标识；利用虚拟机标识，确定虚拟机标识在有向图中的源节点；在有向图中从源节点进行遍历，得到源节点对应的每一条Underlay链路的链路信息；将虚拟机标识和每一条Underlay链路的链路信息作为目标信息返回。体现了上述中给定三者中一个信息就可以通过哈希表和有向图的方式查询到另外两个的信息，提高了查询效率。在本实施例中，通过Underlay层链路的路径序列号，可以在哈希表中查找对应的Overlay层的IP地址，进而确定虚拟机标识在有向图中的源节点；在有向图中从源节点进行遍历，得到源节点对应的每一条Underlay链路的链路信息；将虚拟机标识和每一条Underlay链路的链路信息作为目标信息返回。体现了上述中给定三者中一个信息就可以通过哈希表和有向图的方式查询到另外两个的信息，提高了查询效率。需要说明的是，在查询的过程中，结合哈希表和有向图两种数据结构的存储，本实施例既可以给定Overlay虚拟机的前提下获得一条或多条Underlay链路信息，也可以给定Underlay链路或设备时获得其上所承载的全部Overlay虚拟机的信息；然而，目前现有的存储方案中仅能够在给定云计算网络中Overlay虚拟机地址的前提下得到对应的单条Underlay链路信息，无法从Underlay出发得到Overlay的数据，查询功能十分有限。可选地，方法还包括：在获取到更新数据请求后，基于待更新的Underlay链路的链路信息，在有向图中对待更新的Underlay链路进行更新；或，获取节点状态发生改变的Underlay节点，对Underlay节点与对应的虚拟机标识的关联关系进行更新。在本实施例中，对于数据更新包括两种方式，一种是当Overlay层面发生变化时更新对应的Underlay数据，以及Underlay层面发生变化时更新对应的Overlay数据。而现有的数据存储方法没有考虑到云计算网络中Overlay与Underlay关联数据的多变性，即认定Overlay与Underlay关联数据是一成不变的。由于云计算网络内在的弹性收缩、资源共享等属性天生会导致Overlay和Underlay频繁变化。相应地，云计算网络中Overlay与Underlay的关联数据需要被快速地更新。可选地，获取节点状态发生改变的Underlay节点，对Underlay节点与对应的虚拟机标识的关联关系进行更新，包括：在有向图中获取节点状态发生改变的Underlay节点对应的全部Underlay链路的路径序列号；根据路径序列号，在有向图中删除每一条Underlay链路对应的链路信息；从哈希表中获取Overlay层的虚拟机标识，并基于虚拟机标识获取当前对应的Underlay链路对应的链路信息；将当前对应的Underlay链路对应的链路信息存储至有向图中。在本实施例中，若是Underlay节点状态发生改变，则按先删除重新添加的方式更新。首先在有向图中获取节点状态发生改变的Underlay节点对应的全部Underlay链路的路径序列号，按路径序列号删除有向图中每一条Underlay链路对应的链路信息。再从哈希表中获取Overlay层的虚拟机标识，并基于虚拟机标识获取当前对应的Underlay链路对应的链路信息，将当前对应的Underlay链路对应的链路信息重新存储至有向图中，从而保证更新过程的实现。接下来对本实施例提出的数据处理方法，具体而言是一种Overlay与Underlay关联数据存储、查询和更新的方法结合系统框架进行更进一步的说明和讲解。首先如图2所示，示出了本申请实施例提供的一种数据处理方法的系统架构示意图。带内遥测服务器在接收到可编程交换机上送的遥测报文之后、存储、查询和更新云计算网络Overlay与Underlay关联数据的过程。具体地，在接收到携带云网络Overlay与Underlay关联数据的带内遥测报文后，用哈希表和有向图这两种数据结构来存储Overlay与Underlay的关联数据；在接收到云计算网络Overlay或Underlay数据的查询请求后，通过查找哈希表和有向图后返回结果；在接收到更新Overlay或Underlay关联数据的请求后，将哈希表和有向图中对应的部分进行更新。在本实施例中，哈希表的具体构成和数据存储结构方式如图3所示，哈希表以云计算网络中Overlay层面的一对虚拟机IP地址为关键字，关联的数据包括这对虚拟机对应的所有Underlay链路的路径序列号和每条Underlay链路在有向图中的源节点。由于负载匀衡、冗余备份或高可靠等功能的存在，Overlay层面的同一对虚拟机通信时可能存在多条不同的Underlay链路，哈希表用路径序列号进行标识不同链路。源节点是拿到路径序列号之后到有向图中获取完整Underlay链路信息时的入口；由于不同Underlay链路的入口可能不同，因此要记录每条Underlay链路的源节点。其中，VM1、VM2为一对虚拟机的虚拟机标识，通常选用IP地址作为虚拟机标识；p1、p2即代表VM1和VM2中间的两条Underlay链路；s1即为两条链路的源节点有向图的具体构成示意图如图4所示，有向图采用邻接表的方法进行实现，右侧的有向图被记录在左侧的表中。每个节点表示单个Underlay层面的设备，有向图中还记录了此节点的邻居节点，以及经过它和邻居节点的链路状态信息。注意，对于Underlay链路上的最后一个节点，其邻居节点是Overlay层面的虚拟机地址。进一步地，结合上述系统架构，将本实施例所提供的基于哈希表和有向图的数据处理方法进行说明。首先是存储方法、如图5所示，包括：S501，获取关联数据请求并提取出VM pairs。首先遥测监控系统获取关联数据请求时，还会同时收到需要关联的Overlay和Underlay数据，以及Overlay VM pairs。S502，基于VM pairs，判断哈希表中是否已经存在相关数据。若否，进入S5031；若是，进入S5032。首先以Overlay VM pairs为关键字在哈希表中进行查找，以判断哈希表和有向图中是否已记录此对虚拟机的相关数据。若不存在则进入S5031；若存在则进入S5032。S5031，利用VM pairs在哈希表中创建新表项，并确定对应链路的源节点和第一路径序列号。存储算法首先用此对Overlay虚拟机的IP地址作为关键字添加到哈希表中，同时给此条Underlay链路赋值一个全局唯一的路径序列号p1，并将首节点作为此哈希表项的源节点s1。至此，哈希表中已经记录了此对Overlay虚拟机和所关联的一条Underlay链路，其源节点和序列号分别为s1和p1。S5032，在哈希表中对VM pairs对应的表项创建新路径，并确定对应链路的源节点和第二路径序列号。存储算法在哈希表中此对Overlay虚拟机所对应的表项中添加一条Underlay新路径p2。首先，将路径序列号p2和其源节点s1记录在哈希表中。需要说明的是，同一对Overlay虚拟机所对应的多条Underlay链路的序列号是不同的，也即第一路径序列号和第二路径序列号代表的含义不同。S5041，根据源节点和第一路径序列号，在有向图中依次确定下一节点，并将链路信息在有向图和哈希表中进行存储。存储算法首先根据遥测报文中的Underlay Node-1来处理有向图中此Underlay路径p1所对应的源节点s1。具体来说，首先借助于有向图，在s1的邻居节点中找到路径p1下一跳所对应的邻居节点s2，然后在有向图中节点s1所对应的表项中添加如下信息s2:{＜p1,md-1＞}，这表示节点s1与s2是路径p1上先后经过的两个节点，经过节点s1时的Underlay链路信息记录在md-1中。按照这种方式，依次处理路径p1后续每一个节点，直至下一跳为虚拟机。S5042，根据源节点和第二路径序列号，在有向图中依次确定下一节点，并将链路信息在有向图和哈希表中进行存储。与S5041存储的方式相同，首先借助于有向图，在邻居节点中找到路径下一跳所对应的邻居节点，然后在有向图中该节点所对应的表项中添加相关信息经过该节点时的Underlay链路信息记录在md-1中。按照这种方式，依次处理第二路径后续每一个节点，直至下一跳为虚拟机。例如，节点s1在有向图中记录了如下信息：s2:{＜p1, md-1＞，＜p2, md-2＞}，这表明节点s1与s2之间存在序列号分为p1和p2的两条链路，这两条链路在经过节点s1时的链路状态被分别记录在md-1和md-2中。在本实施例中，存储算法的功能是将云计算网络中Overlay与Underlay关联数据存储到哈希表和有向图中。它不仅能够完整地记录下关联数据，这既包括处理单对Overlay虚拟机关联多条Underlay链路的情况，也包括单个Underlay设备关联多对Overlay虚拟机的情形，同时，它还能减少存储空间消耗。接下来是本实施例所提供的数据处理方法中的数据查询方法，如图6所示，包括：S601，获取数据查询请求。S602，根据数据查询请求，判断查询类型。其中，查询类型包括Overlay层的虚拟机标识查询类型、Underlay层的设备标识查询类型和Underlay层链路的路径序列号查询类型。也即是根据Overlay层的虚拟机标识、Underlay层的设备标识还是Underlay层链路的路径序列号进行查询。需要说明的是，由于上述在介绍系统架构时已经介绍了关联数据通过哈希表和有向图的数据存储结构，可以看出Overlay层的虚拟机标识、Underlay层的设备标识和Underlay层链路的路径序列号三者中，给定三者中其中一个信息就可以通过哈希表和有向图的方式查询到另外两个的信息。而一下步骤均是基于该思路的具体细化过程。S6031，若是Overlay层的虚拟机标识查询类型，则基于虚拟机标识，在哈希表中搜索对应的Underlay链路的数量、路径序列号以及源节点。进而进入S6041。S6041，利用有向图从源节点出发，对每一条Underlay链路上的所有节点依次遍历，得到每条链路的链路信息。查询算法首先以Overlay虚拟机的IP地址为关键字在哈希表中查找到此对虚拟机所对应的Underlay链路的数量、对应序列号、以及在有向图中的源节点。若存在有k条序列号分别为p1, p2, …, pk、源节点分别为s1, s2, …, sk的Underlay链路，查询算法首先查找第1条链路p1的数据：借助于有向图，首先在源节点s1中查询到sx:{＜p1, md-1＞}，这表明链路p1在经过s1之后的Underlay设备是sx，这两台设备通信时的状态信息记录在md-1中；然后，在第二个节点sx中查询链路p1的下一跳sy以及sx与sy通信时的状态信息md-2；接下来，按照这种方式处理链路p1上的每个节点，直至下一跳是虚拟机。S6032，若是Underlay层的设备标识查询类型，则基于设备标识，在有向图中找到对应的节点，并确定经过该节点的所有Underlay链路的链路信息。进而进入S6042。S6042，在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识。查询算法首先根据输入数据中所提供的Underlay节点的ID找到有向图中对应的节点，然后借助有向图获得经过此节点的所有Underlay链路的序列号p1,p2, …, pk，接下来，在哈希表中查找这k条Underlay链路各自所对应的Overlay虚拟机VM Pair-1, VMPair-2, …, VM Pair-k，并将它们作为返回数据。注意，由于哈希表的查找关键字为Overlay虚拟机的IP地址，因此，此处根据Underlay链路序列号查找Overlay虚拟机时需要采用遍历的方式。此外，此处虽然并未返回每条Underlay链路的数据，但是用户在获得每条链路对应的Overlay虚拟机地址后，可以通过查询方法获得特定链路的数据，这样做的目的主要是减少通信开销。S6033，若是Underlay层链路的路径序列号查询类型，则基于路径序列号，在哈希表中查找对应的Overlay层的虚拟机标识。进而进入S6043。S6043，利用虚拟机标识，在有向图中找到的源节点，并从源节点进行遍历，得到源节点对应的每一条Underlay链路的链路信息。查询算法首先根据Underlay链路序列号，在哈希表中执行遍历查找到对应的Overlay虚拟机VM Pair，将其作为返回数据的首部分；然后，以此对虚拟机的IP作为关键字在哈希表进行哈希，得到此Underlay链路的在有向图的源节点s1；最后，在有向图中从节点s1开始按照上述方式进行遍历，将所经过的每个节点的状态信息先后添加到VM Pair之后作为返回数据。额外说明的是，本实施例查询的目标数据也即是返回数据，这些数据包括但不限于Overlay层的虚拟机标识和/或Underlay链路信息、还可以包括每个节点的状态信息等，具体需要返回的数据可以根据实际情况进行确定。在本实施例中，查询云计算网络中Overlay与Underlay的关联数据时，既支持给定云计算网络Overlay虚拟机的前提下获得Underlay链路的数据，也支持在给定Underlay链路或者设备的前提下获得Overlay虚拟机的数据。而相关技术中的数据处理方法仅能够在给定云计算网络中Overlay虚拟机地址的前提下得到对应的单条Underlay链路信息，无法从Underlay出发得到Overlay的数据，查询功能十分有限。最后是本实施例所提供的数据处理方法中的数据更新方法，更新有两种情况，一是当Overlay层面发生变化时更新对应的Underlay数据，以及Underlay层面发生变化时更新对应的Overlay数据。具体地，更新算法第一种情况用于刷新一对Overlay虚拟机所对应的1条或多条Underlay链路的状态信息；第二种情况用于在Underlay链路某个节点发生变化时重新关联此节点上所承载的全部Overlay虚拟机。在第一种情况下，更新算法在接收到刷新Overlay虚拟机所关联Underlay链路数据的请求后，首先，要求遥测服务器发送带内遥测报文以获得这些Underlay链路的最新状态信息；然后，判断这些Underlay链路的节点是否发生改变：若未发生改变，则仅在有向图中更新此Underlay链路所对应节点的状态信息即可，若路径发生改变，则首先在有向图中将源链路的信息抹除，然后将新链路添加到有向图中。这样做的目的是做到增量式更新，即尽可能地复用原有信息，以加快更新速度。在第二种情况下，更新算法在知晓发生变化的Underlay节点后，执行删除旧数据，重增新数据的原则。首先在有向图中获得此节点所承载的全部Underlay链路的序列号，然后，对于每一条Underlay链路采取如下操作：根据Underlay链路序列号将此链路在有向图中的记录抹除；在哈希表中获得Overlay虚拟机的IP地址；通知遥测服务器重新测量此对Overlay虚拟机所对应的Underlay链路的最新数据；将新获得的Underlay链路数据记录到有向图中。在本实施例中，既支持刷新Overlay虚拟机所对应的1条或多条Underlay链路的数据，也支持在Underlay节点变化时刷新此节点上所承载的全部Overlay虚拟机的数据。然而，相关技术没有考虑到云计算网络中Overlay与Underlay关联数据的多变性，即认定Overlay与Underlay关联数据是一成不变的。由于云计算网络内在的弹性收缩、资源共享等属性天生会导致Overlay和Underlay频繁变化。因此，云计算网络中Overlay与Underlay的关联数据需要被快速地更新。通过上述实施例，提供了一种云计算网络中Overlay与Underlay关联数据存储、查询和更新的方法，不仅能完整记录云计算网络中Overlay与Underlay的关联方式，而且支持关联数据的快速查询与更新，能够为云计算网络的运维监控提供足够的依据，应用前景广阔。数据中心资源池的云化虽然满足了网络多路复用和云内资源隔离的需求，但极大地加剧了网络管控的难度。一旦监测到或者用户上报的Overlay或Underlay网络拥塞和静默故障等信息，管理员可凭借Overlay和Underlay的关联关系来迅速定位故障的根本原因。因此，本实施例提出的数据处理方法能够将云计算网络Overlay与Underlay的数据关联起来并支持快速查询与更新。进一步的，作为图1至图6所示方法的具体实现，本实施例提供了一种数据处理装置，如图7所示，该装置包括：获取单元71、提取单元72、处理单元73。获取单元71，被配置为获取关联数据请求；提取单元72，被配置为在所述关联数据请求中提取虚拟机标识；处理单元73，被配置为基于所述虚拟机标识，利用哈希表和有向图对Overlay和Underlay的关联数据进行存储。在具体的应用场景中，处理单元73，具体被配置为基于所述虚拟机标识，在哈希表中查找是否存在所述虚拟机的存储记录；若否，则将所述虚拟机标识作为关键字在哈希表中创建新表项，并确定对应的Underlay链路的源节点和第一路径序列号；利用有向图，根据所述源节点和所述第一路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点；若是，则在哈希表中对所述虚拟机标识对应的表项创建新路径，并确定对应的Underlay链路的源节点和第二路径序列号；利用有向图，通过所述源节点和第二所述路径序列号依次确定下一节点，且在经过所述下一节点时记录链路信息并存储至有向图和哈希表，直至确定的下一节点为虚拟机节点。在具体的应用场景中，处理单元73，具体还被配置为在接收到查询数据请求后，确定查询类型；根据所述查询类型，在哈希表和有向图中搜索目标信息。在具体的应用场景中，处理单元73，具体还被配置为获取Overlay层的虚拟机标识，在哈希表和有向图中搜索所述虚拟机标识对应的至少一条Underlay链路信息；或，获取Underlay层的设备标识，在哈希表和有向图中搜索所述设备标识对应的Underlay链路信息以及对应的Overlay层的虚拟机标识；或，获取Underlay层链路的路径序列号，在哈希表和有向图中搜索所述路径序列号对应的Underlay链路信息以及对应的Overlay层的虚拟机标识。在具体的应用场景中，处理单元73，具体还被配置为基于所述Overlay层的虚拟机标识，在哈希表中搜索所述虚拟机标识对应的Underlay链路的数量、路径序列号以及源节点；利用有向图从所述源节点出发，对每一条Underlay链路上的所有节点依次遍历，并将遍历的链路信息作为所述目标信息返回，直至下一节点是虚拟机节点。在具体的应用场景中，处理单元73，具体还被配置为基于所述Underlay层的设备标识，在有向图中找到所述设备标识对应的节点，并确定经过所述节点的所有Underlay链路的链路信息；在哈希表中查找每一条Underlay链路对应的Overlay虚拟机标识；将经过所述节点的所有Underlay链路的链路信息和每一条Underlay链路对应的Overlay虚拟机标识作为所述目标信息返回。在具体的应用场景中，处理单元73，具体还被配置为基于Underlay层链路的路径序列号，在哈希表中查找对应的Overlay层的虚拟机标识；利用所述虚拟机标识，确定所述虚拟机标识在有向图中的源节点；在有向图中从所述源节点进行遍历，得到所述源节点对应的每一条Underlay链路的链路信息；将所述虚拟机标识和每一条Underlay链路的链路信息作为所述目标信息返回。在具体的应用场景中，处理单元73，具体还被配置为在获取到更新数据请求后，基于待更新的Underlay链路的链路信息，在有向图中对所述待更新的Underlay链路进行更新；或，获取节点状态发生改变的Underlay节点，对所述Underlay节点与对应的虚拟机标识的关联关系进行更新。在具体的应用场景中，处理单元73，具体还被配置为在有向图中获取节点状态发生改变的Underlay节点对应的全部Underlay链路的路径序列号；根据所述路径序列号，在有向图中删除每一条Underlay链路对应的链路信息；从哈希表中获取Overlay层的虚拟机标识，并基于所述虚拟机标识获取当前对应的Underlay链路对应的链路信息；将当前对应的Underlay链路对应的链路信息存储至有向图中。需要说明的是，本实施例提供的一种数据处理装置所涉及各功能单元的其它相应描述，可以参考图1至图6中的对应描述，在此不再赘述。基于上述如图1至图6所示方法，相应的，本实施例还提供了一种计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现上述如图1至图6所示的方法。基于这样的理解，本申请的技术方案可以以软件产品的形式体现出来，该软件产品可以存储在一个非易失性存储介质中，包括若干指令用以使得一台计算机设备执行本申请各个实施场景的方法。基于上述如图1至图6所示的方法，以及图7所示的虚拟装置实施例，为了实现上述目的，本申请实施例还提供了一种电子设备，可配置在计算机端侧等，该设备包括存储介质和处理器；存储介质，用于存储计算机程序；处理器，用于执行计算机程序以实现上述如图1至图6所示的方法。基于上述如图1至图6所示的方法，以及图7所示的虚拟装置实施例，为了实现上述目的，本申请实施例还提供了一种芯片，包括一个或多个接口电路和一个或多个处理器；所述接口电路用于从电子设备的存储器接收信号，并向所述处理器发送所述信号，所述信号包括存储器中存储的计算机指令；当所述处理器执行所述计算机指令时，使得所述电子设备执行上述如图1至图6所示的方法。可选的，上述实体设备还可以包括用户接口、网络接口、摄像头、射频电路，传感器、音频电路、WI-FI模块等等。用户接口可以包括显示屏、输入单元比如键盘等，可选用户接口还可以包括USB接口、读卡器接口等。网络接口可选的可以包括标准的有线接口、无线接口等。本领域技术人员可以理解，本实施例提供的上述实体设备结构并不构成对该实体设备的限定，可以包括更多或更少的部件，或者组合某些部件，或者不同的部件布置。存储介质中还可以包括操作系统、网络通信模块。操作系统是管理上述实体设备硬件和软件资源的程序，支持信息处理程序以及其它软件和/或程序的运行。网络通信模块用于实现存储介质内部各组件之间的通信，以及与信息处理实体设备中其它硬件和软件之间通信。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到本申请可以借助软件加必要的通用硬件平台的方式来实现，也可以通过硬件实现。通过应用本实施例的方案，不仅能完整记录云计算网络中Overlay与Underlay的关联方式，而且支持关联数据的快速查询与更新，能够为云计算网络的运维监控提供足够的依据，应用前景广阔。数据中心资源池的云化虽然满足了网络多路复用和云内资源隔离的需求，但极大地加剧了网络管控的难度。一旦监测到或者用户上报的Overlay或Underlay网络拥塞和静默故障等信息，管理员可凭借Overlay和Underlay的关联关系来迅速定位故障的根本原因。因此，本实施例提出的数据处理方法能够将云计算网络Overlay与Underlay的数据关联起来并支持快速查询与更新。需要说明的是，在本文中，诸如“第一”和“第二”等之类的关系术语仅仅用来将一个实体或者操作与另一个实体或操作区分开来，而不一定要求或者暗示这些实体或操作之间存在任何这种实际的关系或者顺序。而且，术语“包括”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、物品或者设备中还存在另外的相同要素。以上所述仅是本申请的具体实施方式，使本领域技术人员能够理解或实现本申请。对这些实施例的多种修改对本领域的技术人员来说将是显而易见的，本文中所定义的一般原理可以在不脱离本申请的精神或范围的情况下，在其它实施例中实现。因此，本申请将不会被限制于本文所述的这些实施例，而是要符合与本文所申请的原理和新颖特点相一致的最宽的范围。
