标题title
表项驱逐方法、装置及电子设备
摘要abst
本申请公开了一种表项驱逐方法、装置及电子设备，涉及计算机技术领域。方法包括：获取k级流表中每一个表项的统计信息；根据统计信息，计算每一个表项的缓存收益；基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；根据驱逐损失，确定待驱逐表项。本申请通过结合每个表项的缓存收益和表项对应的已插与待插规则复用情况，计算驱逐损失并作为确定待驱逐表项的依据。从而能够精确地确定最应被驱逐的多个表项，提高可编程交换机的缓存命中率，避免大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力，改善了现有的可编程交换机在缓存多级流表驱逐表项时影响处理性能的问题。
权利要求书clms
1.一种表项驱逐方法，其特征在于，包括：获取k级流表中每一个表项的统计信息；所述k级流表中包含k个级别的流表，每一级流表中包含至少一个表项，且k为正整数；根据所述统计信息，计算每一个表项的缓存收益；基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；根据所述驱逐损失，确定待驱逐表项。2.根据权利要求1所述的方法，其特征在于，所述获取k级流表中每一个表项的统计信息，包括：获取所述k级流表中每一级流表的每个表项的时间增量和所述时间增量对应的增量持续时间。3.根据权利要求2所述的方法，其特征在于，所述获取所述k级流表中每一级流表的每个表项的时间增量和所述时间增量对应的增量持续时间，包括：获取所述k级流表中每一级流表的每个表项的计数值；所述计数值即为与前次读取时间之间的时间增量；计算每个所述计数值对应的前次读取时间和当前读取时间，并基于所述前次读取时间和所述当前读取时间，得到所述增量持续时间。4.根据权利要求2所述的方法，其特征在于，所述根据所述统计信息，计算每一个表项的缓存收益，包括：根据每个表项的所述时间增量和所述时间增量对应的增量持续时间，得到每一个表项的缓存收益。5.根据权利要求1所述的方法，其特征在于，所述基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失，包括：在当前表项对应的已插规则和待插规则不能复用的情况下，则基于所述已插规则对应的表项的缓存收益，计算驱逐所述已插规则对应的表项的驱逐损失；在当前表项对应的已插规则和待插规则能够复用的情况下，则忽略所述已插规则对应的可复用表项的缓存收益，以所述已插规则对应的其他不能复用的表项的缓存收益之和，作为驱逐所述已插规则对应的表项的驱逐损失。6.根据权利要求5所述的方法，其特征在于，所述根据所述驱逐损失，确定待驱逐表项，包括：在确定驱逐每条已插规则的驱逐损失后，将驱逐损失小于预设阈值的已插规则对应的表项作为所述待驱逐表项。7.根据权利要求5所述的方法，其特征在于，基于所述已插规则对应的表项的缓存收益，计算驱逐所述已插规则对应的表项的驱逐损失，包括：将所述已插规则对应的每一个表项的缓存收益之和，作为所述驱逐损失。8.一种表项驱逐装置，其特征在于，包括：获取单元，被配置为获取k级流表中每一个表项的统计信息；所述k级流表中包含k个级别的流表，每一级流表中又包含至少一个表项；第一计算单元，被配置为根据所述统计信息，计算每一个表项的缓存收益；第二计算单元，被配置为基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；确定单元，被配置为根据所述驱逐损失，确定待驱逐表项。9.一种计算机可读存储介质，其上存储有计算机程序，其特征在于，所述计算机程序被处理器执行时实现权利要求1至7中任一项所述的方法。10.一种电子设备，包括存储介质、处理器及存储在存储介质上并可在处理器上运行的计算机程序，其特征在于，所述处理器执行所述计算机程序时实现权利要求1至7中任一项所述的方法。
说明书desc
技术领域本申请涉及计算机技术领域，具体涉及一种表项驱逐方法、装置及电子设备。背景技术在软件定义网络中，可编程交换机采用流表分级和流表缓存这两种方式来克服交换芯片内TCAM容量有限的问题。在多级流表的缓存系统中，最重要的评价指标是直接通过快速通路的可处理流量占进入可编程交换机总流量的比例，即缓存命中率。为了维持高缓存命中率，表项驱逐模块需要准确地识别出TCAM中匹配报文较少的表项。若被驱逐的表项匹配了大多数流量，一方面会大量消耗软件层面的CPU资源会影响其他功能，增大处理报文的平均时延；另一方面会导致TCAM更新，而TCAM更新速度是困扰可编程交换机的另一个性能瓶颈。因此，对于现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题。发明内容有鉴于此，本申请提供了一种表项驱逐方法、装置及电子设备，主要目的在于改善现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题。第一方面，本申请提供了一种表项驱逐方法，包括：获取k级流表中每一个表项的统计信息；所述k级流表中包含k个级别的流表，每一级流表中包含至少一个表项，且k为正整数；根据所述统计信息，计算每一个表项的缓存收益；基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；根据所述驱逐损失，确定待驱逐表项。可选地，所述获取k级流表中每一个表项的统计信息，包括：获取所述k级流表中每一级流表的每个表项的时间增量和所述时间增量对应的增量持续时间。可选地，所述获取所述k级流表中每一级流表的每个表项的时间增量和所述时间增量对应的增量持续时间，包括：获取所述k级流表中每一级流表的每个表项的计数值；所述计数值即为与前次读取时间之间的时间增量；计算每个所述计数值对应的前次读取时间和当前读取时间，并基于所述前次读取时间和所述当前读取时间，得到所述增量持续时间。可选地，所述根据所述统计信息，计算每一个表项的缓存收益，包括：根据每个表项的所述时间增量和所述时间增量对应的增量持续时间，得到每一个表项的缓存收益。可选地，基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失，包括：在当前表项对应的已插规则和待插规则不能复用的情况下，则基于所述已插规则对应的表项的缓存收益，计算驱逐所述已插规则对应的表项的驱逐损失；在当前表项对应的已插规则和待插规则能够复用的情况下，则忽略所述已插规则对应的可复用表项的缓存收益，以所述已插规则对应的其他不能复用的表项的缓存收益之和，作为驱逐所述已插规则对应的表项的驱逐损失。可选地，所述根据所述驱逐损失，确定待驱逐表项，包括：在确定驱逐每条已插规则的驱逐损失后，将驱逐损失小于预设阈值的已插规则对应的表项作为所述待驱逐表项。可选地，基于所述已插规则对应的表项的缓存收益，计算驱逐所述已插规则对应的表项的驱逐损失，包括：将所述已插规则对应的每一个表项的缓存收益之和，作为所述驱逐损失。第二方面，本申请提供了一种表项驱逐装置，包括：获取单元，被配置为获取k级流表中每一个表项的统计信息；所述k级流表中包含k个级别的流表，每一级流表中又包含至少一个表项；第一计算单元，被配置为根据所述统计信息，计算每一个表项的缓存收益；第二计算单元，被配置为基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；确定单元，被配置为根据所述驱逐损失，确定待驱逐表项。第三方面，本申请提供了一种计算机可读存储介质，其上存储有计算机程序，所述计算机程序被处理器执行时实现第一方面所述的表项驱逐方法。第四方面，本申请提供了一种电子设备，包括存储介质、处理器及存储在存储介质上并可在处理器上运行的计算机程序，所述处理器执行所述计算机程序时实现第一方面所述的表项驱逐方法。借由上述技术方案，本申请提供的一种表项驱逐方法、装置及电子设备，首先获取k级流表中每一个表项的统计信息。根据统计信息计算每一个表项的缓存收益，用于计算驱逐损失。进而基于缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失。最后根据驱逐损失确定待驱逐的表项。与相关技术相比，本申请提出通过结合每个表项的缓存收益和表项对应的已插规则与待插规则的复用情况，计算了驱逐损失，将驱逐损失作为确定待驱逐表项的依据。从而能够精确地最应被驱逐的多个表项，提高了可编程交换机的缓存命中率，同时避免了大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力，改善了现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题。上述说明仅是本申请技术方案的概述，为了能够更清楚了解本申请的技术手段，而可依照说明书的内容予以实施，并且为了让本申请的上述和其它目的、特征和优点能够更明显易懂，以下特举本申请的具体实施方式。附图说明此处的附图被并入说明书中并构成本说明书的一部分，示出了符合本申请的实施例，并与说明书一起用于解释本申请的原理。为了更清楚地说明本申请实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，对于本领域普通技术人员而言，在不付出创造性劳动性的前提下，还可以根据这些附图获得其他的附图。图1示出了本申请实施例提供的一种表项驱逐方法的流程示意图；图2示出了本申请实施例提供的一种可编程交换机中缓存多级流表时的系统架构的框架示意图；图3示出了本申请实施例提供的另一种表项驱逐方法的流程示意图；图4示出了本申请实施例提供的一种表项驱逐装置的结构示意图。具体实施方式为了能够更清楚地理解本申请的上述目的、特征和优点，下面将对本申请的方案进行进一步描述。需要说明的是，在不冲突的情况下，本申请的实施例及实施例中的特征可以相互组合。本实施例所提出的一种表项驱逐方法，应用于一种表项驱逐装置或电子设备上，该装置或电子设备可以安装或集成于一些可编程交换机设备或交换机系统中，在运行时可以执行如下述提到的任一种表项驱逐方法。为了改善现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题，本实施例提供了一种表项驱逐方法，如图1所示，该方法包括：S101、获取k级流表中每一个表项的统计信息。流表分级是指在保证流表语义和功能不变的前提下，将一个含p个匹配字段的流表拆分成串联的多级流表，利用在每个匹配字段仅有少量值、不同规则在同一级流表复用相同表项来降低流表的整体空间消耗。其中，k级流表中包含k个级别的流表，每一级流表中包含至少一个表项，且k为正整数。统计信息用于在后续步骤中计算表项的缓存收益。S102、根据统计信息，计算每一个表项的缓存收益。S103、基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失。在该步骤中，已插规则是指当前流表内的表项应用的规则；待插规则是指当前在流表外待缓存的规则。对应映射关系是指已插规则由于已经存在于流表，那么该已插规则会对应一个或多个流表内的表项，那么该已插规则和对应的表项则具有映射关系。其中，规则也是由多个表项构成的。计算驱逐每条已插规则对应的表项的驱逐损失时需要说明，虽然最终驱逐的是表项，但驱逐表项的依据是站在规则的角度来衡量的。S104、根据驱逐损失，确定待驱逐表项。在本实施例中，获取k级流表中每一个表项的统计信息。根据统计信息计算每一个表项的缓存收益，用于计算驱逐损失。进而基于缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失。最后根据驱逐损失确定待驱逐的表项。与相关技术相比，本实施例提出通过结合每个表项的缓存收益和表项对应的已插规则与待插规则的复用情况，计算了驱逐损失，将驱逐损失作为确定待驱逐表项的依据。从而能够精确地最应被驱逐的多个表项，提高了可编程交换机的缓存命中率，同时避免了大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力，改善了现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题。为了便于对本实施例提出方案的理解，结合图2可编程交换机中缓存多级流表时的系统架构的框架示意图，对本方案的背景技术和提到的相关概念进行介绍和说明。首先，在软件定义网络SDN中，控制平面负责生成规则并下发到数据平面的流表中，数据平面利用流表对网络流量进行分类处理。当前，专用硬件TCAM凭借极快且确定性的并行查找速度和灵活多变的匹配模式，成为了SDN/可编程交换机实现流表的标准。然而，可编程交换机的交换芯片内TCAM资源十分有限，无法容纳下流表内所有规则。此时则需要进行表项驱逐。表项驱逐由表项驱逐模块负责，根据表项所对应的计数器值和时间戳等信息，判定最应该被从快速通路中驱逐的表项，从而为待缓存规则的插入腾出空间。为了尽可能提高快速通路所匹配流量的比例，被驱逐的表项应该仅匹配了较少的流量。快速通路和慢速通路：快速通路是指用交换芯片内TCAM资源所实现的多级流表，其内仅存储了全流表的少量热门规则。每个进入可编程交换机的报文都会首先在快速通路模块的k级流表中依次、顺序查找。对于每一级流表，如果命中了其内的某个表项，首先将此表项对应的计数器加1，然后按照此表项规定的操作来处理此报文或执行后续流表匹配过程；如果没有命中任何表项，则将此报文上送到慢速通路进行处理。如图2中入报文从快速通路的第一级流表开始依次查找，若没有命中任何表项，则将此报文上送到慢速通路。慢速通路是指可编程交换机的软件层面，它运行软件流表查找算法来决定如何处理没有命中快速通路内任何规则的少量报文。虽然其查找流表的速度较慢，但是存储了流表的全部规则。慢速通路在处理完报文后，将其直接发回快速通路；可编程交换机直接将此类报文发出，不会在快速通路中再次进行处理。考虑到慢速通路模块执行流表查找的速度较慢和硬件芯片与软件芯片之间有限的传输带宽，上送到慢速通路模块的报文不能过多，否则会影响可编程交换机的整体转发性能。此外，图2中的大象流检测通过将进入可编程交换机的流量进行抽样来实时地检测网络中的大象流。由于网络流量的局部性时刻在变化，大象流集合也时刻在变化。相应地，热门规则的流行程度也发生变化。因此，为了保证快速通路所缓存的少量规则能够始终匹配了大多数流量，从而减少上送到慢速通路的报文数量，需要实时地识别网络中的大象流，然后将其匹配的规则缓存到快速通路中。在软件定义网络中，可编程交换机采用流表分级和流表缓存这两种方式来克服交换芯片内TCAM容量有限的问题。在多级流表的缓存系统中，最重要的评价指标是直接通过快速通路即可处理的流量占进入可编程交换机总流量的比例，即缓存命中率。为了维持高缓存命中率，表项驱逐模块需要准确地识别出TCAM中匹配报文较少的表项。若被驱逐的表项匹配了大多数流量，则会导致一是增大可编程交换机处理报文的整体平均时延，影响其他功能的实现；二是导致频繁的TCAM更新，而TCAM更新速度是困扰可编程交换机的另一个性能瓶颈。现有的两种解决方案，一种为LRU技术，LRU要求快速通路的每个表项在匹配报文时将此表项对应的时间戳更新为当前时间。当驱逐某一级流表的表项时，LRU总是优先驱逐时间戳最老旧的表项，即LRU认为最长时间未匹配报文的表项最应该被驱逐。但LRU存在两个问题，问题1：LRU没有利用表项计数器这一信息，仅根据表项空闲时间的长短来判定表项驱逐的优先级。然而，表项空闲时间的长短与其所匹配的流量没有必然联系。若采用LRU方法来驱逐表项，会存在如下两种情况：那些周期性大象流所命中的表项会被频繁地从TCAM中驱逐出和插回TCAM；那些匀速老鼠流所对应的表项会长时间驻足于TCAM中。这两点不仅导致了缓存命中率过低，而且导致流表的频繁更新。问题2：当从k级流表F1, F2, ..., Fk中分别驱逐一个表项，若每级流表都利用LRU来判定应被驱逐的表项，那么这k个被驱逐的表项F1, F1, ..., Fk会分别属于p 条规则。这样一来，会导致匹配这p条规则所匹配的报文都无法通过快速通路直接被转发，降低了流表缓存系统的缓存命中率。若将这k级流表在逻辑上视为一个流表F，每次驱逐k个表项时选择某条规则所对应的那k个表项。然而，由于不同规则会复用同一个表项，这导致同一条规则对应的k个表项的空闲时间不一样。因此，无法再利用LRU来判定多级流表缓存系统中应被驱逐的表项。另一种是LFU技术，要求快速通路计数每一级流表的每个表项所匹配报文的字节数或次数。当驱逐某一级流表内的表项时，LFU优先驱逐计数器值或者增量最小的表项。LFU也可同时将计数器增量和持续时间考虑在内，优先驱逐计数器增速最小的表项。LFU存在的问题是在多级流表缓存系统中，由于不同规则会复用同一表项，同一条规则对应的k个表项的计数器值和时间戳会不同。因此，无法再利用LRU来判定多级流表缓存系统中应被驱逐的表项。而本实施例所提出的表项驱逐方法，对比已有方法LRU和LFU，首先在驱逐表项时将它所匹配流量的数量和匹配时间都考虑在内，与现有方案LRU仅考虑了匹配数量不同，本实施例所提到的方法不会驱逐那些匹配大量突发流量的表项，且会驱逐那些单位时间内匹配流量较少的表项，避免了LRU的问题1。同时现有方案LRU和LFU仅适用于单级流表，可用于判定单级流表内最应被驱逐的表项，但无法实现一次性地找出多个应被驱逐的表项。本专利以规则为基本单位从k级流表中驱逐k个表项：每次都驱逐某条规则所对应的k个表项。这样做能够有效地提高缓存多级流表时的缓存命中率，避免了LRU的问题2和LFU的问题1。这些优势在后续的介绍中还会进一步体现。可选地，获取k级流表中每一个表项的统计信息，包括：获取k级流表中每一级流表的每个表项的时间增量和时间增量对应的增量持续时间。在本实施例中，统计信息包括每一级流表的每个表项的时间增量和时间增量对应的增量持续时间。时间时间增量和时间增量对应的增量持续时间用于在后续过程计算每个表项的缓存收益，具体可以通过计数器等方式获取。可选地，获取k级流表中每一级流表的每个表项的时间增量和时间增量对应的增量持续时间，包括：获取k级流表中每一级流表的每个表项的计数值；计数值即为与前次读取时间之间的时间增量；计算每个计数值对应的前次读取时间和当前读取时间，并基于前次读取时间和当前读取时间，得到增量持续时间。在本实施例中，每次读取交换芯片的某个计数器后都将其值置为零，以此保证每次读取任一计数器时，其值都是上次读取之后的增量。虽然即使不主动置位计数器的值、用计数器此次读取值减去上次读取值也可得到在这期间的绝对增量，但计数器经过长时间的累加会发生溢出，而每次读取计数器后将其置零可避免此种情况，使得读取更加方便。可选地，根据所述统计信息，计算每一个表项的缓存收益，包括：根据每个表项的所述时间增量和所述时间增量对应的增量持续时间，得到每一个表项的缓存收益。进一步地，缓存收益=计数器增量/增量持续时间。在本实施例中，采用“计数器增量/增量持续时间”而不是“计数器累加值/累加值对应持续时间”作为缓存收益，是为了更精确地衡量表项在当前单位时间内所匹配流量的数量，避免某些过去匹配了大量流量但最近匹配很少流量的表项获得较大的缓存收益，从而被长时间缓存在交换芯片中，而实际上其对缓存命中率的贡献很小。可选地，基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失，包括：在当前表项对应的已插规则和待插规则不能复用的情况下，则基于已插规则对应的表项的缓存收益，计算驱逐已插规则的驱逐损失；在当前表项对应的已插规则和待插规则能够复用的情况下，则忽略已插规则对应的可复用表项的缓存收益，以已插规则对应的其他不能复用的表项的缓存收益之和，作为驱逐已插规则的驱逐损失。在本实施例中，对于k级流表缓存系统，表项驱逐模块总是驱逐某条规则所对应的k个表项。原因在于若驱逐的k个表项分别属于p条规则，可以证明，这会导致原本命中这p条规则的流量都需要上送到软件层面进行处理，大大降低了缓存命中率。并且，表项驱逐模块并没有简单地将每条规则对应的k个表项的缓存收益之和作为驱逐此规则的损失。这是因为在多级流表中表项复用情况十分普遍，因此，本实施例中根据待插规则和已插规则的表项复用情况来决定后者的驱逐损失，从而使得后续确定出的待驱逐表项更准确。具体地，表项复用，是指在k级流表缓存系统中，快速通路的每条规则r都由k个表项构成：r=＜F1, F2, ..., Fk＞，其中，F1表示第1级流表的第i1个表项。若rp=rq，这意味着规则rp和rq在第j级流表复用了同一个表项。在当前表项对应的已插规则和待插规则不能复用的情况下，则基于已插规则对应的表项的缓存收益，计算驱逐已插规则的驱逐损失；在当前表项对应的已插规则和待插规则能够复用的情况下，则忽略已插规则对应的可复用表项的缓存收益，以已插规则对应的其他不能复用的表项的缓存收益之和，作为驱逐已插规则的驱逐损失。可选地，根据驱逐损失，确定待驱逐表项，包括：在确定驱逐每条已插规则的驱逐损失后，将驱逐损失小于预设阈值的已插规则对应的表项作为待驱逐表项。在本实施例中，将驱逐损失小于预设阈值的已插规则对应的表项作为待驱逐表项，从而保证了交换芯片的高缓存命中率，使得绝大多数流量可以通过命中交换芯片中的规则而被直接处理，毋需进一步交给软件层面来处理。这不仅减少了软件与硬件层面之间频繁的数据传输和减轻了软件层面的负载压力，还提高了可编程交换机的整体吞吐量和降低了报文的平均处理时延。可选地，基于已插规则对应的表项的缓存收益，计算驱逐已插规则的驱逐损失，包括：将已插规则对应的每一个表项的缓存收益之和，作为驱逐损失。在本实施例中，在当前表项对应的已插规则和待插规则不能复用的情况下，计算驱逐损失时需要考虑每一个表项的缓存收益，将已插规则对应的每一个表项的缓存收益之和，作为驱逐损失。本实施例所提出的表项驱逐方法衡量规则的驱逐损失时，充分考虑了规则间的表项复用情况，能够更加精确地衡量出驱逐每条规则给缓存命中率所带来的损失：若待插规则与已插规则在某一级流表复用同一表项，则已插规则的驱逐损失不应包含此表项的缓存收益。而相关技术中的LRU和LFU都只是片面地考虑到表项的统计信息，从而确定的驱逐的表项并不能完全的解决影响TCAM处理性能的问题。同时，结合整体方案，本实施例所提出的表项驱逐方法提出了结合表项的统计信息和规则间表项复用情况来驱逐可编程交换机中缓存多级流表时的表项，能够有效地提高交换芯片的缓存命中率，保证可编程交换机整体的吞吐量，市场应用前景广阔。随着可编程交换机内交换芯片的硬件容量越来越不满足上层应用对流表容量的需求，流表缓存和分级这两种方法被广泛地用于流表优化方面。其中，如何驱逐缓存多级流表时的表项是保证高缓存命中率的关键。对于k级流表缓存系统，一方面，本专利每次驱逐某条规则所对应的k个表项；另一方面，本专利将多级流表中规则间表项复用情况考虑在内。这有助于准确地衡量出每条规则的驱逐损失，因而能够选出最应该被驱逐的规则和表项，提高了可编程交换机的缓存命中率，同时避免了大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力。进一步地，结合图3，按执行顺序的方式对上述实施例所提供的方案进行整体性的说明。方法步骤包括：S301，在获取到驱逐表项的请求后，调用API接口获取k级流表每个表项的计数值和当前读取时间。首先，表象驱逐模块在收到驱逐表项的请求后，会收集相关的统计信息。统计信息包括述k级流表中每一级流表的每个表项的时间增量和时间增量对应的增量持续时间。一方面，表项驱逐模块调用交换芯片的应用程序编程接口API获得k级流表的每一级流表、每个表项的计数值，并记录在k个数组C1, C2, ...,Ck中。同时，将每个计数器的此次读取时间记录在数组k个数组T1, T2, ..., Tk中。其中，Ci记录了第i级流表的第j个表项的计数器值，Ti.pre和Ti.cur分别记录此次和上次读取此计数器的时间。另一方面，每次读取交换芯片的某个计数器后都将其值置为零，以此保证每次读取任一计数器时，其值都是上次读取之后的增量，也即读取值即为时间增量，而通过此次读取时间和上次读取时间的差值即可计算出时间增量对应的增量持续时间。虽然即使不主动置位计数器的值、用计数器此次读取值减去上次读取值也可得到在这期间的绝对增量，但计数器经过长时间的累加会发生溢出，而每次读取计数器后将其置零可避免此种情况。S302，通过计数值和当前读取时间，计算每一个表项的缓存收益。具体地，计算出每一级流表的每一个表项的缓存收益并将其记录在k个数组V1,V2, ..., Vk中，其中，Vi记录了第i级流表的第j个表项的缓存收益。具体来说，Vi等于在上次读取计数器后计数值的增量Ci除以上次读取到现在的持续时间。而采用“计数器增量/增量持续时间”而不是“计数器累加值/累加值对应持续时间”作为缓存收益，是为了更精确地衡量表项在当前单位时间内所匹配流量的数量，避免某些过去匹配了大量流量但最近匹配很少流量的表项获得较大的缓存收益，从而被长时间缓存在交换芯片中，而实际上其对缓存命中率的贡献很小。S303，基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失。已插规则是指当前流表内的表项应用的规则；待插规则是指当前在流表外待缓存的规则。对应映射关系是指已插规则由于已经存在于流表，那么该已插规则会对应一个或多个流表内的表项，那么该已插规则和对应的表项则具有映射关系。其中，规则也是由多个表项构成的。计算驱逐每条已插规则对应的表项的驱逐损失时需要说明，虽然最终驱逐的是表项，但驱逐表项的依据是站在规则的角度来衡量的。也即在衡量规则的驱逐损失时，充分考虑了规则间的表项复用情况，能够更加精确地衡量出驱逐每条规则给缓存命中率所带来的损失。对于k级流表缓存系统，表项驱逐模块总是驱逐某条规则所对应的k个表项。原因在于若驱逐的k个表项分别属于p条规则，可以证明，这会导致原本命中这p条规则的流量都需要上送到软件层面进行处理，大大降低了缓存命中率。并且，表项驱逐模块并没有简单地将每条规则对应的k个表项的缓存收益之和作为驱逐此规则的损失。这是因为在多级流表中表项复用情况十分普遍，所以应该根据待插规则和已插规则的表项复用情况来决定后者的驱逐损失。具体地，计算驱逐损失时的关键点在于若待插规则当前已插规则在某一级流表复用同一表项，则当前已插规则的驱逐损失不应包含此表项的缓存收益。例如，若待插规则r和已插规则j在第i级流表的表示方式不同，不能复用同一表项，则通过驱逐第j条规则来插入r会使得那些原本命中表项的流量不再会命中快速通路。因此，第j条规则的驱逐损失L应该包括此表项的缓存收益Vi]。驱逐损失为当前已插规则对应的每一个表项的缓存收益之和。若待插规则r和已插规则j在第i级流表的表示方式相同，能够复用同一表项，则驱逐前者来插入后者不会对原本命中表项Fi]的流量造成影响，复用的表项，表项的缓存收益不应包括在此规则的驱逐损失L内。驱逐损失为当前已插规则对应的其他不能复用的表项的缓存收益之和。S304，将驱逐损失最小的规则所对应的表项确定为待驱逐表项。S305，调用API接口将待驱逐表项进行驱逐。在本实施例中，通过结合表项的统计信息和规则间的表项复用情况来驱逐可编程交换机中缓存多级流表时的表项，能够精确地最应被驱逐的多个表项，保证了交换芯片的高缓存命中率，使得绝大多数流量可以通过命中交换芯片中的规则而被直接处理，毋需进一步交给软件层面来处理。这不仅减少了软件与硬件层面之间频繁的数据传输和减轻了软件层面的负载压力，还提高了可编程交换机的整体吞吐量和降低了报文的平均处理时延。同时随着可编程交换机内交换芯片的硬件容量越来越不满足上层应用对流表容量的需求，流表缓存和分级这两种方法被广泛地用于流表优化方面。其中，如何驱逐缓存多级流表时的表项是保证高缓存命中率的关键。对于k级流表缓存系统，一方面，本实施例所提出的方案每次驱逐某条规则所对应的k个表项；另一方面，本实施例所提出的方案将多级流表中规则间表项复用情况考虑在内。这有助于准确地衡量出每条规则的驱逐损失，因而能够选出最应该被驱逐的规则和表项，提高了可编程交换机的缓存命中率，同时避免了大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力。进一步的，作为图1至图3所示方法的具体实现，本实施例提供了一种表项驱逐装置，如图4所示，该装置包括：获取单元41、第一计算单元42、第二计算单元43和确定单元44。获取单元41，被配置为获取k级流表中每一个表项的统计信息；所述k级流表中包含k个级别的流表，每一级流表中又包含至少一个表项；第一计算单元42，被配置为根据所述统计信息，计算每一个表项的缓存收益；第二计算单元43，被配置为基于每一个表项的缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失；确定单元44，被配置为根据所述驱逐损失，确定待驱逐表项。在具体的应用场景中，获取单元41，具体被配置为获取所述k级流表中每一级流表的每个表项的时间增量和所述时间增量对应的增量持续时间在具体的应用场景中，获取单元41，具体还被配置为获取所述k级流表中每一级流表的每个表项的计数值；所述计数值即为与前次读取时间之间的时间增量；计算每个所述计数值对应的前次读取时间和当前读取时间，并基于所述前次读取时间和所述当前读取时间，得到所述增量持续时间。在具体的应用场景中，第一计算单元42，具体还被配置为根据每个表项的所述时间增量和所述时间增量对应的增量持续时间，得到每一个表项的缓存收益。在具体的应用场景中，第二计算单元43，具体还被配置为在当前表项对应的已插规则和待插规则不能复用的情况下，则基于所述已插规则对应的表项的缓存收益，计算驱逐所述已插规则对应的表项的驱逐损失；在当前表项对应的已插规则和待插规则能够复用的情况下，则忽略所述已插规则对应的可复用表项的缓存收益，以所述已插规则对应的其他不能复用的表项的缓存收益之和，作为驱逐所述已插规则对应的表项的驱逐损失。在具体的应用场景中，确定单元44，具体还被配置为在确定驱逐每条已插规则的驱逐损失后，将驱逐损失小于预设阈值的已插规则对应的表项作为所述待驱逐表项。在具体的应用场景中，第二计算单元43，具体还被配置为将所述已插规则对应的每一个表项的缓存收益之和，作为所述驱逐损失。需要说明的是，本实施例提供的一种表项驱逐装置所涉及各功能单元的其它相应描述，可以参考图1至图3中的对应描述，在此不再赘述。基于上述如图1至图3所示方法，相应的，本实施例还提供了一种计算机可读存储介质，其上存储有计算机程序，该计算机程序被处理器执行时实现上述如图1至图3所示的方法。基于这样的理解，本申请的技术方案可以以软件产品的形式体现出来，该软件产品可以存储在一个非易失性存储介质中，包括若干指令用以使得一台计算机设备执行本申请各个实施场景的方法。基于上述如图1至图3所示的方法，以及图4所示的虚拟装置实施例，为了实现上述目的，本申请实施例还提供了一种电子设备，可配置在计算机端侧等，该设备包括存储介质和处理器；存储介质，用于存储计算机程序；处理器，用于执行计算机程序以实现上述如图1至图3所示的方法。基于上述如图1至图3所示的方法，以及图4所示的虚拟装置实施例，为了实现上述目的，本申请实施例还提供了一种芯片，包括一个或多个接口电路和一个或多个处理器；所述接口电路用于从电子设备的存储器接收信号，并向所述处理器发送所述信号，所述信号包括存储器中存储的计算机指令；当所述处理器执行所述计算机指令时，使得所述电子设备执行上述如图1至图3所示的方法。可选的，上述实体设备还可以包括用户接口、网络接口、摄像头、射频电路，传感器、音频电路、WI-FI模块等等。用户接口可以包括显示屏、输入单元比如键盘等，可选用户接口还可以包括USB接口、读卡器接口等。网络接口可选的可以包括标准的有线接口、无线接口等。本领域技术人员可以理解，本实施例提供的上述实体设备结构并不构成对该实体设备的限定，可以包括更多或更少的部件，或者组合某些部件，或者不同的部件布置。存储介质中还可以包括操作系统、网络通信模块。操作系统是管理上述实体设备硬件和软件资源的程序，支持信息处理程序以及其它软件和/或程序的运行。网络通信模块用于实现存储介质内部各组件之间的通信，以及与信息处理实体设备中其它硬件和软件之间通信。通过以上的实施方式的描述，本领域的技术人员可以清楚地了解到本申请可以借助软件加必要的通用硬件平台的方式来实现，也可以通过硬件实现。通过应用本实施例的方案，相较于相关技术而言，首先获取k级流表中每一个表项的统计信息。根据统计信息计算每一个表项的缓存收益，用于计算驱逐损失。进而基于缓存收益、已插规则与表项的对应映射关系和待插规则，计算驱逐每条已插规则对应的表项的驱逐损失。最后根据驱逐损失确定待驱逐的表项。与相关技术相比，本申请提出通过结合每个表项的缓存收益和表项对应的已插规则与待插规则的复用情况，计算了驱逐损失，将驱逐损失作为确定待驱逐表项的依据。从而能够精确地最应被驱逐的多个表项，提高了可编程交换机的缓存命中率，同时避免了大量报文被上送到软件层面进行处理，减缓了软件层面的负载压力，改善了现有的可编程交换机在缓存多级流表驱逐表项时，会存在影响TCAM处理性能的问题。需要说明的是，在本文中，诸如“第一”和“第二”等之类的关系术语仅仅用来将一个实体或者操作与另一个实体或操作区分开来，而不一定要求或者暗示这些实体或操作之间存在任何这种实际的关系或者顺序。而且，术语“包括”或者其任何其他变体意在涵盖非排他性的包含，从而使得包括一系列要素的过程、方法、物品或者设备不仅包括那些要素，而且还包括没有明确列出的其他要素，或者是还包括为这种过程、方法、物品或者设备所固有的要素。在没有更多限制的情况下，由语句“包括一个……”限定的要素，并不排除在包括所述要素的过程、方法、物品或者设备中还存在另外的相同要素。以上所述仅是本申请的具体实施方式，使本领域技术人员能够理解或实现本申请。对这些实施例的多种修改对本领域的技术人员来说将是显而易见的，本文中所定义的一般原理可以在不脱离本申请的精神或范围的情况下，在其它实施例中实现。因此，本申请将不会被限制于本文所述的这些实施例，而是要符合与本文所申请的原理和新颖特点相一致的最宽的范围。
