标题title
在网络的节点之间的异步套接字复制
摘要abst
本公开的实施例涉及在网络的节点之间的异步套接字复制。一种示例网络设备包括主节点和备用节点。主节点经由已连接的套接字来与对等网络设备进行路由会话。备用节点包括一个或多个处理器，一个或多个处理器被实现在电路系统中并且被配置为执行备份复制模块以：从主节点接收将被写入用于已连接的套接字的备份套接字的数据；以及响应于切换，经由备用套接字来将数据的表示发送给对等网络设备。
权利要求书clms
1.一种方法，包括：由用于网络中的主节点的备用节点的复制模块使用与在所述网络的所述主节点处的已连接的套接字对应的信息来生成备份套接字，其中所述信息包括所述已连接的套接字的传输层状态，其中在所述主节点处的所述已连接的套接字根据传输层协议来提供所述主节点与对等网络设备之间的网络通信连接性，其中所述备用节点的所述备份套接字被配置为在从所述主节点切换之后提供所述备用节点与所述对等网络设备之间的网络通信连接性；以及响应于所述切换，由所述复制模块根据所述已连接的套接字的所述传输层状态来获取所述备份套接字的发送缓冲区的一部分，其中所述发送缓冲区包括由所述主节点写入所述已连接的套接字的数据块序列，其中所述已连接的套接字的所述传输层状态包括标识以下的信息：所述发送缓冲区的所述一部分包括待在所述切换时从所述主节点被传输给所述对等网络设备的至少一个下一数据块，以及由所述复制模块经由所述备份套接字来将所述至少一个下一数据块发送给所述对等网络设备。2.根据权利要求1所述的方法，还包括：由用于所述备用节点的操作系统执行数据读操作，以从所述备份套接字的接收缓冲区或者所述备份套接字的所述发送缓冲区中去除至少一个数据块。3.根据权利要求1所述的方法，其中由所述复制模块经由所述备份套接字来将所述至少一个下一数据块发送给所述对等网络设备还包括：由在所述备用节点处的协议堆栈发送包括路由通告的套接字消息。4.根据权利要求1所述的方法，还包括：由所述复制模块向所述备份套接字的接收缓冲区中的至少一个未确认的数据块的源发送套接字确认。5.根据权利要求1所述的方法，还包括：由所述复制模块基于来自所述对等网络设备的确认来更新所述备份套接字的传输层状态，其中所述确认包括标识最后确认的数据块的信息。6.根据权利要求2所述的方法，其中由所述复制模块更新所述备份套接字的所述传输层状态还包括：由所述复制模块更新所述发送缓冲区的所述数据块序列中的下一未确认的数据块的序列号。7.根据权利要求2所述的方法，其中由所述复制模块更新所述备份套接字的所述传输层状态还包括：基于所述最后确认的数据块的序列号超过所述至少一个下一数据块的序列号的确定，由所述复制模块更新所述最后确认的数据块的所述序列号。8.根据权利要求1至7中任一项所述的方法，其中由所述复制模块更新所述最后确认的数据块的所述序列号还包括：由所述复制模块更新用于所述确认的校验和，以及由所述复制模块将所述确认推送给在所述备用节点处的协议堆栈的网络层。9.根据权利要求1至7中任一项所述的方法，还包括：由所述复制模块基于被传输给所述对等网络设备的传输层协议数据单元来更新所述备份套接字的传输层状态，其中所述传输层协议数据单元包括标识由所述主节点最后传输的数据块的信息。10.根据权利要求9所述的方法，其中由所述复制模块更新所述备份套接字的所述传输层状态还包括：由所述复制模块更新所述至少一个下一数据块的第一数据块的序列号，所述第一数据块响应于到所述备用节点的切换而将从所述备份套接字的所述发送缓冲区被传输。11.根据权利要求1至7中任一项所述的方法，还包括：由用于所述备用节点的操作系统的协议堆栈经由第二套接字来接收数据单元，其中所述第二套接字根据传输控制协议来提供所述网络的所述主节点和所述备用节点之间的网络通信连接性，其中所述数据单元包括针对所述已连接的套接字的TCP状态信息；以及由所述复制模块使用所述TCP状态信息来更新所述备份套接字。12.根据权利要求11所述的方法，其中接收所述数据单元还包括：由所述主节点的操作系统经由在所述主节点处的协议堆栈中的挂钩代码来拦截数据块流，其中所述数据块流被映射到序列号。13.根据权利要求1至7中任一项所述的方法，其中生成所述备份套接字还包括：由所述复制模块从第二套接字获取数据，其中所述数据的一部分被存储在所述备份套接字的所述发送缓冲区或者所述备份套接字的接收缓冲区中的至少一个缓冲区中，其中所述第二套接字根据所述传输协议来提供所述网络设备的所述主节点和所述备用节点之间的网络通信连接性。14.根据权利要求13所述的方法，其中由所述复制模块从所述第二套接字获取所述数据还包括：由用于所述备用节点的操作系统的协议堆栈接收套接字消息，所述套接字消息包括针对所述备份套接字的缓冲区数据和状态信息中的至少一项。15.根据权利要求13所述的方法，其中由所述复制模块从所述第二套接字获取所述数据还包括：响应于来自所述主节点的套接字消息，由用于所述备用节点的操作系统的协议堆栈根据所述传输协议来发送针对所述套接字消息的套接字确认。16.根据权利要求13所述的方法，还包括：由用于所述备用节点的操作系统执行数据写操作以将所述数据存储在所述备份套接字的所述接收缓冲区或者所述备份套接字的所述发送缓冲区中。17.一种包括至少一个网络设备的网络，所述网络包括：备用节点，被配置在网络设备上、在发生切换的情况下恢复主节点的路由会话，其中所述主节点和所述备用节点被配置在所述网络的相同网络设备或者不同网络设备上，其中备用节点包括一个或多个处理器，所述一个或多个处理器被实现在电路系统中并且被配置为：执行复制模块以：使用与在所述网络的所述主节点处的已连接的套接字对应的信息来生成备份套接字，其中所述信息包括所述已连接的套接字的传输层状态，其中在所述主节点处的所述已连接的套接字根据传输层协议来提供所述主节点与对等网络设备之间的网络通信连接性，其中所述备用节点的所述备份套接字被配置为在从所述主节点切换之后提供所述备用节点与所述对等网络设备之间的网络通信连接性；以及响应于所述切换，根据所述已连接的套接字的所述传输层状态来获取所述备份套接字的发送缓冲区的一部分，其中所述发送缓冲区包括由所述主节点写入所述已连接的套接字的数据块序列，其中所述已连接的套接字的所述传输层状态包括标识以下的信息：所述发送缓冲区的所述一部分包括待在所述切换时从所述主节点被传输给所述对等网络设备的至少一个下一数据块，以及经由所述备份套接字来将所述至少一个下一数据块发送给所述对等网络设备。18.根据权利要求17所述的网络，其中所述一个或多个处理器还被配置为：执行所述复制模块以响应于从所述对等网络设备接收到确认而更新所述备份套接字的传输层状态，其中所述确认包括标识最后确认的数据块的信息。19.根据权利要求17所述的网络，其中所述一个或多个处理器还被配置为：执行所述复制模块以响应于向所述对等网络设备传输传输层协议数据单元而更新所述备份套接字的传输层状态，其中所述传输层协议数据单元包括标识由所述主节点最后传输的数据块的信息。20.一种计算机可读存储介质，被编码有指令，所述指令用于使一个或多个可编程处理器执行根据权利要求1至16中任一项所述的方法。
说明书desc
技术领域本公开涉及计算机网络，并且更具体地，涉及执行从主要控制单元到次要控制单元的切换的网络设备。背景技术计算机网络是可以交换数据和共享资源的互连计算设备的类集。计算机网络中的某些设备维持描述通过网络的路由的路由信息。每个路由定义了在网络上的两个位置之间的路径。路由器可以从路由信息生成转发信息，该转发信息由路由器用于中继通过网络的分组流，并且更具体地，用于将分组流中继给下一跳。关于转发分组，来自网络路由器的“下一跳”通常是指沿着给定路由的相邻设备。在接收到传入的分组之后，路由器检查分组内的信息以标识分组的目的地。基于目的地，路由器根据转发信息来转发分组。大型计算机网络通常包括许多根据所定义的路由协议)来交换路由信息的路由器。当两个路由器在最初连接时，这两个路由器交换路由信息并且从所交换的路由信息生成转发信息。特别地，这两个路由器发起路由通信“会话”，它们通过该路由通信“会话”来根据所定义的路由协议交换路由信息。路由器继续经由路由协议来进行通信以递增地更新路由信息，并且转而根据在已更新的路由信息中所指示的对网络的拓扑的改变来更新其转发信息。例如，路由器可以发送更新消息以通告最新可用的路由或者不再可用的路由。在路由会话的路由器中的一个路由器检测到会话失败的情况下，即，会话“关闭”，幸存的路由器可以选择通过网络的一个或多个备选路由以避开发生故障的路由器并且继续转发分组流。特别地，幸存的路由器可以更新内部路由信息以：反映故障；基于已更新的路由信息来执行路由解析以选择一个或多个备选路由；基于所选择的路由来更新其转发信息；以及发送一个或多个更新消息以向对等路由器通知不再可用的路由。转而，接收路由器更新其路由信息和转发信息，并且向其对等体发送更新消息。该过程继续，并且更新信息向外传播，直到其到达网络内的路由器中的所有路由器为止。大型网络中的路由信息可能在网络故障之后由于临时的振荡而花费很长时间周期来收敛到稳定状态，直到其收敛以反映当前网络拓扑为止。在路由信息内的这些振荡通常被称为“摆动”，并且可能导致严重的问题，包括网络连接的间歇性丢失以及增加的分组丢失和时延。为了减少故障的影响，一些路由器包括主要路由控制单元和次要路由控制单元。在主要路由控制单元发生故障的情况下，例如，次要路由控制单元承担转发分组流的责任。在从主要路由控制单元到次要路由控制单元的切换期间，在次要路由控制单元达到能够处理和转发分组的状态之前，可能经过很长时间周期。例如，次要路由控制单元可能需要重新建立在主要路由控制单元发生故障时所丢失的路由会话。在该周期期间，网络业务可能进行排队或者丢失。发明内容一般而言，本公开描述了用于通过具有高可用性的L4连接来使能网络设备的主节点和备份节点之间的不间断路由和平稳切换的技术。为了维持高可用性，套接字复制在主路由控制单元和备用路由控制单元之间被执行。防止了数据丢失，因为备用路由控制单元存储每个入站/出站分组的备份副本。在入站/出站分组中的数据由适当的应用或者协议堆栈处理以便进行传输之前，主路由控制单元将所复制的数据发送给备用路由控制单元。在主路由控制单元和/或备用路由控制单元中，复制模块对协议堆栈层进行挂钩以拦截在任何方向上流动的数据以确保备用路由控制单元具有被预先建立以恢复主路由控制单元的路由会话的备份套接字的最新状态。在本文中所描述的系统和技术通过减少/消除用于响应于所复制的数据而来自备用路由控制单元的显式确认的等待时间来减轻在传统套接字数据复制中的时延。一些系统和技术依赖于L4套接字确认来承担备用路由控制单元成功地接收所复制的数据和/或更新备用路由信息库。在主路由控制单元发生故障的情况下，备用路由单元控制路由和转发决策，其中很少或者不会中断。一些套接字数据复制技术依赖于操作系统的传输控制协议套接字以根据TCP来响应于套接字消息返回TCP套接字确认。这是因为操作系统返回TCP套接字确认以确认接收到套接字消息，而备用路由控制单元仅在所复制的数据已经由应用读取并且被用于更新RIB之后返回显式确认。同样，可以使能不间断路由和平稳切换。在一个示例中，一种方法包括：由用于网络中的主节点的备用节点的复制模块使用与在网络的主节点处的已连接的套接字对应的信息来生成备份套接字，其中信息包括已连接的套接字的传输层状态，其中在主节点处的已连接的套接字根据传输层协议来提供主节点与对等网络设备之间的网络通信连接性，其中备用节点的备份套接字被配置为在从主节点切换之后提供备用节点与对等网络设备之间的网络通信连接性；以及响应于切换，由复制模块根据已连接的套接字的传输层状态来获取备份套接字的发送缓冲区的一部分，其中发送缓冲区包括由主节点写入已连接的套接字的数据块序列，其中已连接的套接字的传输层状态包括标识发送缓冲区的该部分包括待在切换时从主节点传输给对等网络设备的至少一个下一数据块的信息，以及由复制模块经由备份套接字来将该至少一个下一数据块发送给对等网络设备。在另一示例中，一种网络设备包括主节点和备用节点。主节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为：执行提供应用空间和内核空间的操作系统，在应用空间中执行复制应用以接收包括将被写操作系统的套接字的数据的数据写操作或者以接收请求待由路由进程读取的数据的数据读操作。在另一示例中，一种包括至少一个网络设备的网络，该网络包括：备用节点，被配置在网络设备上、在发生切换的情况下恢复主节点的路由会话，其中主节点和备用节点被配置在网络的相同网络设备或者不同网络设备上，其中备用节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为：执行复制模块以：使用与在网络的主节点处的已连接的套接字对应的信息来生成备份套接字，其中信息包括已连接的套接字的传输层状态，其中在主节点处的已连接的套接字根据传输层协议来提供主节点与对等网络设备之间的网络通信连接性，其中备用节点的备份套接字被配置为在从主节点切换之后提供备用节点与对等网络设备之间的网络通信连接性；以及响应于切换，根据已连接的套接字的传输层状态来获取备份套接字的发送缓冲区的一部分，其中发送缓冲区包括由主节点写入已连接的套接字的数据块序列，其中已连接的套接字的传输层状态包括标识发送缓冲区的该部分包括待在切换时从主节点传输给对等网络设备的至少一个下一数据块的信息，以及经由备份套接字来将该至少一个下一数据块发送给对等网络设备。在另一示例中，一种计算机可读存储介质存储有指令，所述指令在被执行时使网络设备的主节点的一个或多个处理器：执行用于提供应用空间和内核空间的操作系统；在内核空间中执行逻辑，该逻辑可操作以：使用与在网络的主节点处的已连接的套接字对应的信息来生成备份套接字，其中信息包括已连接的套接字的传输层状态，其中在主节点处的已连接的套接字根据传输层协议来提供主节点与对等网络设备之间的网络通信连接性，其中备用节点被配置为在主节点发生故障之后提供对网络设备的控制，其中备份节点在主节点发生故障之后提供备用节点与对等网络设备之间的网络通信连接性；以及响应于故障：根据已连接的套接字的传输层状态来获取备份套接字的发送缓冲区的一部分，其中发送缓冲区包括由主节点写入已连接的套接字的数据块序列，其中已连接的套接字的传输层状态包括标识发送缓冲区的该部分包括待在发生故障时从主节点传输给对等网络设备的至少一个下一数据块的信息，以及经由备份套接字来将该至少一个下一数据块发送给对等网络设备。在附图和下面的描述中对一个或多个示例的细节进行了阐述。其他特征、目的和优点将通过描述和附图以及权利要求书而变得明显。附图说明图1图示了由通过通信链路而互连的自治系统形成的示例计算网络。图2是图示了能够使用本公开的技术来执行从主要路由引擎到次要路由引擎的切换的示例路由器的框图。图3是图示了根据本公开的技术的用于执行数据复制的示例过程的流程图。图4是图示了根据本公开的技术的用于在平稳切换之后的不间断路由的示例过程的流程图。图5是图示了能够使用本公开的技术来从主要路由器或者次要路由器进行不间断路由的示例网络的框图。图6是图示了根据本公开的技术的用于复制从本地应用接收到的将被写入套接字的出站数据以便从主要路由引擎传送给对等网络设备的示例方法的流程图。图7是图示了根据本公开的技术的用于经由与主要例程引擎相关联的套接字来复制从对等网络设备接收到的入站数据的示例方法的流程图。图8是图示了根据本公开的技术的无消息传递套接字复制的概念图。图9是图示了根据本公开的技术的用于更新预先连接的套接字的示例过程的概念图。图10是图示了根据本公开的技术的用于在次要路由引擎处更新套接字的状态的示例过程的概念图。图11是图示了根据本公开的技术的从主要路由引擎到次要路由引擎的示例切换的概念图。图12是图示了根据本公开的技术的用于在从主要路由引擎到次要路由引擎的示例切换之后的不间断路由的示例方法的流程图。具体实施方式图1图示了由通过通信链路8而互连的自治系统4A至4C形成的示例计算网络2。每个自治系统4表示独立的管理域，该管理域具有能够进行基于分组的通信的各种联网资源。例如，自治系统4可以包括具有服务器、工作站、网络打印机和传真机、网关、路由器等的内部网络。在该示例中，自治系统4包括用于共享路由信息和经由通信链路8来转发分组的自治系统边界路由器6。即，路由器6维持对等路由会话，并且根据路由协议)来传达路由信息。通过路由会话而传送的消息通常通告和撤回用于到达网络2内的目的地的路由。在网络拓扑发生改变的情况下，诸如发生链路故障或者一个路由器6发生故障，检测到改变的路由器中的任何路由器对向其他路由器通知受影响的路由的消息进行路由。作为响应，路由器6选择用于到达网络2内的目的地的新路由。为了减轻对节点故障的影响，一个或多个路由器6包含主要路由引擎和用于在主要路由引擎发生故障的情况下承担路由责任的一个或多个次要路由引擎。此外，如在本文中所描述的，一个或多个路由器6在使用对路由会话的复制来从主要路由引擎平稳切换到次要路由引擎中的一个次要路由引擎之后提供不间断路由。即，针对与主要路由引擎上的路由会话相关联的套接字的数据在任何切换事件之前被实时透明地复制到次要路由引擎。次要路由引擎构建并且维持备份套接字，以便在与其他路由器6通信时模仿主要路由引擎当前所使用的套接字。在从主要路由引擎切换到次要路由引擎的切换期间，次要路由引擎上的预先建立的备份套接字包含保持与路由对等体的连接所需的所有信息；这些套接字使路由通信会话能够不间断地继续进行，使得这些连接不需要被重新建立。该信息可以包括在已连接的套接字缓冲区中进行排队的任何出站/入站数据以及描述该套接字的状态的信息。在主要路由引擎处的已连接的套接字的状态标识哪些出站数据块已经被写入已连接的套接字、并且然后被复制到备份套接字、以及被传送给对等网络设备但是还未由该对等网络设备确认。基于未确认的数据块，已连接的套接字的状态标识哪些数据块接下来将被发送给对等网络设备。当次要路由引擎承担对来自主要路由引擎的路由会话的控制时，次要路由引擎与一个或多个接下来发送的数据块保持连续通信路由会话，而不会落后于主要路由引擎。由于次要路由引擎维持已连接的套接字的最新状态，因此，次要路由引擎避免了传送主要路由在切换之前已经传输的数据；次要路由引擎在主要路由引擎中断传输针对路由会话的数据的情况下开始传输数据。因此，切换到次要路由引擎是无缝的，并且对于对等网络设备，主要路由引擎的最后一次传输与次要路由引擎的第一次传输之间没有很大的时延。如在本文中所描述的，这些技术提供来自网络中的多个网络设备或者该网络中的单个网络设备的不间断路由，并且实现将对路由会话的控制从主要路由引擎无缝地转移到次要路由引擎的平稳切换。如在本文中所进一步描述的，这些技术通过以下方式来支持无消息传递套接字复制：经由主要路由引擎与次要路由引擎之间的第一传输层连接来复制数据，并且然后，自动将数据推送到协议堆栈上—该协议堆栈经由第二传输层连接来准备和调度要传送给对等网络设备的数据—作为对接收到套接字确认的响应。代替显式确认，这些技术依赖于套接字确认充当所复制的数据已经被存储在第三传输层连接的存储器缓冲区中的临时确认。套接字确认是已经根据传输层协议被组装的示例确认消息，并且表示所复制的数据到达次要路由引擎的第三传输层连接确认。示例传输层协议是传输控制协议，但是本公开可应用于确保传递所传送的数据)的任何合适的协议。传统的套接字复制技术限于同步的套接字复制，并且由于该原因，要求主要路由引擎停止与对等网络设备的通信并且在将任何所复制的数据推送到协议堆栈上之前等待来自次要路由引擎的显式确认。等待显式确认可能导致在路由会话中的显著时延。在本文中所描述的技术中的一些技术在主要路由引擎处对路由会话和套接字复制任务进行解耦提高了该主要路由引擎的总体性能。为了在不影响平稳切换到次要路由引擎和来自次要路由引擎的不间断路由的情况下提供异步的套接字复制，在本文中所描述的技术中的一些技术利用描述第三传输层连接的预先连接的套接字的状态的信息。如在本文中所描述的，一些技术可以在不需要改变联网协议的情况下被实现。按照这种方式，这些技术提供异步的并且对等不可知的套接字复制。应该注意，本公开可以将示例次要路由引擎称为备份节点或者备用节点，并且可以将示例主要路由引擎称为网络内的主要节点或者主节点。取决于有关网络的上下文，节点可以是指与另一路由引擎共享网络设备的路由引擎或者操作为单个路由引擎的网络设备。出于示例的目的，参照路由器6A以及在一些实例中，参照路由器6B对本公开的技术进行描述。然而，路由器6C可以根据在本文中所描述的技术来操作。在该示例中，路由器6A和/或路由器6B通过包括主要路由引擎以及一个或多个备用路由引擎来提供不间断路由。如在本文中所描述的，路由器6A可以是包括主要路由引擎和次要路由引擎两者的网络设备，或者路由器6A和路由器6B可以分别表示主要路由引擎和次要路由引擎作为单独的网络设备的一部分。在平稳切换的情况下，即，当路由器6A的主要路由引擎发生故障或者需要被关闭时，次要路由引擎中的一个次要路由引擎通常承担对路由源和路由功能性的控制。在切换之前，主要路由引擎和次要路由引擎同步与其相应状态对应的信息以允许次要路由引擎在不必重新学习状态信息的情况下承担对路由资源的控制。此外，对应的套接字被预先建立在用于每个套接字的次要路由引擎上，每个套接字当前由主要路由引擎用于路由会话。例如，路由器6A可以使用套接字来与例如路由器6C进行路由会话。路由器6A和路由器6C可以根据路由协议来在已连接的套接字上交换会话消息。当路由器6A从路由器6C接收到消息时，该消息可以在内部被转发给路由器6A的主要路由引擎以便进行处理。在接收与确认之间的某一时刻，复制模块被配置为复制接收到的消息，并且然后经由复制套接字来将其发送给路由器6A的次要路由引擎。在一些示例中，主要路由引擎中的复制模块根据第二套接字的传输协议来生成数据单元，并且然后，与接收到的消息一起传送该数据单元。关于出站消息，当路由器6A经由已连接的套接字生成要传送给路由器6C的消息时，主要路由引擎的复制模块被配置为复制将被发送的消息，并且然后经由复制套接字来将该复制的消息发送给次要路由引擎。在一些示例中，路由器6A生成复合消息，该复合消息被配置为存储所复制的消息，所复制的消息具有与已连接的套接字对应的状态信息。类似地，路由器6B可以根据传输协议来使用第二已连接的套接字与例如路由器6C进行路由会话。关于入站路由消息，当路由器6B从路由器6C接收到消息时，该消息可以在内部被转发给路由器6B的主要路由引擎以便进行处理。在接收与确认之间的某一时刻，复制模块复制接收到的消息，并且然后经由第二复制套接字来将该复制的消息发送给在路由器6A中运行的次要路由引擎。当路由器6B经由套接字生成要传送给路由器6C的消息时，复制模块复制将被发送的消息，并且然后，经由第二复制套接字来将该消息发送给次要路由引擎。响应于经由复制套接字或者第二复制套接字接收到入站消息或者出站消息，次要路由引擎中的备份复制模块或者备用复制模块更新针对备份套接字的状态信息，该备份套接字提供与路由器6C的网络通信连接性。备份套接字与在路由器6A处的主要路由引擎的已连接的套接字、或者在路由器6B处的主要路由引擎的第二已连接的套接字对应。在任一示例中，一旦次要路由引擎配置了备份套接字，就可以利用路由器6A中的主要路由引擎或者路由器6B中的主要路由引擎来自动启用信号。对于备份套接字，次要路由引擎分别在接收到的入站消息数据和出站消息数据内更新至少两个存储器缓冲区。这些缓冲区中的数据块已经被写入提供与特定主要路由引擎的网络通信连接性的套接字。次要路由引擎将数据块作为列举的序列写入缓冲区中，并且记录最后写入的块的序列号作为备份套接字的状态的一部分。出站消息数据块的一部分尚未被发送，并且另一部分尚未被确认；通过记录这些部分的相应序列号，次要路由引擎从其对应的存储器缓冲区获取任何部分的数据块。通过在两个主要路由引擎处有利地使用窃听机制，诸如在本文中所解释的网络过滤器钩子)，向次要路由引擎告知最新的套接字状态变化以便复制到备份套接字。在一些示例中，路由器6A的次要路由引擎经由窃听机制来监听由特定主要路由引擎在对应的传输协议层处接收和发送的入站消息或者出站消息。协议堆栈的这一层在路由协议之后处理出站消息数据，并且至少由于该原因，次要路由引擎可以假定主要路由引擎处理了消息。可以对协议堆栈的传输协议进行挂钩以在其发送的同时更新所发送的数据的次要路由引擎。协议堆栈的传输层在网络层之后处理入站消息数据，并且因此，可以对协议堆栈的传输层进行挂钩以用准确的并且是当前的确认来更新次要路由引擎。复制模块生成以下数据：标识出站消息数据的未由路由器6C确认的一个或多个数据块的数据；以及标识相同出站消息数据的尚未被发送给路由器6C的一个或多个数据块的数据。如在本文中所描述的，窃听机制使次要路由引擎能够在发生切换的情况下维持备份套接字的已更新的套接字状态，使得次要路由引擎无缝地承担主要角色。次要路由引擎通过窃听机制的方式来拦截传入的确认消息并且将已确认的序列号复制到状态备份套接字，使得套接字状态保持最新并且当前具有主要路由引擎的已连接的套接字或者第二已连接的套接字。次要路由引擎记录在最后确认的数据块之后的序列号作为未确认的数据块的序列的起始点。按照这种方式，次要路由引擎避免了重新传输已确认的数据，并且防止了路由器6A滞后。作为窃听机制的另一有利用途，次要路由引擎在主要路由引擎的协议堆栈的传输层处拦截出站路由消息。次要路由引擎记录在由主要路由引擎最后发送的数据块之后的数据块的序列号。按照这种方式，次要路由引擎响应于切换和/或在主要路由引擎关闭时自动恢复与路由器6C的路由会话。次要路由引擎快速标识将被发送给路由器6C的每个下一数据块，并且在继续与主要路由引擎的路由会话时准备要传送给路由器6C的数据单元。不管进行什么切换，应用都对数据块进行读取，该数据块存储已经由在次要路由引擎处的协议堆栈的传输层处理并且被写入备份套接字的对应的发送缓冲区或者接收缓冲区的入站/出站消息。在次要路由引擎处的路由协议进程可能调用请求未读取的数据的读操作，并且作为响应，复制模块产生与所请求的数据块的进程间通信。路由协议进程在准备切换时更新存储路由信息和转发信息))的各种数据库，使得分组转发引擎可以恰当地向自治系统内的内部目的地或者不同自治系统中的外部目的地转发分组。因此，基于已更新的状态信息，次要路由引擎在不严重中断分组转发的情况下继续对针对与路由器6C的每个会话的消息进行路由。即使在切换到备用路由引擎的备份套接字之后，当入站/出站消息由在路由器6A处的协议堆栈处理时，复制模块也更新以下数据：标识发送缓冲区的未由路由器6C确认的一个或多个数据块的数据；以及标识相同发送缓冲区的尚未被发送给路由器6C的一个或多个数据块的数据。在其他示例中，路由器6A的主要路由引擎可以在数据由用于主要路由引擎上的套接字的协议堆栈处理之前将所复制的数据发送给次要路由引擎。例如，在主要路由引擎处的复制模块可以将数据复制到次要路由引擎和向次要路由引擎传送数据，例如在出站消息由协议堆栈打包到传输层协议数据单元中之前，或者在入站消息由协议堆栈从传输层协议数据单元解包之前。在本公开中，传输层协议数据单元可以被称为TCP段或者分组。作为另一示例，在主要路由引擎处的复制模块可以在出站消息由协议堆栈打包到数据单元之后和/或在入站消息由协议堆栈解包之后将数据复制到次要路由引擎和向次要路由引擎传送数据。如下面所进一步说明的，这样在网络堆栈的不同级别下异步/同步复制针对路由消息的数据帮助路由器6A确保次要路由引擎上的对应备份套接字的状态与主要路由引擎的已连接的套接字的状态相匹配。在路由器6A的主要路由引擎失效的情况下，次要路由引擎检测到该事件并且恢复对主要路由引擎的路由功能性的控制。由于次要路由引擎已经接收到主要路由引擎已经发送和接收到的数据中的所有数据，因此，次要路由引擎可能能够使通信会话继续，而不必重新启动会话。该数据包括在相同网络设备中的不同路由引擎或者不同网络设备中的不同路由引擎之间的套接字数据复制。主要路由引擎和次要路由引擎都采用状态机来维持一对高度可用的套接字的状态及其与对等网络设备的底层冗余连接。例如，次要路由引擎可以保持追踪所发送的数据和接收到的数据的序列号。次要路由引擎还可以缓冲所发送的数据，使得如果主要路由引擎在所发送的数据的至少一部分被推送到协议堆栈和被实际传输之前发生故障，则次要路由引擎可以开始传输所发送的数据的该部分。从紧接已经被成功地放置在有线/无线连接上的最后发送的数据块之后的第一数据块开始，次要路由引擎对消息进行路由，从而受益于主要路由引擎的会话路由消息。此外，如果主要路由引擎在对等网络设备接收方未接收到所发送的数据时发生故障，则次要路由引擎可以在控制路由责任之后重新传输数据之前等待确认和/或代替在控制路由责任之后重新传输数据而等待确认。主要路由引擎和/或次要路由引擎还可以将发送数据缓冲区的每个字节映射到发送序列号。通过利用底层连接的TCP状态来搭载套接字复制，在本文中所描述的技术可以按照会比其他套接字复制技术更有效的方式来使能异步的套接字数据复制。对于传入的数据，主要路由引擎在分组遍历协议堆栈时在用于对应的套接字的TCP状态机中更新TCP状态，并且转而，次要路由引擎在对应的所复制的套接字的TCP状态机中更新TCP状态。对于传出的数据，主要路由引擎将传出的数据复制到次要路由引擎，并且当接收到来自对等体的确认时，次要路由引擎标识映射到确认的传出数据的至少一部分并且可以通过从存储器中去除该部分来遵循该标识。对于传出的数据和传入的数据，在接收到来自对等网络设备的确认之后，主要路由引擎通过带外通信)的方式来传输当前的和/或已更新的TCP状态数据。对于传出的数据，主要路由引擎在通过协议堆栈推送发送缓冲区之前将发送数据缓冲区复制到次要路由引擎，并且然后，将发送数据缓冲区打包为TCP段。次要路由引擎不更新TCP机器的TCP状态，直到接收到来自对等体的TCP确认为止。此外，根据本公开的技术，主要路由引擎可以被配置为在不依赖于内核级增强的情况下将状态信息复制到次要路由引擎，从而实现平稳的故障切换，包括在不需要修改主要路由引擎的操作系统的底层内核的情况下进行套接字数据复制。即，主要路由引擎可以配置有拦截套接字调用的用户空间复制应用、与现有内核软件分开操作并且由用于将套接字数据复制到次要路由的复制应用调用的新内核级模块。当主要路由引擎的操作系统的套接字层从对等体或者应用接收数据时，内核模块拦截数据并且将其复制到次要路由引擎。在从次要路由引擎接收到确认之后，内核模块继续处理数据。一般而言，内核模块可以包括三个部分：用于处理要复制的数据的内核线程、用于拦截来自应用的套接字数据的设备驱动以及用于套接字接收数据事件拦截和事件处理的功能性。在本文中所描述的技术可以提供某些优点。例如，路由器6A可能能够在路由引擎之间执行平稳切换，从而实现不间断路由。在发生故障或者为了关闭主要路由引擎的其他需要的情况下，路由器6A可能能够在不需要停机的情况下并且按照避免路由会话建立的方式来继续转发分组，从而避免了对等路由器的路由摆动。类似地，这些技术可以使路由器能够在不造成路由摆动的情况下接收服务中软件升级。例如，当路由器需要进行软件升级时，系统管理员可以使次要路由引擎离线以接收并且安装升级。此外，路由器6A可以透明地对外部网络设备执行套接字复制，因为不需要修改现有通信协议。当与对等网络设备通信时，路由器6B至6C不需要改变其相对于所使用的路由协议的行为以使路由器6A实现套接字复制和不间断路由。此外，路由器6B至6C不需要具有对路由器6A被配置为执行切换这一事实的任何指示。图2是图示了能够使用在本文中所描述的技术来执行从主要路由引擎22到次要路由引擎40的平稳切换的示例路由器20的框图。路由器20可以例如与图1所示路由器6A对应。在图2的示例实施例中，路由器20包括主要路由引擎22和次要路由引擎40。按照这种方式，路由器20可以被视为具有主要控制单元和备份控制单元。主要路由引擎22负责维持路由数据库24以反映路由器20所连接的网络和其他网络实体的当前拓扑。即，主要路由引擎22提供用于执行路由进程)26的操作环境，该路由进程26实现一个或多个路由协议以与对等路由器进行通信并且周期性地更新路由数据库24以准确地反映网络和其他网络实体的拓扑。示例协议包括路由和标签交换协议，诸如BGP、MP-BGP、IS-IS、OSPF、RIP、RSVP-TE和LDP。按照类似的方式，次要路由引擎40提供用于根据从主要路由引擎22接收到的数据来维持路由数据库42的操作环境。备选地，在本文中所描述的技术可以在第一路由器的路由引擎与第二路由器的路由引擎之间被应用。即，路由器6A的路由引擎可以充当主要路由引擎，而第二路由器的路由引擎可以充当次要或者备份路由引擎。在典型的架构中，路由器20包括接口卡58A至58N，这些接口卡58A至58N在入站链路60A至60N上接收分组，并且在出站链路62A至62N上发送分组。IFC 58通过高速交换机56被耦合到主要路由引擎22和次要路由引擎40。在另一实施例中，路由器20可以是多机架路由器，在该多机架路由器中，多个路由节点被物理耦合并且被配置为操作为单个路由节点。多机架路由器的一个示例包括多个线卡机架包括用于发送和接收分组的一个或多个接口卡)和提供对LCC的自上而下的管理的中央交换控制机架。2011年11月1日发布的标题为“MULTI-CHASSIS ROUTER WITH MULTIPLEXED OPTICAL INTERCONNECTS”的美国专利8,050,559描述了一种多机架路由器，在该多机架路由器中，多级交换结构被用作用于在多机架路由器的多个路由节点之间中继分组的高端转发平面。美国专利8,050,559的全部内容通过引用并入本文。由路由进程26实现的一个或多个路由协议与其他路由器建立路由会话，并且通过这些网络通信会话的方式，交换路由消息。这样，在主要路由引擎22内执行的操作系统30实现内核级进程以便在开放系统互连联网模型的各个层上处理数据。OS 30提供API，路由进行26通过该API来创建套接字34，并且建立例如基于TCP/IP的通信会话以便发送和接收针对每个套接字的路由消息。套接字34是具有由主要路由引擎22的OS 30维持的数据结构和状态数据的逻辑构造，并且可以被视为充当路由进程26与协议堆栈36之间的接口。OS 30还提供用于执行与OS相关的进程的内核空间和用于执行应用的应用空间。复制驱动32可以被实现为设备驱动。内核空间和应用空间通常与存储器)的单独的区域对应，并且OS 30通常防止在应用空间中被执行的应用访问被分配给内核空间的存储器地址。路由器20的主要路由引擎22还包括复制应用28。被实现在路由器20的电路系统中的一个或多个处理器执行复制应用28以根据本公开的技术来在主要路由引擎22与次要路由引擎40之间执行分组和数据复制。复制应用28可以例如接收来自路由进程26的将被写入一个套接字34的数据。根据本公开的技术，如下面更详细地解释的，复制应用28将这种数据传递给在由OS 30提供的内核空间内被执行的复制驱动32，该复制驱动32在将数据写入一个套接字34时将数据复制到次要路由引擎40。特别地，OS 30和OS 48经由通信通道64来传送数据和确认，该通信通道64可以与OS 30和OS 48的套接字之间的通道对应。次要路由引擎40提供用于执行路由进程44的操作环境。像路由进程26一样，路由进程44实现一个或多个路由协议，并且周期性地更新路由数据库42以准确地反映网络和其他网络实体的拓扑。即，与路由进程26一样，路由进程44通过所复制的套接字52来发送和接收路由消息，其中所复制的套接字中的每个套接字与当前用于路由通信的一个套接字34对应。路由进程44从主要路由引擎22接收所复制的路由消息，更新路由数据库42，并且输出路由消息，犹如其正在处理用于路由器20的所有路由功能一样。次要路由选择引擎40的所复制的套接字52是具有由OS 48维持的数据结构和状态的逻辑构造，并且充当路由进程44与协议堆栈54之间的接口，也是次要路由引擎40的接口。像OS 30一样，OS 48还提供内核空间和应用空间。被实现在路由器20的电路系统中的一个或多个处理器可以在由OS 48提供的应用空间中执行路由进程44和复制应用46，以及在由OS 48提供的内核空间中执行复制驱动50。在打开新的路由会话之后，路由进程26与操作系统30进行交互以为新的路由会话分配新的套接字34，并且给套接字加标签以便通过API调用复制到操作系统30。该调用使操作系统30如下面所描述的那样异步地建立在协议堆栈36、54之间的复制通信。根据本公开的技术，当路由进程26执行写操作以向套接字34发送数据时，复制应用28在数据到达一个套接字34之前接收数据。然后，复制应用28可以构建包括要发送给复制驱动32的数据的写入消息。例如，复制应用28可以按照如下面针对图3所更详细地讨论的io_buffer数据结构的形式来构建消息。一般而言，该消息可以指示数据将被写入，并且包括将被写入其本身的数据。然后，复制应用28可以将该消息传递给复制驱动32。响应于接收到该消息，复制驱动32可以使OS 30将消息的数据发送给OS 48以便进行复制。最终，OS 48的复制驱动50可以接收数据并且用该接收到的数据来更新与一个套接字34对应的一个所复制的套接字52。按照这种方式，一个所复制的套接字52将反映对应的一个套接字34的状态。在用数据来更新一个所复制的套接字52之后，复制驱动50和/或OS 48可以将对数据的确认发送给OS 30和/或复制驱动32。响应于确认，复制驱动32和/或OS 30可以将数据引导给套接字34之一。OS 30最终可以将数据从一个套接字34传递给协议堆栈36，该协议堆栈36根据OSI模型来对该数据进行封装以形成分组。然后，OS 30将分组发送给交换机56，该交换机56经由一个出站链路62来将分组引导给适当的IFC 58。路由器20还可以经由一个入站链路60来接收分组。IFC 58中接收分组的一个IFC58可以将分组发送给交换机56，该交换机56可以将分组引导给主要路由引擎22的协议堆栈36，这假设主要路由引擎仍然作为主节点是活动的。协议堆栈36可以对分组进行解封装以提取与应用相关联的应用层数据。根据本公开的技术，OS 30可以维持表示以下应用的数据结构：针对这些应用，数据将被复制。因此，OS 30可以基于待向其传递应用层数据的应用和数据结构来确定应用层数据是否将被复制到次要路由引擎40。如果应用层数据将被复制，则OS 30可以将应用层数据传递给复制驱动32。复制驱动32可以再次形成包括和/或表示应用层数据的数据结构，并且将该数据结构发送给OS 48。在OS 48和/或复制驱动50更新了对应的一个所复制的套接字52之后，OS 48可以将所复制的数据的确认发送给OS 30。OS 30可以从路由进程26接收读取请求以从待向其写入接收到的应用层数据的一个套接字34读取数据。在响应于读取请求而将一个套接字34的数据传递给路由进程26之前，复制驱动32和/或OS 30可以进行等待，直到从OS 48/复制驱动50接收到确认为止。按照这种方式，路由器20可以分别在主要路由引擎22的套接字34和次要路由引擎40的所复制的套接字52之间执行套接字复制过程。特别地，该套接字复制过程不需要涉及更改OS 30的内核或者OS 48内核。因此，本公开的技术可以被实现在以下路由器中：对于该路由器，OS 30、48是封闭源或者许可防止内核更改。即，由于本公开的技术可以至少部分地由复制驱动32、50执行，因此，复制驱动32、50可以具有内核级资源的访问权限，而无需修改内核本身。图3是图示了根据本公开的技术的用于执行数据复制的示例过程的流程图。特别地，图3更详细地描绘了图2所示路由器20的一组示例组件。在该示例中，主要路由引擎22包括由图2所示OS 30提供的应用空间70和内核空间72。路由器20的一个或多个处理器在应用空间70中执行路由进程26和复制应用28，并且在内核空间72中执行复制驱动32、复制模块内核线程74、套接字34、协议堆栈36和TCP状态76。路由进程26表示可以将数据写入一个套接字34的主要应用的一个示例，该套接字34可以根据本公开的技术被复制。在一些示例中，复制驱动32和复制模块内核线程74可以在功能上被集成为单个模块或者驱动，但是出于解释的目的而单独图示和讨论复制驱动32和复制模块内核线程74。在图3的过程中，路由进程26在最初调用被配置为使用套接字接口来将数据写入套接字的功能。然而，根据本发明的技术，复制应用28是路由器20的复制库的一部分。特别地，复制应用28被配置为从应用接收套接字写调用。因此，来自路由进程26的套接字写系统调用被覆写，并且所写入的数据被发送给复制应用28。复制应用28构建写消息并且调用其自己的复制写函数，该函数将写消息传递给复制驱动32。写消息可以是数据结构的形式，例如如下所示：io_buffer数据结构的io_flags元素可以具有以下值中的一个值：IO_FD：用于读取/写入的套接字文件描述符IO_REPL_FD：用于将数据复制到备份的REPLICATION FDIO_RD：套接字READ OPIO_WR：套接字WRITE OPIO_MORE：由复制模块设置以向应用指示存在将被读取的更多数据。io_buffer数据结构的io_fd元素表示用于一个或多个输入/输出操作的套接字描述符。io_buffer数据结构的io_buffer元素是具有指向针对读/写操作的数据的值的数据结构。对于IO_REPL_FD操作，缓冲区的值指向复制FD。按照这种方式，复制应用28将struct io_buffer数据结构写入复制驱动32。复制应用程序28可以对以下一个或多个套接字34进行标记：该一个或多个套接字34应该被解释为由内核复制驱动复制以将数据复制到次要路由引擎40或者直接将数据附加到套接字发送缓冲区并且触发对数据进行第4层处理。特别地，复制驱动32和/或复制模块内核线程74可以维持指示哪个套接字34将被复制到次要路由引擎40的数据。按照这种方式，如下面针对图6至图12所更详细地解释的，当接收到将被复制的针对一个套接字34的数据时，复制驱动32和/或复制模块内核线程74可以使用传输层确认来在数据已经被复制到次要路由引擎40之后立即将该数据返回给路由进程26；这与其中不同的确认确定将数据返回给路由进程26的时间的其他系统不同。然后，复制驱动32将数据传递给复制模块内核线程74，该复制模块内核线程74通过复制链路或者信道将该数据写入次要路由引擎40，该次要路由引擎40执行类似的复制内核线程。复制驱动32将足够的报头信息附加到该数据以供次要路由引擎40标识数据所对应的连接。然后，数据可以被传递给应用。在一些示例中，复制驱动32和/或复制模块内核线程74创建复合消息，该复合消息在缓冲区数据中包括待经由套接字34中的某一已连接的套接字而传送给对等网络设备的TCP段。在次要路由引擎40上的复制模块内核线程已经接收到该数据之后，次要路由引擎40将确认接收到的数据的TCP ACK发送给主要路由引擎22。代替等待次要路由引擎40针对每个接收到的复制数据块发送显式ACK消息，主要路由引擎22和次要路由引擎40依赖于针对对应TCP套接字的TCP ACK作为用于确定数据块是否已经由次要路由引擎40传递和接收的机制。代替多个确认，主要路由引擎22接收单个确认。在一些示例中，主要路由引擎22将多个数据块封装到TCP段中，并且然后，将该TCP段发送给TCP套接字以供次要路由引擎40接收。作为响应，次要路由引擎40返回用于确认整个TCP段的一个TCP ACK。因此，单个确认可以确定接收到多个数据块，该多个数据块中的每个数据块具有可配置的大小。消息的有效性在次要路由引擎40处理所复制的数据块时被异步地确认。该ACK机制确保了用于将被处理的数据的最短等待时间和由大量消息传递造成的少量CPU/网络负载以一旦在次要路由引擎40处接收到所复制的数据，就返回确认所复制的数据。在一些示例中，对于利用确认机制的协议，复制模块内核线程74可以确保TCP ACK将仅在数据已经被成功地复制到次要路由引擎40之后经由协议堆栈36被发出。然而，复制模块内核线程74在等待来自次要路由引擎40的TCP ACK的同时继续处理要传输给目的地的所复制的数据。由TCP堆栈生成的ACK将被保留在挂钩代码中，而无需进行内核修改。在复制模块内核线程74从次要路由引擎40接收到针对给定数据块的ACK之后，复制模块内核线程74标识用于数据的一个套接字34，并且用信号通知NF挂钩代码释放针对数据块的TCP ACK。复制模块内核线程74还可以包括用于有关在用于每个套接字34的次要路由引擎40上可用的缓冲区大小周期性地更新主要路由引擎22的机制。该机制可以被用于像TCP一样的协议以将TCP报头中的窗口大小传送给对等体。在不等待所复制的数据的显式确认而是依赖于TCP ACK的情况下，主要路由引擎22上的复制模块内核线程74将所复制的数据附加到套接字34中数据所针对的已连接的套接字。然后，协议堆栈36从套接字34中的已连接的套接字接收套接字缓冲区数据，并且相应地处理数据以待经由对应的网络协议而发送。TCP状态76下的一些属性字段仅在接收到的数据被成功地复制到次要路由引擎40时被确定，这将很可能按照数据的计划传输时间发生。当数据被成功地复制到次要路由引擎40时，图4所示复制模块内核线程74’会返回显式确认。出站数据可以被打包为若干分组，并且然后，利用适当的报头信息被向下游传输给对等网络设备。报头的示例属性包括序列号，诸如针对每个所发送的分组而递增的分组级序列号、针对所发送的数据的每个字节而递增的字节级序列号等。次要路由引擎40的复制模块内核线程74或者互补复制模块内核线程可以采用字节级序列号来对套接字缓冲区数据中的每个所复制的数据块中的字节进行寻址。出站数据复制可能不具有可用的最新状态信息，因为套接字34的一个或多个所发送的数据缓冲区中的已缓冲数据36还未由协议堆栈36处理。出站数据复制依赖于复制模块内核线程74来更新TCP状态76下的信息，以及将这种更新传播给次要路由引擎40的复制模块内核线程。当协议堆栈36发送传出的TCP段时，协议堆栈36中的挂钩代码元素提示复制模块内核线程74更新TCP状态，并且然后，向次要路由引擎40告知已更新的TCP状态。传输层协议在分组遍历该协议堆栈时将“钩子”定义为定义明确的点。挂钩代码元素可以是指向挂钩代码一经触发就被调用的函数的指针。在其他示例中，复制模块内核线程74周期性地更新TCP状态76，并且然后，向次要路由引擎40发送TCP更新消息。挂钩代码元素可以是现有钩子基础架构中的若干众所周知的钩子中的一个钩子。LinuxNetfilter在正常的套接字接口之外实现用于分组处理的框架。复制模块内核线程74可以确保在套接字34中将被复制的一个套接字上所接收到的任何数据不由路由进程26读取，除非数据被成功地复制到次要路由引擎40。为了实现这一点，在最初，接收到的数据被写入适当的一个套接字34，并且响应于协议堆栈36接收到数据而唤醒复制模块内核线程74。复制模块内核线程74然后将数据发送给次要路由引擎40，该次要路由引擎40在接收到数据之后对数据进行确认。从对等体接收到针对每个所传输的分组的确认消息使协议堆栈36中的另一挂钩代码元素提示复制模块内核线程74更新TCP状态76，并且然后，基于ACK序列号来告知主要路由引擎40，该ACK序列号是指被传输给对等体的最后一个字节的序列号和接下来将被发送的数据的第一字节的序列号。复制模块内核线程74获取当前的TCP状态76，生成TCPi更新消息以存储当前的TCP状态76，并且将TCP更新消息发送给次要路由引擎40的复制模块内核线程。如在本文中所描述的，复制模块内核线程74在协议堆栈38上配置钩子，使得当数据由挂钩代码处理时，TCP更新消息被生成，并且然后，被传送给次要路由引擎40的复制模块内核线程。为了通过作为一个套接字34的示例TCP套接字的方式来进行说明，复制模块内核线程74至少根据以下三个代码语句来用对TCP状态76的最新改变更新次要路由引擎40。首先，代码语句tp-＞snd_una＝ntohl可操作以更新所发送的下一序列号以指向对等体正期望的序列空间中的下一字节。其次，代码语句tp-＞snd_nxt＝ntohl可操作以针对为了进行传输而输出的最后一个字节更新序列号。被写入套接字的数据的每个字节被分配有表示该字节在字节流中的位置的序列号。在写缓冲区中，最后一个字节被分配有TCP发送序列号。这与上面所提到的发送序列号不同，上面所提到的发送序列号是为了进行传输而输出的最后一个字节的序列号。第三，代码语句tp-＞write_seq＝ntohl可操作以针对由套接字上的路由进程26和复制模块内核线程74写入的最后一个字节更新序列号。入站类型复制可以按照类似的方式或者完全不同的方式被执行。在一个示例中，传入的数据被接收到套接字的接收缓冲区中，并且然后，套接字唤醒机制被略微修改，使得对于套接字34中的所复制的套接字，复制模块内核线程74被唤醒，而不是拥有套接字的真实应用。每当在套接字上接收到数据时，不同的操作系统针对每种套接字类型实现不同的唤醒回调机制。有关事件“接收到数据”的这种回调机制可以被应用于任何操作系统。本公开的复制模块内核线程74的示例被配置为将这种回调机制覆写为在接收到套接字数据之后唤醒。图4是图示了根据本公开的技术的在平稳切换之后的不间断路由的流程图。该流程图还图示了用于如向应用所请求的入站数据和出站数据的读操作。路由器21是与路由器20在相同网络内的另一网络设备。路由器21操作示例次要路由引擎40，该示例次要路由引擎40具有路由器20的组件的互补组件，诸如路由进程26’、复制应用28’、复制驱动32’、套接字34’、协议堆栈36’、复制模块内核线程74’和TCP状态76’。每个互补组件并行操作，并且在发生切换的情况下，互补组件为主要路由引擎实现不间断路由。图4示出了TCP状态76’，该TCP状态76’用于存储由复制应用28’获取和/或更新的所复制的套接字FD的每进程传输层状态。复制模块内核线程74’维持已连接的套接字被复制到其的所有备份套接字34’的最新TCP状态76’。路由器10受益于使复制模块内核线程74将所复制的套接字34’维持在当前的或者接近当前的TCP状态74’，其中互补套接字34在路由器20处；作为一个益处，协议堆栈36’可以在承担对主要路由引擎的路由功能性之后几乎立即开始消息路由。路由器10可以接收指示切换到次要路由引擎40的信号并且作为响应，针对路由器20开始消息路由。在一些示例中，TCP状态76’将标识第一发送的下一数据块的所发送的下一序列号存储在所复制的套接字34’的发送缓冲区中。主要路由引擎22在切换停止所计划的传输之前具有针对传输而计划的第一已发送下一数据块。在发送每个消息之后，协议堆栈36’可以更新套接字34’中的一个或多个存储器缓冲区。在一些示例中，挂钩代码元素可以响应于入站数据和出站数据而更新TCP状态76’。复制模块内核线程74针对套接字34’中的发送缓冲区或者接收缓冲区执行数据读操作。应用空间70’中的应用发出最终通过复制模块内核线程74来提供服务的读取请求。复制应用28’可以通过接收读取请求被唤醒，从而使复制模块内核线程74执行读操作并且从套接字34’中的缓冲区获取一个或多个所请求的数据块并且将获取的数据传递给复制驱动32’，该复制驱动32’将数据发送给复制应用28’，该负载应用28’将数据传递给路由进程26’。复制应用28’通过将所请求的数据时钟提供给路由进程26’来完成读取请求。图5是图示了能够使用本公开的技术来从主要路由器20或者路由器21进行不间断路由的示例网络2的框图。图5图示了网络2的示例，其中与驻留在相同网络设备中相反，主要路由引擎22和次要路由引擎40在单独的物理网络设备中操作。网络2包括若干网络设备，这些若干网络设备包括分别用作主节点和备用节点的路由器20、21。作为备用节点，路由器21被配置为响应于切换而提供对用于主节点的路由功能组件的控制。若干机制触发切换，并且作为一个示例，在路由器20上的故障调用切换到路由器21，这种切换允许该路由器21恢复与对等网络设备的路由会话。除了故障之外，进行切换的另一原因还可以使次要路由引擎40代表主要路由引擎22恢复路由会话。复制模块12表示图3所示复制应用28、复制驱动32和复制模块内核线程74中的一个或多个。复制模块14补充复制模块12，并且在路由器21中作为备份复制模块进行操作。路由器21包括被实现在电路系统中并且被配置为执行复制模块14的一个或多个处理器。如在本文中所描述的，复制模块14可以补充复制模块12，并且包括复制模块内核线程74’或者如在图4中所图示的复制应用28’、复制驱动32’和复制模块内核线程74’的组合。如在本文中所描述的，复制模块14使用与在用于网络2的路由器20处的相应套接字34对应的信息来生成套接字34’。例如，复制模块14使用与在路由器20处的套接字34A对应的信息来生成套接字34A’，其中套接字34A是已连接的套接字，该已连接的套接字提供与另一网络的对等网络设备的网络通信连接性，例如经由传输层协议。套接字34A’在发生切换的情况下操作为用于套接字34A的备份套接字。如在本文中所描述的，复制模块内核线程74’将备份套接字配置为被预先建立到与已连接的套接字相同的对等网络设备，从而使备份套接字能够提供与相同对等体的网络通信连接并且实现切换到路由器21。因此，这种信息的至少一部分描述在路由器20处的套接字的传输层状态。在承担对与对等网络设备的路由会话的控制之后，复制模块14恢复以在由路由器20传送的最后一个消息之后的下一消息开始的交换会话消息。按照这种方式，路由器21使其中路由器20使下一消息停止的路由会话继续。复制模块14根据套接字34A的传输层状态来获取套接字34A’的发送缓冲区的一部分。发送缓冲区可以包括已经由主要路由引擎22写入套接字34A的数据块序列。套接字34的传输层状态包括标识发送缓冲区的以下部分的信息：该部分存储待在切换时从主节点传输给对等网络设备的至少一个下一数据块，并且经由套接字34A’来将该至少一个下一数据块发送给对等网络设备。复制模块14在向对等网络设备传输传输层协议数据单元之后更新套接字34A’的传输层状态。传输层协议数据单元包括最后传输的数据块。在准备切换时，通过调用主要路由引擎22的协议堆栈36中的挂钩代码元素，次要路由引擎40的复制模块14可以在协议堆栈36经由套接字34传输数据单元时接收套接字状态更新并且将该更新传播给套接字34A’。上述更新可以包括指示以下传输层协议序列号的信息：该传输层协议序列号用于标识套接字34A’的发送缓冲区中的最后传输的数据块。类似地，在切换之后，通过调用协议堆栈36’中的挂钩代码元素，复制模块14监听和拦截传输层协议数据单元的传输，并且对于被发送给对等网络设备18的每个所传输的数据单元，复制模块14利用该数据单元的传输层协议序列号来更新套接字34A’的传输层状态。由于已更新的序列号反映最近传输的数据块，因此，复制模块14可以确定将被发送给对等网络设备18的至少一个下一数据块的序列号。在一个示例中，复制模块14在套接字34A’的发送缓冲区中标识未发送的/所发送的下一数据块的特定子序列，并且然后，利用该子序列的第一序列号或者序列空间来更新套接字34A’的传输层状态。对等网络设备18可以用接收到至少一个下一数据块的确认来进行响应，并且示例确认包括套接字确认。示例套接字确认是指根据套接字34A’的相同传输层协议的确认消息。套接字确认可以包括以下信息：该信息表示由对等网络设备18接收的最后的消息的信息，并且向路由器21通知在下一次传输中所期望的下一数据块。响应于从对等网络设备18接收到确认，复制模块14利用标识最后确认的数据块的信息来更新套接字34A’的传输层状态。如在本文中所描述的，套接字34A’表示路由器21与对等网络设备18之间的传输层连接，并且上述信息可以是标识套接字34A’的发送缓冲区中的最后确认的数据块的传输层协议序列号。使发送缓冲区中的数据块的布置被映射到序列号的地址空间，复制模块14可以使用确认来在针对路由器20的路由会话继续时标识将被发送给对等网络设备18的下一数据块。复制模块14将下一数据块的序列号存储为套接字34A’的传输层状态的一部分，并且将发送缓冲区的一部分标识为未发送的/所发送的下一数据块的子序列。与数据单元的挂钩传输类似，通过调用在协议堆栈36和/或协议堆栈36’处的挂钩代码元素，复制模块14响应于经由套接字34A和/或套接字34A’而接收到的确认消息来接收和传播套接字状态更新。按照这种方式，复制模块14可以将套接字缓冲区划分为针对未确认的所传输的数据块和未传输的数据块的相应子序列。经由被配置为提供路由器20的主要路由引擎22与路由器21的次要路由引擎40之间的网络通信连接性的套接字35，复制模块12和复制模块14执行套接字复制。复制模块12通过以下方式来复制包括针对套接字34A的状态信息的数据：将该数据写入套接字35，并且然后，将所复制的数据作为套接字消息发送给路由器21的次要路由引擎40。当路由器20的主要路由引擎22经由套接字34A向对等网络设备18发送数据单元和从对等网络设备18接收数据单元时，复制模块12经由套接字35将套接字状态更新传播给复制模块14。图6是图示了根据本公开的技术的用于复制从本地应用接收到的将被写入套接字的出站数据以便从主要路由引擎22传送给对等网络设备的示例方法的流程图。如图所示，出站数据根据本公开的技术而被复制到次要路由引擎40。在最初，在主要路由引擎40的用户空间内执行的复制应用28从应用接收将被写入一个套接字的数据以便与对等网络设备进行出站通信。一个套接字34被指定为针对其要对数据进行复制的套接字，在该示例中，以在主要路由引擎发生故障的情况下支持平稳的故障切换。因此，如上面所讨论的，复制应用28将数据传递给复制驱动32，该复制驱动32将数据发送给图3所示复制模块内核线程74，该复制模块内核线程74将数据写入套接字发送缓冲区。复制模块内核线程74从TCP状态76获取当前状态信息，并且基于被写入套接字发送缓冲区的数据，为对应的TCP套接字更新TCP状态76。在一个示例中，更新TCP状态76依照以下三个代码语句：复制模块内核线程74首先执行代码语句tp-＞snd_una＝ntohl以更新所发送的下一序列号以指向对等体正期望的序列空间中的下一字节。其次，复制模块内核线程74执行代码语句tp-＞snd_nxt＝ntohl，该代码语句tp-＞snd_nxt＝ntohl可操作以针对为了进行传输而输出的最后一个字节更新序列号。被写入TCP套接字的数据的每个字节被分配有表示该字节在字节流中的位置的序列号。在写缓冲区中，最后一个字节被分配有TCP发送序列号。这与上面所提到的发送序列号不同，上面所提到的发送序列号是为了进行传输而输出的最后一个字节的序列号。复制模块内核线程74执行第三代码语句tp-＞write_seq＝ntohl，该第三代码语句可操作以针对由TCP套接字上的主要应用写入的最后一个字节更新序列号。复制模块内核线程74将数据的表示发送给次要路由引擎40。例如，复制模块内核线程74可以根据上面所讨论的io_buffer数据结构来使消息实例化。复制模块内核线程74然后可以将该消息发送给次要路由引擎40。次要路由引擎40从主要路由引擎22接收消息。次要路由引擎40通过发送对成功传输的确认来对接收到消息做出响应。次要路由引擎40将所复制的数据写入在备份套接字34’的对应发送缓冲区中的接收到的消息中，并且更新与消息中的所复制的数据对应的备份套接字34’以反映用于主要路由引擎22的对应的已连接的套接字34的当前状态。复制模块内核线程可以为主要路由引擎22的对应的已连接的套接字34记录已更新的TCP状态76。按照这种方式，如果主要路由引擎22将故障切换到次要路由引擎40，则次要路由引擎40可以代表主要路由引擎22进行操作，以防止已建立的网络通信中断。主要路由引擎22从次要路由引擎40接收确认。这使协议堆栈36从一个套接字34的数据的若干字节构建分组，例如利用各种网络层报头来对应用层进行封装。然后，复制模块内核线程74通过将数据推送给协议堆栈34的数据链路层来将从复制驱动32接收到的数据传递给一个套接字34，并且传输每个数据分组。最终，一个IFC58输出分组。假定对等体成功地接收到所传输的数据并且没有分组被丢弃，主要路由引擎22从对等体接收TCP确认，并且转而，复制模块内核线程74更新对应的套接字34的TCP状态76。复制模块内核线程74通过经由复制套接字向次要路由引擎40发送更新消息来传播已更新的TCP状态信息。响应于已更新的TCP状态信息，次要路由引擎40的复制模块内核线程更新对应的备份套接字34’并且从所发送的套接字缓冲区中去除已确认的数据。在一些示例中，次要路由引擎40的复制模块内核线程仅在已确认的数据已经由应用读取时去除该已确认的数据。如在本文中所描述的，套接字数据复制此时具有连接的TCP状态76。当次要路由引擎40接收所复制的数据以便进行传输时，在用于连接的套接字I/O对象的发送缓冲区上对所复制的数据进行排队。套接字IO对象上的write_count被递增所接收到的字节的数量。在一些示例中，次要路由引擎40可以仅在发送缓冲区中有足够的空间来容纳所复制的数据时在发送缓冲区中对所复制的数据进行排队。次要路由引擎40的复制模块内核线程仅在应用已经读取数据块时将数据块标记为已读。次要路由引擎40的复制模块内核线程响应于针对来自对等体的数据字节的TCP ACK而从队列中去除/释放数据字节。主要路由引擎22可以生成TCP/套接字状态更新消息以存储TCP ACK和相关的序列号。为了进行该操作，复制模块内核线程74和/或次要路由引擎40的复制模块内核线程可以将在套接字IO接收缓冲区上进行排队的每个数据块与TCP接收流序列空间相关联。为了生成更新消息，复制模块内核线程74从TCP状态76获取状态信息，准备具有将被发送的数据的复合消息，并且然后，将消息发送给次要路由引擎40。当接收到用于与所复制的套接字对应的连接的TCP/套接字状态更新消息时，次要路由引擎40的复制模块内核线程检查接收到的TCP ACK是否与任何数据块对应，并且如果对这种数据块进行了标识，则次要路由引擎40的复制模块内核线程从套接字IO缓冲区中去除数据块或者相应地减小数据块大小。为了通过示例的方式进行说明，如果次要路由引擎40的复制模块内核线程在序列空间S4由应用读取之前接收到具有ACK序列号“S4”和每个字节的消息，则次要路由引擎40的复制模块内核线程从套接字发送缓冲区中去除前两个数据块。如果作为代替，次要路由引擎40的复制模块内核线程接收到具有ACK序列号“S6”的TCP更新消息，则次要路由引擎40的复制模块内核线程在数据块一由应用读取就等待从套接字发送缓冲区中去除那些数据块。下面描述在切换时主要路由引擎22或者次要路由引擎40对“最后未确认的窗口”的处理。如果次要路由引擎40的复制模块内核线程确定至少一些数据待在已连接的套接字34’的I/O缓冲区中被传输，则那些数据被写入备份套接字34’的对应I/O缓冲区。在一个示例中，次要路由引擎40的复制模块内核线程确定由write_seq–snd_nxt产生的值，并且基于该值，确定已连接的套接字34’的发送缓冲区包括尚未通过主要路由引擎22被传输给对等体的一个或多个数据块。除了未传输的数据之外，在按照由snd_una–snd_nxt产生的值给出的已连接套接字发送缓冲区中可能存在至少一些未确认的)数据。通过序列号snd_nxt在前而指向的任何数据都被从主要路由引擎22传输给次要路由引擎40，从而使得利用来自对等体的未来的确认消息而处理其余数据。已连接的套接字34被塞住，并且所有数据都被写入现在是处于活动状态的备份套接字34’。任何套接字都被塞住以避免重新传输数据；次要路由引擎40不得不调整备份套接字34’状态信息和传入的数据单元的报头信息，使得套接字和报头都指向要发送的下一个数据块的位置。该位置与备份套接字34’的发送缓冲区中的以下数据块对应：该数据块由序列号snd_nxt表示。备份套接字34’的TCP状态信息只能在数据如本文所描述的那样通过套接字被处理之后被更新。套接字写入数据在由协议堆栈34处理之前被传送给次要路由引擎40。主要路由引擎22可能已经发送了还未被更新/复制到次要路由引擎40的某种数据，因为主要路由引擎22仅在传输TCP段或者管理员触发切换之后崩溃。在那种情况下，已更新的序列号snd_nxt将不被传送给次要路由引擎40。因此，当次要路由引擎40在切换之后变为新的主要路由引擎时，针对snd_nxt，新的主要引擎会落后于旧的主要引擎。在切换之后，新的主要路由引擎传输已经由旧的主要路由引擎确认的)旧数据。当新的主要路由引擎接收到ACK时，该ACK会超过已经由旧的主要路由引擎传输的ACK。这会使新的主要路由引擎和对等网络设备都保持传输相同的数据，从而导致连接摆动。为了减轻上述连接摆动问题，复制模块内核线程被编程为挂钩在NF_IP_LOCAL_OUT上。次要路由引擎40或者主要路由引擎的复制模块内核线程74利用最少的状态信息来保持追踪被复制的每个连接。一旦复制模块内核线程发现新的TCP数据出自新的主要路由引擎，复制模块内核线程就记录TCP数据段报头中的序列号snd_nxt。来自对等体的具有大于由新的主要路由引擎在该点之前传输的snd_nxt序列号的ACK序列号的任何新ACK都被调整为当前的snd_nxt，复制模块内核线程基于新的ACK序列来重新计算校验和。新的TCP状态机和协议堆栈34很好地接受该新ACK序列。复制模块内核线程继续传输下一数据。一旦复制模块内核线程确定snd_nxt与snd_una相同，复制模块内核线程就产生用于更新snd_una后切换的标签，从而针对连接开始正常的操作。图7是图示了根据本公开的技术的用于经由与主要例程引擎22相关联的套接字来复制从对等网络设备接收到的入站数据的示例方法的流程图。如所描述的，入站数据根据本公开的技术而被复制到次要路由引擎40。在最初，主要路由引擎22经由协议堆栈36来从网络接收数据。即，协议堆栈36接收分组，并且对分组进行解封装以提取应用层数据。最终，协议堆栈36将该数据传递给一个套接字34，这提示唤醒复制模块内核线程74。然后，复制模块内核线程74接收数据，基于接收到的数据来用当前TCP状态信息更新TCP状态76，并且复制接收到的数据。然后，复制模块内核线程74将所复制的数据发送给次要路由引擎40。次要路由引擎40接收具有所复制的数据的套接字消息。如在本文中所讨论的，次要路由引擎40通过以下方式来对套接字消息做出响应：发送针对套接字消息的TCP确认，并且使用针对对应的已连接套接字34的状态信息来更新备份套接字34’。次要路由引擎40发送TCP确认以向主要路由引擎22通知已经接收到套接字消息。在主要路由引擎22发送数据之前进行切换的情况下，次要路由引擎40可以处理接收到的数据，并且然后将接收到的数据拷贝到备份套接字的发送缓冲区中。然后，主要路由引擎22接收确认。由于主要路由引擎22不禁止对接收到的数据的读取请求，因此，应用可以在复制期间读取数据。复制模块内核线程74还在从次要路由引擎40接收到TCP确认之后将分组的确认发送给分组的源。虽然在图6所示示例方法中未示出，但是复制模块内核线程74还可以使协议堆栈36响应于从次要路由引擎40接收到确认而将对接收到数据的确认发送给从其接收到数据的设备。图8是图示了根据本公开的技术的无消息传递套接字数据/状态复制的流程图。实现无消息传递套接字复制的机制可以分别在主节点内的主复制模块200和/或备用节点内的备份复制模块200上运行。实现无消息传递套接字复制的任何机制都不等待备用节点发送针对所接收到的每个所复制的数据块的显式确认消息，而是依赖于针对TCP套接字的TCP ACK。一些示例仅依赖于TCP ack来了解特定数据块已经被传递给备用节点。一些示例继续发送显式ACK消息，对于该显式ACK消息，主要路由引擎可以在备用路由引擎处理所复制的数据块时异步地进行验证。这种复制机制针对确认返回所复制的数据确保了用于将被处理的数据的最短等待时间和由大量消息传递造成的少量CPU/网络负载。一些示例在主节点套接字206A上建立将被连接到对等体的TCP套接字，并且进行路由会话以交换路由信息。一些示例在备用节点套接字206B上建立另一TCP套接字，以操作为用于套接字206A的备份套接字。在主要路由引擎和备用路由引擎复制出站数据的一个示例中，当从应用接收到数据块时，复制模块200通过套接字208来将数据块发送给复制模块202。复制模块200可以将数据块写入存储器缓冲区，并且经由套接字接口生成套接字消息204。套接字消息204的一个示例是组合针对套接字206A的数据块和状态信息的复合消息。主节点上的复制模块200在数据块被复制并且接收到确认备用节点接收到所复制的数据块的套接字确认210之后将数据块推送给协议堆栈。备用节点读取TCP套接字上的所复制的数据块，并且在套接字I/O缓冲区中对该套接字上的数据块进行排队。复制模块200可以包括复制模块内核线程，该复制模块内核线程被配置为接收有关TCP套接字的TCP ACK，将数据块指定为或者标记为已复制，并且通知主复制模块继续处理包括所复制的数据块的应用数据。在一些示例中，复制模块内核线程接收确认备用节点接收到对所复制的数据块进行封装的TCP段的单个ACK消息。单个ACK消息可以确认TCP段中的第一个或者最后一个数据块或者确认整个TCP段。单个ACK消息可以表示在下一TCP段中所期望的下一个块。当与针对所复制的数据块的每个字节的显式ACK消息相比较时，接收单个ACK消息消除了在复制过程中的时延。因此，复制模块内核线程消耗更少的时间来复制数据，并且从主节点传输数据的速率增加了。备选复制模块200将数据块推送到堆栈上，并且在传输层上，将包括数据块的传输层分组写入到套接字208的存储器缓冲区上。套接字消息204的一个示例是组合了传输层分组和针对套接字206A的TCP状态信息的复合消息。在主要路由引擎和备用路由引擎复制入站数据的一个示例中，当从对等体接收到数据块并且该数据块被封装在分组中时，主复制模块复制数据块，并且通过与备用节点对应的TCP套接字来发送所复制的数据块。与出站数据类似，备份复制模块读取TCP套接字上的数据块，并且在套接字接收缓冲区中对所读取的在TCP套接字上的数据块进行排队。备用路由引擎传送主节点的复制模块内核线程接收到的TCP ACK，从而确认接收到所复制的数据块。主要路由引擎继续处理数据块。在发生切换的情况下，应用可以从接收缓冲区读取数据块。作为如在本文中所描述的那样采用无消息传递套接字数据/状态复制的另一益处，不针对备用节点接收到的每个所复制的数据块而生成显式ACK消息。作为示例，单个TCPACK可以被发送以确认跨越多个数据块的序列空间。这减少了节点上的总体消息传递处理负载、网络负载以及用于在主要路由引擎上对在套接字IO缓冲区中进行排队的数据进行处理的等待周期。对套接字数据/状态的复制快很多。备用节点受益于备份复制模块在发生计划的/未计划的切换时处理丢失的TCP状态数据。备份复制模块可以包括NF钩子模块以实现上述套接字复制机制。图9是图示了根据本公开的技术的用于更新已预先连接的套接字的示例过程的概念图。与图8类似，该示例过程涉及主节点和备用节点，其中这些相应节点包括复制模块200和复制模块202。主节点采用TCP套接字来与对等体进行通信以便学习路由并且对应用数据进行路由。TCP套接字被描述为套接字206A，该套接字206A可以被称为已预先连接的套接字。主节点具有用于将所复制的数据传送给备用节点的另一TCP套接字。主节点和备用节点都针对其套接字管理发送和接收缓冲区。如在本文中所描述的，备用节点生成对象252以维持针对套接字206A的当前状态信息。在通过TCP套接字来与对等体通信时，主节点可以接收针对先前传输的传出数据分组的TCP ACK。每个TCP ACK可以构成对套接字的TCP状态机的更新。转而，复制模块200经由复制模块内核线程从套接字206A获取包括TCP状态数据的状态信息254，准备包括用于传输所复制的数据块的消息256A和针对TCP状态数据的消息256B，并且然后，关于备用节点中的备份复制模块发送复合消息256。转而，备份复制模块从复合消息中读取TCP状态数据和所复制的数据块，并且将这两个数据复制到TCP套接字。所复制的数据块可以被存储在套接字IO缓冲区中。因此，主节点和备用节点都具有最新的TCP状态。复制模块202为套接字206B维持发送缓冲区258和接收缓冲区260。当备用节点接收到复合消息256时，复制模块202从消息256A提取一个或多个数据块，并且将每个数据块映射到如在针对套接字206A的状态信息254中所定义的序列号。复制模块202根据对应的序列号来将每个数据块存储在发送缓冲区258中。关于入站数据，复制模块202将每个数据块映射到接收序列号，并且将该数据块存储在接收缓冲区260中。图10是图示了根据本公开的技术的用于在次要路由引擎处更新套接字的示例过程的概念图。如在图10中所图示的，发送缓冲区258反映了套接字206B在TCP更新消息到达之前的状态。复制模块200可以发送套接字消息，从而提示复制模块202确定消息包括具有序列号“S2”的TCP ACK并且然后，通过使SND_UNA递增到“S3”来更新套接字206B。响应于针对出站数据的数据读操作，复制模块202在对应的数据块一由应用读取就从发送缓冲区中去除对应的数据。上面的复制模块202的操作产生如在图11中所图示的发送缓冲器258’。在一些示例中，对应的数据块可以映射到与“S3”或者“S4”相同的序列号。因此，应用不会被阻止通过读取请求发送缓冲区258’中的所复制的数据块。更新套接字206B可以包括窃听传入的和传出的数据单元，从发送缓冲区中去除读取的数据，以及基于接收到TCP ACK来纠正最后确认的数据块与最后发送的数据块之间的任何不匹配。与图8至图11类似，备用节点具有复制模块202、发送缓冲区258和复制TCP套接字、套接字208，所复制的数据和TCP状态更新通过这些组件被传送。在主节点中，主复制模块获取当前的/已更新的TCP状态数据和所复制的数据块，准备复合消息，并且将复合消息发送给备用节点中的备份复制模块。备用节点中的备份复制模块处理复合消息，并且更新TCP状态的本地副本。复合消息可以称为TCP更新消息。为了通过示例的方式进行说明，复制模块202可以接收存储具有序列号“S4”的TCPACK的带外IPC消息。由于TCP更新消息在序列空间“S4”已经由应用读取之前具有ACK序列号“S4”和每个数据块，因此，复制模块202从发送缓冲区258中去除前两个数据块。因此，序列空间262A指向数据的还待由主节点或者备用节点传输的子序列，并且序列空间262B指向数据的还待由对等体确认的子序列。SND_NXT表示空间262A的第一数据块，并且SND_UNA表示空间262B的第一数据块。在切换的情况下，如果备用节点在SND_NXT处恢复路由会话，则备用节点不重新传输任何数据，这可能导致备用节点滞后于主节点。如果下一TCP更新消息到达并且复制模块202确定该消息包括具有序列号“S6”的TCP ACK，则备份复制模块在对应的数据库一由应用读取时就从发送缓冲区中去除对应的数据块。在一些示例中，对应的数据块可以映射到与“S6”相同的序列号。因此，应用不会被阻止通过读取请求发送缓冲区中的所复制的数据块。图11是图示了根据本公开的技术的从主要路由引擎到次要路由引擎的示例切换的概念图。被配置为支持示例进程的示例机制可以是Netfilter钩子，在图11中对Netfilter钩子的操作进行了图示并且在本文中对其进行了描述。NF钩子是指向备用节点通知传出的/传入的分组的已知的挂钩代码部分。在图11中所图示的写操作之后，发送缓冲区258’包括具有序列号“S7”和“S8”的数据块。在读操作之后，具有序列号“S3”和“S4”的数据块被提供给请求应用。在图11中同样所图示的，发送缓冲区258’包括待在切换之后被发送的数据。该数据的第一块由SND_NXT指向。SND_NXT是表示对等体接下来期望接收的第一字节的字节级序列号的TCP状态变量，而SND_UNA是表示对主节点成功传输的最后一个字节的字节级序列号的确认的TCP状态变量。此时，发送缓冲区258’具有序列空间为“S1”至“S8”的数据块，从而表示先前写入的数据，其中子序列262A’是指未传输的数据，并且子序列262B’表示未确认的数据。在一个示例中，被挂钩在IP_NET_LOCAL_OUT上的、处于主模式的协议堆栈的一个或多个代码元素接收包括针对SND_NXT的值的TCP状态数据，针对SND_NXT的值确认具有序列号“S3”和“S4”的数据块已经由主要路由引擎传输。因此，SND_NXT被更新为值“S5”，并且子序列262A’被更新以反映具有序列号“S5”和“S6”的数据块作为待由主节点或者备用节点传输的下一数据块。复制模块202可以从发送缓冲区258’中去除具有序列号“S3”和“S4”的数据块，因为这些数据块已经被发送。当被实现在备用节点处时，复制模块202管理其中备份套接字206B的TCP状态可能与所复制的TCP段不一致的实例。作为一个示例，复制模块202配置NF钩子以进行标识，并且然后，纠正备份套接字206B上的状态数据属性SND_NXT和SND_UNA之间的差异。在切换之后，并且基于SND_NXT的值，备用节点以具有与SND_NXT对应的序列号的数据块开始恢复主节点的路由会话。在一个示例中，处于备用模式的协议堆栈的一个或多个代码元素在IP_NET_LOCAL_OUT处挂钩于出站数据，该出站数据包括具有一个或多个所复制的数据块和TCP状态数据的TCP段。如图所示，TCP段包括具有序列号“S5”和“S6”的数据块。复制模块202可以将SND_NXT值更新为“S7”，并且为已更新的TCP状态记录“S7”。SND_NXT值还可以是“S6”以表示最后传输的数据块。随后，NF钩子在IP_NET_LOCAL_IN处接收所挂钩的入站数据，该所挂钩的入站数据包括具有一个或多个所复制的数据块以及TCP状态数据的TCP段，该TCP状态数据包括用于更新SND_UNA的已确认的序列号。该已确认的序列号可以具有值“S”，该值“S”大于具有由“S3”表示的值的SND_UNA并且小于具有由“S4”表示的值的SND_UNA。NF钩子修改接收到的TCP段的报头中的已确认的序列号以包括由“S4”表示的值，对修改过的报头进行校验和，并且将修改过的TCP段向上推入协议堆栈。复制模块202可以将SND_UNA更新为被表示为“S5”的值以表示在备份套接字206B’的发送缓冲区258’中的最后确认的数据块之后的下一数据块。图12是图示了根据本公开的技术的用于在从主要路由引擎到次要路由引擎的示例切换之后的不间断路由的示例方法的流程图。网络设备可以包括一个或多个组件，该一个或多个组件被指示复制对应于与对等网络设备的通信会话的数据。网络设备可以包括主要路由引擎和次要路由引擎，或者仅包括主要路由引擎以及运行另一网络设备的次要路由引擎。在任何示例中，网络设备的复制模块都执行示例方法以准备并且支持切换，例如在主要路由引擎或者网络设备完全故障之后。不管主要路由引擎和次要路由引擎是在单独的设备中还是共享相同设备，在以下描述中，主要路由引擎和次要路由引擎分别被称为主节点和备用节点。按照这种方式，主节点或者备用节点分别表示网络设备的组件或者整个网络设备。下面描述关于图8至图11所示复制模块202的示例方法。复制模块202根据套接字复制实践来使用与在网络的主节点处的已连接的套接字对应的信息生成备份套接字。复制模块202接收包括所连接的套接字的传输层状态的示例信息。如在本文中所描述的，在主节点处的已连接的套接字根据传输层协议来提供主节点与对等网络设备之间的网络通信连接性。在从主节点切换的情况下，备用节点的备份套接字被配置为提供备用节点与对等网络设备之间的网络通信连接性。复制模块202基于在主节点处的入站/出站数据来更新备份套接字的传输层状态，并且然后，将缓冲区数据写入备份套接字以存储入站/出站数据。复制模块202可以更新备份套接字。接收缓冲区和发送缓冲区可以分别存储入站数据和出站数据。当主节点准备要传输的数据时，主节点将该数据复制到备用节点，在该备用节点中，复制模块202在发送缓冲区中存储一个或多个所复制的数据块，并且更新备份套接字。当主节点实际传输数据时，主节点告知备用节点，并且复制模块202通过更新备用套接字来传播通知。备用节点在主节点处检测到引起切换到备用节点的故障，并且作为响应，复制模块202从备份套接字的发送缓冲区获取计划要由主节点传输的下一数据块。应该注意，切换可能由于除了故障之外的其他原因而被调用，包括但不限于：管理员发起的切换。管理员可以使主节点离线，例如以执行维持和/或安装更新。可能存在通过本公开而设想到的附加原因。如在本文中所描述的，备份套接字的传输层状态指示发送缓冲区的哪些数据块已经被发送但是尚未被确认以及发送缓冲区的哪些数据块已经被写入已连接的套接字但是尚未由主节点传输。有关后者，复制模块202将尚未被发送的数据块中的第一数据块标识为将被发送给对等网络设备的下一数据块。在一些示例中，在第一数据块之后是计算要在下一传输时间传输的数据块的子序列，并且因此，该第一数据块的序列号是备用节点恢复路由会话的起点。复制模块202引导网络设备经由备份套接字来向对等网络设备发送所标识的下一数据块。与应用空间中的其他应用或者内核空间中的其他内核模块类似，复制模块202生成具有所标识的下一数据块的套接字消息并且然后，将套接字消息推送给协议堆栈。一般而言，穿过若干层的协议堆栈向套接字消息应用适当的网络协议。协议堆栈根据与备份套接字相同的传输层协议来将套接字消息打包到数据单元中。复制模块202通过在协议堆栈处的挂钩代码元素来拦截出站数据单元并且更新所发送的下一序列号。所发送的下一序列号是指针对备份套接字的传输层状态的示例状态信息。所发送的下一序列号表示将被传输给对等网络设备的下一数据块。通过使用最后传输的数据块的出站数据单元中的序列号，复制模块202更新所发送的下一序列号以表示将被发送给对等网络设备的新的下一数据块。在一些示例中，复制模块202使最后发送的数据块的序列号递增)。复制模块202通过在协议堆栈处的挂钩代码元素的方式来拦截具有新数据的入站数据单元并且然后更新接收缓冲区未确认的序列号。作为针对备份套接字的传输层状态的信息的另一示例，接收缓冲区未确认的序列号表示最后确认的数据块或者第一未确认的数据块。在任何示例中，复制模块202都可以使用入站数据单元来更新接收缓冲区未确认的序列号并且然后，标识未确认的数据块的当前子序列。复制模块202通过在协议堆栈处的挂钩代码元素的方式来拦截具有确认的第二入站数据单元并且然后更新发送缓冲区未确认的序列号。例如，确认可以与被发送给对等网络设备的所传输的出站数据单元对应。如在本文中所描述的，如果数据已经被发送，则复制模块202可以不从发送缓冲区发送该数据。即使数据还未由对等网络设备确认，重新传输数据也可能导致在路由会话中的滞后和错误。复制模块202利用已更新的所发送的下一序列号来调整确认的报头，重新计算校验和，并且将确认推送给协议堆栈的网络层。此时，备份套接字的状态可以指示发送缓冲区未确认的序列号等于所发送的下一序列号。如果发送缓冲器未确认的序列号与所发送的下一序列号相匹配，则复制模块202可以放弃调整确认。如果发送缓冲区未确认的序列号小于所发送的下一序列号，则复制模块202继续进行调整，因为按照这种方式，协议堆栈的其他层可以假定至少一个未确认的数据块已经被确认。按照这种方式，本公开的技术可以解决与套接字数据复制相关的各种问题以例如获得高可用性。本公开的技术可以结合开源操作系统软件被使用，该Linux的许可条款禁止对操作系统内核的修改。由于内核不需要被修改，因此，内核版本可以周期性地并且相对简单地被升级。由于本公开的技术可以使用可加载模块而被实现，因此，本公开的技术也可以在操作系统内核仅作为二进制而不是开源可用时被应用，因为内核不需要被修改和重新编译。本公开的技术可以允许应用与套接字数据复制一起工作，而除了对将被复制的套接字进行标记之外，几乎没有任何改变。这些技术可以在减少的存储器拷贝和进行系统调用的数量方面提供总体性能益处，否则将严重影响在缩放环境中的系统。在本公开中所描述的技术可以至少部分地被实现在硬件、软件、固件或者其任何组合中。例如，所描述的技术的各个方面可以被实现在一个或多个处理器内，包括：一个或多个微处理器、数字信号处理器、专用集成电路、现场可编程门阵列或者任何其他等效的集成或者分立逻辑电路系统以及这种组件的任何组合。术语“处理器”或者“处理电路系统”通常可以是指前述逻辑电路系统中的任何逻辑电路系统或者任何其他等效的电路系统。包括硬件的控制单元还可以执行本公开的技术中的一种或多种技术。这种硬件、软件和固件可以被实现在相同设备内或者单独的设备内以支持在本公开中所描述的各种操作和功能。附加地，所描述的单元、模块或者组件中的任何单元、模块或者组件可以被一起或者单独地实现为离散的但是可互操作的逻辑设备。将不同的特征描述为模块或者单元旨在高亮不同的功能方面，并且不一定暗示这种模块或者单元必须通过单独的硬件组件或者软件组件而实现。相反，与一个或多个模块或者单元相关联的功能性可以由单独的硬件组件或者软件组件执行，或者被集成在共同的或者单独的硬件组件或者软件组件内。在本公开中所描述的技术还可以被实施或者编码在包括指令的计算机可读介质中。被嵌入或者编码在计算机可读介质中的指令可以使可编程处理器或者其他处理器执行该方法，例如当指令被执行时。计算机可读介质可以包括非瞬态计算机可读存储介质和瞬态通信介质。计算机可读存储介质可以包括：随机存取存储器、只读存储器、可编程只读存储器、可擦除可编程只读存储器、电可擦除可编程只读存储器、闪速存储器、硬盘、CD-ROM、软盘、磁带盒、磁性介质、光学介质或者其他计算机可读存储介质。应该理解，术语“计算机可读存储介质”是指物理存储介质，而不是信号、载波或者其他瞬态介质。示例1：一种方法包括：由用于网络设备的备用节点的操作系统的协议堆栈经由第一套接字来接收套接字消息，该套接字消息包括将被写入第二套接字的数据的表示和在网络设备的主节点处的已连接的套接字的状态信息，其中在主节点处的已连接的套接字提供主节点与对等网络设备之间的网络通信连接性，其中第一套接字根据传输协议来提供网络设备的主节点和备用节点之间的网络通信连接性，其中备用节点被配置为在主节点发生故障之后提供对网络设备的控制，其中第二套接字在主节点发生故障之后提供备用节点与对等网络设备之间的网络通信连接性；响应于套接字消息，由备用节点的协议堆栈根据传输协议来发送套接字确认，其中在从备用节点接收到套接字确认之后，主节点中的主复制模块经由已连接的套接字来将数据发送给对等网络设备；以及由备份复制模块使用在主节点处的已连接的套接字的状态信息来更新第二套接字。示例2：根据示例1的方法还包括：由备份复制模块使用数据来在备用节点处更新路由信息或者转发信息。示例3：根据示例1和2中任一项的方法还包括：由备份复制模块生成第二套接字作为用于在主节点处的已连接的套接字的备份套接字，其中第二套接字包括已连接状态的复制状态。示例4：根据示例1至3中任一项的方法，其中数据的表示包括路由通告消息。示例5：根据示例1至4中任一项的方法，其中接收套接字消息包括：由协议堆栈的传输层组件接收包括第一消息和第二消息的复合消息，其中第一消息包括数据的表示，并且第二消息包括状态信息。示例6：根据示例1至5中任一项的方法还包括：由操作系统执行以下数据写操作中的至少一个数据写操作：用于将数据存储在第二套接字的接收缓冲区或者第二套接字的发送缓冲区中的数据写操作或者用于从接收缓冲区或者发送缓冲区中去除一部分的数据读操作。示例7：根据示例1至6中任一项的方法，其中发送套接字确认包括：由协议堆栈根据传输控制协议来经由第一套接字接收第一数据单元，其中第一数据单元包括存储状态信息的报头和存储数据的表示的有效载荷；以及响应于数据单元，由协议堆栈根据TCP来向备用节点发送第二数据单元，该第二数据单元包括第一数据单元的TCP确认。示例8：根据示例7的方法，其中发送套接字确认包括：在从备用节点的协议堆栈接收到根据TCP的TCP确认之后，由主复制模块向第一数据单元的源发送第二TCP确认。示例9：根据示例1至8中任一项的方法还包括：由备份复制模块基于套接字消息中的状态信息来从第二套接字的缓冲区中去除一部分。示例10：根据示例1至9中任一项的方法还包括：响应于切换到备用节点，由操作系统经由第二套接字来将数据从第二套接字的发送缓冲区发送给对等网络设备。示例11：根据示例10的方法还包括：由操作系统从第二套接字的接收缓冲区获取数据；以及由协议堆栈经由第二套接字来向对等网络设备发送第二套接字确认。示例12：根据示例11的方法还包括：由操作系统形成包括被发送给第一套接字的数据或者从第二套接字获取的数据的分组。示例13：根据示例1至12中任一项的方法，其中备份复制模块在内核空间或者用户空间中的至少一个空间中被执行。示例14：根据示例1至13中任一项的方法，其中数据的表示包括：作为数据的表示的一部分的一个或多个操作标志；作为数据的表示的一部分的套接字描述符；以及作为数据的表示的一部分的标识数据的缓冲区数据。示例15：一种网络设备包括：备用节点，被配置为在主节点发生故障之后提供对网络设备的控制，其中备用节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为：执行操作系统以加载协议堆栈，该协议堆栈可操作以：经由第一套接字来接收套接字消息，其中套接字消息包括将被写入第二套接字的数据的表示和在网络设备的主节点处的已连接的套接字的状态信息，其中第一套接字根据传输协议来提供网络设备的主节点和备用节点之间的通信连接性，其中第二套接字响应于故障而提供网络设备的备用节点与对等网络设备之间的网络通信连接性，其中在主节点处的已连接的套接字提供主节点与对等网络设备之间的网络通信连接性；以及响应于套接字消息，根据传输协议来返回套接字确认，其中在从备用节点接收到套接字确认之后，主节点中的主复制模块经由已连接的套接字来将数据发送给对等网络设备；以及执行复制模块以：使用在主节点处的已连接的套接字的状态信息来更新第二套接字。示例15：根据示例14和15中任一项的网络设备，其中被实现在电路系统中的一个或多个处理器还被配置为执行逻辑，该逻辑可操作以：经由第一套接字来根据传输控制协议接收套接字消息；以及经由第二套接字来根据传输控制协议发送套接字确认。示例16：根据示例14至16中任一项的网络设备，其中一个或多个处理器还被配置为：执行复制模块以基于状态信息来去除第二套接字的发送缓冲区的一部分或者第二套接字的接收缓冲区的一部分。示例17：根据示例14至17中任一项的网络设备，其中一个或多个处理器还被配置为：响应于切换而执行复制模块，该复制模块可操作以：经由第二套接字来将数据从发送缓冲区发送给对等网络设备。示例18：根据示例14至18中任一项的网络设备，其中一个或多个处理器还被配置为：执行复制模块以将数据发送给应用。示例19：根据示例14至19中任一项的网络设备还包括：主节点的一个或多个第二处理器，被配置为在接收到套接字确认之后执行主复制模块以将数据发送给对等网络设备或者向源发送第二套接字确认。示例20：一种计算机可读存储介质存储有指令，这些指令在被执行时使网络设备的主节点的一个或多个处理器：执行操作系统以提供应用空间和内核空间；在内核空间中执行逻辑，该逻辑可操作以：经由第一套接字来接收套接字消息，其中套接字消息包括将被写入第二套接字的数据的表示和在网络设备的主节点处的已连接的套接字的状态信息，其中第一套接字根据传输协议来提供网络设备的主节点和备用节点之间的网络通信连接性，其中第二套接字响应于故障而提供网络设备的备用节点与对等网络设备之间的网络通信连接性，其中已连接的套接字，其中在主节点处的已连接的套接字提供主节点与对等网络设备之间的网络通信连接性；响应于套接字消息，根据传输协议来返回套接字确认，其中在从备用节点接收到套接字确认之后，主节点中的主复制模块经由已连接的套接字来将数据发送给对等网络设备；以及使用在主节点处的已连接的套接字的状态信息来更新第二套接字。示例21：一种方法包括：由复制模块接收将被写入第一套接字的数据的表示，其中第一套接字提供网络设备的主节点与对等网络设备之间的网络通信连接性；由复制模块经由第二套接字来向网络设备的备用节点发送套接字消息，其中套接字消息包括第一套接字的状态信息和数据的表示，其中第二套接字根据传输协议来提供主节点与备用节点之间的网络通信连接性，其中备用节点被配置为在主节点发生故障之后提供对网络设备的控制；响应于套接字消息，由备用节点的协议堆栈根据传输协议来发送套接字确认；以及在从备用节点接收到套接字确认之后，由复制模块经由第一套接字来将数据发送给对等网络设备。示例22：根据示例1至22中任一项的方法，其中复制模块在内核空间或者用户空间中的至少一个空间中被执行。示例23：根据示例1至23中任一项的方法，其中数据的表示包括路由通告消息。示例24：根据示例1至24中任一项的方法，其中由复制模块发送套接字消息包括：由复制模块创建包括第一消息和第二消息的复合消息，其中第一消息包括数据的表示，并且第二消息包括状态信息。示例25：根据示例1至25中任一项的方法还包括：形成数据的表示，其中形成数据的表示包括：生成一个或多个操作标志作为数据的表示的一部分；生成套接字描述符作为数据的表示的一部分；以及生成标识数据的缓冲区数据作为数据的表示的一部分。示例26：根据示例1至示例26中任一项的方法还包括：由复制模块根据传输控制协议来经由第一套接字获取数据单元的第二数据；以及由主节点的操作系统根据TCP来向备用节点发送第二数据单元，套接字消息包括第二数据的副本。示例27：根据示例6至27中任一项的方法还包括：在从备用节点的协议堆栈接收到根据TCP的第二套接字确认之后，由操作系统经由第一套接字来将根据TCP的第三套接字发送给数据单元的源。示例28：根据示例1至28中任一项的方法还包括：由复制模块响应于来自备用节点的第二复制模块的确认来从第二套接字的缓冲区中去除一部分。示例29：根据示例1至29中任一项的方法还包括：由操作系统形成包括被发送给第二套接字的数据的分组。示例30：根据示例1至30中任一项的方法，其中基于状态信息，备用节点的第二复制模块去除所复制的套接字的发送缓冲区的一部分或者所复制的套接字的接收缓冲区的一部分，其中所复制的套接字被配置用于备用节点与对等网络设备之间的网络通信连接性。示例31：根据示例30和31中任一项的方法还包括：响应于切换到备用节点：由备用节点的操作系统经由所复制的套接字来将数据从发送缓冲区发送给对等网络设备；以及由操作系统从所复制的缓冲区的接收缓冲区获取数据。示例32：一种网络设备包括：主节点；以及备用节点，被配置为在主节点发生故障之后提供对网络设备的控制，其中主节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为：执行复制模块以：接收将被写入第一套接字的数据的表示，其中第一套接字提供网络设备的主节点与对等网络设备之间的网络通信连接性；以及经由第二套接字来向网络设备的备用节点发送套接字消息，其中套接字消息包括第一套接字的状态信息和数据的表示，其中第二套接字根据传输协议来提供主节点与备用节点之间的网络通信连接性，其中备用节点还被配置为响应于套接字消息根据传输协议来返回套接字确认；以及在从备用节点接收到套接字确认之后，经由第一套接字来将数据发送给对等网络设备。示例33：根据示例32和33中任一项的网络设备，其中复制模块还可操作以执行操作系统以提供应用空间和内核空间，其中复制模块在应用空间和内核空间中的至少一个空间中被执行。示例34：根据示例32至34中任一项的网络设备，其中备用节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为：响应于经由第二套接字的发送，根据传输控制协议来发送套接字确认。示例35：根据示例32至35中任一项的方法，其中备用节点包括一个或多个处理器，该一个或多个处理器被实现在电路系统中并且被配置为执行第二复制模块以基于状态信息来去除所复制的套接字的发送缓冲区的一部分或者所复制的套接字的接收缓冲区的一部分，其中所复制的套接字被配置用于备用节点与对等网络设备之间的网络通信连接性。示例36：根据示例35和36中任一项的网络设备，其中一个或多个处理器还被配置为执行复制模块以：经由所复制的套接字来将数据从发送缓冲区发送给对等网络设备；以及从所复制的缓冲区的接收缓冲区获取数据。示例37：根据示例32至37中任一项的网络设备，其中一个或多个处理器被配置为：根据传输控制协议来将数据的表示发送给备用节点；并且根据TCP来从备用节点接收确认。示例38：根据示例32至38中任一项的网络设备，其中一个或多个处理器还被配置为执行复制模块以：从第一套接字获取接收到的分组的第二数据，将第二数据发送给备用节点，以及在从备用节点接收到第二套接字确认之后，将第二数据发送给应用。示例39：根据示例38和39中任一项的网络设备，其中一个或多个处理器还被配置为：在接收到第二套接字确认之后，执行复制模块以将接收到的分组的第三套接字确认发送给接收到的分组的源。示例40：一种计算机可读存储介质存储有指令，这些指令在被执行时使网络设备的主节点的一个或多个处理器：执行操作系统以提供应用空间和内核空间；在应用空间中执行复制应用以接收包括将被写操作系统的套接字的数据的写函数调用以及将数据的表示发送给在内核空间中被执行的复制模块；以及执行复制模块以将数据的表示发送给网络设备的备用节点，并且在从备用节点接收到确认之后，将数据发送给套接字。已经对各种示例进行了描述。这些以及其他示例在以下权利要求书的范围内。
