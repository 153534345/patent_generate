标题title
一种包含多个必经资源的最短路径实现方法和系统
摘要abst
本发明涉及一种包含多个必经资源的最短路径实现方法和系统。其方法部分主要包括：建立用于存储已更新节点的S集合和用于存储未更新节点的T集合，并初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性；将源节点作为更新节点，每次更新后将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新；以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径即为包含多个必经资源的最短路径。本发明可以解决路由计算中必须包含多个资源且需要路径最短的问题。
权利要求书clms
1.一种包含多个必经资源的最短路径实现方法，其特征在于，包括：建立用于存储已更新节点的S集合和用于存储未更新节点的T集合，并初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性；将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新；每次更新后将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新；以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径即为包含多个必经资源的最短路径。2.根据权利要求1所述的包含多个必经资源的最短路径实现方法，其特征在于，所述距离权重属性代表对应节点在当前路径下到源节点的距离，所述前驱节点属性代表对应节点在当前路径下的前一个节点，所述路径包含权重属性代表对应节点在当前路径下所包含的必经资源数。3.根据权利要求2所述的包含多个必经资源的最短路径实现方法，其特征在于，所述初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性具体包括：将源节点的距离权重属性初始化为0、前驱节点属性初始化为0、路径包含权重属性初始化为0；将其它节点的距离权重属性初始化为无穷大、前驱节点属性初始化为0、路径包含权重属性初始化为0。4.根据权利要求3所述的包含多个必经资源的最短路径实现方法，其特征在于，设更新节点为i，邻近节点为j，更新节点到邻近节点的距离为cij，更新节点的距离权重属性为d，更新节点的路径包含权重属性为include))，邻近节点现有的距离权重属性为d，邻近节点现有的路径包含权重属性为include))，邻近节点待更新的距离权重属性为邻近节点待更新的路径包含权重属性为则所述对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新具体包括：令若邻近节点j是必经资源，则根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性；当邻近节点j的路径包含权重属性以及距离权重属性中至少一项更新时，将邻近节点j的前驱节点属性更新为i，否则不更新其前驱节点属性。5.根据权利要求4所述的包含多个必经资源的最短路径实现方法，其特征在于，所述根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性具体包括：当大于include))时，更新邻近节点j的路径包含权重属性为并更新邻近节点j的距离权重属性为当小于include))时，不更新邻近节点j的路径包含权重属性以及距离权重属性；当等于include))时，判断是否小于d，若小于则更新邻近节点j的距离权重属性为否则不更新。6.根据权利要求1所述的包含多个必经资源的最短路径实现方法，其特征在于，所述单独对宿节点进行更新的方式包括：根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。7.根据权利要求6所述的包含多个必经资源的最短路径实现方法，其特征在于，所述根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性具体包括：选取宿节点的邻近节点中路径包含权重属性最大的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性；当多个邻近节点的路径包含权重属性最大时，选取其中距离权重属性值加上到宿节点距离值后数值最小的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。8.根据权利要求1-7任一所述的包含多个必经资源的最短路径实现方法，其特征在于，所述当前路径的定义为：以前驱节点属性为依据、以源节点为起点、以任一节点为终点所形成的路径即为该节点的当前路径。9.根据权利要求8所述的包含多个必经资源的最短路径实现方法，其特征在于，在对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新时，根据更新节点的当前路径向外寻找邻近节点。10.一种包含多个必经资源的最短路径实现系统，其特征在于，包括节点集合建立模块、节点更新模块以及路径规划模块，其中：所述节点集合建立模块用于建立S集合和T集合，S集合用于存储已更新节点，T集合用于存储未更新节点，且所述节点集合建立模块还用于初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性；所述节点更新模块用于将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新，所述节点更新模块还用于将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新；所述路径规划模块用于将以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径确定为包含多个必经资源的最短路径。
说明书desc
技术领域本发明涉及路径计算技术领域，特别是涉及一种包含多个必经资源的最短路径实现方法和系统。背景技术网络建设中，受实际客观条件限制和实际业务调度影响，如机房大小，业务建立源溯节点诉求等，业务经过的路径一般会有一定的约束，业务路由算法通常是按将约束转化为权重进行最短路径计算，但包含资源的限制条件无法通过简单权重转化进行约束，且难以同时完成最短的路径目标。另外，对于包含多个必经资源的情况，例如在给定的网络中必须需要经过多个节点或链路，对于这种情况，特别是针对大规模骨干网时，现有的算法均存在各种各样的缺陷，无法同时满足时间复杂度低、包含多个必经资源、完成最短路径规划的效果。鉴于以上情况，如何克服现有技术所存在的缺陷，解决包含多个必经资源情况下最短路径计算的问题，是本技术领域待解决的难题。发明内容针对现有技术的以上缺陷或改进需求，本发明提供一种包含多个必经资源的最短路径实现方法和系统，使在包含多个必经资源的情况下计算得到的路径长度尽可能的短，本发明适用于对于路径长度要求较高的国家干线网络和国际干线网络。本发明实施例采用如下技术方案：第一方面，本发明提供了一种包含多个必经资源的最短路径实现方法，包括：建立用于存储已更新节点的S集合和用于存储未更新节点的T集合，并初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性；将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新；每次更新后将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新；以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径即为包含多个必经资源的最短路径。进一步的，所述距离权重属性代表对应节点在当前路径下到源节点的距离，所述前驱节点属性代表对应节点在当前路径下的前一个节点，所述路径包含权重属性代表对应节点在当前路径下所包含的必经资源数。进一步的，所述初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性具体包括：将源节点的距离权重属性初始化为0、前驱节点属性初始化为0、路径包含权重属性初始化为0；将其它节点的距离权重属性初始化为无穷大、前驱节点属性初始化为0、路径包含权重属性初始化为0。进一步的，设更新节点为i，邻近节点为j，更新节点到邻近节点的距离为cij，更新节点的距离权重属性为d，更新节点的路径包含权重属性为include))，邻近节点现有的距离权重属性为d，邻近节点现有的路径包含权重属性为include))，邻近节点待更新的距离权重属性为邻近节点待更新的路径包含权重属性为则所述对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新具体包括：令若邻近节点j是必经资源，则根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性；当邻近节点j的路径包含权重属性以及距离权重属性中至少一项更新时，将邻近节点j的前驱节点属性更新为i，否则不更新其前驱节点属性。进一步的，所述根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性具体包括：当大于include))时，更新邻近节点j的路径包含权重属性为并更新邻近节点j的距离权重属性为当小于include))时，不更新邻近节点j的路径包含权重属性以及距离权重属性；当等于include))时，判断是否小于d，若小于则更新邻近节点j的距离权重属性为否则不更新。进一步的，所述单独对宿节点进行更新的方式包括：根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。进一步的，所述根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性具体包括：选取宿节点的邻近节点中路径包含权重属性最大的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性；当多个邻近节点的路径包含权重属性最大时，选取其中距离权重属性值加上到宿节点距离值后数值最小的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。进一步的，所述当前路径的定义为：以前驱节点属性为依据、以源节点为起点、以任一节点为终点所形成的路径即为该节点的当前路径。进一步的，在对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新时，根据更新节点的当前路径向外寻找邻近节点。另一方面，本发明提供了一种包含多个必经资源的最短路径实现系统，包括节点集合建立模块、节点更新模块以及路径规划模块，其中：所述节点集合建立模块用于建立S集合和T集合，S集合用于存储已更新节点，T集合用于存储未更新节点，且所述节点集合建立模块还用于初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性；所述节点更新模块用于将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新，所述节点更新模块还用于将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新；所述路径规划模块用于将以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径确定为包含多个必经资源的最短路径。与现有技术相比，本发明的有益效果在于：解决了路由计算中必须包含多个资源且需要路径最短的问题。相比于传统的路由计算模式，本发明同时具备时间复杂度比较低、可以包含多个必经资源、可以找出包含多个必经资源的最短路径的优点，可以应用到大规模骨干网上，另外，本发明的计算方法计算的路径不会形成环，可有效解决现有路由计算方式中路径成环的问题。附图说明为了更清楚地说明本发明实施例的技术方案，下面将对本发明实施例中所需要使用的附图作简单地介绍。显而易见地，下面所描述的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其它的附图。图1为本发明实施例1提供的一种包含多个必经资源的最短路径实现方法的流程图；图2为本发明实施例1提供的初始化所有节点的流程图；图3为本发明实施例1提供的对更新节点进行更新的流程图；图4为本发明实施例1提供的判断邻近节点是否更新的示意图；图5为本发明实施例2提供的网络拓扑图；图6为本发明实施例2提供的各节点初始化后的网络拓扑示意图；图7为本发明实施例2提供的A节点作为更新节点更新后的网络拓扑示意图；图8为本发明实施例2提供的B节点作为更新节点更新后的网络拓扑示意图；图9为本发明实施例2提供的C节点作为更新节点更新后的网络拓扑示意图；图10为本发明实施例2提供的E节点作为更新节点更新后的网络拓扑示意图；图11为本发明实施例2提供的D节点作为更新节点更新后的网络拓扑示意图；图12为本发明实施例2提供的F节点更新后的网络拓扑示意图；图13为本发明实施例3提供的一种包含多个必经资源的最短路径实现系统模块连接示意图；图14为本发明实施例4提供的一种包含多个必经资源的最短路径实现装置结构示意图。具体实施方式为了使本发明的目的、技术方案及优点更加清楚明白，以下结合附图及实施例，对本发明进行进一步详细说明。应当理解，此处所描述的具体实施例仅用以解释本发明，并不用于限定本发明。本发明是一种特定功能系统的体系结构，因此在具体实施例中主要说明各结构模组的功能逻辑关系，并不对具体软件和硬件实施方式做限定。此外，下面所描述的本发明各个实施方式中所涉及到的技术特征只要彼此之间未构成冲突就可以相互组合。下面就参考附图和实施例结合来详细说明本发明。实施例1：本发明实施例1适用于如下场景：在给定的网络中，计算两个节点之间的不成环的最短路径，该路径必须包含指定的节点或者链路。形式化描述如下：给定一个网络，网络的链路上包括节点集合V＝，链路表示结点vi和vj之间的链路。cij代表链路的长度。需要解决的是任意两点间，比如源节点v1到宿节点vn的路径，该路径包括某些必经资源，如非源宿节点{vk1，…，vkk}。针对上述场景，如图1所示，本发明实施例1提供一种包含多个必经资源的最短路径实现方法，该方法包括如下步骤：步骤100：建立用于存储已更新节点的S集合和用于存储未更新节点的T集合，并初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性。在本优选实施例的该步骤中，S集合初始为空，T集合初始等于V集合＝。步骤200：将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新。在本优选实施例中，每个节点的距离权重属性代表对应节点在当前路径下到源节点的距离，每个节点的前驱节点属性代表对应节点在当前路径下的前一个节点，每个节点的路径包含权重属性代表对应节点在当前路径下所包含的必经资源数。另外，当前路径的定义为：以前驱节点属性为依据、以源节点为起点、以任一节点为终点所形成的路径即为该节点的当前路径。例如v3节点的前驱节点属性为v2，v2节点的前驱节点属性为v1，v1为源节点，那么v3节点对应的当前路径即为v1-v2-v3，v2节点对应的当前路径即为v1-v2。步骤300：每次更新后将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新。例如，第一个更新节点为源节点v1，那么在对v1的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新后，就将v1加入S集合并从T集合中去除，此时T集合只剩下V-v1＝，然后从剩下的T集合中选出除了宿节点之外距离权重属性最小的节点作为新的更新节点开始更新，最后只剩下宿节点vn时，单独对vn进行更新。步骤400：所有节点全部更新完毕后，以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径即为包含多个必经资源的最短路径。该步骤中，当所有节点全部更新完毕时，除了源节点之外的每个节点都会有一个前驱节点属性，并且每个节点的距离权重属性、前驱节点属性以及路径包含权重属性都会根据相应的更新原则进行更新，以保证最后以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的宿节点对应的当前路径为包含多个必经资源的最短路径。以上为本实施例1提供的包含多个必经资源的最短路径实现方法的主要步骤，下面通过对距离权重属性、前驱节点属性以及路径包含权重属性的设定与更新进行详细描述来解释上述步骤100-步骤400为何能得到最后的包含多个必经资源的最短路径。如图2所示，在本优选实施例的步骤100中，初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性具体可包括如下步骤：步骤101：将源节点的距离权重属性初始化为0、前驱节点属性初始化为0、路径包含权重属性初始化为0。在本优选实施例中，对于源节点，其到自身的距离为0，所以将其距离权重属性初始化为0，其距离权重属性可以用d＝0来表示；同样，源节点是没有前驱节点的，所以其前驱节点属性也可以初始化为0，其前驱节点属性可以用pred＝0来表示；另外，就一个源节点还不存在路径之说，更没有包含必经资源，所以其路径包含权重属性也初始化为0，可以用include))＝0来表示。步骤102：将其它节点的距离权重属性初始化为无穷大、前驱节点属性初始化为0、路径包含权重属性初始化为0。在本优选实施例中，对于其它节点，将其它节点的距离权重属性初始化为无穷大，可表示为d＝∞，这是为了方便后续进行距离权重属性的比对，因为本实施例的目的是找出距离最短的节点路径，所以将其初始化时设为无穷大，这样就能在一个个节点更新时，通过比较距离权重属性，找到距离权重属性更小的节点。该步骤还将其它节点的前驱节点属性初始化为0，可表示为pred＝0，后续更新时会根据路径的选择来更新各个节点的前驱节点属性；将其它节点的路径包含权重属性初始化为0，可表示为include))＝0，其中，p)表示源节点到vk节点的路径，后续更新时会根据选择的路径中包含的必经资源数量来更新各个节点的路径包含权重属性。需说明的是，该步骤中的k取值为2-n，代表除源节点之外的其它节点。对于本优选实施例的步骤200，假设其所述的更新节点为i，邻近节点为j，节点i属于V集合中v1-vn的某个节点，节点j为节点i在当前路径上向外寻找的邻近节点。对于更新节点i、邻近节点j，设定更新节点到邻近节点的距离为cij，更新节点的距离权重属性为d，更新节点的路径包含权重属性为include))，邻近节点现有的距离权重属性为d，邻近节点现有的路径包含权重属性为include))，邻近节点待更新的距离权重属性为邻近节点待更新的路径包含权重属性为那么如图3所示，步骤200中所述的“对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新”可表示为update，具体可包括如下步骤：步骤201：令若邻近节点j是必经资源，则在该步骤中，邻近节点待更新的距离权重属性值等于更新节点的距离权重属性值加上对应邻近节点与更新节点间的距离，例如：更新节点的距离权重属性值为5，更新节点与一个邻近节点的距离为2，那么邻近节点待更新的距离权重属性值就为7。而对于邻近节点待更新的路径包含权重属性值，则根据该邻近节点是否为必经资源节点来决定，当邻近节点是必经资源节点时，其待更新的路径包含权重属性值在更新节点的路径包含权重属性值基础上加一，当邻近节点不是必经资源节点时，其待更新的路径包含权重属性值与更新节点的路径包含权重属性值保持一致，例如，更新节点的路径包含权重属性值为1，也即代表着更新节点的当前路径上有一个必经资源节点，而其有一个邻近节点也是必经资源节点，那么这个邻近节点待更新的路径包含权重属性值就为2，其还有另一个邻近节点不是必经资源节点，那么这另一个邻近节点待更新的路径包含权重属性值就为1。步骤202：根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性。在该步骤中，需要判断相邻节点待更新的路径包含权重属性值、待更新的距离权重属性值与其现有的路径包含权重属性值、距离权重属性值的大小，来判断是否需要更新其路径包含权重属性值、距离权重属性值。需说明的是，p)表示源节点到相邻节点j的当前路径包含权重属性所对应的当前路径，表示源节点到相邻节点j的待更新路径包含权重属性所对应的待更新路径。步骤203：当邻近节点j的路径包含权重属性以及距离权重属性中至少一项更新时，将邻近节点j的前驱节点属性更新为i，否则不更新其前驱节点属性。在该步骤中，只要邻近节点j的路径包含权重属性以及距离权重属性中有任一项更新，那就说明该邻近节点是符合本实施例的最短路径规则的，就需要将其前驱节点属性更新为更新节点i，当邻近节点j的路径包含权重属性以及距离权重属性都不更新时，说明该邻近节点j原有的属性对应的路径相较于待更新的属性对应的路径更符合实施例的最短路径规则的，所以保持原有的前驱节点属性不变。如图4所示，对于上述步骤202，本实施例中判断邻近节点是否更新具体可分为如下几种情况：第一种情况：当大于include))时，更新邻近节点j的路径包含权重属性为并更新邻近节点j的距离权重属性为对于该种情况，总共可能有两种发生场景：第一种场景是邻近节点j现有的路径包含权重属性以及现有的距离权重属性还未更新过，尚还保持为初始化的状态，这种场景下，邻近节点j现有的路径包含权重属性为0，第二种场景是邻近节点j现有的路径包含权重属性以及现有的距离权重属性已经更新过了，只是包含的必经资源较少，这两种场景无论哪种，只要大于include))，都说明邻近节点j的待更新路径比之当前路径包含有更多的必经资源节点，需要对当前路径进行更新，将其当前路径更新为所对应的路径，也即更新对应的前驱节点属性、距离权重属性、路径包含权重属性。第二种情况：当小于include))时，不更新邻近节点j的路径包含权重属性以及距离权重属性。对于该种情况，因为初始化的路径包含权重属性为0，不可能大于待更新的路径包含权重属性，所以只有一种发生场景，那就是邻近节点j现有的路径包含权重属性以及现有的距离权重属性已经更新过了，且更新过的当前路径包含权重属性还比待更新的路径包含权重属性大，这说明邻近节点j的当前路径比之待更新路径包含有更多的必经资源节点，所以不需要对当前路径进行更新，也即该邻近节点j的前驱节点属性、距离权重属性、路径包含权重属性不需要进行更新。第三种情况：当等于include))时，判断是否小于d，若小于则更新邻近节点j的距离权重属性为否则不更新。对于该种情况，总共可能有两种发生场景：第一种场景是邻近节点j现有的路径包含权重属性以及现有的距离权重属性还未更新过，尚还保持为初始化的状态，这种场景下，邻近节点j现有的路径包含权重属性为0、现有的距离权重属性为无穷大，第二种场景是邻近节点j现有的路径包含权重属性以及现有的距离权重属性已经更新过了，只是现有的路径包含权重属性与待更新的路径包含权重属性一样。这两种场景无论哪种，当等于include))时，都说明两条路径包含的必经资源节点数一样，路径包含权重属性不能作为判断路径的依据了，此时需要根据距离权重属性来判断邻近节点j是否需要修改前驱节点属性以及距离权重属性。当待更新的距离权重属性小于现有的当前距离权重属性时，说明该待更新路径的距离更短，更符合本实施例的要求，所以需要对当前路径进行更新，更新其前驱节点属性为更新节点i，更新其距离权重属性为d+cij。当待更新的距离权重属性不小于现有的当前距离权重属性时，说明该待更新路径的距离相较于当前路径不占优势，所以不需要更新。在本优选实施例中，对于步骤300，在从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新时，该过程中不会选取宿节点作为新的更新节点来更新宿节点周围邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性，只有当其它所有节点完成更新后，才单独对宿节点进行更新，宿节点的更新方式包括：根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。这是因为宿节点是需要求解路径上的最后一个节点，所以宿节点已经不存在向外的相邻节点了，所以不能像其它更新节点一样对相邻节点来进行更新，而对于宿节点自身，其作为其它节点的相邻节点进行更新时则存在两种情况：第一种是更新的路径恰好为最终的包含多个必经资源的最短路径，另一种情况则是更新的路径不是最终的包含多个必经资源的最短路径。这两种情况是无法事先预料的，所以本优选实施例选择根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。具体的，优先选取宿节点的邻近节点中路径包含权重属性最大的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性；当多个邻近节点的路径包含权重属性最大时，选取其中距离权重属性值加上到宿节点距离值后数值最小的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。这样一来，宿节点更新后的路径包含权重属性就会最大，并且距离权重属性会最小，从而使其更新后的当前路径成为本实施例所需要的包含多个必经资源的最短路径。综上所述，通过上述步骤，本实施例能够解决路由计算中必须包含多个资源且需要路径最短的问题。相比于传统的路由计算模式，本发明实施例同时具备时间复杂度比较低、可以包含多个必经资源、可以找出包含多个必经资源的最短路径的优点，本发明实施例可以应用到大规模骨干网上，另外，本发明实施例的计算方法计算的路径不会形成环，可有效解决现有路由计算方式中路径成环的问题。实施例2：基于实施例1提供的包含多个必经资源的最短路径实现方法，本实施例2以一个具体实施场景为例，来对实施例1所述的包含多个必经资源的最短路径实现方法进行详细说明。如图5所示，为本实施例2提供的网络拓扑图，在该网络拓扑中，具有ABCDEF六个节点，其中：AB为一个链路，且AB距离为1；AC为一个链路，且AC距离为6；BC为一个链路，且BC距离为1；BD为一个链路，且BD距离为1；BE为一个链路，且BE距离为1；CD为一个链路，且CD距离为1；DE为一个链路，且DE距离为3；DF为一个链路，且DF距离为1；EF为一个链路，且EF距离为1。图5中每个链路中间的数值即为该链路的距离。基于该网络拓扑，本实施场景需要求A点到F点之间的路径，且需要包含必经节点资源：C点和E点。在上述场景下，本实施例2首先初始化S集合和T集合，S集合开始为空，T集合包含所有的节点：T＝{A,B,C,D,E,F}。然后对每个节点的距离权重属性、前驱节点属性以及路径包含权重属性进行初始化。其中，因为源节点A点到A点的距离为0，A点没有前驱节点，A点到A点也没有经过C和E两点，所以初始化A的距离权重属性d＝0，A的前驱节点属性pred＝0，A的路径包含权重属性include))＝0；对于其它节点B,C,D,E,F，因为还没有开始更新，所以初始化各点到源节点的距离为无穷大，前驱节点为0，包含权重为0。初始化后的网络拓扑示意图如图6所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性：d＝∞，pred＝0，include))＝0；d＝∞，pred＝0，include))＝0；d＝∞，pred＝0，include))＝0；d＝∞，pred＝0，include))＝0；d＝∞，pred＝0，include))＝0。在所有节点初始化后，开始进行更新。1、首先选取第一个节点也即源节点A作为更新节点，进行update，向外查找A的相邻节点，可以找到B和C，对B和C的距离权重属性、前驱节点属性以及路径包含权重属性进行更新：对于B节点，AB链路的距离为1，且B节点不属于必经节点，所以其待更新的距离权重属性在A节点基础上加1等于1，待更新的路径包含权重属性在A节点基础上不变等于0，所以B节点更新后的距离权重属性d＝1，更新后的前驱节点属性pred＝A，更新后的路径包含权重属性include))＝0。对于C节点，AC链路的距离为6，且C节点属于必经节点，所以其待更新的距离权重属性在A节点基础上加6等于6，待更新的路径包含权重属性在A节点基础上加1等于1，所以C节点更新后的距离权重d＝6，更新后的前驱节点属性pred＝A,更新后的路径包含权重属性include))＝1。A节点作为更新节点更新后的网络拓扑示意图如图7所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。2、将更新节点A从T集合中取出加入S集合，此时S＝{A}，T＝{B,C,D,E,F}，从T集合中选取距离权重属性最小的节点作为新的更新节点开始更新。进行update，向外查找B的相邻节点，可以找到C、D和E，对C、D和E的距离权重属性、前驱节点属性以及路径包含权重属性进行更新：对于C节点，BC链路的距离为1，且C节点属于必经节点，所以其待更新的距离权重属性在B节点基础上加1等于2，待更新的路径包含权重属性在B节点基础上加1等于1，这里需要注意的是C节点已经作为A节点的邻近节点更新过了，但该步骤中C节点作为B节点的邻近节点所待更新的路径包含权重属性与原有一致，而距离权重属性要更小，所以要以本次待更新的数据为准，所以C节点更新后的距离权重属性d＝2，更新后的前驱节点属性pred＝B，更新后的路径包含权重属性include))＝1。对于D节点，BD链路的距离为1，且D节点不属于必经节点，所以其待更新的距离权重属性在B节点基础上加1等于2，待更新的路径包含权重属性在B节点基础上不变等于0，所以D节点更新后的距离权重属性d＝2，更新后的前驱节点属性pred＝B，更新后的路径包含权重属性include))＝0。对于E节点，BE链路的距离为1，且E节点属于必经节点，所以其待更新的距离权重属性在B节点基础上加1等于2，待更新的路径包含权重属性在B节点基础上加1等于1，所以D节点更新后的距离权重属性d＝2，更新后的前驱节点属性pred＝B，更新后的路径包含权重属性include))＝1。B节点作为更新节点更新后的网络拓扑示意图如图8所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。3、将更新节点B从T集合中取出加入S集合，此时S＝{A，B}，T＝{C,D,E,F}，从T集合中选取距离权重属性最小的节点作为新的更新节点开始更新。进行update，向外查找C的相邻节点，可以找到D，对D的距离权重属性、前驱节点属性以及路径包含权重属性进行更新：对于D节点，CD链路的距离为1，且D节点不属于必经节点，所以其待更新的距离权重属性在C节点基础上加1等于3，待更新的路径包含权重属性在C节点基础上不变等于1，这里需要注意的是D节点已经作为B节点的邻近节点更新过了，但该步骤中D节点作为C节点的邻近节点所待更新的路径包含权重属性比原来要大，所以要以本次待更新的数据为准，所以D节点更新后的距离权重属性d＝3，更新后的前驱节点属性pred＝C，更新后的路径包含权重属性include))＝1。C节点作为更新节点更新后的网络拓扑示意图如图9所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。4、将更新节点C从T集合中取出加入S集合，此时S＝{A，B，C}，T＝{D,E,F}，从T集合中选取距离权重属性最小的节点，作为新的更新节点开始更新。进行update，向外查找E的相邻节点，可以找到D、F，对D、F的距离权重属性、前驱节点属性以及路径包含权重属性进行更新：对于D节点，ED链路的距离为3，且D节点不属于必经节点，所以其待更新的距离权重属性在E节点基础上加3等于5，待更新的路径包含权重属性在E节点基础上不变等于1，这里需要注意的是D节点已经作为C节点的邻近节点更新过了，且该步骤中D节点作为E节点的邻近节点所待更新的路径包含权重属性与原来一样大，而且待更新的距离权重属性比原来的距离权重属性还要大，所以要以上次更新的数据为准，不对D节点的距离权重属性、前驱节点属性、路径包含权重属性做改变。对于F节点，EF链路的距离为1，且F节点不属于必经节点，所以其待更新的距离权重属性在E节点基础上加1等于3，待更新的路径包含权重属性在E节点基础上不变等于1，所以F节点更新后的距离权重属性d＝3，更新后的前驱节点属性pred＝E，更新后的路径包含权重属性include))＝1。E节点作为更新节点更新后的网络拓扑示意图如图10所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。5、将更新节点E从T集合中取出加入S集合，此时S＝{A，B，C，E}，T＝{D,F}，从T集合中选取距离权重属性最小的节点作为新的更新节点开始更新。进行update，向外查找D的相邻节点，可以找到E、F，对E、F的距离权重属性、前驱节点属性以及路径包含权重属性进行更新：对于E节点，DE链路的距离为3，且E节点属于必经节点，所以其待更新的距离权重属性在D节点基础上加3等于6，待更新的路径包含权重属性在D节点基础上加1等于2，这里需要注意的是，虽然E节点已经作为B节点的邻近节点更新过了，但该步骤中E节点作为D节点的邻近节点所待更新的路径包含权重属性比原来的大，所以要以本次待更新的数据为准，所以E节点更新后的距离权重属性d＝6，更新后的前驱节点属性pred＝D，更新后的路径包含权重属性include))＝2。对于F节点，DF链路的距离为1，且F节点不属于必经节点，所以其待更新的距离权重属性在D节点基础上加1等于4，待更新的路径包含权重属性在D节点基础上不变等于1，这里需要注意的是，F节点已经作为E节点的邻近节点更新过了，且该步骤中F节点作为D节点的邻近节点所待更新的路径包含权重属性与原来的一样大，而F节点作为D节点的邻近节点所待更新的距离权重属性比之原来的还更大，所以要以上次更新的数据为准，不对F节点的距离权重属性、前驱节点属性、路径包含权重属性做改变。D节点作为更新节点更新后的网络拓扑示意图如图11所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。6、将更新节点D从T集合中取出加入S集合，此时S＝{A，B，C，E，D}，T＝{F}，这样一来，T集合中除了宿节点F之外，其它所有节点都更新完毕，此时可以单独对宿节点F进行更新，宿节点的更新方式包括：选取宿节点的邻近节点中路径包含权重属性最大的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性；当多个邻近节点的路径包含权重属性最大时，选取其中距离权重属性值加上到宿节点距离值后数值最小的节点作为宿节点的前驱节点来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。按照上述方法，查看F节点的邻近节点：E、D。其中，E的距离权重属性d＝6、前驱节点属性pred＝D、路径包含权重属性include))＝2；D的距离权重属性d＝3、前驱节点属性pred＝C、路径包含权重属性include))＝1。可以发现E的路径包含权重属性比D的路径包含权重属性大，所以选取E节点作为F节点的前驱节点来更新F节点的距离权重属性、前驱节点属性以及路径包含权重属性，EF链路的距离为1，所以最后更新的F节点的距离权重属性d＝7、前驱节点属性pred＝E、路径包含权重属性include))＝2。F节点更新后的网络拓扑示意图如图12所示，图中靠近各个节点的一圈数值表示它们的距离权重属性，远离各个节点的一圈数值表示它们的路径包含权重属性。至此，所有节点更新完毕，此时，F节点的前驱节点属性为E节点，E节点的前驱节点属性为D节点，D节点的前驱节点属性为C节点，C节点的前驱节点属性为B节点，B节点的前驱节点属性为A节点。所以，以前驱节点属性为依据、以源节点A为起点、以宿节点F为终点所形成的当前路径为A-B-C-D-E-F，该条路径包含了两个必经节点资源C、E，路径长度为7，即为本实施例所求的包含多个必经节点资源的最短路径。需要说明的是，本实施例是以节点作为必经资源来进行的举例说明，当必经资源为链路时，与以节点为必经资源的原理是相同的，本发明所描述的方案也依旧适用。综上所述，本实施例能够解决路由计算中必须包含多个资源且需要路径最短的问题。相比于传统的路由计算模式，本发明实施例同时具备时间复杂度比较低、可以包含多个必经资源、可以找出包含多个必经资源的最短路径的优点。另外，本发明实施例的计算方法计算的路径不会形成环，可有效解决现有路由计算方式中路径成环的问题。实施例3：基于实施例1、实施例2提供的包含多个必经资源的最短路径实现方法，本实施例3提供一种包含多个必经资源的最短路径实现系统，如图13所示，该系统包括节点集合建立模块、节点更新模块以及路径规划模块，节点更新模块对节点集合建立模块中的节点进行更新，路径规划模块根据更新的节点来确定最终路径。其中，所述节点集合建立模块用于建立S集合和T集合，S集合用于存储已更新节点，T集合用于存储未更新节点，且所述节点集合建立模块还用于初始化所有节点的距离权重属性、前驱节点属性以及路径包含权重属性。具体的，在初始化时，将源节点的距离权重属性初始化为0、前驱节点属性初始化为0、路径包含权重属性初始化为0。将其它节点的距离权重属性初始化为无穷大、前驱节点属性初始化为0、路径包含权重属性初始化为0。所述节点更新模块用于将源节点作为更新节点，对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新，所述节点更新模块还用于将更新节点从T集合中取出加入S集合，并从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新，在除宿节点外的其它节点都作为更新节点更新后，单独对宿节点进行更新。具体的，设将更新节点为i，邻近节点为j，节点i属于V集合中v1-vn的某个节点，节点j为节点i在当前路径上向外寻找的邻近节点，对于更新节点i、邻近节点j，设定更新节点到邻近节点的距离为cij，更新节点的距离权重属性为d，更新节点的路径包含权重属性为include))，邻近节点现有的距离权重属性为d，邻近节点现有的路径包含权重属性为include))，邻近节点待更新的距离权重属性为邻近节点待更新的路径包含权重属性为那么“对更新节点的邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性进行更新”可表示为update，具体包括：令若邻近节点j是必经资源，则根据与include))的大小对比以及与d的大小对比来判断是否更新邻近节点j的路径包含权重属性以及距离权重属性。当邻近节点j的路径包含权重属性以及距离权重属性中至少一项更新时，将邻近节点j的前驱节点属性更新为i，否则不更新其前驱节点属性。另外，在从剩下T集合中选取除宿节点外距离权重属性最小的节点作为新的更新节点开始更新时，该过程中不会选取宿节点作为新的更新节点来更新宿节点周围邻近节点的距离权重属性、前驱节点属性以及路径包含权重属性，只有当其它所有节点完成更新后，才单独对宿节点进行更新，宿节点的更新方式包括：根据宿节点邻近节点的路径包含权重属性大小以及距离权重属性大小来更新宿节点的距离权重属性、前驱节点属性以及路径包含权重属性。所述路径规划模块用于将以前驱节点属性为依据、以源节点为起点、以宿节点为终点所形成的当前路径确定为包含多个必经资源的最短路径。本实施例上述各模块为虚拟模块，其功能与实施例1中的方法相对应，对其功能更为具体的说明可参考实施例1，在此就不再赘述。通过本实施例的各个虚拟模块，本实施例的系统能够解决路由计算中必须包含多个资源且需要路径最短的问题。相比于传统的路由计算模式，本实施例同时具备时间复杂度比较低、可以包含多个必经资源、可以找出包含多个必经资源的最短路径的优点。另外，本实施例的计算方法计算的路径不会形成环，可有效解决现有路由计算方式中路径成环的问题。实施例4：在上述实施例1、实施例2提供的包含多个必经资源的最短路径实现方法的基础上，本发明还提供了一种可用于实现上述方法的包含多个必经资源的最短路径实现装置，如图14所示，是本发明实施例的装置架构示意图。本实施例的包含多个必经资源的最短路径实现装置包括一个或多个处理器21以及存储器22。其中，图14中以一个处理器21为例。处理器21和存储器22可以通过总线或者其它方式连接，图14中以通过总线连接为例。存储器22作为一种非易失性计算机可读存储介质，可用于存储非易失性软件程序、非易失性计算机可执行程序以及模块，如实施例1、2中的包含多个必经资源的最短路径实现方法。处理器21通过运行存储在存储器22中的非易失性软件程序、指令以及模块，从而执行包含多个必经资源的最短路径实现装置的各种功能应用以及数据处理，即实现实施例1、2的包含多个必经资源的最短路径实现方法。存储器22可以包括高速随机存取存储器，还可以包括非易失性存储器，例如至少一个磁盘存储器件、闪存器件、或其它非易失性固态存储器件。在一些实施例中，存储器22可选包括相对于处理器21远程设置的存储器，这些远程存储器可以通过网络连接至处理器21。上述网络的实例包括但不限于互联网、企业内部网、局域网、移动通信网及其组合。程序指令/模块存储在存储器22中，当被一个或者多个处理器21执行时，执行上述实施例1、2中的包含多个必经资源的最短路径实现方法，例如，执行以上描述的图1-图4所示的各个步骤。本领域普通技术人员可以理解实施例的各种方法中的全部或部分步骤是可以通过程序来指令相关的硬件来完成，该程序可以存储于一计算机可读存储介质中，存储介质可以包括：只读存储器、随机存取存储器、磁盘或光盘等。以上所述仅为本发明的较佳实施例而已，并不用以限制本发明，凡在本发明的精神和原则之内所作的任何修改、等同替换和改进等，均应包含在本发明的保护范围之内。本说明书中未作详细描述的内容属于本领域专业技术人员公知的现有技术。
