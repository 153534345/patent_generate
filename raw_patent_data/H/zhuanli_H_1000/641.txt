标题title
一种基于Nginx的企业级账号访问数据方法和系统
摘要abst
本发明涉及数据访问领域，特别是涉及一种基于Nginx的企业级账号访问数据方法和系统。主要包括：代理服务器获取用户账号的访问权限、访问地址和访问请求；当用户账号的访问权限为只读权限时，代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，在访问地址中通过只读方式获取读数据请求中需要获取的数据；当用户账号的访问权限为读写权限时，代理服务器通过反向代理，将访问请求定位至主用服务器中相应的访问地址，在访问地址中获取读数据请求中需要读取的数据，和/或，将写数据请求中的相应数据写入主用服务器中的访问地址中。本发明可以减少备用服务器的资源闲置，并减轻主用服务器的处理负担。
权利要求书clms
1.一种基于Nginx的企业级账号访问数据方法，其特征在于，包括：代理服务器获取用户账号的访问权限、访问地址和访问请求，其中，访问权限包括只读权限和读写权限，访问请求包括读数据请求和写数据请求；其中，所述访问地址是应用层面中数据在数据库中的存储地址；当用户账号的访问权限为只读权限时，代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，在访问地址中通过只读方式获取读数据请求中需要获取的数据；当用户账号的访问权限为读写权限时，代理服务器通过反向代理，将访问请求定位至主用服务器中相应的访问地址，在访问地址中获取读数据请求中需要读取的数据，和/或，将写数据请求中的相应数据写入主用服务器中的访问地址中。2.根据权利要求1所述的基于Nginx的企业级账号访问数据方法，其特征在于，所述代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，具体包括：代理服务器获取需访问的备用服务器的url地址，将访问地址和备用服务器的url地址合并为备用服务器上的url地址，根据合并后的url地址定位备用服务器中相应的访问地址；和/或，代理服务器获取需访问的备用服务器的访问端口，通过访问端口连接备用服务器，在连接后的备用服务器上定位相应的访问地址。3.根据权利要求2所述的基于Nginx的企业级账号访问数据方法，其特征在于，当存在多于一台备用服务器时，所述代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，还包括：代理服务器在所有可访问的备用服务器间开启负载均衡，获取负载最低的备用服务器的url地址或访问端口，根据获取到的url或访问端口将访问请求定位至相应备用服务器中相应的访问地址；和/或，代理服务器为每个用户账号设置关联的备用服务器，在用户账号和关联的备用服务器之间建立专用连接，通过专用连接访问相应的备用服务器，并将访问请求定位至该备用服务器上相应的访问地址。4.根据权利要求1所述的基于Nginx的企业级账号访问数据方法，其特征在于，当只读权限的用户账户需要写入数据时，向代理服务器申请转换为读写权限；代理服务器根据预设规则判定用户账户是否能够进行权限转换，并判定访问权限转换后用户账户可访问的数据范围；具体包括：当用户账户的访问权限转换为读写权限时，获取用户账户当前正在访问的数据，在主用服务器上查询相应数据的访问地址，根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址；当用户账户的访问权限仍然为只读权限时，拒绝用户账户的写数据请求，或，由具备读写权限的用户账户执行相应的写数据请求。5.根据权利要求4中任一项所述的基于Nginx的企业级账号访问数据方法，其特征在于，所述在主用服务器上查询相应数据的访问地址，具体包括：根据备用服务器上正在访问的数据的访问地址，获取主用服务器上相对应的访问地址；和/或，在主用服务器和备用服务器上，为每一组需要访问的数据建立相同的数据索引，根据备用服务器上正在访问的数据的索引，获取主用服务器上相同索引的数据的访问地址。6.根据权利要求4中任一项所述的基于Nginx的企业级账号访问数据方法，其特征在于，所述根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址，具体包括：代理服务器建立自身与主用服务器的新连接，并将访问地址定位至主用服务器相应的访问地址；代理服务器获取主用服务器的访问地址中用户账户正在访问的数据，将正在访问的数据返回给用户账户；代理服务器通过自身与主用服务器之间的新连接重新建立用户账户与主用服务器之间的连接，再断开用户账户与备用服务器之间的连接，以便于通过用户账户与主用服务器之间的连接完成用户账户的写数据请求。7.根据权利要求4中任一项所述的基于Nginx的企业级账号访问数据方法，其特征在于，所述由具备读写权限的用户账户执行相应的写数据请求，具体包括：在代理服务器上建立写数据缓存区，将写数据请求缓存至写数据缓存区，并向具有读写权限的用户账户推送数据审核请求；当数据审核请求通过后，代理服务器根据缓存的写数据请求，将写数据请求中的相应数据写入主用服务器中的访问地址中，并清除写数据缓存区中已完成的写数据请求；当数据审核请求未通过时，代理服务器直接清除写数据缓存区中相应的写数据请求。8.一种基于Nginx的企业级账号访问数据系统，其特征在于，包括：客户端、代理服务器、主用服务器和备用服务器，具体包括：用户账户通过客户端将自身的访问权限、访问地址和访问请求发送至代理服务器，并获取代理服务器返回的需访问数据；代理服务器上架设Nginx反向代理服务，根据用户账户的访问权限，使用权利要求1-7中任一项提供的方法，通过反向代理将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址，并完成相应的访问请求。9.根据权利要求8所述的基于Nginx的企业级账号访问数据系统，其特征在于，所述通过反向代理将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址，具体包括：在代理服务器上建立一个管理进程，在管理进程中完成用户账户的权限判定，并根据用户权限确定每个用户账户需访问的主用服务器或备用服务器；为每个用户账户建立一个工作进程，在工作进程中建立用户账户与主用服务器或备用服务器的连接，以便将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址。10.根据权利要求9所述的基于Nginx的企业级账号访问数据系统，其特征在于，所述完成相应的访问请求，具体包括：管理进程将用户账户发送的访问请求封装为相应的请求事件，并将请求事件分发至相应用户账户的工作进程；每个工作进程分别对分发至自身的请求事件进行相应，通过自身中建立的连接完成请求事件中的访问请求。
说明书desc
技术领域本发明涉及数据访问领域，特别是涉及一种基于Nginx的企业级账号访问数据方法和系统。背景技术Nginx是一个高性能的HTTP和反向代理QWeb服务器，同时也提供IMAP/POP3/SMTP服务，具有占有内存少和并发能力强的特点。Nginx作为反向代理服务器时，用户账户只需要通过客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，将数据返回给客户端，此时反向代理服务器和目标服务器在外界看来就是一个服务器，暴露的是代理服务器，隐藏了真实服务器的IP地址。在企业级数据访问场景中，在每个企业内部，出于数据安全性和业务连续性考虑，目标服务器通常包含主用服务器和备用服务器。在进行企业级账号访问时，通常仅会访问主用服务器，而备用服务器仅进行后台数据备份，或作为主用服务器无法访问时的备份，但不会在主用服务器正常工作时直接接受用户账户的访问，从而导致备用服务器的资源闲置。鉴于此，如何克服现有技术所存在的缺陷，解决企业级账号访问时备用服务器闲置的现象，是本技术领域待解决的问题。发明内容针对现有技术的以上缺陷或改进需求，本发明解决了企业级账号访问时备用服务器闲置的问题。本发明实施例采用如下技术方案：第一方面，本发明提供了一种基于Nginx的企业级账号访问数据方法，具体为：代理服务器获取用户账号的访问权限、访问地址和访问请求，其中，访问权限包括只读权限和读写权限，访问请求包括读数据请求和写数据请求；其中，所述访问地址是应用层面中数据在数据库中的存储地址；当用户账号的访问权限为只读权限时，代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，在访问地址中通过只读方式获取读数据请求中需要获取的数据；当用户账号的访问权限为读写权限时，代理服务器通过反向代理，将访问请求定位至主用服务器中相应的访问地址，在访问地址中获取读数据请求中需要读取的数据，和/或，将写数据请求中的相应数据写入主用服务器中的访问地址中。优选的，所述代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，具体包括：代理服务器获取需访问的备用服务器的url地址，将访问地址和备用服务器的url地址合并为备用服务器上的url地址，根据合并后的url地址定位备用服务器中相应的访问地址；和/或，代理服务器获取需访问的备用服务器的访问端口，通过访问端口连接备用服务器，在连接后的备用服务器上定位相应的访问地址。优选的，当存在多于一台备用服务器时，所述代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，还包括：代理服务器在所有可访问的备用服务器间开启负载均衡，获取负载最低的备用服务器的url地址或访问端口，根据获取到的url或访问端口将访问请求定位至相应备用服务器中相应的访问地址；和/或，代理服务器为每个用户账号设置关联的备用服务器，在用户账号和关联的备用服务器之间建立专用连接，通过专用连接访问相应的备用服务器，并将访问请求定位至该备用服务器上相应的访问地址。优选的，当只读权限的用户账户需要写入数据时，向代理服务器申请转换为读写权限；代理服务器根据预设规则判定用户账户是否能够进行权限转换，并判定访问权限转换后用户账户可访问的数据范围；具体包括：当用户账户的访问权限转换为读写权限时，获取用户账户当前正在访问的数据，在主用服务器上查询相应数据的访问地址，根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址；当用户账户的访问权限仍然为只读权限时，拒绝用户账户的写数据请求，或，由具备读写权限的用户账户执行相应的写数据请求。优选的，所述在主用服务器上查询相应数据的访问地址，具体包括：根据备用服务器上正在访问的数据的访问地址，获取主用服务器上相对应的访问地址；和/或，在主用服务器和备用服务器上，为每一组需要访问的数据建立相同的数据索引，根据备用服务器上正在访问的数据的索引，获取主用服务器上相同索引的数据的访问地址。优选的，所述根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址，具体包括：代理服务器建立自身与主用服务器的新连接，并将访问地址定位至主用服务器相应的访问地址；代理服务器获取主用服务器的访问地址中用户账户正在访问的数据，将正在访问的数据返回给用户账户；代理服务器通过自身与主用服务器之间的新连接重新建立用户账户与主用服务器之间的连接，再断开用户账户与备用服务器之间的连接，以便于通过用户账户与主用服务器之间的连接完成用户账户的写数据请求。优选的，所述由具备读写权限的用户账户执行相应的写数据请求，具体包括：在代理服务器上建立写数据缓存区，将写数据请求缓存至写数据缓存区，并向具有读写权限的用户账户推送数据审核请求；当数据审核请求通过后，代理服务器根据缓存的写数据请求，将写数据请求中的相应数据写入主用服务器中的访问地址中，并清除写数据缓存区中已完成的写数据请求；当数据审核请求未通过时，代理服务器直接清除写数据缓存区中相应的写数据请求。另一方面，本发明提供了一种基于Nginx的企业级账号访问数据系统，具体为：包括：客户端、代理服务器、主用服务器和备用服务器，具体包括：用户账户通过客户端将自身的访问权限、访问地址和访问请求发送至代理服务器，并获取代理服务器返回的需访问数据；代理服务器上架设Nginx反向代理服务，根据用户账户的访问权限，使用第一方面提供的方法，通过反向代理将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址，并完成相应的访问请求。优选的，所述通过反向代理将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址，具体包括：在代理服务器上建立一个管理进程，在管理进程中完成用户账户的权限判定，并根据用户权限确定每个用户账户需访问的主用服务器或备用服务器；为每个用户账户建立一个工作进程，在工作进程中建立用户账户与主用服务器或备用服务器的连接，以便将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址。优选的，所述完成相应的访问请求，具体包括：管理进程将用户账户发送的访问请求封装为相应的请求事件，并将请求事件分发至相应用户账户的工作进程；每个工作进程分别对分发至自身的请求事件进行相应，通过自身中建立的连接完成请求事件中的访问请求。与现有技术相比，本发明的有益效果在于：通过Nginx的反向代理机制，在用户无感的情况下，将只读权限的用户账户的访问请求定位至备用服务器，将读写权限的用户账户的访问请求定位至主用服务器，使得只读权限的用户账户在能够在不影响备用服务器上数据安全的情况下利用备用服务器上的数据资源，并使得主用服务器仅需响应具有读写权限的用户账户的访问请求，从而减少备用服务器的资源闲置，并减轻主用服务器的处理负担。进一步的，在本发明的优选方案中，还提供了多备用服务器的场景中，通过负载均衡或专用连接确定需访问的备用服务器的技术方案，以提高访问效率，避免发生访问拥塞；同时，还提供了在用户账户权限变化时进行访问服务器切换的技术方案，以及通过具有读写权限的用户账户完成只读权限的用户账户写请求的技术方案，提升了方案使用时的灵活性。附图说明为了更清楚地说明本发明实施例的技术方案，下面将对本发明实施例中所需要使用的附图作简单地介绍。显而易见地，下面所描述的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为现有技术中心Nginx反向代理方式示意图；图2为本发明实施例提供的一种基于Nginx的企业级账号访问数据方法流程图；图3为本发明实施例提供的另一种基于Nginx的企业级账号访问数据方法流程图；图4为本发明实施例提供的另一种基于Nginx的企业级账号访问数据方法流程图；图5为本发明实施例提供的方法中主备服务器切换过程示意图；图6为本发明实施例提供的另一种基于Nginx的企业级账号访问数据方法流程图；图7为本发明实施例提供的一种基于Nginx的企业级账号访问数据系统结构示意图；图8为本发明实施例提供的系统中使用的的功能模块示意图。具体实施方式为了使本发明的目的、技术方案及优点更加清楚明白，以下结合附图及实施例，对本发明进行进一步详细说明。应当理解，此处所描述的具体实施例仅用以解释本发明，并不用于限定本发明。本发明是一种特定功能系统的体系结构，因此在具体实施例中主要说明各结构模组的功能逻辑关系，并不对具体软件和硬件实施方式做限定。此外，下面所描述的本发明各个实施方式中所涉及到的技术特征只要彼此之间未构成冲突就可以相互组合。下面就参考附图和实施例结合来详细说明本发明。在现有的Nginx反向代理场景中，如图1所示，客户端通过架设了Nginx的代理服务器与多个目标服务器进行连接。由于反向代理机制的存在，客户端可视为仅存在一个单一的服务器，无需具体获知实际访问的服务器地址或配置，并且不同目标服务器返回的数据在客户端视角也不存在区别。现有技术中，Nginx进行目标服务器的连接时，通常会将所有的客户端视为等同的访问请求来源，也将所有存在的目标服务器视为等同的访问目标。反向代理服务器通过轮询或哈希计算，将所有客户端发送的多条请求平均分发到不同的目标服务器，不同的目标服务器分别对反向代理服务器分发的不同请求信息进行处理，代理服务器再将目标服务器处理后的响应数据返回至相应的客户端。实施例1：本实施例的场景中，出于数据安全需要或用户的身份限制，不同的用户账户存在不同的访问权限，也存在主用服务器和备用服务器的区别。因此，不能将所有的用户账户的访问请求等同处理，并且需要根据不同的访问权限将用户账户分配至不同的目标服务器。为了满足不同访问权限的用户账户的不同访问需求，使得备用服务器上的数据和计算资源也能够得到充分利用，本实施例提供了一种基于Nginx的企业级账号访问数据方法。如图2所示，本发明实施例提供的方法具体步骤如下：步骤101：代理服务器获取用户账号的访问权限、访问地址和访问请求。用户账户进行访问时，会通过访问请求对指定访问地址的数据进行访问，访问请求包括读数据请求和写数据请求，访问地址是应用层面中数据在数据库中的存储地址。为了进行访问限制，不同的用户账户具有不同的访问权限，访问权限包括只读权限和读写权限。具有只读权限的用户账户仅能使用只读方式查看服务器上的数据，不能写入数据或修改数据，服务器仅响应读数据请求；具有读写权限的用户账户不仅可能查看服务器上的数据，还可以写入新数据或对数据进行修改，服务器响应读数据请求和写数据请求。实际实施中，用户账户的访问权限可以由系统管理员直接指定，也可以通过各种权限策略进行指定。例如：通过后台管理模块登录系统的用户账户，通常为管理员用户，该用户账户会被分配读写权限；通过普通业务模块登录系统的用户账户，通常为一般用户，该用户账户会被分配只读权限。进一步的，同一个用户账户在不同的访问场景下也可能会有不同的访问权限。例如：为了避免外部恶意访问，对于同一个具有读写权限的用户账户，可以利用Nginx的访问IP限制机制，通过登录地点的IP地址对访问权限进行区分。当IP地址为内部网络时，允许用户账户正常使用读写权限；当IP地址为外部网络时，对用户权限进行限制，仅允许用户使用只读权限。进一步的，在实际实施中，还可以对用户账户进行访问地址范围的限制。例如：对于只读权限的用户账户，可以限制其可读的文件夹或文件；对于读写权限的用户账户，可以限制其可读的文件夹或文件，也可以限制其可写的文件夹或文件，实际实施中，可读和可写的访问地址范围可以一致或不一致。步骤102：当用户账号的访问权限为只读权限时，代理服务器通过反向代理将访问请求定位至备用服务器中相应的访问地址，在访问地址中通过只读方式获取读数据请求中需要获取的数据。本实施例的场景中，存在主用服务器和备用服务器，备用服务器上包含了主用服务器上所有数据的备份。基于Nginx的反向代理机制，用户账户通过Nginx代理服务器进行数据访问时，代理服务器可以根据需要从主用服务器或备用服务器中读取所需的数据，再将读取的数据返回至用户。对于用户而言，无需额外设置自己使用的服务器，由不同服务器中读取到的数据也并不存在区别。实际实施中，反向代理可以使用proxy_pass指令来配置。服务器的实际使用过程中，主用服务器上的数据会根据业务需要进行实时读写，而为了避免备用服务器上的数据与主用服务器发生冲突，备用服务器上的数据通常仅通过与主用服务器同步的方式进行写入，而不接受其它方式写入。而使用只读方式对服务器进行访问时，由于不存在数据写入，因此不会使服务器上的数据发生变化，也不会因数据变化而导致数据冲突。因此，本实施例提供的方法中，当用户账户仅有只读权限时，代理服务器可以对备用服务器上的数据进行读取，由备用服务器获得用户所需的数据，以充分利用备用服务器上的闲置数据，减少主用服务器的访问负担。在通常的业务系统中，数据的访问地址仅以主用服务器上的实际存储地址为准。但是，实际实施中，由于使用目的或存储机制不同，主用服务器和备用服务器上的数据库配置、文件存储方式、文件命名规则等可能一致也可能不同。例如：主用服务器上的数据按照业务需要进行存储，以便在业务需要时快速访问；备用服务器上的数据进行数据压缩后再按照同步时间存储，以节省存储空间。因此，由备用服务器中获取数据时，还可能需要进行相应的访问地址转换。当两者访问地址一致时，代理服务器可以根据主用服务器上的访问地址直接获取到备用服务器上相同的访问地址；当两者访问地址不一致时，需要按照数据同步时的文件存储规则，或进行相应的数据库检索，以获取到备用服务器上相应的访问地址。进一步的，Nginx代理服务器还支持数据缓存机制。为了提高备用服务器上的数据访问效率，对于备用服务器上使用压缩形式存储的数据，可以进行解压后缓存至代理服务器上，以避免反复解压导致的效率降低和资源浪费。进一步的，备用服务器会按照预设的同步机制由主用服务器上获取数据，由于数据同步具有滞后性，因此备用服务器上的数据可能并不是最新数据。本实施例中，还可以进一步对用户账户的访问地址范围进行区分。某些用户账户仅允许查看已同步的历史数据，不允许查看最新数据，对于该类型用户，直接由备用服务器上获取数据即可。某些用户账户允许查看最新数据，代理服务器可以向主用服务器提出所需数据的同步申请，待同步完成后再进行数据读取；或者由主用服务器上获取相应数据后，再将数据提供给用户，备用服务器上的数据等待下次同步后再进行更新。通过该方式，可以确保主备服务器上的数据依然保持同步。步骤103：当用户账号的访问权限为读写权限时，代理服务器通过反向代理，将访问请求定位至主用服务器中相应的访问地址，在访问地址中获取读数据请求中需要读取的数据，和/或，将写数据请求中的相应数据写入主用服务器中的访问地址中。具有读写权限的用户可以进行数据写入，会导致数据变化。为了避免破坏主用服务器和备用服务器之间的数据一致性，因此需要在主用服务器上进行访问请求的响应。对于用户的读数据请求，直接获取主用服务器上当前的实时数据；对于用户的写数据请求，直接通过业务系统写入主用服务器中，再通过同步机制同步至备用服务器中。经过本实施例中提供的步骤101-步骤103后，即可通过代理服务器，在用户无感的情况下，通过不同的服务器满足不同权限用户账户的访问请求，从而减少主用服务器的业务负担，并充分使用备用服务器的资源。在实际实施中，代理服务器可以根据需要选择合适的代理机制，将访问请求定位至备用服务器中相应的访问地址。以下简单提供一些可用的访问地址定位方法，实际实施中可以参考以下方式进行定位，也可以根据需要使用其它的方式获取实际的访问地址。代理服务器获取需访问的备用服务器的统一资源定位符地址，将访问地址和备用服务器的url地址合并为备用服务器上的url地址，根据合并后的url地址定位备用服务器中相应的访问地址。Nginx中，访问地址可以使用url的形式进行表示。例如，在某个具体场景中，主用服务器的url为：http://s1.server.com/，备用服务器的url为：http://s2.server.com/，用户账户提交至代理服务器的访问地址为：/pathname/filename，且主用服务器和备用服务器上文件存储方式一致。此时，具有读写权限的用户账户的访问地址为：http://s1.server.com/pathname/filename，只读权限的用户账户访问地址为：http://s2.server.com/pathname/filename。该方式的访问较为灵活，仅需在获取数据时进行地址合并，并对合并后的访问地址进行访问即可，适用于临时账户的访问或短时间访问。代理服务器获取需访问的备用服务器的访问端口，通过访问端口连接备用服务器，在连接后的备用服务器上定位相应的访问地址。Nginx的代理服务器也可以通过不同的访问端口对不同的目标服务器进行访问。实际实施中，可以先通过不同的访问端口，在用户账户和备用服务器之间建立连接，再通过已建立的连接和对备用服务器上相应的访问地址进行访问。该方式无需为每个访问请求重新计算访问地址，也无需重新建立连接，适用于固定账户长时间访问或频繁访问。通过上述方式，都可以完成备用服务器上访问地址的定位。进一步的，在主用服务器和备用服务器上文件存储地址不一致的情况下，还可以利用Nginx的匹配机制，使用通配符或正则表达式表示访问路径中的一部分，而无需对访问路径进行精确计算。例如，主用服务器上文件的保存地址为：/pathname/filename，备用服务器上文件的保存地址为：/yymmdd/filename，此时，可以使用通配符将访问地址表示为/*/filename，使其能够同时匹配主用服务器和备用服务器上的文件保存地址。为了提高数据访问效率，当存在多于一台备用服务器时，代理服务器可以通过反向代理将访问请求定位至备用服务器中相应的访问地址。代理服务器在所有可访问的备用服务器间开启负载均衡，获取负载最低的备用服务器的url地址或访问端口，根据获取到的url或访问端口将访问请求定位至相应备用服务器中相应的访问地址。在某些场景中，不同备用服务器的功能的访问规则相同，因此，可以使用Nginx的负载均衡机制实现负载均摊，将访问请求分发至不同的备用服务器上。常用的负载均衡方式包括：加权轮询默认、IP哈希、url哈希、根据响应时间动态调度等。在具体实施中，为了便于区分不同用户账户可访问的服务器，可以通过配置upstream服务器组，将能够进行负载均衡的服务器进行分组，仅在组内进行负载分担。代理服务器为每个用户账号设置关联的备用服务器，在用户账号和关联的备用服务器之间建立专用连接，通过专用连接访问相应的备用服务器，并将访问请求定位至该备用服务器上相应的访问地址。在另一些场景中，不同备用服务器的功能不同，或不同用户账户的访问规则不同。为了区分不同备用服务器或不同用户账号的访问需求，可以将用户账户和备用服务器进行关联，使每个用户账户访问一个或多个指定的备用服务器。实际实施中，可以通过配置文件对用户账号和可访问的备用服务器之间的关联关系进行设置。进一步的，建立连接时，还可以获取每个服务器的ssl证书，使连接能够支持https方式的访问，以提高数据安全。在实际实施中，对主用服务器进行访问时，也可以使用上述的定位方式进行定位，或使用上述的负载均衡机制进行负载均衡。进一步的，当具有读写权限的用户账户发起读数据请求时，若主用服务器繁忙，且需要读取的数据已存在于备用服务器中，也可以通过负载均衡机制，通过主用服务器和备用服务器均衡分担读数据任务。在实际实施中，只读权限的用户账户可能也存在写入数据的需求。此时，需要通过如图3所示的过程，完成用户账号权限的转换，并根据转换结果使用相应的写入规则完成数据写入。步骤201：当只读权限的用户账户需要写入数据时，向代理服务器申请转换为读写权限。实际实施中，代理服务器可以将用户的权限转换申请推送至能够进行权限调整的用户账户，由相应的用户账户完成权限转换的审核和修改。在某些场景下，代理服务器上也可以预设读写权限的转换规则。例如，某个用户账户发生业务类型转换，或IP地址转换时，可以对读写权限进行相应的转换。步骤202：代理服务器根据预设规则判定用户账户是否能够进行权限转换，并判定访问权限转换后用户账户可访问的数据范围。代理服务器根据用户账号的审核结果或转换规则，判定用户账户的权限转换是否成功。同时，为了确保数据安全，某些用户账户在权限转换后，仅允许访问部分数据，例如，仅能访问当前读取的文件中包含的数据，因此还需要确定用户账户可访问的数据范围。步骤203：当用户账户的访问权限转换为读写权限时，获取用户账户当前正在访问的数据，在主用服务器上查询相应数据的访问地址，根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址。若权限转换成功，用户账户获取到读写权限，则与其它具有读写权限的用户一样，通过主用服务器进行数据读写。转换至主用服务器的过程中，为了确保用户的访问过程不被中断，可以先通过用户正在访问的数据定位至主用服务器上相应的访问地址，再由主用服务器上获取用户当前正在访问的数据。由于主用服务器和备用服务器上的数据一致，因此由主用服务器上获取的数据与用户已获取到的备用服务器上正在访问的数据一致，向用户呈现数据时并不会存在数据的中断或变化，从而完成了数据的平滑切换。步骤204：当用户账户的访问权限仍然为只读权限时，拒绝用户账户的写数据请求，或，由具备读写权限的用户账户执行相应的写数据请求。若权限转换失败，用户账户依然为只读权限，无权进行数据写入，用户账户继续由备用服务器中获取数据。此时，根据不同的业务需要，可以直接拒绝用户进行数据写入，也可以将需写入的数据转交至具备读写权限的用户账户，通过转交后的用户账户进行写入。经过本实施例中提供的步骤201-步骤204后，即可对只读权限的用户账户提出的写数据请求进行响应。进一步的，当主用服务器访问繁忙，且具有读写权限的用户账户未提出写数据请求时，也可以使用类似的方式，将用户账户切换至备用服务器上，通过备用服务器进行数据读取，以分担主用服务器的访问负载。当用户账号提出写数据请求时，直接切换回主用服务器进行数据写入。具体实施中，可以通过以下方式完成步骤203中在主用服务器上查询相应数据的访问地址的过程。根据备用服务器上正在访问的数据的访问地址，获取主用服务器上相对应的访问地址。本实施例提供的方法中，可以通过主用服务器和备用服务器之间的地址对应关系，将基于主用服务器的访问地址转换为备用服务器上的访问地址。同样的，也可以将备用服务器上的访问地址转换为主用服务器上的访问地址。在主用服务器和备用服务器上，为每一组需要访问的数据建立相同的数据索引，根据备用服务器上正在访问的数据的索引，获取主用服务器上相同索引的数据的访问地址。为了便于进行数据对应和权限管理，并提高数据访问速度，可以为每一组数据建立一个数据索引，该数据索引在主用服务器和备用服务器上保持一致。对于同一个数据索引，在不同的服务器上可以关联不同的访问地址。进行服务器切换时，通过备用服务器上的关联关系获取当前访问地址对应的数据索引，再通过相同的数据索引获取主用服务器上的关联的访问地址。为了避免服务器切换导致的访问中断，如图4所示，可以使用以下方式，根据查询到的访问地址将用户账户重新定位至主用服务器相应的访问地址。步骤301：代理服务器建立自身与主用服务器的新连接，并将访问地址定位至主用服务器相应的访问地址。代理服务器首先完成与主用服务器的连接和访问地址定位，避免建立连接和地址定位导致的时延。步骤302：代理服务器获取主用服务器的访问地址中用户账户正在访问的数据，将正在访问的数据返回给用户账户。代理服务器由主用服务器获取正在访问的数据，并返回给用户账号，避免切换过程中用户无法查看数据。步骤303：代理服务器通过自身与主用服务器之间的新连接重新建立用户账户与主用服务器之间的连接，再断开用户账户与备用服务器之间的连接，以便于通过用户账户与主用服务器之间的连接完成用户账户的写数据请求。代理服务器首先将用户账户与主用服务器重新连接，再端口用户账户与备用服务器之间的连接，该过程中，用户账号与服务器之间始终存在连接，不会因连接中断造成访问错误或数据丢失。经过本实施例中提供的步骤301-步骤303后，即可将用户账号的响应服务器由备用服务器切换为主用服务器。具体实施中，连接的变化过程如图5所示，其中，实线表示与主用服务器间的数据通道，虚线表示与备用服务器间的数据通道。如图6所示，当用户未申请到读写权限，但仍需要进行写入时，可以通过以下方式，由具备读写权限的用户账户执行相应的写数据请求。步骤401：在代理服务器上建立写数据缓存区，将写数据请求缓存至写数据缓存区，并向具有读写权限的用户账户推送数据审核请求。对于权限较低的用户账户，其需写入的数据可能存在安全隐患，或可能存在数据错误。因此，不直接将数据写入至主用服务器或备用服务器，而是先在代理服务器上进行缓存，并由具备权限的用户进行审核。具体实施中，审核请求的推送可以通过事件机制完成。步骤402：当数据审核请求通过后，代理服务器根据缓存的写数据请求，将写数据请求中的相应数据写入主用服务器中的访问地址中，并清除写数据缓存区中已完成的写数据请求。若数据审核请求通过，表明能够接受该数据的写入，此时，代理服务器直接根据写数据请求完成数据写入，无需用户账户再进行操作。步骤403：当数据审核请求未通过时，代理服务器直接清除写数据缓存区中相应的写数据请求。若数据审核请求未通过，表明不能接受该数据的写入，此时需要直接清除数据，以节省缓存空间，并避免保留恶意数据。经过本实施例中提供的步骤401-步骤403后，即可在用户账户的权限不变的情况下，完成写数据请求的响应。本实施例提供的基于Nginx的企业级账号访问数据方法，通过Nginx的反向代理机制，在用户无感的情况下，将只读权限的用户账户的访问请求定位至备用服务器，将读写权限的用户账户的访问请求定位至主用服务器，使得只读权限的用户账户在能够在不影响备用服务器上数据安全的情况下利用备用服务器上的数据资源，并使得主用服务器仅需响应具有读写权限的用户账户的访问请求，从而减少备用服务器的资源闲置，并减轻主用服务器的处理负担。进一步的，在本发明的优选方案中，还提供了多备用服务器的场景中，通过负载均衡或专用连接确定需访问的备用服务器的技术方案，以提高访问效率，避免发生访问拥塞；同时，还提供了在用户账户权限变化时进行访问服务器切换的技术方案，以及通过具有读写权限的用户账户完成只读权限的用户账户写请求的技术方案，提升了方案使用时的灵活性。实施例2：在上述实施例1提供的基于Nginx的企业级账号访问数据方法的基础上，本发明还提供了一种可用于实现上述方法的基于Nginx的企业级账号访问数据系统，如图7所示，是本发明实施例的系统架构示意图。该系统中包括：客户端、代理服务器、主用服务器和备用服务器。实际实施中，客户端、主用服务器和备用服务器的数量都可以根据需要进行设置，可以同时存在多个客户端、主用服务器或备用服务器。本实施例中，为了描述简便，以一个客户端、一个主用服务器和一个备用服务器为例进行说明。用户账户通过客户端将自身的访问权限、访问地址和访问请求发送至代理服务器，并获取代理服务器返回的需访问数据。用户账号并不直接访问主用服务器或备用服务器，而是通过客户端仅访问唯一的代理服务器，服务器的具体数量和架构对于客户端透明。代理服务器上架设Nginx反向代理服务，根据用户账户的访问权限，使用实施例1中提供的方法，通过反向代理将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址，并完成相应的访问请求。代理服务器根据用户权限，将不同权限用户账户的访问请求定位至不同的服务器上，以实现读写任务的分离。实际实施中，当存在多个备用服务器或多个主用服务器时，可以使用实施例1中提供的方法进行负载均衡；当用户权限发生变化时，也可以使用实施例1提供的方法将用户的访问请求切换至不同的服务器上。在Nginx中，可以使用master管理进程和worker工作进程实现多线程工作。本实施例中，用户权限判定和访问请求处理，也可以分别使用不同的进程实现。在代理服务器上建立一个管理进程，在管理进程中完成用户账户的权限判定，并根据用户权限确定每个用户账户需访问的主用服务器或备用服务器。由master进程负责读取用户账户的访问权限和访问请求，根据访问权限确定用户账户需访问的服务器，并完成访问地址的定位。为每个用户账户建立一个工作进程，在工作进程中建立用户账户与主用服务器或备用服务器的连接，以便将用户账户发送的访问地址定位至主用服务器或备用服务器上相应的访问地址。通过不同的worker进程，对每个用户账户的访问请求分别进行处理，提高不同用户账号之间的连接和数据的独立性，确保每个用户账户能够按照权限访问指定的服务器，从而提高数据安全性。进一步的，为了充分利用了多核处理器的并发能力，可以将每个worker进程绑定到一个固定的CPU核心上，让每个worker进程独享一个CPU核心，这样既能有效避免CPU频繁地上下文切换，也能大幅提高CPU的缓存命中率。如图8所示，Nginx中存在多个不同的功能模块。其中，事件模块定义了一系列可以运行在不同操作系统、不同内核版本的事件驱动模块，以支持各类操作系统提供的事件驱动模型，包括epoll、poll、select、kqueue、eventport等，其能够处理的事件来自网络和磁盘，包括TCP连接的建立与断开、接收和发送网络数据包、磁盘文件的I/O操作等。本实施例中，也可以通过事件驱动模型提升访问请求的响应效率。具体的：管理进程将用户账户发送的访问请求封装为相应的请求事件，并将请求事件分发至相应用户账户的工作进程。每个工作进程分别对分发至自身的请求事件进行相应，通过自身中建立的连接完成请求事件中的访问请求。通过事件模块，可以高效的完成不同用户账号的访问请求的收集和分发，以提高数据的访问效率。以上所述仅为本发明的较佳实施例而已，并不用以限制本发明，凡在本发明的精神和原则之内所作的任何修改、等同替换和改进等，均应包含在本发明的保护范围之内。
