标题title
Redis连接异常的处理方法、电子设备及存储介质
摘要abst
本发明提供了一种Redis连接异常的处理方法、电子设备及存储介质，涉及Redis连接异常的处理领域，所述方法包括：获取每一初始客户端，以得到初始客户端列表A；遍历A，若Ai满足预设的异常判断条件，则将Ai确定为异常客户端；获取每一异常客户端对应的每一异常问题；生成每一异常客户端对应的异常问题特征向量，以得到异常问题特征向量列表W；根据W以及若干历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，以得到目标处理策略列表集T；将Tj发送至Bj，使得Bj执行Tj中的至少一个目标处理策略；本发明能够实现当应用程序与对应的Redis连接异常时，快速的处理连接异常的目的。
权利要求书clms
1.一种Redis连接异常的处理方法，其特征在于，所述方法包括以下步骤：S100，获取每一初始客户端，以得到初始客户端列表A=，i=1，2，…，n；其中，Ai为获取到的第i个初始客户端，n为获取到的初始客户端的数量；初始客户端为部署有目标应用程序且与预设的Redis通讯连接的客户端；目标应用程序为若干异常应用程序中的任一异常应用程序；S200，遍历A，若Ai满足预设的异常判断条件，则将Ai确定为异常客户端，以得到异常客户端列表B=，j=1，2，…，m；其中，Bj为确定出的第j个异常客户端，m为确定出的异常客户端的数量；异常客户端为存在连接异常的客户端；S300，获取每一异常客户端对应的每一异常问题，以得到异常问题列表集Q=；其中，Qj为Bj对应的异常问题列表；S400，根据Q，生成每一异常客户端对应的异常问题特征向量，以得到异常问题特征向量列表W=；其中，Wj为Bj对应的异常问题特征向量；S500，根据W以及若干历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，以得到目标处理策略列表集T=；其中，Tj为Bj对应的目标处理策略列表；Tj包括若干目标处理策略；S600，遍历T，将Tj发送至Bj，使得Bj执行Tj中的至少一个目标处理策略，以消除Bj存在的连接异常。2.根据权利要求1所述的Redis连接异常的处理方法，其特征在于，步骤S200包括以下步骤：S210，获取A中每一初始客户端连接预设的Redis的错误数量以及访问预设的Redis的平均访问延时，以得到异常判断参数组列表CS=；其中，CSi为Ai对应的异常判断参数组；CSi=；CSi，1为Ai连接预设的Redis的错误数量，CSi，2为Ai访问预设的Redis的平均访问延时；S220，遍历CS，若CSi，1≠0或CSi，2＞TE，则确定Ai为异常客户端；其中，TE为预设的平均访问延时阈值。3.根据权利要求2所述的Redis连接异常的处理方法，其特征在于，CSi，2通过以下步骤确定：S211，获取预设时间段内每一预设时间点对应的访问延时，以得到CSi对应的访问延时列表GH=，p=1，2，…，q；其中，GHp为预设时间段内的第p个预设时间点对应的访问延时，q为预设时间段内预设时间点的数量；预设时间段的结束时间为当前时间；S212，根据GH，确定CSi，2=1/q×∑qp=1GHp。4.根据权利要求1所述的Redis连接异常的处理方法，其特征在于，Qj=），r=1，2，…，f；其中，Qj，r为Bj对应的第r个异常问题，f为Bj对应的异常问题的数量；步骤S400包括以下步骤：S410，获取预设的初始问题特征向量HY=，a=1，2，…，b；其中，HYa为第a个已知异常问题对应的元素值，b为已知异常问题的数量；HY内每一元素值均为0；S420，遍历Qj，将Qj，r在HY中对应的元素值设置为1，以得到Bj对应的异常问题特征向量Wj，进而得到异常问题特征向量列表W。5.根据权利要求1所述的Redis连接异常的处理方法，其特征在于，步骤S500包括以下步骤：S510，获取每一历史异常问题特征向量，以得到历史异常问题特征向量列表LG=，c=1，2，…，d；其中，LGc为获取到的第c个历史异常问题特征向量，d为获取到的历史异常问题特征向量的数量；S520，根据LG，获取每一历史异常问题特征向量对应的历史处理策略，以得到历史处理策略列表FU=；其中，FUc为LGc对应的处理策略；S530，使用预设的聚类算法，对LG进行聚类，以得到历史异常问题特征向量组列表JA=，e=1，2，…，g；其中，JAe为对LG进行聚类得到的第e个历史异常问题特征向量组，g为对LG进行聚类得到的历史异常问题特征向量组的数量；S540，根据FU，获取JA中每一历史异常问题特征向量组对应的历史处理策略组，以得到历史处理策略组列表KA=；其中，KAe为JAe对应的历史处理策略组；KAe=），x=1，2，…，y；其中，KAe，x为JAe中的第x个历史异常问题特征向量对应的历史处理策略，y为JAe中历史异常问题特征向量的数量；S550，获取Wj与JA中每一历史异常问题特征向量组的初始相似度，以得到Wj对应的初始相似度列表ηj=；其中，ηj，e为Wj与JAe的初始相似度；S560，根据ηj，确定Wj与JA的目标相似度MH=MAX；其中，MAX为预设的求最大值函数；S570，根据MH和KA，确定Tj。6.根据权利要求5所述的Redis连接异常的处理方法，其特征在于，步骤S570包括以下步骤：S571，将MH对应的历史异常问题特征向量组确定为目标历史异常问题特征向量组；S572，根据KA，获取目标历史异常问题特征向量组对应的目标历史处理策略组；S573，将目标历史处理策略组中相同的历史处理策略归为一类，以得到目标历史处理策略组对应的历史处理策略类列表RU=，β=1，2，…，γ；其中，RUβ为对目标历史处理策略组中的历史处理策略归类得到的第β个历史处理策略类，γ为对目标历史处理策略组中的历史处理策略归类得到历史处理策略类的数量；RUβ内的任意两个历史处理策略相同；任意两个历史处理策略类对应的历史处理策略不同；S574，获取RU中的每一历史处理策略类中的历史处理策略的数量，以得到RU对应的初始数量列表NUM=；其中，NUMβ为RUβ中历史处理策略的数量；S575，将NUM中最大的v个初始数量确定为目标数量，以得到目标数量列表NUM’=，h=1，2，…，v；NUM’h为NUM中第h个最大的初始数量；NUM’k＞NUM’k+1，k=1，2，…，v-1；S576，将NUM’h对应的历史处理策略确定为目标处理策略。7.根据权利要求6所述的Redis连接异常的处理方法，其特征在于，Tj=；其中，Tj，h为NUM’h对应的历史处理策略；步骤S600包括以下步骤：S610，获取目标值N=1；S620，控制Bj执行Tj，N，并判断Bj对应的异常问题是否消除；S630，若Bj对应的异常问题未消除，则获取N=N+1，并进入步骤S620；否则，跳出当前处理。8.根据权利要求5所述的Redis连接异常的处理方法，其特征在于，所述预设的聚类算法包括DBSCAN聚类算法。9.一种非瞬时性计算机可读存储介质，所述存储介质中存储有至少一条指令或至少一段程序，其特征在于，所述至少一条指令或所述至少一段程序由处理器加载并执行以实现如权利要求1-8中任意一项所述的Redis连接异常的处理方法。10.一种电子设备，其特征在于，包括处理器和权利要求9所述的非瞬时性计算机可读存储介质。
说明书desc
技术领域本发明涉及Redis连接异常的处理领域，特别是涉及一种Redis连接异常的处理方法、电子设备及存储介质。背景技术远程字典服务，i=1，2，…，n；其中，Ai为获取到的第i个初始客户端，n为获取到的初始客户端的数量；初始客户端为部署有目标异常应用程序且与预设的Redis通讯连接的客户端；目标异常应用程序为若干异常应用程序中的任一异常应用程序。S200，遍历A，若Ai满足预设的异常判断条件，则将Ai确定为异常客户端，以得到异常客户端列表B=，j=1，2，…，m；其中，Bj为确定出的第j个异常客户端，m为确定出的异常客户端的数量；异常客户端为存在连接异常的客户端。S300，获取每一异常客户端对应的每一异常问题，以得到异常问题列表集Q=；其中，Qj为Bj对应的异常问题列表。S400，根据Q，生成每一异常客户端对应的异常问题特征向量，以得到异常问题特征向量列表W=；其中，Wj为Bj对应的异常问题特征向量。S500，根据W以及若干历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，以得到目标处理策略列表集T=；其中，Tj为Bj对应的目标处理策略列表；Tj包括若干目标处理策略。S600，遍历T，将Tj发送至Bj，使得Bj执行Tj中的至少一个目标处理策略，以消除Bj存在的连接异常。根据本申请的另一方面，还提供了一种非瞬时性计算机可读存储介质，存储介质中存储有至少一条指令或至少一段程序，至少一条指令或至少一段程序由处理器加载并执行以实现上述Redis连接异常的处理方法。根据本申请的另一方面，还提供了一种电子设备，包括处理器和上述非瞬时性计算机可读存储介质。本发明至少具有以下有益效果：本发明的Redis连接异常的处理方法，获取每一部署有目标应用的初始客户端，根据预设的异常判断条件，从所有的初始客户端中确定出若干异常客户端；获取每一异常客户端对应的每一异常问题，根据每一异常客户端对应的每一异常问题生成每一异常客户端对应的异常问题特征向量；根据每一异常客户端对应的异常问题特征向量以及历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，将目标处理策略发送至对应的异常客户端，使得异常客户端执行目标处理策略来消除异常问题，从而实现当应用程序与对应的Redis连接异常时，快速的处理连接异常的目的。进一步的，在确定异常客户端的目标处理策略时，所根据的是历史异常问题对应的处理策略，历史异常问题对应的处理策略能够解决对应的异常问题；因此，确定出的目标处理策略更加符合对应的异常问题，使得解决对应的连接异常的效率较高。附图说明为了更清楚地说明本发明实施例中的技术方案，下面将对实施例描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1为本发明实施例提供的Redis连接异常的处理方法的流程图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述，显然，所描述的实施例仅仅是本发明一部分实施例，而不是全部的实施例。基于本发明中的实施例，本领域技术人员在没有作出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。需要说明的是，下文描述在所附权利要求书的范围内的实施例的各种方面。应显而易见，本文中所描述的方面可体现于广泛多种形式中，且本文中所描述的任何特定结构及/或功能仅为说明性的。基于本公开，所属领域的技术人员应了解，本文中所描述的一个方面可与任何其他方面独立地实施，且可以各种方式组合这些方面中的两者或两者以上。举例来说，可使用本文中所阐述的任何数目个方面来实施设备及/或实践方法。另外，可使用除了本文中所阐述的方面中的一或多者之外的其他结构及/或功能性实施此设备及/或实践此方法。下面将参照图1所述的Redis连接异常的处理方法的流程图，对一种Redis连接异常的处理方法进行介绍。所述Redis连接异常的处理方法可以包括以下步骤：S100，获取每一初始客户端，以得到初始客户端列表A=，i=1，2，…，n；其中，Ai为获取到的第i个初始客户端，n为获取到的初始客户端的数量；初始客户端为部署有目标应用程序且与预设的Redis通讯连接的客户端；目标应用程序为若干异常应用程序中的任一异常应用程序。本实施例中，应用场景可以为民航领域的机场，机场在对机场的各个业务管理时，通常会设置有多个客户端，例如，客户端可以为电脑、PAD等；在每一客户端上安装有不同功能的应用程序；可以理解的是，一个应用程序可以安装于多个客户端，每一客户端也可以安装多个不同的应用程序；每一客户端连接有预设的Redis，预设的Redis部署于预设的服务器集群上。在具体应用时，可以使用实时应用监控平台来实时监控每一应用程序的运行情况，通过CAT能够获取到存在异常的应用程序，例如，存在异常的应用程序可以为该应用程序存在连接错误或访问Redis的延时较高等；当监控到某一应用程序存在异常时，能够通过CAT获取安装有该应用程序的每一客户端，以得到初始客户端列表A。S200，遍历A，若Ai满足预设的异常判断条件，则将Ai确定为异常客户端，以得到异常客户端列表B=，j=1，2，…，m；其中，Bj为确定出的第j个异常客户端，m为确定出的异常客户端的数量；异常客户端为存在连接异常的客户端。本实施例中，某一应用程序会安装在若干个客户端上，而当该应用程序出现异常时，并不能够表示安装有该应用程序的所有客户端都有异常，有可能只有部分安装有该应用程序的客户端存在异常，因此，需要确定出异常客户端。进一步的，步骤S200包括以下步骤：S210，获取A中每一初始客户端连接预设的Redis的错误数量以及访问预设的Redis的平均访问延时，以得到异常判断参数组列表CS=；其中，CSi为Ai对应的异常判断参数组；CSi=；CSi，1为Ai连接预设的Redis的错误数量，CSi，2为Ai访问预设的Redis的平均访问延时。通过CAT，能够获取到安装有目标应用程序的每一客户端连接预设的Redis的错误数量以及访问预设的Redis的平均访问延时，进而能够得到每一初始客户端对应的异常判断参数组；例如，CAT监控到A1连接预设的Redis的错误数量为3，访问预设的Redis的平均访问延时为50ms，那么，CS1=。S220，遍历CS，若CSi，1≠0或CSi，2＞TE，则确定Ai为异常客户端；其中，TE为预设的平均访问延时阈值。本实施例中，如果CSi，1≠0，表示对应的初始客户端存在连接错误，可直接判定Ai为异常客户端；而如果CSi，2＞TE，表示Ai访问预设的Redis的平均访问延时较高，也能够判定Ai为异常客户端；TE可以为经验值或根据若干历史数据分析得到。进一步的，CSi，2可以通过以下步骤确定：S211，获取预设时间段内每一预设时间点对应的访问延时，以得到CSi对应的访问延时列表GH=，p=1，2，…，q；其中，GHp为预设时间段内的第p个预设时间点对应的访问延时，q为预设时间段内预设时间点的数量；预设时间段的结束时间为当前时间。S212，根据GH，确定CSi，2=1/q×∑qp=1GHp。本实施例中，预设时间段可以为1min，在预设时间段内设置若干预设时间点，例如，每间隔1s设置一个预设时间点，在1min内能够获取到60个访问延时，然后求取60个访问延时对应平均访问延时，得到GH；同时，设置预设时间段的结束时间为当前时间能够确保所采集到的访问延时都是最新的访问延时，能够确保判断的时效性。可选的，在步骤S211之后，还可以通过以下步骤确定Ai是否为异常客户端：S213，根据GH，确定Ai对应的访问延时波动率ωi=1/q×。S214，若ωi＞BD，则确定Ai为异常客户端；否则，确定Ai不是异常客户端；其中，BD为预设的访问延时波动率阈值。通过上述方法，只需要判断Ai对应的访问延时波动率即可直接判断Ai是否为异常客户端，在访问延时波动较大，而平均访问延时较小时也能够确定Ai为异常客户端，进一步提高判断Ai是否为异常客户端的准确性。S300，获取每一异常客户端对应的每一异常问题，以得到异常问题列表集Q=；其中，Qj为Bj对应的异常问题列表。本实施例中，异常客户端有可能对应一个异常问题，也有可能对应多个异常问题，通过CAT能够获取到每一异常客户端对应的每一异常问题，从而得到Q；异常问题可以是预先设置的异常问题，异常客户端的异常现象符合哪一预设的异常问题，则将该异常问题与该异常客户端关联。需要说明的是，本领域技术人员能够根据实际需要，采用现有的CAT技术来监控每一客户端，同时能够获取到异常客户端对应的异常问题，此处不加赘述。S400，根据Q，生成每一异常客户端对应的异常问题特征向量，以得到异常问题特征向量列表W=；其中，Wj为Bj对应的异常问题特征向量。本实施例中，Qj=），r=1，2，…，f；其中，Qj，r为Bj对应的第r个异常问题，f为Bj对应的异常问题的数量；可以理解的是，由于本实施例中，每个异常客户端对应的异常问题的数量是不同的，故而，本实施例中，f不是指代一个具体的函数或函数结果值，而是指代一个随着j的具体值的不同而可能的值，例如，当j=1时，f=3；j=2时，f=4；j=3时，f=3。进一步的，步骤S400包括以下步骤：S410，获取预设的初始问题特征向量HY=，a=1，2，…，b；其中，HYa为第a个已知异常问题对应的元素值，b为已知异常问题的数量；HY内每一元素值均为0。本实施例中，能够获取到每一已知异常问题，例如，已知异常问题的数量为4，对应的初始问题特征向量为HY=；HY内的每一位置的元素对应固定的已知异常问题，例如，第一个0对应第一个已知异常问题，第二个0对应第二个已知异常问题。S420，遍历Qj，将Qj，r在HY中对应的元素值设置为1，以得到Bj对应的异常问题特征向量Wj，进而得到异常问题特征向量列表W。获取到Qj，能够遍历Qj，确定Qj中每一异常问题在HY中对应的位置，并将该位置的元素值设置为1；例如，Qj中包含两个异常问题，分别对应HY中的第一元素和第三个元素，那么，Qj对应的异常问题特征向量Wj=。通过上述方法，能够将异常客户端对应的异常问题转换为可被机器识别的特征向量，从而实现对异常客户端对应的异常问题的分析。S500，根据W以及若干历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，以得到目标处理策略列表集T=；其中，Tj为Bj对应的目标处理策略列表；Tj包括若干目标处理策略。进一步的，步骤S500可以包括以下步骤：S510，获取每一历史异常问题特征向量，以得到历史异常问题特征向量列表LG=，c=1，2，…，d；其中，LGc为获取到的第c个历史异常问题特征向量，d为获取到的历史异常问题特征向量的数量。本实施例中，通过数据库的历史记录能够获取到历史上的异常客户端对应的异常问题，通过步骤S400中的方法转换为对应的历史异常问题特征向量，从而得到LG。S520，根据LG，获取每一历史异常问题特征向量对应的历史处理策略，以得到历史处理策略列表FU=；其中，FUc为LGc对应的处理策略。可以理解的是，每一历史异常客户端的若干历史异常问题对应有历史处理策略，处理策略可以理解为处理对应的异常问题的方法或措施；任意两个历史异常客户端对应的历史异常问题的历史处理策略可能相同，也可能不同。S530，使用预设的聚类算法，对LG进行聚类，以得到历史异常问题特征向量组列表JA=，e=1，2，…，g；其中，JAe为对LG进行聚类得到的第e个历史异常问题特征向量组，g为对LG进行聚类得到的历史异常问题特征向量组的数量。本实施例中，预设的聚类算法可以为DBSCAN聚类算法，使用该聚类算法，无需设置聚类的数量，可根据LG内历史异常问题特征向量的相似情况自动完成聚类，使得聚类更加合理。S540，根据FU，获取JA中每一历史异常问题特征向量组对应的历史处理策略组，以得到历史处理策略组列表KA=；其中，KAe为JAe对应的历史处理策略组；KAe=），x=1，2，…，y；其中，KAe，x为JAe中的第x个历史异常问题特征向量对应的历史处理策略，y为JAe中历史异常问题特征向量的数量。可以理解的是，每一历史异常问题特征向量均对应一个历史处理策略，因此，能够根据FU，获取JA中每一历史异常问题特征向量组对应的历史处理策略组，以得到历史处理策略组列表KA。S550，获取Wj与JA中每一历史异常问题特征向量组的初始相似度，以得到Wj对应的初始相似度列表ηj=；其中，ηj，e为Wj与JAe的初始相似度。本实施例中，可以首先确定每一历史异常问题特征向量组对应的平均向量，然后确定Wj与JA中每一历史异常问题特征向量组对应的平均向量的初始相似度；初始相似度可以采用欧氏距离进行表示；需要说明的是，本领域技术人员能够根据实际需要采用现有的欧式距离计算方法确定Wj与JA中每一历史异常问题特征向量组对应的平均向量的初始相似度，此处不加赘述。S560，根据ηj，确定Wj与JA的目标相似度MH=MAX；其中，MAX为预设的求最大值函数。本实施例中，MH对应的历史异常问题特征向量与Wj的相似度最高，即MH对应的历史异常问题与Wj对应的异常问题最为相似。S570，根据MH和KA，确定Tj。进一步的，步骤S570可以包括以下步骤：S571，将MH对应的历史异常问题特征向量组确定为目标历史异常问题特征向量组。S572，根据KA，获取目标历史异常问题特征向量组对应的目标历史处理策略组。S573，将目标历史处理策略组中相同的历史处理策略归为一类，以得到目标历史处理策略组对应的历史处理策略类列表RU=，β=1，2，…，γ；其中，RUβ为对目标历史处理策略组中的历史处理策略归类得到的第β个历史处理策略类，γ为对目标历史处理策略组中的历史处理策略归类得到历史处理策略类的数量；RUβ内的任意两个历史处理策略相同；任意两个历史处理策略类对应的历史处理策略不同。可以理解的是，目标历史处理策略组中包含若干历史处理策略，会存在有相同的历史处理策略，将相同的历史处理策略归为一类，得到RU。S574，获取RU中的每一历史处理策略类中的历史处理策略的数量，以得到RU对应的初始数量列表NUM=；其中，NUMβ为RUβ中历史处理策略的数量。S575，将NUM中最大的v个初始数量确定为目标数量，以得到目标数量列表NUM’=，h=1，2，…，v；NUM’h为NUM中第h个最大的初始数量；NUM’k＞NUM’k+1，k=1，2，…，v-1。S576，将NUM’h对应的历史处理策略确定为目标处理策略。本实施例中，目标数量较大的历史处理策略在处理目标历史异常问题时用的次数最多，这些历史处理策略解决对应的历史异常问题最有效；因此，将这些历史处理策略确定为目标处理策略。S600，遍历T，将Tj发送至Bj，使得Bj执行Tj中的至少一个目标处理策略，以消除Bj存在的连接异常。进一步的，Tj=；其中，Tj，h为NUM’h对应的历史处理策略；步骤S600包括以下步骤：S610，获取目标值N=1。S620，控制Bj执行Tj，N，并判断Bj对应的异常问题是否消除。S630，若Bj对应的异常问题未消除，则获取N=N+1，并进入步骤S620；否则，跳出当前处理。可以理解的是，目标处理策略存在多个，每一目标处理策略具有不同的优先级，Tj内的目标处理策略的优先级按照排列顺序依次减小；Bj执行Tj中目标处理策略时，首先执行第一个优先级最高的目标处理策略，该处理策略有可能能够解决Bj对应的异常问题，也有可能无法解决Bj对应的异常问题；如果不能够解决Bj对应的异常问题，则执行第二个目标处理策略。可选的，如果Bj执行完Tj中每一目标处理策略，Bj对应的异常问题未全部消除，则通过预设的问题处理策略映射表，确定每一未消除的异常问题对应的候选处理策略，并执行每一候选处理策略，以消除Bj对应的全部异常问题。本实施例的Redis连接异常的处理方法，获取每一部署有目标应用的初始客户端，根据预设的异常判断条件，从所有的初始客户端中确定出若干异常客户端；获取每一异常客户端对应的每一异常问题，根据每一异常客户端对应的每一异常问题生成每一异常客户端对应的异常问题特征向量；根据每一异常客户端对应的异常问题特征向量以及历史异常问题对应的处理策略，确定每一异常客户端对应的目标处理策略，将目标处理策略发送至对应的异常客户端，使得异常客户端执行目标处理策略来消除异常问题，从而实现当应用程序与对应的Redis连接异常时，快速的处理连接异常的目的。进一步的，在确定异常客户端的目标处理策略时，所根据的是历史异常问题对应的处理策略，历史异常问题对应的处理策略能够解决对应的异常问题；因此，确定出的目标处理策略更加符合对应的异常问题，使得解决对应的连接异常的效率较高。此外，尽管在附图中以特定顺序描述了本公开中方法的各个步骤，但是，这并非要求或者暗示必须按照该特定顺序来执行这些步骤，或是必须执行全部所示的步骤才能实现期望的结果。附加的或备选的，可以省略某些步骤，将多个步骤合并为一个步骤执行，以及/或者将一个步骤分解为多个步骤执行等。本发明的实施例还提供了一种非瞬时性计算机可读存储介质，该存储介质可设置于电子设备之中以保存用于实现方法实施例中一种方法相关的至少一条指令或至少一段程序，该至少一条指令或该至少一段程序由该处理器加载并执行以实现上述实施例提供的方法。所述程序产品可以采用一个或多个可读介质的任意组合。可读介质可以是可读信号介质或者可读存储介质。可读存储介质例如可以为但不限于电、磁、光、电磁、红外线、或半导体的系统、装置或器件，或者任意以上的组合。可读存储介质的更具体的例子包括：具有一个或多个导线的电连接、便携式盘、硬盘、随机存取存储器、只读存储器、可擦式可编程只读存储器、光纤、便携式紧凑盘只读存储器、光存储器件、磁存储器件、或者上述的任意合适的组合。计算机可读信号介质可以包括在基带中或者作为载波一部分传播的数据信号，其中承载了可读程序代码。这种传播的数据信号可以采用多种形式，包括但不限于电磁信号、光信号或上述的任意合适的组合。可读信号介质还可以是可读存储介质以外的任何可读介质，该可读介质可以发送、传播或者传输用于由指令执行系统、装置或者器件使用或者与其结合使用的程序。可读介质上包含的程序代码可以用任何适当的介质传输，包括但不限于无线、有线、光缆、RF等等，或者上述的任意合适的组合。可以以一种或多种程序设计语言的任意组合来编写用于执行本申请操作的程序代码，所述程序设计语言包括面向对象的程序设计语言—诸如Java、C++等，还包括常规的过程式程序设计语言—诸如“C”语言或类似的程序设计语言。程序代码可以完全地在用户计算设备上执行、部分地在用户设备上执行、作为一个独立的软件包执行、部分在用户计算设备上部分在远程计算设备上执行、或者完全在远程计算设备或服务器上执行。在涉及远程计算设备的情形中，远程计算设备可以通过任意种类的网络，包括局域网或广域网，连接到用户计算设备，或者，可以连接到外部计算设备。本发明的实施例还提供了一种电子设备，包括处理器和前述的非瞬时性计算机可读存储介质。根据本申请的这种实施方式的电子设备。电子设备仅仅是一个示例，不应对本申请实施例的功能和使用范围带来任何限制。电子设备以通用计算设备的形式表现。电子设备的组件可以包括但不限于：上述至少一个处理器、上述至少一个储存器、连接不同系统组件的总线。其中，所述储存器存储有程序代码，所述程序代码可以被所述处理器执行，使得所述处理器执行本说明书中描述的各种实施例中的步骤。储存器可以包括易失性储存器形式的可读介质，例如随机存取储存器和/或高速缓存储存器，还可以进一步包括只读储存器。储存器还可以包括具有一组程序模块的程序/实用工具，这样的程序模块包括但不限于：操作系统、一个或者多个应用程序、其它程序模块以及程序数据，这些示例中的每一个或某种组合中可能包括网络环境的实现。总线可以为表示几类总线结构中的一种或多种，包括储存器总线或者储存器控制器、外围总线、图形加速端口、处理器或者使用多种总线结构中的任意总线结构的局域总线。电子设备也可以与一个或多个外部设备通信，还可与一个或者多个使得用户能与该电子设备交互的设备通信，和/或与使得该电子设备能与一个或多个其它计算设备进行通信的任何设备通信。这种通信可以通过输入/输出接口进行。并且，电子设备还可以通过网络适配器与一个或者多个网络，广域网和/或公共网络，例如因特网)通信。网络适配器通过总线与电子设备的其它模块通信。应当明白，尽管图中未示出，可以结合电子设备使用其它硬件和/或软件模块，包括但不限于：微代码、设备驱动器、冗余处理器、外部磁盘驱动阵列、RAID系统、磁带驱动器以及数据备份存储系统等。通过以上的实施方式的描述，本领域的技术人员易于理解，这里描述的示例实施方式可以通过软件实现，也可以通过软件结合必要的硬件的方式来实现。因此，根据本公开实施方式的技术方案可以以软件产品的形式体现出来，该软件产品可以存储在一个非易失性存储介质中或网络上，包括若干指令以使得一台计算设备执行根据本公开实施方式的方法。本发明的实施例还提供一种计算机程序产品，其包括程序代码，当所述程序产品在电子设备上运行时，所述程序代码用于使该电子设备执行本说明书上述描述的根据本发明各种示例性实施方式的方法中的步骤。虽然已经通过示例对本发明的一些特定实施例进行了详细说明，但是本领域的技术人员应该理解，以上示例仅是为了进行说明，而不是为了限制本发明的范围。本领域的技术人员还应理解，可以对实施例进行多种修改而不脱离本发明的范围和精神。本发明开的范围由所附权利要求来限定。
