标题title
用于编码单元的三叉树划分处理方法、设备及存储介质
摘要abst
本申请关于一种用于编码单元的三叉树划分处理方法、设备及存储介质，涉及视频压缩技术领域。该方法包括：获取编码单元CU的特征向量；特征向量用于表示CU的图像特征以及CU的邻域图像特征；基于特征向量，获取预测值；预测值用于指示CU跳过三叉树划分的概率；响应于预测值大于预测阈值，基于对CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。本申请能够通过预测提前跳过不必要的三叉树划分流程，提高视频编码效率。
权利要求书clms
1.一种用于编码单元的三叉树划分处理方法，其特征在于，所述方法包括：获取编码单元CU的特征向量；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；基于所述特征向量，获取预测值；所述预测值用于指示所述CU跳过三叉树划分的概率；响应于所述预测值大于预测阈值，基于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。2.根据权利要求1所述的方法，其特征在于，所述获取编码单元CU的特征向量，包括：响应于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果满足指定条件，获取所述CU的所述特征向量。3.根据权利要求2所述的方法，其特征在于，所述指定条件包括：对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果中，最优预测结果为不划分的预测结果、二叉树水平划分的预测结果或者二叉树垂直划分的预测结果。4.根据权利要求3所述的方法，其特征在于，所述响应于所述预测值大于预测阈值，基于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程，包括：响应于所述预测值大于所述预测阈值，且所述最优预测结果为不划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分；响应于所述预测值大于所述预测阈值，且所述最优预测结果为二叉树水平划分的预测结果，跳过对所述CU的三叉树垂直划分；响应于所述预测值大于所述预测阈值，且所述最优预测结果为二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分。5.根据权利要求1至4任一所述的方法，其特征在于，所述基于所述特征向量，获取预测值，包括：将所述特征向量输入网络预测模型，获得所述网络预测模型输出的所述预测值；其中，所述网络预测模型是通过CU样本的特征向量样本以及所述CU样本的最优三叉树划分方式进行训练得到的机器学习模型。6.根据权利要求5所述的方法，其特征在于，所述基于所述特征向量，获取预测值之前，还包括：获取所述CU的块大小；所述块大小用于将所述CU划分为多个类别，并按照所述类别分别训练所述网络预测模型；基于所述块大小，获取所述CU的类别；基于所述类别，获取所述网络预测模型。7.根据权利要求5所述的方法，其特征在于，所述方法还包括：将所述特征向量样本，输入所述网络预测模型，获得所述网络预测模型输出的，所述CU样本的三叉树划分方式预测结果；所述三叉树划分方式预测结果用于指示所述CU样本跳过三叉树划分的概率；基于所述CU样本的最优三叉树划分方式，以及所述三叉树划分方式预测结果，获取所述网络预测模型的损失函数值；基于所述网络预测模型的损失函数值，对所述网络预测模型进行参数更新。8.根据权利要求1至4任一所述的方法，其特征在于，所述特征向量包括：所述CU的相邻块的信息，以及，所述CU的信息；所述相邻块的信息包括以下至少一种：所述相邻块的CU深度、所述相邻块的QT深度、所述相邻块的BT深度、所述相邻块的MT深度、所述相邻块的形状信息以及所述相邻块的最优划分类型；所述相邻块是与所述CU相邻，且已经编码完成的编码块；所述CU的信息包括以下至少一种：所述CU的深度、所述CU的帧等级、所述CU的量化系数、所述CU的同位块的深度、所述CU的梯度信息、所述CU的方差信息、所述CU的亮度像素以及所述CU的形状信息。9.一种用于编码单元的三叉树划分处理方法，其特征在于，所述方法包括：获取CU样本的特征向量样本，以及所述CU样本的最优三叉树划分方式；将所述特征向量样本，输入网络预测模型，获得所述网络预测模型输出的，所述CU样本的三叉树划分方式预测结果；所述三叉树划分方式预测结果用于指示所述CU样本跳过三叉树划分的概率；基于所述CU样本的最优三叉树划分方式，以及所述三叉树划分方式预测结果，获取所述网络预测模型的损失函数值；基于所述网络预测模型的损失函数值，对所述网络预测模型进行参数更新；其中，所述网络预测模型，用于基于输入的CU的特征向量，输出预测值；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；所述预测值用于指示所述CU跳过三叉树划分的概率。10.根据权利要求9所述的方法，其特征在于，所述获取CU样本的特征向量样本，以及所述CU样本的最优三叉树划分方式，包括：获取对所述CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果；响应于对所述CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果中，最优预测结果为三叉树划分的预测结果，获取所述CU样本的所述特征向量，以及所述CU样本的三叉树划分方式。11.一种用于编码单元的三叉树划分处理装置，其特征在于，所述装置包括：第一获取模块，用于获取编码单元CU的特征向量；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；第二获取模块，用于基于所述特征向量，获取预测值；所述预测值用于指示所述CU跳过三叉树划分的概率；执行模块，用于响应于所述预测值大于预测阈值，基于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。12.一种用于编码单元的三叉树划分处理装置，其特征在于，所述装置包括：样本获取模块，用于获取CU样本的特征向量样本，以及所述CU样本的最优三叉树划分方式；输入输出模块，用于将所述特征向量样本，输入网络预测模型，获得所述网络预测模型输出的，所述CU样本的三叉树划分方式预测结果；所述三叉树划分方式预测结果用于指示所述CU样本跳过三叉树划分的概率；损失获取模块，用于基于所述CU样本的最优三叉树划分方式，以及所述三叉树划分方式预测结果，获取所述网络预测模型的损失函数值；参数更新模块，用于基于所述网络预测模型的损失函数值，对所述网络预测模型进行参数更新；其中，所述网络预测模型，用于基于输入的CU的特征向量，输出预测值；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；所述预测值用于指示所述CU跳过三叉树划分的概率。13.一种计算机设备，其特征在于，所述计算机设备包括处理器和存储器，所述存储器存储有至少一条计算机指令，所述至少一条计算机指令由所述处理器加载并执行以实现如权利要求1至10任一所述的用于编码单元的三叉树划分处理方法。14.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质中存储有至少一条计算机指令，所述计算机指令由处理器加载并执行以实现如权利要求1至10任一所述的用于编码单元的三叉树划分处理方法。15.一种计算机程序产品，其特征在于，所述计算机程序产品包括计算机指令，所述计算机指令存储在计算机可读存储介质中；所述计算机指令由计算机设备的处理器读取并执行，以实现如权利要求1至10任一所述的用于编码单元的三叉树划分处理方法。
说明书desc
技术领域本申请涉及视频压缩技术领域，特别涉及一种用于编码单元的三叉树划分处理方法、设备及存储介质。背景技术H.266/VVC是一种视频编码标准，能够提供更高的压缩效率和更好的视频质量。在相关技术中，块划分可以将视频帧划分为多个块，每个块都可以独立地进行编码和解码，以提升视频质量。然而，H.266/VVC引入了多类型树划分模式，增加了寻找最优块划分方式的复杂度，会给视频编解码带来很大的计算量，严重影响视频编码效率。发明内容本申请提供了一种用于编码单元的三叉树划分处理方法、设备及存储介质，可以通过预测以跳过三叉树划分，进而提高视频编码效率；所述技术方案内容如下。根据本申请的一方面，提供了一种用于编码单元的三叉树划分处理方法，所述方法包括：获取编码单元CU的特征向量；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；基于所述特征向量，获取预测值；所述预测值用于指示所述CU跳过三叉树划分的概率；响应于所述预测值大于预测阈值，基于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。根据本申请的一方面，提供了一种用于编码单元的三叉树划分处理方法，所述方法包括：获取CU样本的特征向量样本，以及所述CU样本的最优三叉树划分方式；将所述特征向量样本，输入网络预测模型，获得所述网络预测模型输出的，所述CU样本的三叉树划分方式预测结果；所述三叉树划分方式预测结果用于指示所述CU样本跳过三叉树划分的概率；基于所述CU样本的最优三叉树划分方式，以及所述三叉树划分方式预测结果，获取所述网络预测模型的损失函数值；基于所述网络预测模型的损失函数值，对所述网络预测模型进行参数更新；其中，所述网络预测模型，用于基于输入的CU的特征向量，输出预测值；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；所述预测值用于指示所述CU跳过三叉树划分的概率。根据本申请的一方面，提供了一种用于编码单元的三叉树划分处理装置，所述装置包括：第一获取模块，用于获取编码单元CU的特征向量；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；第二获取模块，用于基于所述特征向量，获取预测值；所述预测值用于指示所述CU跳过三叉树划分的概率；执行模块，用于响应于所述预测值大于预测阈值，基于对所述CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对所述CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。根据本申请的一方面，提供了一种用于编码单元的三叉树划分处理装置，所述装置包括：样本获取模块，用于获取CU样本的特征向量样本，以及所述CU样本的最优三叉树划分方式；输入输出模块，用于将所述特征向量样本，输入网络预测模型，获得所述网络预测模型输出的，所述CU样本的三叉树划分方式预测结果；所述三叉树划分方式预测结果用于指示所述CU样本跳过三叉树划分的概率；损失获取模块，用于基于所述CU样本的最优三叉树划分方式，以及所述三叉树划分方式预测结果，获取所述网络预测模型的损失函数值；参数更新模块，用于基于所述网络预测模型的损失函数值，对所述网络预测模型进行参数更新；其中，所述网络预测模型，用于基于输入的CU的特征向量，输出预测值；所述特征向量用于表示所述CU的图像特征以及所述CU的邻域图像特征；所述预测值用于指示所述CU跳过三叉树划分的概率。根据本申请的另一方面，提供了一种计算机设备，所述计算机设备包括处理器和存储器，所述存储器中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由所述处理器加载并执行以实现如上方面所述的用于编码单元的三叉树划分处理方法。根据本申请的另一方面，提供了一种计算机可读存储介质，所述可读存储介质中存储有至少一条指令、至少一段程序、代码集或指令集，所述至少一条指令、所述至少一段程序、所述代码集或指令集由处理器加载并执行以实现如上方面所述的用于编码单元的三叉树划分处理方法。根据本申请的另一方面，提供了一种计算机程序产品，所述计算机程序产品包括计算机指令，所述计算机指令存储在计算机可读存储介质中，处理器从所述计算机可读存储介质读取并执行所述计算机指令，以实现上述如上方面所述的用于编码单元的三叉树划分处理方法。本申请实施例提供的技术方案可以包括如下有益效果：获取四种预测结果，包括获取CU的特征向量；根据获取CU的特征向量，获取预测值；当获取的预测值大于设置的预测阈值，结合对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对CU的三叉树划分或者三叉树水平划分或者三叉树垂直划分；本方案可以提前跳过不必要的TT划分方式，节约划分流程，在不影响视频质量的前提下实现CU划分的加速处理，降低视频编解码的计算量，进而提高视频编码效率。附图说明为了更清楚地说明本申请实施例中的技术方案，下面将对实施例描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本申请的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。图1是本申请示例性示出的一种视频编码过程的基本流程图；图2是本申请涉及的一种CU划分示意图；图3是本申请一个实施例提供的帧间预测模式的示意图；图4是本申请一个实施例提供的候选运动矢量的示意图；图5是本申请一个实施例提供的帧内块复制模式的示意图；图6是本申请一个实施例提供的帧内串复制模式的示意图；图7是本申请一个实施例提供的通信系统的简化框图；图8是本申请示例性示出的视频编码器和视频解码器在流式传输环境中的放置方式的示意图；图9是本申请一个示例性实施例提供的用于编码单元的三叉树划分处理方法流程图；图10是本申请另外一个示例性实施例提供的用于编码单元的三叉树划分处理方法流程图；图11是本申请涉及的当前CU与相邻块位置关系示意图；图12是本申请另一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图；图13是本申请再一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图；图14是本申请又一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图；图15是本申请一个示例性实施例提供的网络预测模型的训练方法的流程图；图16是本申请涉及的全连接网络结构示意图；图17是本申请涉及的网络预测模型的一个示例性训练和应用流程图；图18是本申请涉及的各种CU划分类型示意图；图19是本申请一个示例性实施例提供的一种CU划分顺序示例图；图20是本申请一个示例性实施例提供的用于编码单元的三叉树划分处理方法的实施流程图；图21是本申请一个示例性实施例提供的网络训练流程图；图22是本申请涉及的不同帧类型对应的参考关系示意图；图23是本申请涉及的GOP16的参考关系示意图；图24是本申请一个示例性实施例提供的应用流程图；图25是本申请一个示例性实施例示出的用于编码单元的三叉树划分处理装置的方框图；图26是本申请另外一个示例性实施例示出的用于编码单元的三叉树划分处理装置的方框图；图27是本申请一个示例性实施例提供的计算机设备的结构框图。此处的附图被并入说明书中并构成本说明书的一部分，示出了符合本申请的实施例，并与说明书一起用于解释本申请的原理。具体实施方式为使本申请的目的、技术方案和优点更加清楚，下面将结合附图对本申请实施方式作进一步地详细描述。这里将详细地对示例性实施例进行说明，其示例表示在附图中。下面的描述涉及附图时，除非另有表示，不同附图中的相同数字表示相同或相似的要素。以下示例性实施例中所描述的实施方式并不代表与本申请相一致的所有实施方式。相反，它们仅是与如所附权利要求书中所详述的、本申请的一些方面相一致的装置和方法的例子。在本公开使用的术语是仅仅出于描述特定实施例的目的，而非旨在限制本公开。在本公开和所附权利要求书中所使用的单数形式的“一种”、“所述”和“该”也旨在包括多数形式，除非上下文清楚地表示其他含义。还应当理解，本文中使用的术语“和/或”是指并包含一个或多个相关联的列出项目的任何或所有可能组合。在本申请实施例中，本申请所涉及的用户信息和数据，均为经用户授权或者经过各方充分授权的信息和数据，且相关数据的收集、使用和处理需要遵守相关国家和地区的相关法律法规和标准。例如，本申请中涉及到的攻击操作等对象行为都是在充分授权的情况下获取的。应当理解，尽管在本公开可能采用术语母、第二等来描述各种信息，但这些信息不应限于这些术语。这些术语仅用来将同一类型的信息彼此区分开。例如，在不脱离本公开范围的情况下，母参数也可以被称为第二参数，类似地，第二参数也可以被称为母参数。取决于语境，如在此所使用的词语“如果”可以被解释成为“在……时”或“当……时”或“响应于确定”。下面介绍本申请涉及的一些名词释义。第二代视频编码标准H.264：也称为高级视频编码标准。第三代视频编码标准H.265：也称为高效视频编码标准。第四代视频编码国际标准H.266：也称为通用视频编码标准。虽然H.266/VVC中的编码算法没有根本性的改进措施，VVC的技术手段和前面几代视频编码标准基本类似，仍然是在基于块的混合编码框架内，但是H.266/VVC几乎对编码的每个环节都进行了改进，挤压尚未除尽的信息冗余，达到总体编码效率提高一倍的要求。H.266/VVC标准面向多种应用，如高清、超高清视频，它们具有3840×2160或7620×4320图像分辨率，10比特精度，高动态范围和宽彩色gamut；再如沉浸式媒体，使用普通投影格式所投影的360°全景视频等。此外，H.266/VVC同样支持先前标准中所设置的应用。高级运动矢量预测模式：是H.265/HEVC中提出的新的运动矢量预测技术。H.266/VVC仍采用了该技术，并在H.265/HEVC的基础上进行了改进。AMVP利用空域和时域的运动矢量的相关性，为当前PU建立了候选预测MV列表，编码端从其中选出最优的运动矢量预测，并对MVP进行差分编码；解码端通过建立相同的列表，仅需要预测MVP在列表中的索引和运动矢量差分即可计算出当前PU的MV。在对本申请实施例进行介绍说明之前，首先结合图1对视频编码技术进行简单介绍。图1示例性示出了一种视频编码过程的基本流程图。视频信号是指包括多个帧的图像序列。帧是视频信号空间信息的表示。以YUV模式为例，一个帧包括一个亮度样本矩阵和两个色度样本矩阵。从视频信号的获取方式来看，可以分为摄像机拍摄到的以及计算机生成的两种方式。由于统计特性的不同，其对应的压缩编码方式也可能有所区别。在一些主流的视频编码技术中，如H.265/HEVC、H.266/VVC标准、AVS中，采用了混合编码框架，对输入的原始视频信号进行如下一系列的操作和处理。1、块划分结构：输入图像划分成若干个不重叠的处理单元，每个处理单元将进行类似的压缩操作。这个处理单元被称作CTU，或者LCU。CTU再往下，可以继续进行更加精细的划分，得到一个或多个基本编码的单元，称之为CU。每个CU是一个编码环节中最基本的元素。CTU可以按照四叉树方式向下划分成不同CU。比如，如图2所示，其示出了本申请涉及的一种CU划分示意图。如图2所示，VVC中CTU首先按照四叉树划分成不同CU，然后四叉树叶子节点的CU可以按照多类型树进行划分，包括四种划分类型：垂直二叉树划分、水平二叉树划分、垂直三叉树划分、水平三叉树划分，其中三叉树按照1:2:1划分。多类型树的叶子节点也称为CU。每个CU块均包含了帧内预测和帧间预测。先相同预测类型内，不同预测模式间进行比较，找到最优的分割模式，再帧内帧间模式比较，找到当前CU下的最优预测模式；同时对CU做变换单元变换，从中找到最优的变换类型。最后将一帧图像分成一个个CU。其中，帧内预测有DC模式、Planar模式，及65种角度预测模式，还有帧内子区域划分、分量间线性模型预测、针对亮度分量的最可能模式、针对色度分量的亮度派生模式，多参考行帧内预测等。其中，帧间预测在H.265基础上，又引入联合帧内帧间预测技术、几何划分帧间预测技术；在双向AMVP模式的基础上，增加对称运动矢量差分编码技术，解码端运动矢量细化，双向光流，仿射变换等。2、预测编码：包括了帧内预测和帧间预测等方式，原始视频信号经过选定的已重建视频信号的预测后，得到残差视频信号。编码端需要为当前CU决定在众多可能的预测编码模式中，选择最适合的一种，并告知解码端。其中，帧内预测是指预测的信号来自于同一图像内已经编码重建过的区域。帧间预测是指预测的信号来自已经编码过的，不同于当前图像的其他图像。3、变换编码及量化：残差视频信号经过DFT、DCT等变换操作，将信号转换到变换域中，称之为变换系数。在变换域中的信号，进一步进行有损的量化操作，丢失掉一定的信息，使得量化后的信号有利于压缩表达。在一些视频编码标准中，可能有多于一种变换方式可以选择，因此，编码端也需要为当前CU选择其中的一种变换，并告知解码端。量化的精细程度通常由量化参数来决定。QP取值较大，表示更大取值范围的系数将被量化为同一个输出，因此通常会带来更大的失真，及较低的码率；相反，QP取值较小，表示较小取值范围的系数将被量化为同一个输出，因此通常会带来较小的失真，同时对应较高的码率。4、熵编码或统计编码：量化后的变换域信号，将根据各个值出现的频率，进行统计压缩编码，最后输出二值化的压缩码流。同时，编码产生其他信息，例如选择的模式、运动矢量等，也需要进行熵编码以降低码率。统计编码是一种无损编码方式，可以有效的降低表达同样的信号所需要的码率。常见的统计编码方式有变长编码或者基于上下文的二值化算术编码。5、环路滤波：已经编码过的图像，经过反量化、反变换及预测补偿的操作，可获得重建的解码图像。重建图像与原始图像相比，由于存在量化的影响，部分信息与原始图像有所不同，产生失真。对重建图像进行滤波操作，例如去块效应滤波，SAO或者ALF等滤波器，可以有效的降低量化所产生的失真程度。由于这些经过滤波后的重建图像，将作为后续编码图像的参考，用于对将来的信号进行预测，所以上述的滤波操作也被称为环路滤波，及在编码环路内的滤波操作。也就是说，在编码时，一帧图像送入到编码器，先分割成一个个CTU，经过深度划分得到CU，每个CU包含多种预测模式和TU。对每个CU进行预测，得到预测值，预测值与输入数据相减，得到残差，然后进行变换和量化，得到残差系数，然后送入熵编码模块输出码流，同时，残差系数经反量化、反变换之后，得到重构图像的残差值，再和预测值相加，从而得到了重构图像，重构图像经滤波之后，进入参考帧队列，作为下一帧的参考图像，从而依次向后编码。根据上述编码过程可以看出，在解码端，对于每一个CU，解码器获得压缩码流后，先进行熵解码，获得各种模式信息及量化后的变换系数。各个系数经过反量化及反变换，得到残差信号。另一方面，根据已知的编码模式信息，可获得该CU对应的预测信号，两者相加之后，即可得到重建信号。最后，解码图像的重建值，需要经过环路滤波的操作，产生最终的输出信号。一些主流的视频编码标准中，如HEVC、VVC、AVS3等标准中，均采用基于块的混合编码框架。它们将原始的视频数据分成一系列的编码块，结合预测、变换和熵编码等视频编码方法，实现视频数据的压缩。其中，运动补偿是视频编码常用的一类预测方法，运动补偿基于视频内容在时域或空域的冗余特性，从已编码的区域导出当前编码块的预测值。这类预测方法包括：帧间预测、帧内块复制预测、帧内串复制预测等，在具体的编码实现中，可能单独或组合使用这些预测方法。对于使用了这些预测方法的编码块，通常需要在码流显式或隐式地编码一个或多个二维的位移矢量，指示当前块相对它的一个或多个参考块的位移。需要注意的是，在不同的预测模式下及不同的实现，位移矢量可能有不同的名称，本申请统一按照以下方式进行描述：1）帧间预测模式中的位移矢量称为运动矢量；2）IBC预测模式中的位移矢量称为块矢量；3）ISC预测模式中的位移矢量称为串矢量。帧内串复制也称作“串预测”或“串匹配”等。MV是指用于帧间预测模式的位移矢量，由当前图像指向参考图像，其值为当前块和参考块之间的坐标偏移量，其中，当前块与参考块在两个不同图像中。在帧间预测模式中，可以引入运动矢量预测，通过对当前块的运动矢量进行预测，得到当前块对应的预测运动矢量，对当前块对应的预测运动矢量与实际运动矢量之间的差值进行编码传输，相较于直接对当前块对应的实际运动矢量进行编码传输，有利于节省比特开销。在本申请实施例中，预测运动矢量是指通过运动矢量预测技术，得到的当前块的运动矢量的预测值。BV是指用于IBC预测模式的位移矢量，其值为当前块和参考块之间的坐标偏移量，其中，当前块与参考块均在当前图像中。在IBC预测模式中，可以引入块矢量预测，通过对当前块的块矢量进行预测，得到当前块对应的预测块矢量，对当前块对应的预测块矢量与实际块矢量之间的差值进行编码传输，相较于直接对当前块对应的实际块矢量进行编码传输，有利于节省比特开销。在本申请实施例中，预测块矢量是指通过块矢量预测技术，得到的当前块的块矢量的预测值。SV是指用于ISC预测模式的位移矢量，其值为当前串和参考串之间的坐标偏移量，其中，当前串与参考串均在当前图像中。在ISC预测模式中，可以引入串矢量预测，通过对当前串的串矢量进行预测，得到当前串对应的预测串矢量，对当前串对应的预测串矢量与实际串矢量之间的差值进行编码传输，相较于直接对当前串对应的实际串矢量进行编码传输，有利于节省比特开销。在本申请实施例中，预测串矢量是指通过串矢量预测技术，得到的当前串的串矢量的预测值。下面对几种不同的预测模式进行介绍。一、帧间预测模式如图3所示，帧间预测利用视频时间域的相关性，使用邻近已编码图像的像素预测当前图像的像素，以达到有效去除视频时域冗余的目的，能够有效节省编码残差数据的比特。其中，P为当前帧，Pr为参考帧，B为当前待编码块，Br是B的参考块。B’与B在图像中的坐标位置相同，Br坐标为，B’坐标为。当前待编码块与其参考块之间的位移，称为运动矢量，是在进行帧间预测时标记当前块和参考块位置关系的一个向量，即：考虑到时域或空域邻近块具有较强的相关性，可以采用MV预测技术进一步减少编码MV所需要的比特。在H.265/HEVC中，帧间预测包含Merge和AMVP两种MV预测技术。Merge模式会为当前PU建立一个MV候选列表，其中存在5个候选MV。遍历这5个候选MV，选取率失真代价最小的作为最优MV。若编解码器依照相同的方式建立候选列表，则编码器只需要传输最优MV在候选列表中的索引即可。需要注意的是，HEVC的MV预测技术还有一种skip模式，是Merge模式的一种特例。在Merge模式找到最优MV后，如果当前块和参考块基本一样，那么不需要传输残差数据，只需要传送MV的索引和一个skip flag。其中，率失真代价用于多种选项中的择优，通过下列公式计算得到：其中，dist表示失真，记录着原始输入像素和预测像素的差，bit表示编码当前模式需要消耗的比特数，λ是拉格朗日常数。dist可以通过绝对变化差之和，误差平方和等得到。SATD是指hadamard变换后再绝对值求和，是计算失真的一种方式，是将残差信号进行hadamard变换后，再求各元素绝对值之和。SSE表示原始像素与重构像素误差的平方和，需要对残差信号做变换、量化、逆量化、逆变换的过程，估算出的码子和真实编码相同。Merge模式建立的MV候选列表中包含了空域和时域的两种情形，对于B Slice，还包含组合列表的方式。其中，空域最多提供4个候选MV，它的建立如图4中的部分所示。空域列表按照A1→B1→B0→A0→B2的顺序建立，其中B2为替补，即当A1，B1，B0，A0中有一个或多个不存在时，则需要使用B2的运动信息；时域最多只提供1个候选MV，它的建立如图4中的部分所示，由同位PU的MV按下式伸缩得到：其中，curMV表示当前PU的MV，colMV表示同位PU的MV，td表示当前图像与参考图像之间的距离，tb表示同位图像与参考图像之间的距离。若同位块上D0位置PU不可用，则用D1位置的同位PU进行替换。对于B Slice中的PU，由于存在两个MV，其MV候选列表也需要提供两个MVP，MVP可以表示根据相邻块推导出来的MV的初始位置。HEVC通过将MV候选列表中的前4个候选MV进行两两组合，产生了用于BSlice的组合列表。类似的，AMVP模式利用空域和时域邻近块的MV相关性，为当前PU建立MV候选列表。与Merge模式不同，AMVP模式的MV候选列表中选择最优的预测MV，与当前待编码块通过运动搜索得到的最优MV进行差分编码，即编码MVD=MV-MVP，其中，MVD为运动矢量残差；解码端通过建立相同的列表，仅需要MVD与MVP在该列表中的序号即可计算当前解码块的MV。AMVP模式的MV候选列表也包含空域和时域两种情形，不同的是AMVP模式的MV候选列表长度仅为2。如上所述，在HEVC的AMVP模式中，需要对MVD进行编码。在HEVC中，MVD的分辨率由slice_header中的use_integer_mv_flag控制，当该标志的值为0，MVD以1/4像素分辨率进行编码；当该标志的值为1，MVD采用整像素分辨率进行编码。VVC中使用了一种自适应运动矢量精度的方法。该方法允许每个CU自适应的选择编码MV的分辨率。在普通的AMVP模式中，可选的分辨率包括1/4，1/2，1和4像素分辨。对于具有至少一个非零MVD分量的CU，首先编码一个标志指示是否将四分之一亮度采样MVD精度用于CU。如果该标志为0，则当前CU的MVD采用1/4像素分辨率进行编码。否则，需要编码第二个标志，以指示CU使用了1/2像素分辨率或其他MVD分辨率。否则，编码第三个标志以指示对于CU是否使用1像素分辨率或4像素分辨率。二、IBC预测模式IBC是HEVC屏幕内容编码扩展中采纳的一种帧内编码工具，它显著的提升了屏幕内容的编码效率。在AVS3和VVC中，也采纳了IBC技术以提升屏幕内容编码的性能。IBC利用屏幕内容视频在空间的相关性，使用当前图像上已编码图像像素预测当前待编码块的像素，能够有效节省编码像素所需的比特。如图5所示，在IBC中当前块与其参考块之间的位移，称为BV。H.266/VVC采用了类似于帧间预测的BV预测技术进一步节省编码BV所需的比特。VVC采用了类似于帧间预测中的AMVP模式对BV进行预测，并允许使用1或4像素分辨率编码BVD。三、ISC预测模式ISC技术按照某种扫描顺序将一个编码块分成一系列像素串或未匹配像素。类似于IBC，每个串在当前图像已编码区域中寻找相同形状的参考串，导出当前串的预测值，通过编码当前串像素值与预测值之间残差，代替直接编码像素值，能够有效节省比特。图6给出了帧内串复制的示意图，图6示出了已编码区域、串1、串2以及未匹配像素。串1与其参考串之间的位移，即为图6中的串矢量1；串2与其参考串之间的位移，即为图6中的串矢量2。帧内串复制技术需要编码当前编码块中各个串对应的SV、串长度以及是否有匹配串的标志等。其中，SV表示待编码串到其参考串的位移。串长度表示该串所包含的像素数量。在不同的实现方式中，串长度的编码有多种方式，以下给出几种示例：1）直接在码流中编码串的长度；2）在码流中编码处理该串后续的待处理像素数量，解码端则根据当前块的大小N，已处理的像素数量N1，解码得到的待处理像素数量N2，计算得到当前串的长度，L=N-N1-N2；3）在码流中编码一个标志指示该串是否为最后一个串，如果是最后一个串，则根据当前块的大小N，已处理的像素数量N1，计算得到当前串的长度L=N-N1。如果一个像素在可参考的区域中没有找到对应的参考，将直接对未匹配像素的像素值进行编码。如图7所示，其示出了本申请一个实施例提供的通信系统的简化框图。通信系统200包括多个设备，所述设备可通过例如网络250彼此通信。举例来说，通信系统200包括通过网络250互连的第一设备210和第二设备220。在图7的实施例中，第一设备210和第二设备220执行单向数据传输。举例来说，第一设备210可对视频数据例如由第一设备210采集的视频图片流进行编码以通过网络250传输到第二设备220。已编码的视频数据以一个或多个已编码视频码流形式传输。第二设备220可从网络250接收已编码视频数据，对已编码视频数据进行解码以恢复视频数据，并根据恢复的视频数据显示视频图片。单向数据传输在媒体服务等应用中是较常见的。在另一实施例中，通信系统200包括执行已编码视频数据的双向传输的第三设备230和第四设备240，所述双向传输可例如在视频会议期间发生。对于双向数据传输，第三设备230和第四设备240中的每个设备可对视频数据进行编码，以通过网络250传输到第三设备230和第四设备240中的另一设备。第三设备230和第四设备240中的每个设备还可接收由第三设备230和第四设备240中的另一设备传输的已编码视频数据，且可对所述已编码视频数据进行解码以恢复视频数据，且可根据恢复的视频数据在可访问的显示装置上显示视频图片。在图7的实施例中，第一设备210、第二设备220、第三设备230和第四设备240可为服务器、个人计算机和智能电话等计算机设备，但本申请公开的原理可不限于此。本申请实施例适用于PC、手机、平板电脑、媒体播放器和/或专用视频会议设备。网络250表示在第一设备210、第二设备220、第三设备230和第四设备240之间传送已编码视频数据的任何数目的网络，包括例如有线连线的和/或无线通信网络。通信网络250可在电路交换和/或分组交换信道中交换数据。该网络可包括电信网络、局域网、广域网和/或互联网。出于本申请的目的，除非在下文中有所解释，否则网络250的架构和拓扑对于本申请公开的操作来说可能是无关紧要的。作为实施例，图8示出视频编码器和视频解码器在流式传输环境中的放置方式。本申请所公开主题可同等地适用于其它支持视频的应用，包括例如视频会议、数字TV、在数字介质上存储压缩视频等等，上述数字介质包括CD、DVD、存储棒等。流式传输系统可包括采集子系统313，所述采集子系统可包括数码相机等视频源301，所述视频源创建未压缩的视频图片流302。在实施例中，视频图片流302包括由数码相机拍摄的样本。相较于已编码的视频数据304，视频图片流302被描绘为粗线以强调高数据量的视频图片流，视频图片流302可由电子装置320处理，所述电子装置320包括耦接到视频源301的视频编码器303。视频编码器303可包括硬件、软件或软硬件组合以实现或实施如下文更详细地描述的所公开主题的各方面。相较于视频图片流302，已编码的视频数据304被描绘为细线以强调较低数据量的已编码的视频数据304，其可存储在流式传输服务器305上以供将来使用。一个或多个流式传输客户端子系统，例如图8中的客户端子系统306和客户端子系统308，可访问流式传输服务器305以检索已编码的视频数据304的副本307和副本309。客户端子系统306可包括例如电子装置330中的视频解码器310。视频解码器310对已编码的视频数据的传入副本307进行解码，且产生可在显示器312或另一呈现装置上呈现的输出视频图片流311。在一些流式传输系统中，可根据某些视频编码/压缩标准对已编码的视频数据304、视频数据307和视频数据309进行编码。应注意，电子装置320和电子装置330可包括其它组件。举例来说，电子装置320可包括视频解码器，且电子装置330还可包括视频编码器。其中，视频解码器用于对接收到的已编码视频数据进行解码；视频编码器用于对视频数据进行编码。H.266/VVC是一种视频编码标准，旨在提供更高的压缩效率和更好的视频质量。在H.266/VVC中，块划分是一种关键的技术，用于将视频帧分割成更小的块以进行编码。块划分是指将视频帧划分为多个块，每个块都可以独立地进行编码和解码。这种划分可以根据图像内容的特征进行自适应，以提高编码效率。H.266/VVC引入了更多的块大小和形状选项，以适应不同类型的图像内容。H.266/VVC中的块划分可以根据图像的空间和时间特性进行灵活的调整。例如，对于静态或相对平滑的区域，较大的块可以用于更高的压缩效率。而对于动态或细节丰富的区域，较小的块可以提供更好的图像质量。相比传统的H.265/HEVC及H.264/AVC技术，H.266/VVC优势更明显。具有更高的压缩性能，相同质量下可再节省40%以上带宽；然而编码协议太复杂，需要更高的计算资源来进行编码和解码。这可能对一些低功耗设备或资源受限的环境造成挑战。CU划分需要在遍历所有可能的划分模式后，基于最小rdcost选中一种最优划分模式，其余划分模式均会被淘汰，导致编码运算量大幅度增加。但是，若不进行尝试直接关闭部分可能的划分模式，会导致压缩性能很差，因此需要设计出一种方法，提前淘汰部分不必要的划分非常重要。请参考图9，其示出了本申请一个示例性实施例提供的用于编码单元的三叉树划分处理方法流程图。该方法由计算机设备执行，如图9所示，该方法可以包括步骤910、步骤920以及步骤930。步骤910：获取编码单元CU的特征向量；特征向量用于表示CU的图像特征以及CU的邻域图像特征。在本申请实施例中，计算机设备获取能够表示CU的图像特征、以及邻域图像特征的多个特征向量。其中，CU划分方式与CU的图像特征具有相关性。具体比如，在纹理比较均匀的区域，通常采用大尺寸的CU进行划分，而在纹理比较丰富区域，通常采用较小尺寸的CU进行划分。再比如，水平和垂直方向的划分与纹理方向具有相关性，在纹理偏水平的区域，通常采用水平划分，而在纹理偏垂直的方向，通常采用垂直划分。其中，CU划分方式与CU的邻域图像特征也具有相关性。具体比如，当相邻块被划分为大尺寸时，当前CU通常也采用大尺寸作为最佳尺寸；当相邻块采用水平划分或垂直划分时，当前CU也通常采用相同的划分方式。因此，本申请可以综合利用上述相关性来提前跳过一些不必要的CU划分方式。步骤920：基于特征向量，获取预测值；预测值用于指示CU跳过三叉树划分的概率。在本申请实施例中，计算机设备根据步骤910获取的特征向量，获取用于指示CU可以跳过三叉树划分的概率的预测值。其中，预测值越大，可以代表CU跳过三叉树划分的概率越大；反之，预测值越小，可以代表CU跳过三叉树划分的概率越小。步骤930：响应于预测值大于预测阈值，基于对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。其中，预测阈值可以是开发人员根据测试结果在计算机设备中进行预先设置的，用于判断预测值大小的参考值。在本申请实施例中，若步骤920获取的预测值大于预先设置的预测阈值，计算机设备可以根据CU的当前最优划分方式进行判断。示例性的，在对CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果中，获取CU的当前最优划分方式。如果当前最优划分方式为NONE，则选中三叉树划分的可能性比较小，即三叉树水平划分和三叉树垂直划分高概率会被淘汰；如果当前最优划分方式为二叉树水平划分，则三叉树水平划分可能被选中，三叉树垂直划分高概率会被淘汰；如果当前最优划分方式为二叉树垂直划分，则三叉树垂直划分可能被会选中，三叉树水平划分高概率会被淘汰。在一些实施例中，三叉树划分流程之后可能存在其他划分流程，例如二叉树划分流程、四叉树划分流程等。示例性的，若步骤930跳过了对CU的三叉树水平划分以及三叉树垂直划分，且三叉树划分流程之后存在其他划分流程，那么计算机设备继续对CU进行其他划分方式的处理。其中，若步骤930跳过了对CU的三叉树水平划分以及三叉树垂直划分，且三叉树划分流程之后不存在其他划分流程，那么计算机设备不需要对CU进行其他划分方式的处理。示例性的，若步骤930仅跳过了对CU的三叉树水平划分、三叉树垂直划分中的其中一个划分流程，且三叉树划分流程之后存在其他划分流程，那么计算机设备对CU先进行三叉树水平划分、三叉树垂直划分中未跳过的划分方式的处理，再进行其他划分方式的处理。其中，步骤930仅跳过了对CU的三叉树水平划分、三叉树垂直划分中的其中一个划分流程，且三叉树划分流程之后不存在其他划分流程，那么计算机设备对CU进行三叉树水平划分、三叉树垂直划分中未跳过的划分方式的处理。具体比如，三叉树划分流程之后不存在其他划分方式，在步骤930仅跳过了对CU的三叉树水平划分之后，计算机设备对CU进行三叉树垂直划分流程的处理。因此，结合上述预测结果以及预测值，计算机设备可以提前跳过当前CU的不必要的划分流程，从而达到加速目的。综上所述，本申请实施例所示的方案，获取CU的特征向量；根据获取CU的特征向量，获取预测值；当获取的预测值大于设置的预测阈值，结合对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对CU的三叉树划分或者三叉树水平划分或者三叉树垂直划分；本方案可以提前跳过不必要的TT划分方式，节约划分流程，在不影响视频质量的前提下实现CU划分的加速处理，降低视频编解码的计算量，进而提高视频编码效率。请参考图10，其示出了本申请另外一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图。该方法由计算机设备执行，如图10所示，上述图9所示实施例中的步骤910可以实现为步骤910a。步骤910a：响应于对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果满足指定条件，获取编码单元CU的特征向量。在一些实施例中，计算机设备对CU分别进行四叉树划分、二叉树水平划分以及二叉树垂直划分的遍历划分流程，并分别获取四种预测结果，包括不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果。在本申请实施例中，若上述预测结果满足开发人员在计算机设备中预设的指定条件，计算机设备获取能够表示CU的图像特征、以及邻域图像特征的多个特征向量。在一些实施例中，上述设定条件包括：对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果中，最优预测结果为不划分的预测结果、二叉树水平划分的预测结果或者二叉树垂直划分的预测结果。在本申请实施例中，设定条件可以是在上述四种预测结果中，最优预测结果为不划分的预测结果、二叉树水平划分的预测结果或者二叉树垂直划分的预测结果。其中，预测结果可以用rdcost表示。也就是说，设定条件可以是当前CU进行四叉树划分、二叉树水平划分以及二叉树垂直划分后，rdcost最小对应的划分方式为不划分、二叉树水平划分或者二叉树垂直划分。本申请实施例提出了用于判断是否获取当前CU的特征向量的设定条件，具体为在上述预测结果最优的是不划分、二叉树水平划分或者二叉树垂直划分对应的预测结果；可以将不划分、二叉树水平划分或者二叉树垂直划分的预测结果，用于判断当前CU可以跳过三叉树水平划分或者三叉树垂直划分的条件之一；能够提高用于获取预测值的特征向量的准确度。本申请实施例提出了获取特征向量的前提条件，能够筛选出满足指定条件的CU对应的特征向量；根据特征向量获取预测值，结合预测值和四种预测结果，跳过对CU的三叉树划分或者三叉树水平划分或者三叉树垂直划分；本方案可以在不影响视频质量的前提下实现CU划分的加速处理，降低视频编解码的计算量，节约划分流程。在一些实施例中，上述特征向量包括：CU的相邻块的信息，以及，CU的信息；相邻块的信息包括以下至少一种：相邻块的CU深度、相邻块的QT深度、相邻块的BT深度、相邻块的MT深度、相邻块的形状信息以及相邻块的最优划分类型；相邻块是与CU相邻，且已经编码完成的编码块；CU的信息包括以下至少一种：CU的深度、CU的帧等级、CU的量化系数、CU的同位块的深度、CU的梯度信息、CU的方差信息、CU的亮度像素以及CU的形状信息。其中，特征向量由多个特征值组成。CU的信息可以分为两个部分，包括CU的已知信息以及CU的预分析信息。具体比如，上述特征值包含以下3个方面：相邻块的最优信息：包含CU深度、BT深度、QT深度、TT深度、MT深度。由于相邻块已经编码完成，可以预先将最优信息存起来，不需要再计算或者判断。请参考图11，其示出了本申请涉及的当前CU与相邻块位置关系示意图。如图11所示，相邻块包括A0、A1、B0、B1以及B2，其中，A0表示当前块的左下角位置，A1表示当前CU的左边位置，B0表示当前CU的右上角位置，B1表示当前CU的上边位置，B2表示当前CU的左上角位置。其中，开发人员可以在计算机设备中进行设置，使得计算机设备可以根据具体情况对相邻块的选取位置做出适应性调整，以应对不满足图11所示位置关系的情况。若当前CU处于特殊位置，比如处于一帧图像的最右下角处，可以跳过B0以及A0的相邻块，或者使用其他相邻块替代，如A1与B2之间的相邻块、B1与B2之间的相邻块等。CU的已知信息：包含当前CU所处的深度、BT深度、QT深度、TT深度、MT深度、当前CU的量化系数QP、当前CU的帧类型权重等，也不需要再计算。CU的预分析信息：比如当前CU的梯度信息，分4个子块统计每个子块的梯度信息，做完NONE后分为4个子块统计每个子块的失真等，或者对计算结果的二次加工等。本申请实施例提出了特征向量的涉及的具体内容，包括CU的相邻块的信息以及CU的信息，CU的相邻块的信息用于表示CU的邻域图像特征，CU的信息用于表示CU的图像特征。CU的相邻块的信息以及CU的信息与CU划分方式具有相关性，可以综合利用这些相关性来提前跳过一些不必要的CU划分方式，实现CU划分的加速处理。请参考图12，其示出了本申请另一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图。该方法由计算机设备执行，如图12所示，上述图10所示实施例中的步骤930a可以实现为步骤930a1、步骤930a2以及步骤930a3。步骤930a1：响应于预测值大于预测阈值，且最优预测结果为不划分的预测结果，跳过对CU的三叉树水平划分和三叉树垂直划分。其中，预测值就是置信度，置信度越高，说明当前CU可以跳过三叉树划分的概率越高；反之，如果预测值比较小，说明置信度比较低，这时跳过三叉树划分可能不太准确。因此，可以将预测阈值作为参考。在本申请实施例中，当步骤920获取的预测值大于预先设置的预测阈值，且步骤910a获取到当前CU的最优预测结果为不划分时，代表当前CU进行三叉树划分的概率较低，计算机设备跳过对当前CU的三叉树划分流程，包括三叉树水平划分以及三叉树垂直划分。步骤930a2：响应于预测值大于预测阈值，且最优预测结果为二叉树水平划分的预测结果，跳过对CU的三叉树垂直划分。在本申请实施例中，当步骤920获取的预测值大于预先设置的预测阈值，步骤910a获取到当前CU的最优预测结果为二叉树水平划分时，代表当前CU进行水平划分的概率较大；相应地，当前CU进行垂直划分的概率较小；因此，计算机设备跳过对当前CU的三叉树垂直划分。步骤930a3：响应于预测值大于预测阈值，且最优预测结果为二叉树垂直划分的预测结果，跳过对CU的三叉树水平划分。在本申请实施例中，当步骤920获取的预测值大于预先设置的预测阈值，同时，步骤910a获取到当前CU最优预测结果为二叉树垂直划分时，说明当前CU进行垂直划分的概率较大；相应地，当前CU进行水平划分的概率较小；因此，计算机设备跳过对当前CU的三叉树水平划分。其中，预测值与跳过三叉树划分流程相关。如果预测值越大，则说明对当前CU进行三叉树划分的概率越小，此时可以结合最优预测结果跳过相应的三叉树划分；反之，如果预测值越小，则说明对当前CU进行三叉树划分的概率越大，此时不宜跳过三叉树相关的划分流程。在本申请实施例中，基于当前CU的特征向量获取当前CU的预测值之后：计算机设备对当前CU的预测值与预先设置的预测阈值作对比，只有在预测值大于预测阈值时，计算机设备才可以结合最优预测结果跳过相应的三叉树划分流程；若预测值小于预测阈值，或者预测值等于预测阈值，计算机设备无法可以结合最优预测结果跳过相应的三叉树划分流程。本申请实施例提出了基于预测值以及其他划分方式的预测结果，跳过对CU的三叉树水平划分流程或者三叉树垂直划分流程的技术方案，具体为通过预先设置的阈值，对获取的预测值进行对比处理，判断是否符合理想范围，并结合其他划分方式的预测结果，判断是否需要跳过对CU的三叉树水平划分流程或者三叉树垂直划分流程，从而实现CU划分的加速处理。基于本申请上述实施例所示的方法。请参考图13，其示出了本申请再一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图。该方法由计算机设备执行，如图13所示，上述图9、图10或图12所示实施例中的步骤920可以实现为步骤920a。步骤920a：将特征向量输入网络预测模型，获得网络预测模型输出的预测值；其中，网络预测模型是通过CU样本的特征向量样本以及CU样本的最优三叉树划分方式进行训练得到的机器学习模型。在本申请实施例中，计算机设备可以将步骤910获取的特征向量，输入预先通过机器学习训练的网络预测模型，网络预测模型对特征向量进行处理，输出预测值。其中，可以根据CU样本的特征向量样本以及CU样本的最优三叉树划分方式，对机器学习模型进行有监督训练，得到能够通过输入的CU特征向量预测CU三叉树划分概率的网络预测模型。本申请实施例提出了基于特征向量获取预测值的一种技术方案，具体为通过训练机器学习模型得到一个网络预测模型，将特征向量作为网络预测模型的输入，网络预测模型的输出就是预测值。通过迭代训练得到的网络预测模型，可以在复杂的划分流程中，快速跳过不必要的三叉树划分，节约划分流程。基于本申请上述实施例所示的方法。请参考图14，其示出了本申请又一个示例性实施例提供的用于编码单元的三叉树划分处理方法的流程图。该方法由计算机设备执行，如图14所示，上述图9、图10或图12所示实施例中的步骤920之前，还包括步骤912、步骤914以及步骤916。步骤912：获取CU的块大小；块大小用于将CU划分为多个类别，并按照类别分别训练网络预测模型。步骤914：基于块大小，获取CU的类别。步骤916：基于类别，获取网络预测模型。在本申请实施例中，在上述步骤920之前，计算机设备可以获取CU的块大小。在H.266/VVC中，为了适应4K、8K等视频编码的需求，将CTU的最大尺寸提高到128x128，最小尺寸还是4x4。相应地，CU的块大小、以及CU样本的块大小也存在多种可能。因此，计算机设备可以根据CU的块大小，将CU以及CU样本划分为多个类别，便于网络预测模型的分类训练、分类应用。在训练时，计算机设备分别按照CU样本的块大小，训练对应类别的网络预测模型。也就说是，在训练时，计算机设备将同一类别对应的特征向量样本以及最优三叉树划分方式，用于同一网络预测模型的训练；各个类别独立训练，最终生成各个类别对应的网络预测模型。在应用时，计算机设备根据CU的块大小，获取CU对应类别的网络预测模型。本申请实施例提出了根据CU的块大小对CU进行分类，并根据类别分类进行网络预测模型的训练和应用的一种技术方案；本方案可以在一定程度上降低机器学习的复杂性，提高网络预测模型的预测精准度，以准确地跳过不必要的三叉树划分。基于本申请上述实施例所示的方法。请参考图15，其示出了本申请一个示例性实施例提供的网络预测模型的训练方法的流程图。该方法可以由计算机设备执行，该计算机设备可以实现为模型训练设备；其中，该模型训练设备与上述执行步骤910至930的计算机设备可以是同一个设备，也可以是不同的设备。比如，上述执行步骤910至930的计算机设备可以是用户终端，而上述模型训练设备可以是开发人员的终端或者服务器。如图15所示，上述网络预测模型的训练流程包括步骤1510、步骤1520以及步骤1530。步骤1510：将特征向量样本，输入网络预测模型，获得网络预测模型输出的，CU样本的三叉树划分方式预测结果；三叉树划分方式预测结果用于指示CU样本跳过三叉树划分的概率。在本申请实施例中，初始化时，开发人员可以将网络预测模型的参数设为随机的初始值。计算机设备将用于训练的特征向量样本，输入初始化的网络预测模型；网络预测模型对特征向量样本进行处理，输出用于指示CU样本不进行TT划分的概率的，三叉树划分方式预测结果。在一种可能的实现方式中，在执行步骤1510之前，还可以获取CU样本的特征向量样本，以及CU样本的最优三叉树划分方式。也就是说，计算机设备获取到的用于训练的样本数据，可以包括CU样本的特征向量样本，以及CU样本的最优三叉树划分方式，用于对网络预测模型进行有监督训练。其中，CU样本为已进行划分，且最优划分方式为三叉树划分的CU。在一种可能的实现方式中，在执行步骤1510之前，包括以下步骤：获取对CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果；响应于对CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果中，最优预测结果为三叉树划分的预测结果，获取CU样本的特征向量，以及CU样本的三叉树划分方式。在本申请实施例中，对CU样本的各种划分类型进行预测，包括不划分、四叉树、二叉树水平划分、二叉树垂直划分、三叉树水平划分以及三叉树垂直划分；筛选出其中最优划分类型为三叉树水平划分以及三叉树垂直划分，对应的CU样本；获取该CU样本的特征向量，用于网络预测模型的训练。本申请实施例提供了用于训练网络预测模型的样本数据的获取方案，能够获取到最优划分方式为三叉树划分的CU样本，将CU样本的特征向量样本，以及CU样本的最优三叉树划分方式，作为训练的样本数据，可以提高网络预测模型的精准度。步骤1520：基于CU样本的最优三叉树划分方式，以及三叉树划分方式预测结果，获取网络预测模型的损失函数值。在本申请实施例中，计算机设备将上述步骤1510获得的CU样本的三叉树划分方式预测结果，与CU样本的最优三叉树划分方式进行比较，计算用于更新网络预测模型的损失函数值。步骤1530：基于网络预测模型的损失函数值，对网络预测模型进行参数更新。在本申请实施例中，计算机设备根据上述步骤1520获取的损失函数值，对网络预测模型进行参数更新，以提高网络预测模型的预测准确度。在本申请实施例中，计算机设备重复步骤1510、步骤1520以及步骤1530，进行迭代更新和训练，直至达到网络预测模型的预设条件。其中，开发人员可以将预设条件设为某个训练迭代次数，或某种收敛条件。在一些实施例中，采用全连接网络来构建网络预测模型。全连接网络，也称为多层感知机，是一种常见的人工神经网络模型。MLP由多个全连接层组成，每个神经元与前一层的所有神经元相连接。请参考图16，其示出了本申请涉及的全连接网络结构示意图。如图16所示，一个简单的3层全连接网络结构，包含输入层、隐含层和输出层。全连接网络的原理：基于神经元之间的连接权重和激活函数，每个神经元接收来自前一层所有神经元的输入，并通过连接权重进行加权求和。然后，将加权求和的结果输入到激活函数中，产生神经元的输出。这个过程在每一层中重复进行，直到达到输出层。全连接网络的预测函数可以表示为：其中，y是预测结果，x是输入数据，weight是权重矩阵，bias是偏置向量，f是激活函数。具体来说，假设输入数据x是一个向量，维度为n，weight是一个维度为m×n的权重矩阵，bias是一个维度为m的偏置向量。预测函数的计算过程如下：将输入数据x与权重矩阵weight相乘：，得到一个维度为m的向量；将偏置向量b加到上述结果中：，得到一个维度为m的向量；将上述结果通过激活函数f进行非线性变换，得到最终的预测结果y。常用的激活函数包括Sigmoid函数、线性整流函数、双曲正切函数等，具体选择哪种激活函数取决于任务的要求和网络的设计。本申请实施例提出了网络预测模型的一种训练方案，包括将特征向量样本输入网络预测模型；获得CU样本的三叉树划分方式预测结果；根据CU样本的最优三叉树划分方式以及三叉树划分方式预测结果，获取损失函数值，以对网络预测模型进行参数更新；即基于一个网络预测模型获取用于指示跳过三叉树划分的概率的预测结果，以实现通过CU样本的特征向量样本以及CU样本的最优三叉树划分方式来获得网络预测模型，进而实现跳过不必要的三叉树水平划分或者三叉树垂直划分的目的。请参考图17，其示出了本申请涉及的网络预测模型的一个示例性训练和应用流程图。如图17所示，本申请上述实施例涉及的网络预测模型的一个示例性的训练流程如下：步骤A1：获取CU样本的特征向量样本1701，以及CU样本的最优三叉树划分方式1702；步骤A2：将特征向量样本1701，输入网络预测模型1710；步骤A3：网络预测模型1710对特征向量样本1701进行处理后，输出CU样本的三叉树划分方式预测结果1703；步骤A4：将CU样本的三叉树划分方式预测结果1703，与最优三叉树划分方式1702进行比较，计算损失函数1704；步骤A5：根据损失函数1704，更新网络预测模型1710；步骤A6：重复步骤A2至步骤A5，直至达到预设的训练条件，保存当前训练好的网络预测模型1710，用于后续应用。如图17所示，本申请上述实施例涉及的网络预测模型的一个示例性推理流程如下：步骤B1：获取四种预测结果，包括：对编码单元CU的不划分的rdcost、四叉树划分的rdcost、二叉树水平划分的rdcost以及二叉树垂直划分的rdcost；步骤B2：在上述四种预测结果中，若最优rdcost对应的划分方式为不划分、二叉树水平划分或者二叉树垂直划分，获取CU的特征向量1705；步骤B3：将特征向量1705，输入网络预测模型1710；步骤B4：网络预测模型1710对特征向量1705进行处理后，输出预测值1706；步骤B5：若预测值1706大于阈值，且最优rdcost对应的划分方式为不划分，跳过对CU的三叉树水平划分以及三叉树垂直划分；步骤B6：若预测值1706大于阈值，且最优rdcost对应的划分方式为二叉树水平划分，跳过对CU的三叉树垂直划分；步骤B7：若预测值1706大于阈值，且最优rdcost对应的划分方式为二叉树垂直划分，跳过对CU的三叉树水平划分。综上，本方案在纹理特征、梯度信息、子块方差、二叉树划分结果等技术的基础上，结合已预测结果，引入机器学习可以很好地跳过三叉树水平或者三叉树垂直划分，实现CU划分的进一步加速。在视频编码过程中，一帧图像会先划分为一个个CTU，每个CTU再逐层根据划分规则，分成一个个CU。其中，这里的层就是深度，相对于CTU那层，每细化一次，深度加一次。在划分过程有以下划分类型：NONE划分、QT划分、BT划分以及TT划分，其中，BT和TT统称为MT，这样经过各种划分之后，会得到BT划分、QT划分、TT划分的最优深度。具体划分形状如图18所示，其示出了本申请涉及的各种CU划分类型示意图。请参考图19，其示出了本申请一个示例性实施例提供的一种CU划分顺序示例图。编码过程中，可能按照图19顺序依次判断，如图19所示，划分顺序为：不分割→四叉树划分→水平二叉树划分→垂直二叉树划分→水平三叉树划分→垂直三叉树划分。其中，图19只是为了解释给出的一个特例，这个顺序不是固定的，可以根据已预测结果自由调整，比如，划分顺序为：NONE划分→QT划分→NONE划分→TT_VER划分→BT_HOR划分，再比如，划分顺序为：NONE划分→BT_HOR划分→BT_VER划分→TT_VER划分。以图19为例，在做完TT_VER之后，开发人员可以知道当前CU是否最终选中了TT_VER或者TT_HOR，即计算机设备可以获得预测目标，因此可以在图19中的位置1提取预测目标。其中，如果当前CU是否最终选中了TT_VER或者TT_HOR，计算机设备可以设置预测目标为0；反之，计算机设备可以设置预测目标为1。在网络训练过程中，特征向量和预测目标的提取是分开的。其中，提取特征向量是在TT划分之前，比如图19中的位置0；提取预测目标是在TT划分之后，比如图19中的位置1。只有在做完TT划分之后才可以知道TT划分是否被选中，提取预测目标的具体位置可以放在TT_VER划分或者TT_HOR划分之后，比如图19中的位置1；再比如更靠后的位置。在网络应用的时候，网络预测放在TT划分之前，即图19中的位置0处，先提取特征向量，会根据训练好的网络来预测是否做TT_HOR和TT_VER划分，如果不需要划分，则跳过对应的划分预测。特征值提取在网络预测过程和训练过程是一样的，提取特征值的位置之所以与提取预测目标的位置不同，是因为在位置1计算机设备才可以得到预测目标。只提取进行了三叉树划分的CU的特征值，可以避免出现一些意义不大的特征向量。比如，当前CU本来就没尝试三叉树划分，这种情况下，预测目标肯定是1，若这种特征向量过多，反而会让网络训练陷入局部最优。需要说明下，特征值提取和网络训练过程是离线的，需要先在编码器上提取特征向量，然后训练网络，最后把训练好的网络保存下来；应用的时候，也要提取特征向量，然后加载训练好的网络，在计算三叉树划分之前进行网络预测，根据预测结果来指导是否跳过对应三叉树划分。经过NONE和二叉树划分后，如果最优为NONE，则选中三叉树划分的可能性比较小，即三叉树水平划分和垂直划分划分高概率会被淘汰；如果最优为二叉树水平划分，则三叉树水平划分可能被选中，相反三叉树垂直划分高概率会被淘汰；如果最优为二叉树垂直划分，则三叉树垂直划分可能被会选中，相反三叉树水平划分高概率会被淘汰；因此，结合这些概率，再利用机器学习来预测，提前跳过不必要的划分，从而达到加速目的。实施过程分为两个阶段：网络训练和应用。其中，网络训练包括：特征值提取、网络设置和获取网络参数；应用包括：特征值提取、加载网络参数、网络预测和应用。在网络训练和应用中，特征值提取方法是相同的。本方案将机器学习应用到CU分割中，再结合其他特定条件，使得预测准确度大大提升，能实现很好的加速性能。需要说明的一点是，本申请实施例提供的技术方案可以应用于所有视频压缩协议，比如H.266/VVC标准、H.265/HEVC标准、AVS或者下一代视频编解码标准中；实施时细节上可以有出入，比如选用不同的阈值、不同的预测网络、不同的激励函数等，本申请实施例对此不作限定。请参考图20，其示出了本申请一个示例性实施例提供的用于编码单元的三叉树划分处理方法的实施流程图。如图20所示，该方法的实施流程包括以下步骤。S1，数据准备：准备输入特征向量和训练目标。S2，网络结构定义：确定网络的层数、每层的神经元数量和激活函数等。其中，输入层神经元个数与特征值个数有关；隐含层神经元个数可以自行设置；输出层神经元个数与输出目标有关。S3，权重和偏置初始化：为每个连接权重和每个神经元的偏置设置初始值，一般初始化为随机数。S4，前向传播：从输入层开始，将输入数据通过每一层的神经元进行加权求和，再经激活函数处理，得到输出结果。S5，损失函数计算：将网络的输出结果与标签进行比较，计算损失函数的值。S6，反向传播：根据损失函数的值，通过梯度下降法更新连接权重和偏置，以减小损失函数的值。S7，重复S4至S6：直到达到预定的训练迭代次数或达到收敛条件，终止训练，保存网络参数。S8，预测：使用训练好的模型对新的输入数据进行预测。在实施过程中：S1对应着特征值提取；S2和S3对应着第一阶段的网络设置；S4至S7对应着第一阶段的网络训练，S7结束后就会获得训练好的网络参数，保存起来，即对应着第一阶段的获取网络参数。在网络预测时，先通过S1提取特征值，然后加载S7保存的网络参数，最后调用训练好的模型进行第二阶段的预测。第一阶段：网络训练。请参考图21，其示出了本申请一个示例性实施例提供的网络训练流程图。如图21所示，网络训练流程分为S211特征值提取、S212网络设置、S213网络训练和S214获取网络参数，其中，网络参数包含权重和偏移量。S211，特征值提取：特征值共33个，存放在数组Features。特征值包含了以下3个方面。特征值第1方面：相邻块的最优信息。其中，Features~Features代表了当前块的最优信息：Features = left_depth - cur_depth；Features表示左边块CU深度-当前块深度；Features = above_depth - cur_depth；Features表示上边块CU深度-当前块深度；Features = left_qtDepth - qt_depth；Features表示左边块QT深度-当前块QT深度；Features = above_qtDepth - qt_depth；Features表示上边块QT深度-当前块QT深度；Features = left_btDepth - bt_depth；Features表示上边块bt深度-当前块bt深度；Features = above_btDepth - bt_depth；Features表示左边块bt深度-当前块bt深度；Features = left_mtDepth - mt_depth；Features表示上边块mt深度-当前块mt深度；Features = above_mtDepth - mt_depth；Features表示左边块mt深度-当前块mt深度；Features = log10 / 2.0)；Features表示上边块与左边块划分类型的平均值；Features = log10 /2.0)；Features表示上边块、右上角2个位置CU深度的平均值；Features = log10 / 3.0)；Features表示左边块、左上角及左下角3个位置CU深度的平均值；Features = log10；其中，width表示如果上边块存在，就取相邻块CU对应的最大宽度，否则为当前CU的宽度；Features = log10；其中，heigth表示如果左边块存在，就取相邻块CU对应的最大高度，否则为当前CU的高度。特征值的第2方面：当前块的信息。其中，Features~Features：Features = log10；其中，col_depth表示对应同位块的深度；Features = slice_level；其中，slice level表示当前帧的帧等级；Features = log10；其中，qp为当前CU块的量化系数。请参考图22，其示出了本申请涉及的不同帧类型对应的参考关系示意图。如图22所示，帧类型按照参考关系，重要性由大到小排序是I帧＞P帧＞B帧＞b帧＞非参考B帧。在本申请实施例中，可以是不同的GOP结构。以GOP16为列，请参考图23，其示出了本申请涉及的GOP16的参考关系示意图。如图23所示，参考关系如下：poc16参考poc0；poc8参考poc0和poc16；poc4参考poc0和poc8；poc2参考poc0和poc4；而poc1、poc3、poc5、poc7、poc9、poc11、poc13和poc15不被参考。因此，权重如下述表1所示。表1权重等级对应poc帧类型0poc0I帧1poc16P帧/GPB帧2poc8B帧3poc4、poc12B帧4poc2、poc6、poc10和poc14B帧5poc1、poc3、poc5、poc7、poc9、poc11、poc13和poc15非参考B帧特征值的第3方面：当前块的分析计算。其中，Features~Features代表了当前块的梯度信息：Features = log10；其中，grad_hor表示水平方向梯度；Features = log10；其中，grad_ver表示垂直方向梯度；Features = log10；其中，grad_ratio表示grad_hor/grad_ver；Features = log10；其中，pixel_var表示当前块的方差；Features = log10；其中，sub_var表示当前块做完NONE后，将残差分为4个子块，对应第1个子块的方差；Features = log10；其中，sub_var表示当前块做完NONE后，将残差分为4个子块，对应第2个子块的方差；Features = log10；其中，sub_var表示当前块做完NONE后，将残差分为4个子块，对应第3个子块的方差；Features = log10；其中，sub_var表示当前块做完NONE后，将残差分为4个子块，对应第4个子块的方差；Features = log10 + abs)；Features = log10 + abs)；Features = log10 + abs -abs - abs))；其中，sub_mean表示当前做完NONE后，将残差分为4个子块，每个子块对应的亮度像素平均值；Features = log10 + abs)；Features = log10 +abs)；Features = log10 + abs - abs - abs))；Features = log10 +abs)；Features = log10 +abs)；Features = log10 + abs -abs - abs))；其中：sub_grad_ratio表示CU分为4个子块，每个子块对应的水平梯度/垂直梯度的比值。其中，Features~Features代表了当前块做完NONE划分后的方差信息。最后一位存放预测目标：Features = targe；如果当前最优划分模式是三叉树划分，则targe为0，否则为1。其中，在提取特征值时，根据块大小分开提取。S212，网络设置：确定网络的层数、每层的神经元数量和激活函数等。其中，输入层神经元个数与特征值个数有关；隐含层神经元个数可以自行设置；输出层神经元个数与输出目标有关。本申请实施例中，使用如图16所示的3层全连接网络，包括输入层、隐含层、输出层。输入层神经元个数为33，隐含层神经元个数为40，输出层神经元个数为1。内核激活函数使用Sigmoid函数，即如下公式：S213，网络训练：将Features~Features作为特征向量，Features作为预测目标进行训练。将CU块按照尺寸分为5类，按下列规则分类：第1类：大于等于64x64块；第2类：64x32、32x64、32x32块；第3类：32x16、16x32、16x16块；第4类：16x8、8x16、8x8块；第5类：其他块。每类独自提取特征值，独自训练，会生成5套网络参数。设置网络迭代3000次，且预测准确率超过70%，停止训练。S214，获取网络参数：网络训练满足预设条件后，会终止训练，此时保存下训练好的参数weight和bias，供预测时使用。网络参数与预设的网络结构有关，包括隐含层权重hidden_weight和偏移量hidden_bias，输出层权重output_weight和偏移量output_bias。其中，隐含层权重为一维大小为33x40数组；隐含层偏移量为一维大小为40数组；输出层权重为一维大小为40数组；隐含层偏移量为一维大小为1数组。具体数据可以通过训练得到，在本申请实施例中，以第1类块为例，权重和偏移量如下：隐含层权重：static const double input_weights  = {-0.09282, -0.09329, 0.05963,-0.19528, 0.04972, 0.08928, -0.01870, 0.09803, -0.07391, -0.12938, 0.00617, -0.04349, -0.20029, -0.06978, 0.03121, 0.08126, -0.04669, -0.05351, 0.33285, -0.10986, -0.19672, -0.20219, 0.14859, -0.15324, -0.08553, 0.01998, 0.04690,0.09540, 0.43488, -0.05070, 0.09164, 0.34425, 0.02406, 0.08467, -0.00845,0.04984, -0.09717, 0.05773, -0.11184, 0.13667, -0.07319, 0.05373, 0.09656,0.03097, -0.09671, -0.01752, 0.10075, 0.07412, 0.10575, 0.09494, 0.13578,0.07931, 0.13592, 0.08714, 0.11729, -0.11890, -0.06115, -0.16003, 0.03039,0.02059, 0.11344, -0.02620, 0.13762, 0.14027, -0.06359, -0.09112, 0.17985,0.23821, -0.06804, 0.27529, -0.19789, -0.13158, -0.49271, -0.09446, -0.02267,0.01675, 0.31396, 0.14361, 0.05176, -0.18884, 0.00654, 0.21531, 0.05062,0.13736, -0.36379, -0.04796, 0.11741, -0.15090, 0.08983, 0.17127, -0.02911,0.24619, -0.14408, -0.14484, -0.11683, -0.11412, -0.19470, -0.17425, -0.00070, -0.42187, 0.00735, -0.18063, -0.11486, -0.17859, 0.03630, 0.39302, -0.03578, -0.16861, -0.09454, -0.15285, 0.04178, -0.27491, 0.08614, -0.09295,-0.20753, 0.24908, -0.18035, 0.38865, 0.02610, -0.19426, 0.07525, -0.11124, -0.28829, -0.06059, -0.17821, -0.04166, 0.23064, 0.47773, -0.03024, 0.32829,0.31307, 0.17394, -0.01524, -0.06229, -0.14952, -0.02018, -0.09215, -0.04840,0.19585, 0.04891, -0.11752, -0.09875, -0.16799, 0.15812, -0.23816, -0.03565,0.02739, -0.07173, 0.00093, 0.10910, -0.02055, -0.13733, -0.18665, 0.14965, -0.06427, -0.08066, 0.03386, -0.04390, 0.05467, 0.16463, 0.03996, -0.16694,0.06578, 0.03094, 0.23088, 0.13261, 0.13613, -0.00981, 0.04549, -0.13386,0.10213, 0.11972, 0.08247, 0.06447, -0.13278, 0.06097, -0.02482, -0.11167, -0.03130, -0.04279, 0.05637, -0.16061, -0.05010, -0.11199, 0.05631, -0.12867,0.05313, -0.09971, -0.11027, -0.15044, -0.08077, 0.11657, -0.13585, -0.10722,-0.00242, 0.03305, 0.06475, 0.04014, -0.15791, -0.09484, 0.06356, -0.06461,0.07144, 0.05374, 0.21246, -0.04061, -0.12507, -0.08879, -0.01656, -0.09099,-0.03569, 0.11613, -0.15273, -0.11189, 0.19909, 0.01436, 0.15110, -0.12807,0.09220, -0.06452, -0.01106, -0.02425, 0.11098, -0.06673, 0.02148, -0.02706,0.13037, -0.03419, 0.16993, 0.06466, -0.07522, -0.61110, -0.14466, -0.46692,-0.01785, 0.18939, -0.01603, 0.28398, -0.34219, -0.29983, -0.22571, 0.41558,-0.26303, -0.39841, 0.05359, 0.15721, -0.19252, 0.13786, -0.40629, 0.21226,0.08669, -0.04171, -0.06064, -0.23514, -0.15128, -0.01666, -0.26348, 0.08264,0.17613, 0.38914, 0.07291, 0.09419, 0.17257, 0.00015, -0.06866, 0.04437,0.05612, -0.16417, 0.01095, -0.07778, 0.03494, -0.12180, 0.03096, -0.13254, -0.04829, 0.02572, -0.13594, -0.12004, 0.13920, -0.01317, 0.12470, -0.15192, -0.10177, 0.08723, 0.14614, 0.13752, 0.05151, 0.05445, 0.05198, 0.08206,0.08140, -0.11842, 0.15629, 0.08561, -0.16441, -0.12335, 0.11777, -0.01802,0.17262, 0.09889, 0.02164, 0.16090, 0.01892, -0.25986, 0.13895, 0.04885,0.01961, -0.12109, -0.20005, -0.00200, -0.15609, 0.14772, 0.09138, -0.18545,0.17491, -0.07913, -0.06410, -0.06185, -0.13313, 0.08964, 0.05415, -0.12222,0.00400, -0.06619, 0.03601, -0.24203, 0.21355, -0.23467, -0.28189, 0.12045, -0.01829, -0.01904, -0.07178, -0.05253, 0.07933, -0.00411, -0.09083, 0.06353,0.07755, 0.18029, -0.04906, -0.12143, 0.15038, -0.17030, 0.01530, -0.09924, -0.15354, -0.14034, 0.14945, 0.19026, 0.19726, -0.01890, 0.10884, 0.06707,0.01750, -0.08384, -0.00414, 0.17813, 0.19305, -0.12427, 0.07523, -0.01654, -0.09271, 0.33182, 0.15794, 0.09287, 0.06364, -0.16693, -0.07240, 0.10098, -0.03883, 0.11734, 0.16418, 0.20142, -0.06496, 0.14718, -0.05816, 0.12772, -0.09467, -0.05845, 0.22782, -0.11464, 0.12304, -0.00800, 0.22797, -0.16282, -0.03396, 0.19467, 0.16960, 0.07300, 0.06665, -0.35191, 0.06394, -0.29630, -0.17132, 0.05555, 0.35315, 0.05393, 0.19159, 0.20110, 0.03152, -0.22550, -0.27232, -0.23176, 0.19180, -0.07317, -0.14045, -0.25420, 0.43184, -0.06354,-0.10007, -0.03347, -0.31997, 0.41867, -0.43005, 0.01529, 0.11468, -0.05976,0.14032, 0.10585, 0.10524, 0.24596, -0.11933, -0.18905, -0.58999, 0.16216, -0.43241, -0.23921, 0.20541, -0.00617, 0.15775, 0.02686, 0.08569, -0.10016,0.17944, 0.15692, 0.14866, 0.11628, -0.09502, -0.16790, 0.05629, 0.03398,0.00503, -0.16151, 0.07133, 0.14458, 0.12888, 0.10153, 0.12043, -0.11734, -0.14848, 0.16373, 0.04018, 0.15483, -0.15400, 0.07081, 0.09340, 0.03201,0.00691, -0.02224, 0.05715, -0.02589, 0.36688, 0.24922, 0.22933, 0.01655, -0.11093, 0.02350, 0.12437, 0.14118, 0.21097, 0.14301, 0.02163, 0.20333,0.14671, -0.02691, 0.16697, 0.14273, -0.08649, -0.02349, -0.05519, 0.04877, -0.04805, 0.13101, 0.11474, 0.06377, 0.16790, 0.05662, -0.11590, -0.13900, -0.19830, 0.13697, -0.06108, 0.02476, 0.11165, -0.00558, -0.10948, -0.13909,0.07339, 0.16639, 0.05362, 0.05106, 0.19403, -0.18298, 0.13401, -0.14807, -0.05652, -0.09456, 0.07425, 0.16205, -0.08458, 0.00621, -0.07389, 0.29503, -0.11309, -0.13012, 0.10043, -0.13441, -0.20487, 0.05954, -0.11577, 0.08879,0.17455, 0.19273, 0.06962, 0.10218, 0.21086, -0.06458, 0.23529, -0.12298, -0.08511, 0.10204, -0.13369, -0.14484, -0.26926, -0.15047, 0.18111, 0.01548, -0.00889, -0.12504, 0.16639, 0.07934, 0.10850, 0.17913, -0.12544, 0.15100, -0.28221, 0.00340, 0.00029, 0.00566, 0.18430,0.04800, 0.04954, -0.00411,0.19027, -0.09905, -0.26732, -0.08934, -0.33376, -0.31040, -0.05536, -0.01055, 0.24917, 0.10416, 0.20685, -0.04508, 0.09785, -0.37071, 0.02058,0.10898,0.11458, 0.10288, 0.15882, 0.21673, 0.06091, 0.12912, 0.12576,0.05494, 0.00321, -0.07914, 0.01656, -0.09635, -0.04941, 0.12608, -0.04455,0.13914, 0.02637, 0.12874, -0.09792,-0.16070, -0.04512, -0.20603, -0.13530, -0.13278, 0.20032, 0.01418, 0.28765, 0.04193, -0.14851, 0.12149, 0.07194,0.22165, 0.20859, -0.01807, 0.03697, 0.20860, 0.13137, -0.14198, 0.09776,0.04430, -0.18114, -0.00119, -0.00833, 0.15956, 0.26259, 0.13509, -0.04096, -0.10536, 0.04880, 0.28441, 0.02419, -0.02016, -0.26108, 0.02721, -0.10649, -0.09645, -0.15081, -0.12721, 0.00909, 0.06070, 0.14754, 0.02289, -0.00971,0.11912, 0.09731, 0.09200, -0.04163, 0.10795, 0.10421, -0.04609, 0.05623,0.04531, 0.12981, 0.00435, -0.14399, -0.09749, -0.01013, -0.04515, 0.10250, -0.11981, 0.05433, -0.17286, 0.04049, -0.05281, -0.02042, -0.11543, -0.03962,-0.04725, 0.03974, 0.18559, 0.14356, -0.13378, -0.02323, -0.03387, -0.13637,0.04240, -0.08505, -0.13025, -0.10696, 0.03964, -0.01572, 0.11598, -0.10495,-0.16218, 0.06651, -0.13394, -0.00725, 0.04382, 0.04578, 0.03762, 0.03653, -0.05924, -0.03076, -0.09963, 0.02287, 0.16278, 0.12870, -0.07216, -0.09145, -0.12856, -0.06206, 0.13764, 0.11066, 0.06752, -0.02832, 0.12087, 0.14452,0.09349, -0.17852, -0.02128, -0.12456, 0.14335, -0.16522, -0.17525, -0.13351,-0.08881, -0.08091, -0.11680, -0.12354, -0.09085, 0.09127, 0.15448, 0.06257,-0.07821, -0.17467, 0.09326, 0.03790, -0.12619, 0.13933, 0.16413, 0.13077,0.13024, 0.09306, 0.08961, -0.00577, 0.08212, -0.17757, -0.01982, -0.10181,0.08213, 0.07335, 0.19221, 0.00419, -0.05885, 0.09911, 0.10712, 0.08617,0.23675, -0.23882, 0.20399, -0.03897, 0.09688, 0.11774, -0.19959, 0.02474, -0.02491, -0.07164, 0.15017, 0.05444, -0.06602, 0.14931, -0.16264, -0.16246,0.13447, 0.15174, -0.11109, -0.03592, 0.12635, -0.07395, -0.18553, 0.07745,0.05976, 0.05130, 0.13779, -0.00004, 0.07891, 0.16401, -0.03285, 0.06813,0.01709, 0.11906, 0.03622, 0.10158, -0.02233, 0.09883, 0.09925, -0.14569,0.23312, -0.06263, -0.16812, 0.12237, -0.05737, 0.02102, 0.01867, -0.15724,0.13233, 0.15536, 0.17350, -0.11463, 0.25361, -0.03405, 0.03078, -0.28092,0.05534, -0.13559, -0.09213, 0.02410, 0.07940, 0.15416, 0.34823, -0.26900,0.16289, 0.39842, 0.46490, -0.40912, 0.20511, -0.03523, -0.12656, 0.29415, -0.12597, 0.54969, 0.04558, 0.01070, 0.01500, 0.11763, -0.00584, 0.05206, -0.26652, -0.15135, 0.27945, 0.16024, -0.25244, 0.51100, 0.44656, -0.01891, -0.43937, 0.16577, 0.00401, -0.07258, 0.05760, -0.00521, 0.18314, 0.07227, -0.27115, -0.05759, 0.17683, 0.48557, -0.39235, 0.09322, -0.06490, 0.02970, -0.00233, -0.40431, 0.28529, 0.17086, -0.04952, 0.15470, -0.07917, -0.04389,0.24337, -0.17320, -0.30184, 0.35182, 0.31257, -0.09963, 0.51961, 0.50409, -0.04494, -0.03793, -0.12575, -0.06941, -0.02990, -0.19830, -0.17215, -0.05038, 0.03512, 0.14121, 0.10732, -0.12245, -0.11056, 0.00847, -0.13067,0.13337, -0.14047, -0.07153, 0.08745, 0.09107, 0.14109, -0.03361, -0.12548, -0.01343, 0.14798, 0.04872, 0.07301, -0.02063, 0.12173, 0.05011, -0.03151, -0.19350, 0.06938, 0.17876, 0.14803, 0.07945, -0.12632, -0.10966, -0.15604,0.04042, -0.29074, -0.09826, -0.08468, -0.09938, 0.17648, -0.18995, 0.13924,-0.04378, -0.00230, -0.02918, -0.10910, 0.21141, -0.26351, 0.17210, 0.11985,-0.03376, -0.03343, -0.01313, 0.06265, 0.18750, -0.09429, 0.03311, -0.14122,-0.12333, -0.03741, -0.20413, 0.15187, -0.19545, 0.05600, 0.10228, -0.00442,-0.16353, 0.03281, 0.22003, 0.12237, -0.14493, 0.10301, 0.01816, -0.12425, -0.15287, 0.07172, -0.05479, -0.07851, -0.01853, -0.07954, 0.22025, 0.05137, -0.22465, -0.02164, 0.17177, -0.05648, 0.06595, -0.15181, 0.18398, 0.05655,0.03739, 0.16233, -0.05163, 0.23192, -0.00833, 0.12411, -0.12704, 0.05452, -0.05803, 0.10030, 0.00005, 0.15763, 0.13717, -0.10098, 0.02362, 0.06050,0.17153, -0.08314, 0.11816, 0.08271, -0.06309, 0.04220, 0.12070, 0.16189,0.04269, 0.06953, -0.12010, -0.15750, -0.03014, 0.06706, -0.10422, 0.13291,0.02518, 0.02872, 0.02094, 0.10512, 0.01987, 0.15606, -0.04691, 0.09584, -0.19596, -0.00923, 0.02982, 0.17230, 0.03750, 0.12318, -0.11915, -0.03520,0.19554, 0.15743, -0.03047, 0.18683, 0.10886, -0.21860, -0.01576, -0.08771,0.32537, -0.05566, 0.02963, -0.01528, 0.04959, -0.14368, 0.03162, 0.00543,0.14479, 0.28322, 0.23606, -0.17890, 0.29345, 0.12288, -0.07590, -0.01594, -0.17653, -0.14886, -0.00970, 0.09473, 0.16089, -0.07376, 0.11365, -0.18578,0.14324, -0.10114, -0.06283, -0.03223, -0.09654, 0.14067, 0.10376, 0.07832, -0.07493, -0.03500, 0.05975, -0.14366, -0.22450, 0.05401, -0.08359, -0.07456,0.06078, -0.18510, 0.02908, 0.03775, -0.20190, 0.05324, -0.04133, 0.04691,0.06356, 0.06473, -0.08948, -0.03897, 0.02169, -0.10722, 0.02667, -0.04549,0.16006, -0.02684, -0.02171, 0.01783, 0.00185, 0.08545, 0.06696, 0.07948, -0.02317, 0.13407, -0.11938, 0.11168, 0.15159, 0.12012, 0.06032, 0.11810,0.10924, -0.07962, -0.06295, 0.08210, 0.17238, -0.01554, -0.02083, -0.10665,-0.17282, -0.03197, -0.09689, -0.03309, -0.09794, -0.00180, -0.15104,0.14833, -0.15714, -0.18469, 0.02931, -0.09263, -0.06144, -0.05084, -0.08498,-0.01882, 0.07212, 0.13216, -0.00952, 0.15492, -0.10663, -0.04477, -0.05367,-0.13079, 0.00947, 0.14131, -0.15477, -0.01011, -0.04732, 0.10535, -0.06491,-0.03346, -0.14233, 0.01777, 0.07693, -0.09081, -0.06740, 0.00900, 0.09336, -0.02219, 0.13522, 0.16177, 0.14346, 0.01177, 0.06629, -0.13261, -0.06967,0.07755, -0.09095, -0.08059, -0.11631, 0.12912, 0.02120, -0.08902, -0.03585,0.14821, 0.13031, -0.08378, 0.11487, -0.00695, -0.00739, -0.13075, -0.17219,-0.13945, 0.14957, -0.06751, 0.02456, -0.01119, 0.11241, -0.02449, 0.04173,0.09768, 0.18007, 0.11987, 0.10232, -0.08189, -0.11354, -0.08652, 0.06148,0.10268, 0.06428, 0.05216, -0.04637, 0.05990, -0.18702, 0.22085, -0.04780, -0.04583, -0.13076, -0.05092, 0.12481, 0.02361, -0.08310, -0.14693, 0.09159,0.14600, -0.05314, 0.04809, 0.08436, 0.12022, -0.11648, -0.06175, 0.06346,0.10574, -0.15571, -0.09506, -0.16577, -0.16182, -0.14765, -0.07410, -0.11234, 0.05722, -0.01682, -0.04987, 0.04508, 0.13740, -0.07441, 0.02318,0.15721, -0.12890, -0.04868, 0.09196, -0.13972, -0.12878, 0.12086, -0.14347,-0.01318, -0.15922, -0.07201, -0.15830, 0.05530, 0.12605, -0.03554, -0.31212,-0.10615, 0.03831, -0.21056, 0.25686, -0.04716, -0.06574, 0.03743, -0.12755,-0.13385, 0.14236, -0.03957, -0.06202, -0.00177, 0.03766, 0.10826, 0.04245, -0.16427, 0.31803, -0.08873, -0.21717, -0.15557, -0.00310, -0.10616, -0.16406,-0.26727, 0.03937, -0.02304, 0.33846, 0.19891, 0.02524, 0.14981, -0.22182,0.30749, 0.20791, 0.08881, -0.06093, 0.03753, -0.10035, -0.55653, -0.10751,0.16640, 0.17504, -0.08334, -0.14702, 0.34556, -0.33258, 0.12445, 0.12010, -0.35130, 0.48517, -0.70336, 0.12114, 0.19396, -0.02069, -0.08821, 0.47307,0.23312, 0.10536, 0.11233, -0.18460, -0.65507, -0.16803, -0.47104, -0.43412,0.34459, -0.13192, -0.02710, 0.12823, 0.15094, -0.12604, -0.09641, -0.07118,-0.08976, 0.01340, 0.13349, 0.15874, 0.08788, -0.18572, 0.16721, -0.12977,0.02960, 0.09979, 0.08641, 0.11560, 0.07653, 0.10177, 0.02405, -0.12263, -0.00585, 0.11329, -0.17322, 0.03749, 0.08276, 0.14512, -0.07362, -0.05345,0.16110, -0.10653}；输出层权重：static const double input_bias = { -0.15420, -0.09293, 0.02186,0.06861, 0.12317, 0.09562, -0.09322, -0.17937, 0.15982, 0.02711, -0.04934, -0.04796, 0.11733, 0.08864, 0.06170, 0.09671, 0.08878, 0.10834, 0.01538,0.09022, -0.00369, 0.06243, 0.02637, 0.09256, -0.07988, -0.03999, 0.06768,0.10697, -0.08008, 0.03041, -0.10097, 0.00742, 0.15478, 0.11752, 0.14779, -0.17179, -0.06234, 0.15845, -0.06173, -0.06266 }；隐含层偏移量：static const double output_weights  = { -0.61681, -0.00635,0.88136, -1.12755, -0.30531, -0.12049, -0.29553, -1.26286, -0.02382, 0.51956,0.14069, 0.65129, 1.33451, -0.02300, 0.57127, -0.51415, 0.75802, 0.51833,0.54533, -0.01390, 0.12403, -0.08560, -0.37801, -0.36172, -1.24172, -1.23690,0.12281, 0.54591, -0.43047, -0.14761, -0.58988, -0.19691, 0.24447, -0.13628,0.10973, -0.22492, -0.04839, -0.64408, 1.70452, -0.21490 }；输出层偏移量：static const double input_bias  = { 0.08109 }。第二阶段：应用。请参考图24，其示出了本申请一个示例性实施例提供的应用流程图。如图24所示，应用流程包括S241特征值提取、S242加载网络参数、S243网络预测和S244应用。S241，特征值提取：特征值提取方法与上述第一阶段的网络训练一样，只需要记录前面33个特征值，不再赘述。S242，加载网络参数：网络参数包括网络各层神经元个数、激活函数、隐含层权重hidden_weight和偏移量hidden_bias，以及输出层权重output_weight和偏移量output_bias。各层神经元个数和激烈函数要与网络训练中参数保持一致。其中，按照块类型加载各自的网络参数。S243，网络预测：全连接网络的预测函数可以表示为：Step31，隐含层计算：将特征向量Feature与隐含层权重hidden_weight相乘，然后加上偏移量hidden_bias，得到隐藏层输出结果，记作value，每个隐含层得到一个结果。其中，i取值范围，j取值范围。然后用激活函数Sigmoid来修正每个神经元输出结果value，即：Step32，输出层计算：将隐含层最终输出结果value与输出层权重output_weight相乘，然后加上偏移量output_bias，得到输出层结果，记最终预测结果y，即：将上述结果通过激活函数f进行非线性变换，得到最终的预测结果y。在本申请实施例中，激励函数采用Sigmoid函数，会将输出目标映射到0~1区间。S244，应用：在做完二叉树分割之后，三叉树分割之前，判断三叉树分割是否会做，如果做，先检查当前最优分割状态，然后针对不同的最优分割状态，再结合网络预测结果跳过对应的三叉树分割；具体步骤如下。Step1，最优分割状态判断：初始化flag = 0；如果当前最优分割状态为NONE，即不划分更好，则flag = 1；如果当前最优分割状态为BT_HOR_SPLIT，则flag = 2；如果当前最优分割状态为BT_VER_SPLIT，则flag = 3；Step2，最优分割状态结合网络预测结果跳过对应三叉树划分：如果flag＞0，则进行网络预测，得到预测值y，结合阈值跳过对应三叉树划分；即，如果预测值y大于阈值thr：如果flag = 1，则跳过三叉树水平划分和三叉树垂直划分；如果flag = 2，则跳过三叉树垂直划分；如果flag = 3，则跳过三叉树水平划分。在本申请实施例中，阈值thr为0.85，不同档次可以阈值不同。图25其示出了本申请一个示例性实施例示出的用于编码单元的三叉树划分处理装置的方框图，该装置可以用于执行如图9、图10、图12、图13或图14所示方法中，由计算机设备执行的全部或部分步骤如图25所示，该装置包括：第一获取模块2501，用于获取编码单元CU的特征向量；特征向量用于表示CU的图像特征以及CU的邻域图像特征；第二获取模块2502，用于基于特征向量，获取预测值；预测值用于指示CU跳过三叉树划分的概率；执行模块2503，用于响应于预测值大于预测阈值，基于对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果，跳过对CU的三叉树水平划分和三叉树垂直划分中的至少一个划分流程。在一些实施例中，第一获取模块2501，用于，响应于对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果满足指定条件，获取编码单元CU的特征向量。在一些实施例中，上述指定条件包括：对编码单元CU的不划分的预测结果、四叉树划分的预测结果、二叉树水平划分的预测结果以及二叉树垂直划分的预测结果中，最优预测结果为不划分的预测结果、二叉树水平划分的预测结果或者二叉树垂直划分的预测结果。在一些实施例中，执行模块2503，用于，响应于预测值大于预测阈值，且最优预测结果为不划分的预测结果，跳过对CU的三叉树水平划分和三叉树垂直划分；响应于预测值大于预测阈值，且最优预测结果为二叉树水平划分的预测结果，跳过对CU的三叉树垂直划分；响应于预测值大于预测阈值，且最优预测结果为二叉树垂直划分的预测结果，跳过对CU的三叉树水平划分。在一些实施例中，第二获取模块2502，用于，将特征向量输入网络预测模型，获得网络预测模型输出的预测值；其中，网络预测模型是通过CU样本的特征向量样本以及CU样本的最优三叉树划分方式进行训练得到的机器学习模型。在一些实施例中，上述图25所示的装置还包括：第三获取模块，用于，获取CU的块大小；块大小用于将CU划分为多个类别，并按照类别分别训练网络预测模型；基于块大小，获取CU的类别；基于类别，获取网络预测模型。在一些实施例中，上述图25所示的装置还包括：训练模块，用于，将特征向量样本，输入网络预测模型，获得网络预测模型输出的，CU样本的三叉树划分方式预测结果；三叉树划分方式预测结果用于指示CU样本的划分类型为三叉树划分的概率；基于CU样本的最优三叉树划分方式，以及三叉树划分方式预测结果，获取网络预测模型的损失函数值；基于网络预测模型的损失函数值，对网络预测模型进行参数更新。在一些实施例中，特征向量包括：CU的相邻块的信息，以及，CU的信息；相邻块的信息包括以下至少一种：相邻块的CU深度、相邻块的QT深度、相邻块的BT深度、相邻块的MT深度、相邻块的形状信息以及相邻块的最优划分类型；相邻块是与CU相邻，且已经编码完成的编码块；CU的信息包括以下至少一种：CU的深度、CU的帧等级、编码单元CU的量化系数、CU的同位块的深度、CU的梯度信息、CU的方差信息、CU的亮度像素以及CU的形状信息。图26其示出了本申请另外一个示例性实施例示出的用于编码单元的三叉树划分处理装置的方框图，该装置可以用于执行如图15所示方法中，由计算机设备执行的全部或部分步骤如图26所示，该装置包括：样本获取模块2601，用于获取CU样本的特征向量样本，以及CU样本的最优三叉树划分方式；输入输出模块2602，用于将特征向量样本，输入网络预测模型，获得网络预测模型输出的，CU样本的三叉树划分方式预测结果；三叉树划分方式预测结果用于指示CU样本跳过三叉树划分的概率；损失获取模块2603，用于基于CU样本的最优三叉树划分方式，以及三叉树划分方式预测结果，获取网络预测模型的损失函数值；参数更新模块2604，用于基于网络预测模型的损失函数值，对网络预测模型进行参数更新；其中，网络预测模型，用于基于输入的CU的特征向量，输出预测值；特征向量用于表示CU的图像特征以及CU的邻域图像特征；预测值用于指示CU跳过三叉树划分的概率。在一些实施例中，样本获取模块2601，用于，获取对CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果；响应于对CU样本的不划分的预测结果、四叉树划分的预测结果、二叉树划分的预测结果以及三叉树划分的预测结果中，最优预测结果为三叉树划分的预测结果，获取CU样本的特征向量，以及CU样本的三叉树划分方式。图27示出了本申请一个示例性实施例示出的计算机设备2700的结构框图。该计算机设备可以实现为本申请上述方案中的服务器。该计算机设备2700包括中央处理单元2701、包括随机存取存储器2702和只读存储器2703的系统存储器2704，以及连接系统存储器2704和中央处理单元2701的系统总线2705。该计算机设备2700还包括用于存储操作系统2709、应用程序2710和其他程序模块2711的大容量存储设备2706。该大容量存储设备2706通过连接到系统总线2705的大容量存储控制器连接到中央处理单元2701。该大容量存储设备2706及其相关联的计算机可读介质为计算机设备2700提供非易失性存储。也就是说，该大容量存储设备2706可以包括诸如硬盘或者只读光盘驱动器之类的计算机可读介质。不失一般性，该计算机可读介质可以包括计算机存储介质和通信介质。计算机存储介质包括以用于存储诸如计算机可读指令、数据结构、程序模块或其他数据等信息的任何方法或技术实现的易失性和非易失性、可移动和不可移动介质。计算机存储介质包括RAM、ROM、可擦除可编程只读寄存器、电子抹除式可复写只读存储器闪存或其他固态存储其技术，CD-ROM、数字多功能光盘或其他光学存储、磁带盒、磁带、磁盘存储或其他磁性存储设备。当然，本领域技术人员可知该计算机存储介质不局限于上述几种。上述的系统存储器2704和大容量存储设备2706可以统称为存储器。根据本公开的各种实施例，该计算机设备2700还可以通过诸如因特网等网络连接到网络上的远程计算机运行。也即计算机设备2700可以通过连接在该系统总线2705上的网络接口单元2707连接到网络2708，或者说，也可以使用网络接口单元2707来连接到其他类型的网络或远程计算机系统。该存储器还包括至少一条计算机程序，该至少一条计算机程序存储于存储器中，中央处理单元2701通过执行该至少一条计算机程序来实现上述各个实施例所示的方法中的全部或者部分步骤。在示例性实施例中，还提供了一种芯片，芯片包括可编程逻辑电路和/或程序指令，当芯片在计算机设备上运行时，用于实现上述方面的用于编码单元的三叉树划分处理方法。在示例性实施例中，还提供了一种计算机程序产品，该计算机程序产品包括计算机指令，该计算机指令存储在计算机可读存储介质中。计算机设备的处理器从计算机可读存储介质读取该计算机指令，处理器从计算机可读存储介质读取并执行该计算机指令，以实现上述各方法实施例提供的用于编码单元的三叉树划分处理方法。在示例性实施例中，还提供了一种计算机可读存储介质，该计算机可读存储介质中存储有计算机程序，计算机程序由处理器加载并执行以实现上述各方法实施例提供的用于编码单元的三叉树划分处理方法。本领域普通技术人员可以理解实现上述实施例的全部或部分步骤可以通过硬件来完成，也可以通过程序来指令相关的硬件完成，所述的程序可以存储于一种计算机可读存储介质中，上述提到的存储介质可以是只读存储器，磁盘或光盘等。本领域技术人员应该可以意识到，在上述一个或多个示例中，本申请实施例所描述的功能可以用硬件、软件、固件或它们的任意组合来实现。当使用软件实现时，可以将这些功能存储在计算机可读介质中或者作为计算机可读介质上的一个或多个指令或代码进行传输。计算机可读介质包括计算机存储介质和通信介质，其中通信介质包括便于从一个地方向另一个地方传送计算机程序的任何介质。存储介质可以是通用或专用计算机能够存取的任何可用介质。以上所述仅为本申请的可选实施例，并不用以限制本申请，凡在本申请的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本申请的保护范围之内。
