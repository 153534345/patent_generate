标题title
基于多端口的隧道流量混淆方法及装置
摘要abst
本申请涉及一种基于多端口的隧道流量混淆方法及装置，该方法包括按照预设逻辑要求生成服务端的端口队列，且端口队列包括活跃窗口；创建隧道；在隧道的数量为一个时，将一个隧道的流量分配在客户端与服务端之间的若干个连接上，若干个连接对应活跃窗口中的不同活跃端口，且每个连接的时长满足预设时限要求；在隧道的数量为多个时，将多个隧道的流量共享至同一批活跃端口中，复用所有活跃端口；对所有活跃端口进行侦听。对于一个隧道将其流量分配至客户端与服务端之间的多个连接中，每个连接的服务端侦听的是不同活跃端口；多个隧道流量被分配到同一批活跃端口上，对黑客造成混淆，并结合隧道自有的加密算法，能够保证隧道中的数据信息安全无泄漏。
权利要求书clms
1.一种基于多端口的隧道流量混淆方法，其特征在于，包括如下步骤：按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；创建隧道；在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；对所有所述活跃端口进行侦听。2.根据权利要求1所述的基于多端口的隧道流量混淆方法，其特征在于，按照预设逻辑要求生成服务端的端口队列，包括：预设逻辑要求；根据所述逻辑要求通过伪随机数生成所述端口队列；其中，所述逻辑要求包括端口取值范围要求、端口唯一性要求、活跃窗口调整限度要求和端口下发要求。3.根据权利要求2所述的基于多端口的隧道流量混淆方法，其特征在于，所述按照预设逻辑要求生成服务端的端口队列之后，还包括：对所述活跃窗口初始化，并同时打开所述活跃窗口中的所有活跃端口。4.根据权利要求1所述的基于多端口的隧道流量混淆方法，其特征在于，所述创建隧道，包括：开启所述活跃端口，并判断所述活跃端口是否被占用；是，则开启下一所述活跃端口，并继续判断是否被占用；否，则利用所述活跃端口创建隧道。5.根据权利要求1所述的基于多端口的隧道流量混淆方法，其特征在于，所述在所述隧道的数量为一个时，将一个所述隧道的流量分散在客户端与所述服务端之间的若干个连接上，包括：通过所述活跃端口接收来自所述客户端的连接请求，并根据所述连接请求建立所述连接；将一个所述隧道的流量分散在若干个所述连接上，且在所述连接的时长满足所述预设时限要求后，所述活跃窗口向右移动。6.根据权利要求5所述的基于多端口的隧道流量混淆方法，其特征在于，在所述活跃窗口向右移动时，所述活跃窗口中最左侧的活跃端口关闭，与所述活跃窗口最右侧相邻的端口被激活。7.根据权利要求1-6任一项所述的基于多端口的隧道流量混淆方法，其特征在于，将一个所述隧道的流量分散在若干个所述连接上之后，还包括：预设所述服务端的资源占用规则；判断所述连接的数量是否符合所述资源占用规则；在所述连接的数量大于所述资源占用规则时，将所述活跃窗口的大小下调；在所述连接的数量小于所述资源占用规则时，将所述活跃窗口的大小上调。8.一种基于多端口的隧道流量混淆装置，其特征在于，包括：端口队列生成模块，被配置为按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；隧道创建模块，被配置为创建隧道；单个隧道流量分配模块，被配置为在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；多个隧道流量分配模块，被配置为在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；侦听模块，被配置为对所有所述活跃端口进行侦听。9.一种控制系统，其特征在于，包括：处理器；用于存储处理器可执行指令的存储器；其中，所述处理器被配置为执行所述可执行指令时实现权利要求1至7任一项所述的基于多端口的隧道流量混淆方法。10.一种非易失性计算机可读存储介质，其上存储有计算机程序指令，所述计算机程序指令被处理器执行时实现权利要求1至7任一项所述的基于多端口的隧道流量混淆方法。
说明书desc
技术领域本公开涉及隧道数据安全技术领域，尤其涉及一种基于多端口的隧道流量混淆方法及装置。背景技术SD-WAN的隧道业务主要是基于一个监听隧道来实现多个连接的，由于隧道完全暴露在互联网上，因此通常都会使用加密算法保护隧道内数据的安全。随着大数据与AI技术的日益精进，即使是加密情况下，隧道流量依旧存在被预测与分析的可能，至少流量的起停时间与流量信息是无法被加密算法所隐藏的。发明内容有鉴于此，本申请提出一种基于多端口的隧道流量混淆方法，以解决上述问题。本申请一方面，提出一种基于多端口的隧道流量混淆方法，包括如下步骤：按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；创建隧道；在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；对所有所述活跃端口进行侦听。作为本申请的一可选实施方案，可选地，按照预设逻辑要求生成服务端的端口队列，包括：预设逻辑要求；根据所述逻辑要求通过伪随机数生成所述端口队列；其中，所述逻辑要求包括端口取值范围要求、端口唯一性要求、活跃窗口调整限度要求和端口下发要求。作为本申请的一可选实施方案，可选地，所述按照预设逻辑要求生成服务端的端口队列之后，还包括：对所述活跃窗口初始化，并同时打开所述活跃窗口中的所有活跃端口。作为本申请的一可选实施方案，可选地，所述创建隧道，包括：开启所述活跃端口，并判断所述活跃端口是否被占用；是，则开启下一所述活跃端口，并继续判断是否被占用；否，则利用所述活跃端口创建隧道。作为本申请的一可选实施方案，可选地，所述在所述隧道的数量为一个时，将一个所述隧道的流量分散在客户端与所述服务端之间的若干个连接上，包括：通过所述活跃端口接收来自所述客户端的连接请求，并根据所述连接请求建立所述连接；将一个所述隧道的流量分散在若干个所述连接上，且在所述连接的时长满足所述预设时限要求后，所述活跃窗口向右移动。作为本申请的一可选实施方案，可选地，在所述活跃窗口向右移动时，所述活跃窗口中最左侧的活跃端口关闭，与所述活跃窗口最右侧相邻的端口被激活。作为本申请的一可选实施方案，可选地，将一个所述隧道的流量分散在若干个所述连接上之后，还包括：预设所述服务端的资源占用规则；判断所述连接的数量是否符合所述资源占用规则；在所述连接的数量大于所述资源占用规则时，将所述活跃窗口的大小下调；在所述连接的数量小于所述资源占用规则时，将所述活跃窗口的大小上调。本申请另一方面，提供一种基于多端口的隧道流量混淆装置，包括：端口队列生成模块，被配置为按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；隧道创建模块，被配置为创建隧道；单个隧道流量分配模块，被配置为在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；多个隧道流量分配模块，被配置为在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；侦听模块，被配置为对所有所述活跃端口进行侦听。本申请另一方面，提供一种控制系统，包括：处理器；用于存储处理器可执行指令的存储器；其中，所述处理器被配置为执行所述可执行指令时实现上述任一项所述的基于多端口的隧道流量混淆方法。本申请再一方面，提供一种非易失性计算机可读存储介质，其上存储有计算机程序指令，所述计算机程序指令被处理器执行时实现上述任一项所述的基于多端口的隧道流量混淆方法。本发明的技术效果：本申请对于一个隧道而言，将其流量分配至客户端与服务端之间的多个连接中，且每个连接的服务端侦听的是不同的活跃端口；对于多个隧道而言，多个隧道流量被分配到同一批活跃端口上，对黑客造成混淆，并结合隧道自有的加密算法，能够保证隧道中的数据信息安全无泄漏。不仅如此，本申请还限制每个连接的具体时长需满足预设时间要求，由此实现随着时间的推移，端口定期变化的目的，从而进一步对隧道流量进行混淆。根据下面参考附图对示例性实施例的详细说明，本公开的其它特征及方面将变得清楚。附图说明包含在说明书中并且构成说明书的一部分的附图与说明书一起示出了本公开的示例性实施例、特征和方面，并且用于解释本公开的原理。图1示出为本发明的基于多端口的隧道流量混淆方法流程示意图；图2示出为本发明的基于多端口的隧道流量混淆方法中端口队列示意图；图3示出为本发明的基于多端口的隧道流量混淆方法中活跃窗口大小不变时的移动结果示意图；图4示出为本发明的基于多端口的隧道流量混淆方法中活跃窗口大小上调时的移动结果示意图；图5示出为本发明的基于多端口的隧道流量混淆方法中活跃窗口大小下调的移动结果示意图；图6示出为本发明的基于多端口的隧道流量混淆方法中多隧道的连接示意图。具体实施方式以下将参考附图详细说明本公开的各种示例性实施例、特征和方面。附图中相同的附图标记表示功能相同或相似的元件。尽管在附图中示出了实施例的各种方面，但是除非特别指出，不必按比例绘制附图。在这里专用的词“示例性”意为“用作例子、实施例或说明性”。这里作为“示例性”所说明的任何实施例不必解释为优于或好于其它实施例。另外，为了更好的说明本公开，在下文的具体实施方式中给出了众多的具体细节。本领域技术人员应当理解，没有某些具体细节，本公开同样可以实施。在一些实例中，对于本领域技术人员熟知的方法、手段、元件和电路未作详细描述，以便于凸显本公开的主旨。实施例1如图1所示，本申请第一方面，提供一种基于多端口的隧道流量混淆方法，包括如下步骤：S100、按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；S200、创建隧道；S300、在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；S300’、在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；S400、对所有所述活跃端口进行侦听。本申请中，对于一个隧道而言，将其流量分配至客户端与服务端之间的多个连接中，且每个连接的服务端侦听的是不同的活跃端口；对于多个隧道而言，多个隧道流量被分配到同一批活跃端口上，对黑客造成混淆，并结合隧道自有的加密算法，能够保证隧道中的数据信息安全无泄漏。不仅如此，本申请还限制每个连接的具体时长需满足预设时间要求，由此实现随着时间的推移，端口定期变化的目的，从而进一步对隧道流量进行混淆。具体而言，通过步骤S100、按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口。作为本申请的一可选实施方案，可选地，按照预设逻辑要求生成服务端的端口队列，包括：预设逻辑要求；根据所述逻辑要求通过伪随机数生成所述端口队列；其中，所述逻辑要求包括端口取值范围要求、端口唯一性要求、活跃窗口调整限度要求和端口下发要求。需要说明的是，本申请中的端口队列，使用集中化管理与分发机制，也即在服务端通过伪随机数生成并分发至所有客户端，其中端口队列需要满足如下逻辑要求，包括端口取值范围要求、端口唯一性要求、活跃窗口调整限度要求和端口下发要求。具体的，在确定端口取值范围要求时，基于不与常用端口相冲突为原则，本申请对于端口取值范围优选9000-65000，这是一个不会与常用端口冲突的区间。不仅如此，在生成端口队列时，还需要保证活跃窗口内的端口唯一性，例如生成的端口号在之前5N个端口号中出现过，则舍弃，5N为五个默认窗口大小的量。同时活跃窗口的大小上调也需要明确上限，优选5N。需要特别说明的是，生成端口队列后应通过系统的纳管机制定期下发至所有客户端，一次下发3N个，以保证有足够的缓冲，当客户端队列中端口数不足2N时，则需要及时获取后续队列。作为本申请的一可选实施方案，可选地，所述按照预设逻辑要求生成服务端的端口队列之后，还包括：对所述活跃窗口初始化，并同时打开所述活跃窗口中的所有活跃端口。需要说明的是，服务端初始化时会有一个默认大小为N的活跃窗口，即活跃窗口中存在N个活跃端口，活跃窗口位于预先生成的端口队列的最左侧，N个活跃端口被同时打开。随后，通过步骤S200、创建隧道。作为本申请的一可选实施方案，可选地，所述创建隧道，包括：开启所述活跃端口，并判断所述活跃端口是否被占用；是，则开启下一所述活跃端口，并继续判断是否被占用；否，则利用所述活跃端口创建隧道。尽管原则上用于创建隧道的所有端口都应被保留，不会被用于其他进程，但是为了确保端口冲突场景出现时能够被解决，本申请在服务端开启活跃端口时判断其是否被其他进程占用，如果被占用，则开启与之相邻的下一个端口是否被占用，以此类推。例如，当服务端开启某个端口X时，发现已被其他进程占用，则开启X+1号端口作为备选，若X+1号端口也被占用，则以此类推开启X+2号端口，直至判断出不被占用的端口。同样地，客户端侧也有同样的逻辑，也即当试图连接端口X无法创建隧道时，则自动试图依次连接X+1、X+2。进一步的，通过步骤S300、在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求。也即，将一个隧道的流量分散在多个TCP/UDP连接上，并且每个连接的服务端侦听的是不同的端口，每个连接都不是永久的，会存在一个有限的预设时长，例如60s，随后被另一个连接所替代。作为本申请的一可选实施方案，可选地，所述在所述隧道的数量为一个时，将一个所述隧道的流量分散在客户端与所述服务端之间的若干个连接上，包括：通过所述活跃端口接收来自所述客户端的连接请求，并根据所述连接请求建立所述连接；将一个所述隧道的流量分散在若干个所述连接上，且在所述连接的时长满足所述预设时限要求后，所述活跃窗口向右移动。如图2所示，示出为一个服务器端的端口队列，位于活跃窗口中的端口处于活跃状态，可接收来自客户端的连接并建立连接，也即端口38755、10084、19941、42854、48762、23735、11501、9427均为活跃端口，23105、61428、33680、15114端口的状态为关闭，51300、41085、26891、36047端口的状态为待命。在服务端只与一个客户端建立连接时，一个隧道的流量分散在客户端与服务端之间的多个连接上，且每个连接的服务端侦听的是不同的活跃端口，也即一个客户端与服务端连接时，一个隧道的流量分别分配在端口38755、10084、19941、42854、48762、23735、11501、9427与客户端之间的连接上。由于每个连接都不是永久的，存在一个有限时长，因此随着时间的推移，活跃窗口逐渐向右移动。作为本申请的一可选实施方案，可选地，在所述活跃窗口向右移动时，所述活跃窗口中最左侧的活跃端口关闭，与所述活跃窗口最右侧相邻的端口被激活。也即，随着时间的推移，活跃窗口逐渐向右移动，每向右移动一个，活跃窗口最左侧的端口将被关闭，紧贴活跃窗口右侧的端口被陆续激活，本申请中的端口队列是无限长的，且每个端口都是随机的。如客户端与38755端口间的连接，在存在60s后，被另一个连接所替代，即38755端口关闭，51300端口被激活。作为本申请的一可选实施方案，可选地，将一个所述隧道的流量分散在若干个所述连接上之后，还包括：预设所述服务端的资源占用规则；判断所述连接的数量是否符合所述资源占用规则；在所述连接的数量大于所述资源占用规则时，将所述活跃窗口的大小下调；在所述连接的数量小于所述资源占用规则时，将所述活跃窗口的大小上调。此处，需要说明的是，对于一个隧道而言，同时使用的端口数越多，性能就越强，但是占用服务端资源也相对越多，当隧道占用的端口数过多时，可以适当地将活跃窗口的大小下调，反之，当隧道占用的端口数过少时，可以适当地将活跃窗口的大小上调，活跃窗口大小调整的时机与活跃窗口右移为同一时间。具体的，当活跃窗口欲变大时，于其右移时窗口右侧向右扩展，左侧保持不动，当活跃窗口欲变小时，于其右移时窗口左侧向右缩小，右侧保持不动。如图3-5所示，分别示出为正常情况下的活跃窗口移动、大小上调情况下的活跃窗口移动和大小下调时的活跃窗口移动，由此可知，对于正常情况下的活跃窗口移动，移动前的活跃端口分别为端口38755、10084、19941、42854、48762、23735、11501、9427，移动后的活跃端口分别为10084、19941、42854、48762、23735、11501、9427、51300；对于需要将活跃窗口大小上调时的活跃窗口移动，移动前的活跃端口分别为38755、10084、19941、42854、48762、23735、11501、9427，移动时活跃窗口最左侧的端口位置保持不动，最右侧的端口向右移动一格，也即移动后的活跃端口分别为38755、10084、19941、42854、48762、23735、11501、9427、51300；对于需要将活跃窗口大小下调时的活跃窗口移动，移动前的活跃端口分别为38755、10084、19941、42854、48762、23735、11501、9427，移动时活跃窗口中最右侧的活跃端口保持不动，最左侧的活跃端口向右移动一格，也即移动后的活跃端口分别为10084、19941、42854、48762、23735、11501、9427，由此实现对于活跃窗口大小调整的目的。S300’、在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；S400、对所有所述活跃端口进行侦听。需要特别说明的是，对于同一个隧道，每个活跃的端口只被使用一次，有N个端口被打开时，就有N个连接被使用；对于不同的隧道而言，本申请中的端口被复用，所有的客户端共享同一个活跃窗口例的所有活跃端口。如图6所示，示出为多个隧道情况下的连接情况，客户端1和客户端2共享服务端同一个活跃窗口中的所有活跃端口，也即客户端1和客户端2均与活跃端口38755、10084、19941、42854、48762、23735、11501、9427连接。由此可知，本申请将一个隧道流量随机分配到多个不同侦听端口的连接，多个隧道流量被分配到同一批侦听端口上，对黑客造成混淆，结合隧道自有的加密算法，可保证信息安全无泄漏。综上所述，本申请将一个隧道的流量分散在多个TCP/UDP连接上，并且每个连接的服务端侦听的是不同的端口，每个连接都不是永久的，只会存在有限时长，随后被另一个连接所替代。对于同一隧道，每个活跃端口只被使用一次，有N个端口被打开就有N个连接被使用，对于不同的隧道，端口被复用，所有的客户端共享同一个活跃窗口里的所有活跃端口。由此实现对于隧道流量的混淆，保证数据安全。本领域技术人员可以理解，实现上述实施例方法中的全部或部分流程，是可以通过计算机程序来指令相关的硬件来完成的，程序可存储于一计算机可读取存储介质中，该程序在执行时，可包括如上述各控制方法的实施例的流程。其中，存储介质可为磁碟、光盘、只读存储记忆体、随机存储记忆体、快闪存储器、硬盘或固态硬盘（Solid-StateDrive，SSD)等；存储介质还可以包括上述种类的存储器的组合。实施例2更进一步地，本申请另一方面，提供一种基于多端口的隧道流量混淆装置，包括：端口队列生成模块，被配置为按照预设逻辑要求生成服务端的端口队列，且所述端口队列包括活跃窗口；隧道创建模块，被配置为创建隧道；单个隧道流量分配模块，被配置为在所述隧道的数量为一个时，将一个所述隧道的流量分配在客户端与所述服务端之间的若干个连接上，若干个所述连接对应所述活跃窗口中的不同活跃端口，且每个所述连接的时长满足预设时限要求；多个隧道流量分配模块，被配置为在所述隧道的数量为多个时，将多个所述隧道的流量共享至同一批所述活跃端口中，复用所有所述活跃端口；侦听模块，被配置为对所有所述活跃端口进行侦听。实施例3本申请另一方面，提供一种控制系统，包括：处理器；用于存储处理器可执行指令的存储器；其中，所述处理器被配置为执行所述可执行指令时实现上述任一项所述的基于多端口的隧道流量混淆方法。本公开实施例来控制系统包括处理器以及用于存储处理器可执行指令的存储器。其中，处理器被配置为执行可执行指令时实现前面任一所述的基于多端口的隧道流量混淆方法。此处，应当指出的是，处理器的个数可以为一个或多个。同时，在本公开实施例的控制系统中，还可以包括输入装置和输出装置。其中，处理器、存储器、输入装置和输出装置之间可以通过总线连接，也可以通过其他方式连接，此处不进行具体限定。存储器作为一计算机可读存储介质，可用于存储软件程序、计算机可执行程序和各种模块，如：本公开实施例的基于多端口的隧道流量混淆方法所对应的程序或模块。处理器通过运行存储在存储器中的软件程序或模块，从而执行控制系统的各种功能应用及数据处理。输入装置可用于接收输入的数字或信号。其中，信号可以为产生与设备/终端/服务器的用户设置以及功能控制有关的键信号。输出装置可以包括显示屏等显示设备。实施例4本申请再一方面，提供一种非易失性计算机可读存储介质，其上存储有计算机程序指令，所述计算机程序指令被处理器执行时实现上述任一项所述的基于多端口的隧道流量混淆方法。以上已经描述了本公开的各实施例，上述说明是示例性的，并非穷尽性的，并且也不限于所披露的各实施例。在不偏离所说明的各实施例的范围和精神的情况下，对于本技术领域的普通技术人员来说许多修改和变更都是显而易见的。本文中所用术语的选择，旨在最好地解释各实施例的原理、实际应用或对市场中的技术的技术改进，或者使本技术领域的其它普通技术人员能理解本文披露的各实施例。
