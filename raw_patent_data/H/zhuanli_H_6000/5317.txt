标题title
一种vTPM2.0的中国商用密码算法扩展方法
摘要abst
一种vTPM2.0的中国商用密码算法扩展方法，先启用libtpms函数库中预留的SM3、SM4算法标识符；增加国密算法支持模块SM3和SM4部分，向函数库libtpms中增加SM3和SM4算法注册结构体和算法运算结果编码、解码函数的定义；再对tpm2‑tss组件进行改造，向非对称加密模块中的ECC算法选择器增加SM2算法支持，向哈希运算模块增加SM3算法选项和控制流，向对称加密模块增加SM4算法的选项和控制流；最后对tpm2‑tools组件进行改造，向ECC算法选择器和对称加密算法选择器中添加对SM2和SM4算法的调用。本发明有效弥补了vTPM2.0暂不支持国密SM2、SM3、SM4算法的问题，保障了虚拟机中tpm命令能够通过vTPM调用国密算法进行密码运算，并避免了因openssl不同版本的国密算法头文件不稳定而带来的冲突问题。
权利要求书clms
1.一种vTPM2.0的中国商用密码算法扩展方法，其特征在于，包括以下步骤：步骤1：启用libtpms函数库中预留的SM3和SM4算法标识符，为添加国密算法支持模块后的正常使用提供支持；步骤2：对于SM3算法，增加国密算法支持模块SM3部分，该部分向函数库libtpms中增加SM3算法注册结构体和SM3算法运算结果编码、解码函数的定义；步骤3：对于SM4算法，增加国密算法支持模块SM4部分，该部分向函数库libtpms中增加SM4算法注册结构体和SM4算法运算结果编码函数的定义、解码函数的声明；步骤4：对TPM2.0软件堆栈的tpm2-tss组件进行改造，向非对称加密模块中的ECC算法选择器增加SM2算法支持；向哈希运算模块增加SM3算法的选项和控制流，以调用EVP_sm3函数接口；向对称加密模块增加SM4算法的选项和控制流；步骤5：对TPM2.0软件堆栈的tpm2-tools组件进行改造，向ECC算法选择器和对称加密算法选择器中分别添加对SM2和SM4算法的调用。2.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤1具体为：将ALG_SM3_256、ALG_SM4的值修改为ALG_YES。3.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤2具体为：步骤2.1：向哈希算法子模块中注册SM3算法数据结构，该结构包括SM3初始化函数、更新函数、数据回收函数、内存拷贝函数和算法运算单位长度定义、输出结果长度定义、算法结构体长度定义、算法标识符；步骤2.2：增加对SM3算法运算结果进行编码和解码的函数，其中编码函数为tpmHashStateSM3_256_Marshal，用于将哈希运算结果编码为TPM命令响应流；解码函数为tpmHashStateSM3_256_UnMarshal，用于将TPM命令响应流解码为哈希运算结果。4.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤3具体为：步骤3.1：向对称加密算法选择器中注册SM4算法数据结构，包括SM4加密函数、解密函数、加密密钥设置函数、解密密钥设置函数、数据回收函数，基于算法选择器的设计，SM4算法数据结构以宏定义的形式定义；步骤3.2：增加对SM4算法处理结果进行编码的函数定义和解码函数的声明，其中编码函数为TPMI_SM4_KEY_BITS_Marshal，用于将SM4算法处理结果编码为TPM命令响应流；解码函数为TPMI_SM4_KEY_BITS_UnMarshal，用于将TPM命令响应流解码为SM4处理结果。5.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤4中，改造tpm2-tss组件实现SM2算法的支持如下：设置SM2算法加密标识，向iesys_cryptossl_get_ecdh_point函数和ossl_ecc_pub_from_tpm函数中添加SM2算法控制流选项，以设置curveId为SM2算法的数据结构；向get_ecc_tpm2b_public_from_evp函数添加SM2算法控制流选项，以设置tpmCurveId为SM2算法标识；向ifapi_calculate_pcr_digest函数添加SM2算法控制流选项，以设置pcr_digest_hash_alg为SM2签名算法的哈希算法类型。6.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤4中，改造tpm2-tss组件实现SM3算法的支持如下：实现序列化，向哈希算法序列化函数中的CHECK_IN_LIST检查器添加SM3算法标识符，向哈希算法参数序列化的函数添加SM3算法控制流，以设置算法长度和序列化数据变量；实现反序列化，向哈希参数反序列化对象的函数中添加SM3算法控制流，设置哈希长度变量为TPM2_SM3_256_DIGEST_SIZE，向哈希算法反序列化对象的函数中SUBTYPE_FILTER过滤器添加SM3算法标识符；设置哈希数据控制流调用加密接口，对get_ossl_hash_md函数添加SM3算法的控制流选项，以调用EVP_sm3接口。7.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤4中，改造tpm2-tss组件实现SM4算法的支持如下：实现序列化，向对称加密算法序列化对象的函数中CHECK_IN_LIST检查器添加SM4算法标识符，向对称加密算法密钥参数序列化的函数中添加SM4算法控制流选项，对SM4算法的密钥对象进行序列化；实现反序列化，向对称加密反序列化函数、反序列化对象函数和反序列化算法模式函数中SUBTYPE_FILTER过滤器添加SM4算法标识符。8.根据权利要求1所述的vTPM2.0的中国商用密码算法扩展方法，其特征在于，所述步骤5具体为：步骤5.1：对tpm2-tools组件进行修改，向密钥设置函数set_key_algorithm中ECC算法和对称加密算法控制流选项inPublic指针的curveID变量分别设置SM2和SM4算法参数；步骤5.2：对tpm2-tools组件进行修改，向算法启动函数setup_alg中ECC算法和对称加密算法控制流选项ctx结构体的curveID变量分别设置SM2和SM4算法参数。
说明书desc
技术领域本发明涉及虚拟化和可信计算技术领域，具体为一种vTPM2.0的中国商用密码算法扩展方法。背景技术可信计算技术以硬件TPM作为可信基础，通过度量、存储和报告系统中关键组件的完整性状态，保证系统中的关键组件不被破坏。但硬件TPM无法同时为多台虚拟机提供可信支撑，随着虚拟化技术的发展，业界提出了虚拟可信计算技术并已经具备了成熟的实现方案，通过虚拟可信计算技术可以为每台虚拟机分配一个vTPM，为多台虚拟机提供可信支撑。libtpms和swtpm：libtpms是集成了TPM功能的函数库，swtpm是基于libtpms的TPM软件模拟器，通过这两个组件能够构建基于用户空间字符设备方式的虚拟机可信环境。目前Stefan Berger开源的libtpms函数库中实现了SM2算法，预留了SM3和SM4算法的标识符及部分数据结构和处理函数，但是没有启用SM3和SM4算法，缺少关键的密码运算函数和编码解码处理函数。TPM2.0软件堆栈：Intel的TPM2.0软件堆栈由tpm2-tss、tpm2-abrmd和tpm2-tools三个项目组成。tpm2-tss允许从操作系统和其他程序访问TPM，tpm2-abrmd是实现TPM2.0的访问代理和资源管理器规范的系统守护进程，用于管理与TPM的多进程同步；tpm2-tools提供从shell环境访问TPM 2.0设备的底层和聚合命令行工具功能。目前开源的TPM2.0软件堆栈还不支持调用国密SM2、SM3、SM4算法，缺少对应算法的函数控制流选项和算法参数设置等。TCG在TPM2.0的标准中，指出已经预留了密码算法扩展接口，以备其他各种密码算法的嵌入。尽管TPM2.0标准给出了中国商用密码算法SM2、SM3、SM4的算法标识，但是没有完备的密码算法实现，也没有提供算法参数、返回结果的编码、解码功能接口。而随着国家网络空间安全形势日趋紧张，为了降低使用非我国自主研发的密码算法所带来的法律风险，满足等级保护2.0要求，研究虚拟可信计算平台模块对国密算法的支持，弥补当前vTPM2.0不支持国密SM2、SM3、SM4算法的问题极为重要。发明内容针对上述问题，本发明的目的在于提供一种vTPM2.0的中国商用密码算法扩展方法，为vTPM2.0模拟函数库libtpms添加对SM3、SM4算法的支持，并对TPM2.0软件堆栈进行改造，添加对SM2、SM3、SM4算法的支持和调用，实现了vTPM2.0对国密算法的支持，在虚拟机中可以通过TPM2.0软件堆栈调用vTPM2.0使用国密算法进行密码运算。技术方案如下：一种vTPM2.0的中国商用密码算法扩展方法，包括以下步骤：步骤1：启用libtpms函数库中预留的SM3和SM4算法标识符，为添加国密算法支持模块后的正常使用提供支持；步骤2：对于SM3算法，增加国密算法支持模块SM3部分，该部分向函数库libtpms中增加SM3算法注册结构体和SM3算法运算结果编码、解码函数的定义；步骤3：对于SM4算法，增加国密算法支持模块SM4部分，该部分向函数库libtpms中增加SM4算法注册结构体和SM4算法运算结果编码函数的定义、解码函数的声明；步骤4：对TPM2.0软件堆栈的tpm2-tss组件进行改造，向非对称加密模块中的ECC算法选择器增加SM2算法支持；向哈希运算模块增加SM3算法的选项和控制流，以调用EVP_sm3函数接口；向对称加密模块增加SM4算法的选项和控制流；步骤5：对TPM2.0软件堆栈的tpm2-tools组件进行改造，向ECC算法选择器和对称加密算法选择器中分别添加对SM2和SM4算法的调用。进一步的，所述步骤1具体为：将ALG_SM3_256、ALG_SM4的值修改为ALG_YES。更进一步的，所述步骤2具体为：步骤2.1：向哈希算法子模块中注册SM3算法数据结构，该结构包括SM3初始化函数、更新函数、数据回收函数、内存拷贝函数和算法运算单位长度定义、输出结果长度定义、算法结构体长度定义、算法标识符；步骤2.2：增加对SM3算法运算结果进行编码和解码的函数，其中编码函数为tpmHashStateSM3_256_Marshal，用于将哈希运算结果编码为TPM命令响应流；解码函数为tpmHashStateSM3_256_UnMarshal，用于将TPM命令响应流解码为哈希运算结果。更进一步的，所述步骤3具体为：步骤3.1：向对称加密算法选择器中注册SM4算法数据结构，包括SM4加密函数、解密函数、加密密钥设置函数、解密密钥设置函数、数据回收函数，基于算法选择器的设计，SM4算法数据结构以宏定义的形式定义；步骤3.2：增加对SM4算法处理结果进行编码的函数定义和解码函数的声明，其中编码函数为TPMI_SM4_KEY_BITS_Marshal，用于将SM4算法处理结果编码为TPM命令响应流；解码函数为TPMI_SM4_KEY_BITS_UnMarshal，用于将TPM命令响应流解码为SM4处理结果。更进一步的，所述步骤4中，改造tpm2-tss组件实现SM2算法的支持如下：设置SM2算法加密标识，向iesys_cryptossl_get_ecdh_point函数和ossl_ecc_pub_from_tpm函数中添加SM2算法控制流选项，以设置curveId为SM2算法的数据结构；向get_ecc_tpm2b_public_from_evp函数添加SM2算法控制流选项，以设置tpmCurveId为SM2算法标识；向ifapi_calculate_pcr_digest函数添加SM2算法控制流选项，以设置pcr_digest_hash_alg为SM2签名算法的哈希算法类型。更进一步的，所述步骤4中，改造tpm2-tss组件实现SM3算法的支持如下：实现序列化，向哈希算法序列化函数中的CHECK_IN_LIST检查器添加SM3算法标识符，向哈希算法参数序列化的函数添加SM3算法控制流，以设置算法长度和序列化数据变量；实现反序列化，向哈希参数反序列化对象的函数中添加SM3算法控制流，设置哈希长度变量为TPM2_SM3_256_DIGEST_SIZE，向哈希算法反序列化对象的函数中SUBTYPE_FILTER过滤器添加SM3算法标识符；设置哈希数据控制流调用加密接口，对get_ossl_hash_md函数添加SM3算法的控制流选项，以调用EVP_sm3接口。更进一步的，所述步骤4中，改造tpm2-tss组件实现SM4算法的支持如下：实现序列化，向对称加密算法序列化对象的函数中CHECK_IN_LIST检查器添加SM4算法标识符，向对称加密算法密钥参数序列化的函数中添加SM4算法控制流选项，对SM4算法的密钥对象进行序列化；实现反序列化，向对称加密反序列化函数、反序列化对象函数和反序列化算法模式函数中SUBTYPE_FILTER过滤器添加SM4算法标识符。更进一步的，所述步骤5具体为：步骤5.1：对tpm2-tools组件进行修改，向密钥设置函数set_key_algorithm中ECC算法和对称加密算法控制流选项inPublic指针的curveID变量分别设置SM2和SM4算法参数；步骤5.2：对tpm2-tools组件进行修改，向算法启动函数setup_alg中ECC算法和对称加密算法控制流选项ctx结构体的curveID变量分别设置SM2和SM4算法参数。本发明的有益效果是：本发明针对当前vTPM2.0不支持国密SM2、SM3、SM4算法的问题，提出一种vTPM2.0的中国商用密码算法扩展方法，对libtpms函数库支持的密码算法进行扩展，并改造TPM2.0软件堆栈，使得在虚拟机中能够通过TPM2.0软件堆栈调用vTPM2.0使用SM2、SM3、SM4三种国密算法进行密码运算，同时本发明通过libtpms函数库自定义SM3、SM4加密算法所需初始化等函数接口，有效避免了因openssl不同版本的国密算法头文件不稳定而带来的冲突问题。附图说明图1为本发明中vTPM2.0中国商用密码算法扩展原理图。图2为本发明中vTPM2.0扩展SM2算法的工作原理图。图3为本发明中vTPM2.0扩展SM3算法的工作原理图。图4为本发明中vTPM2.0扩展SM4算法的工作原理图。具体实施方式下面结合附图和具体实施例对本发明做进一步详细说明。附图1给出了本发明中vTPM2.0中国商用密码算法扩展原理图，图中双框线部分为本发明需要添加的关键内容，包括对libtpms函数库增加国密算法支持模块和改造TPM2.0软件堆栈。一种vTPM2.0的中国商用密码算法扩展方法，包括以下步骤：步骤1：启用libtpms函数库中预留的SM3、SM4算法标识符，为添加国密算法支持模块后的正常使用提供支持。具体为将ALG_SM3_256、ALG_SM4的值修改为ALG_YES。步骤2：增加国密算法支持模块SM3部分，该部分主要向函数库libtpms中增加了SM3算法注册结构体SM3_256_Def和SM3算法运算结果编码、解码函数的定义。具体如下：步骤2.1：向哈希算法子模块中注册SM3算法数据结构，该结构包括SM3初始化函数、SM3更新函数、SM3终止函数、内存拷贝函数和算法运算单位大小、输出结果大小、算法结构体大小、算法标识符。SM3算法数据结构实现对TPM命令流中的消息进行哈希运算，算法结构体如下：HASH_DEF SM3_256_Def{.method＝HASH_METHODS{.start＝sm3_init,.data＝sm3_update,.end＝sm3_final,.copy＝memcpy,}.blockSize＝SM3_256_BLOCK_SIZE，.digestSize＝SM3_256_DIGEST_SIZE，.contextSize＝sizeof，.hashAlg＝TPM_ALG_SM3_256,}步骤2.2：增加对SM3算法运算结果进行编码和解码的函数，其中编码函数为tpmHashStateSM3_256_Marshal，用于将哈希运算结果编码为TPM命令响应流；解码函数为tpmHashStateSM3_256_UnMarshal，用于将TPM命令响应流解码为哈希运算结果。步骤3：增加国密算法支持模块SM4部分，该部分主要向函数库libtpms中增加了SM4算法注册结构体和SM4算法运算结果编码函数的定义、解码函数的声明。具体如下：步骤3.1：向对称加密算法选择器中注册SM4算法数据结构，包括SM4加密函数、解密函数、加密密钥设置函数、解密密钥设置函数、数据清理函数，基于算法选择器的设计，SM4算法数据结构以宏定义的形式定义，如下：#define TpmCryptEncryptSM4 SM4_encrypt#define TpmCryptDecryptSM4 SM4_decrypt#define tpmKeyScheduleSM4 SM4_KEY#define TpmCryptFinalSM4 SM4_final#define TpmCryptSetEncryptKeySM4SM4_set_encrypt_key,)#define TpmCryptSetDecryptKeySM4SM4_set_decrypt_key,)步骤3.2：增加对SM4算法处理结果进行编码的函数定义和解码函数的声明，其中编码函数为TPMI_SM4_KEY_BITS_Marshal，用于将SM4算法处理结果编码为TPM命令响应流；解码函数为TPMI_SM4_KEY_BITS_UnMarshal，用于将TPM命令响应流解码为SM4处理结果。步骤4：改造TPM2.0软件堆栈。对TPM2.0软件堆栈的tpm2-tss组件进行改造，向非对称加密模块中的ECC算法选择器增加SM2算法支持；向哈希运算模块增加SM3算法的选项和控制流，以调用EVP_sm3函数接口；向对称加密模块增加SM4算法的选项和控制流，以调用EVP_sm4_ecb。对tpm2-tss进行修改，使得系统中的程序访问TPM时可以使用SM2、SM3、SM4算法，由于tpm2-tss项目本身具有SHA1等哈希算法、ECDSA等ecc类型算法和AES等对称加密算法的使用，因此只需要在项目中的涉及到对这三类算法进行调用的函数中添加对SM2、SM3、SM4算法的控制流选项。改造tpm2-tss组件实现SM2算法的支持如下：设置SM2算法加密标识，向iesys_cryptossl_get_ecdh_point函数和ossl_ecc_pub_from_tpm函数中添加SM2算法控制流选项，以设置curveId为SM2算法的数据结构；向get_ecc_tpm2b_public_from_evp函数添加SM2算法控制流选项，以设置tpmCurveId为SM2算法标识；向ifapi_calculate_pcr_digest函数添加SM2算法控制流选项，以设置pcr_digest_hash_alg为SM2签名算法的哈希算法类型。改造tpm2-tss组件实现SM3算法的支持如下：实现序列化，向哈希算法序列化函数中的CHECK_IN_LIST检查器添加SM3算法标识符，向哈希算法参数序列化的函数添加SM3算法控制流，以设置算法长度和序列化数据变量；实现反序列化，向哈希参数反序列化对象的函数中添加SM3算法控制流，设置哈希长度变量为TPM2_SM3_256_DIGEST_SIZE，向哈希算法反序列化对象的函数中SUBTYPE_FILTER过滤器添加SM3算法标识符；设置哈希数据控制流调用加密接口，对get_ossl_hash_md函数添加SM3算法的控制流选项，以调用EVP_sm3接口。改造tpm2-tss组件实现SM4算法的支持如下：实现序列化，向对称加密算法序列化对象的函数中CHECK_IN_LIST检查器添加SM4算法标识符，向对称加密算法密钥参数序列化的函数中添加SM4算法控制流选项，对SM4算法的密钥对象进行序列化；实现反序列化，向对称加密反序列化函数、反序列化对象函数和反序列化算法模式函数中SUBTYPE_FILTER过滤器添加SM4算法标识符。步骤5：对TPM2.0软件堆栈的tpm2-tools组件进行改造，向ECC算法选择器和对称加密算法选择器中分别添加对SM2和SM4算法的调用。具体为：步骤5.1：对tpm2-tools组件进行修改，向密钥设置函数set_key_algorithm中ECC算法和对称加密算法控制流选项inPublic指针的curveID变量分别设置SM2和SM4算法参数；步骤5.2：对tpm2-tools组件进行修改，向算法启动函数setup_alg中ECC算法和对称加密算法控制流选项ctx结构体的curveID变量分别设置SM2和SM4算法参数。附图2给出了本发明中vTPM2.0扩展SM2算法的工作原理图。具体执行流程如下：在虚拟机中下发使用TPM的SM2算法进行签名或签名验证的指令，首先通过tpm2-tools对该命令进行处理，由set_key_algorithm和setup_alg函数设置ECC算法接口使用SM2算法进行签名或签名验证，然后与tpm2-tss软件栈进行交互，由软件栈中的API组件接口与libtpms函数库进行交互。libtpms中的TPM功能模块识别TPM命令流，将命令发送给非对称加密算法子模块，非对称加密算法子模块提取具体的密码算法标识，将TPM命令流传递给ECC算法接口。ECC算法接口解析TPM命令流，提取得到签名框架SM2标识。对于签名操作，ECC算法签名函数调用SM2算法签名运算进行签名；对于签名验证操作，ECC算法签名验证函数调用SM2算法签名验证运算进行签名验证。SM2算法运算结果通过编码接口对签名值、签名框架类型进行编码，然后将编码结果返回给响应结果编码接口。响应结果编码接口将结果编码为TPM命令响应流，通过tpm_tis驱动返回至虚拟机中软件堆栈，由软件堆栈解析结果。附图3给出了本发明中vTPM2.0扩展SM3算法的工作原理图。具体执行流程如下：在虚拟机中下发使用TPM的SM3算法进行哈希运算的指令，首先通过tpm2-tools对该命令进行处理，提取当前哈希运算算法标识符为SM3算法，然后与tpm2-tss软件栈交互，由get_ossl_hash_md函数设置当前哈希运算控制流为SM3算法，并通过API组件接口与libtpms函数库进行交互。libtpms中的TPM功能模块识别TPM命令流，将命令发送给哈希运算子模块，提取具体的密码算法标识为SM3，检查是否支持SM3密码算法，如果当前libtpms不支持则生成错误响应TPM_RC_HASH，否则将TPM命令流传递给SM3散列算法接口。调用SM3算法结构体所定义的sm3_init、sm3_update、sm3_final函数对消息进行哈希运算，将运算结果传递给响应结果编码接口。响应结果编码接口将结果编码为TPM命令响应流，通过tpm_tis驱动返回至虚拟机中软件堆栈，由软件堆栈解析结果。附图4给出了本发明中vTPM2.0扩展SM4算法的工作原理图。具体执行流程如下：在虚拟机中，用户下发使用TPM的SM4算法进行加密或解密的指令，首先通过tpm2-tools对该命令进行处理，由set_key_algorithm函数设置对称加密算法接口使用SM4算法进行加密或解密，然后与tpm2-tss软件栈交互，由软件栈中的API组件接口与libtpms函数库进行交互。libtpms中的TPM功能模块识别TPM命令流，将命令发送给对称加密算法子模块，对称加密算法选择器SELECT根据密码算法标识符调用SM4算法对应的密钥设置功能。对于加密操作，调用sms4_set_encrypt_key设置加密密钥；对于解密操作，调用sms4_set_decrypt_key设置解密密钥。SELECT选择器将TPM命令流传递给SM4算法接口，根据TPM命令流中提取的消息内容调用国密算法支持模块的SM4部分进行加解密操作。对于加密操作，调用支持模块中的SM4_encrypt接口对消息进行加密；对于解密操作，调用支持模块中的SM4_decrypt接口对消息进行解密。并将消息运算结果传递给响应结果编码函接口。响应结果编码接口将结果编码为TPM命令响应流，通过tpm_tis驱动返回至虚拟机中软件堆栈，由软件堆栈解析结果。
