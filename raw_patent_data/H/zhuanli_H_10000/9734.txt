标题title
基于Docker的网络安全测试工具平台及构建方法
摘要abst
本发明公开了一种基于Docker的网络安全测试工具平台及构建方法，包括资源层模块，在资源层模块中设有安全测试计算机集群和工具镜像库；虚拟层模块，在虚拟层模块中设有Docker容器引擎和Kubernets模块；核心层模块，在核心层模块中设有工具资源管理模块、测试任务管控模块和测试数据管理模块；应用层模块，在应用层模块中设有用户认证模块、日志模块和工具选择模块。该平台扩展性好，重用性高、具有统一数据格式，且实现运行环境、实现方式、运行参数命令、外部调用接口以及具体功能用途等各异的安全测试工具的有机集成，可按需进行安全测试工具灵活调用，简化安全测试人员的操作，增强自动测试的能力，提升网络安全测试效率。
权利要求书clms
1.一种基于Docker的网络安全测试工具平台，其特征在于，包括：资源层模块，在所述资源层模块中设有安全测试计算机集群和工具镜像库；虚拟层模块，在所述虚拟层模块中设有Docker容器引擎和Kubernets模块；核心层模块，在所述核心层模块中设有工具资源管理模块、测试任务管控模块和测试数据管理模块；应用层模块，在所述应用层模块中设有用户认证模块、日志模块和工具选择模块。2.根据权利要求1所述的基于Docker的网络安全测试工具平台，其特征在于，所述安全测试计算机集群用于为安全测试工具提供操作运行环境；所述工具镜像库用于实现对各类安全测试工具的镜像存储，通过对测试工具及其运行环境封装成容器镜像文件方式，屏蔽各类工具的调用方式、运行环境差异性。3.根据权利要求1所述的基于Docker的网络安全测试工具平台，其特征在于，所述Docker容器引擎用于提供镜像生成和运行容器；所述Kubernets模块用于完成容器应用的编排、部署和调度、监控、服务发现，用户根据测试任务的需要选择，并依托Kubernets模块提供的REST API接口，实现对测试工具容器运行提供统一的控制，通过对容器的启停删执行来实现对测试工具的运行管控。4.根据权利要求1所述的基于Docker的网络安全测试工具平台，其特征在于，所述工具资源管理模块，首先将各类安全测试工具资源按照统一镜像文件格式进行封装，打包成测试工具镜像包，然后基于Docker容器引擎进行统一的管理，实现工具的浏览、工具修改、工具查找、工具添加或上传、工具删除；所述测试任务管控模块，用于解析从应用层获取的测试需求，建立安全测试事件列表，依托虚拟层的RES API接口下载对应的工具镜像文件，启动容器运行，并对测试过程进行实时监控；所述测试数据管理模块，用于实现将安全测试工具格式各异的输入/输出数据进行归一化处理，转换为统一的格式数据。5.根据权利要求1所述的基于Docker的网络安全测试工具平台，其特征在于，所述工具资源管理模块包括安全测试工具库；所述安全测试工具库由安全测试工具信息库和安全测试镜像库构成；所述安全测试工具信息库用于存储工具说明信息、镜像文件存放路径、执行命令参数、输出结果信息，并用于维护工具程序输入和输出口，实现与用户的交互，帮助用户选择各类工具，并帮助完成测试工具的设置与调用工作；所述安全测试镜像库用于存储封装好的工具镜像文件。6.根据权利要求1所述的基于Docker的网络安全测试工具平台，其特征在于，所述应用层模块设置有WEB客户端，通过WEB客户端能够远程访问安全测试服务端；所述用户认证模块实现用户的注册、登录、用户信息和权限管理；所述日志模块用于记录系统运行情况，并对测试结果报表进行管理；所述工具选择模块根据用户测试工具选择和配置情况生成安全测试脚本。7.根据权利要求4所述的基于Docker的网络安全测试工具平台，其特征在于，所述统一的格式数据为基于XML数据格式的STDF数据格式；在所述STDF数据格式中，包括：ObjDataFormat单元，用于定义安全测试中情报搜集、网络扫描阶段产生的数据格式，并作为后一阶段中漏洞利用及攻击实施的输入数据；VulnerabilityData单元，用于定义漏洞扫描阶段获得目标主机的漏洞信息，用于攻击实施阶段及结果输出；并且还包括漏洞唯一标识、所属主机ID、所属服务ID、漏洞名称、类型、危害等级、漏洞描述、创建时间及扫描出该漏洞的测试工具ID；AttackResultData单元，用于定义攻击实施阶段获取的相关结果信息，用于最后测试结果的输出。8.根据权利要求5所述的基于Docker的网络安全测试工具平台，其特征在于，所述安全测试工具信息库的表结构包括Tool Info表结构；在Tool Info表结构中存放了测试工具存储位置、描述、输入输出相关信息，并采用两级表结构；主一级库表包括测试工具的ID、名称、版本、说明、类型、测试目标、风险等级、存储路径、命令ID、result ID，其tool ID字段为主关键字，用于唯一标识每一个测试工具；二级库表Tool Commnads为测试工具命令参数表，每一个测试工具对应一个攻击命令参数表，给出了该测试工具所有攻击命令参数及其缺省值；表中Command ID与Tool Info表结构中的command ID相对应，command ID字段为该库表的主键；在实际测试时，这些参数将替换为从客户端发调用的测试命令参数值；二级库表Tool Results为测试工具输出结果，每一个测试工具对应一个输出结果表，给出了该测试工具所有测试结果项；表中result ID与Tool Info表中的result ID相对应，result ID字段为该库表的主键；在实际测试完成后，将实际结果填入该表中。9.根据权利要求7所述的基于Docker的网络安全测试工具平台，其特征在于，所述ObjDataFormat单元包括：NetInfo单元，用于定义被测对象的网络相关信息，包括安全测试环境中网络的唯一标识符NetworkID、网络的IP地址范围Rang和用于表示所有与当前网段直接相连的网络的集合Access；HostInfo单元，用于定义了被测主机的相关信息，包括HostID主机唯一标识，NetworkID主机所属网络ID、IP地址、MAC地址和操作系统信息；ServiceInfo单元，用于定义了主机服务信息；用于存储在情报搜集和扫描阶段获得目标主机的相关服务信息，包括服务唯一标识、所属主机ID，服务端口号、服务使用的传输协议和服务的状态；所述AttackResultData单元包括：AttackObj单元，用于定义被攻破的主机相关信息，包括主机ID、IP地址、控制方式、攻击利用的漏洞ID；SensitiveData单元，用于定义攻击实施后获得的敏感数据，包括账号、密码和个人私有数。10.一种权利要求1～9任一所述的基于Docker的网络安全测试工具平台的构建方法，其特征在于，包括步骤：S1，测试人员通过WEB客户端远程访问安全测试计算机集群，根据安全测试任务进行安全测试任务输入及配置，为测试任务管控提供测试脚本输入，为测试数据管理模块提供初始化情报信息；S2，测试任务管控根据当前测试脚本和初始化的情报信息，按照安全测试事件七元组定义格式，建立测试事件列表，启动满足初始条件的安全测试事件；S3，测试任务管控，利用k8s API接口访问容器计算机集群的controller节点，从测试工具镜像库中获取所需的测试工具镜像文件，在容器计算机集群中分配计算资源，创建该安全测试事件的容器执行，每个容器执行产生攻击测试流量对被测目标网络的靶标进行攻击测试；S4，在该安全测试事件的容器执行完成后，将测试的测试结果信息数据提交测试数据管理模块进行统一的数据格式转化，并存入数据库；S5，测试任务管控继续按照测试事件列表，重复步骤S3和S4的操作，直到完成测试事件列表中所有测试事件，则一次完整的安全测试流程结束。
说明书desc
技术领域本发明涉及网络安全测试领域，更为具体的，涉及基于Docker的网络安全测试工具平台及构建方法。背景技术网络安全测试是指运用各类安全测试工具，从防御和攻击的两个角度，测试和验证网络信息系统在面对各种不安全因素时的表现，通过对网络进行安全测试，能够准确衡量网络系统抵抗网络攻击的真实性能。当前安全测试工具众多，如：信息收集、密码工具、检测工具、攻击工具、监控工具和网络协议分析器等一系列工具。尤其是当前各种网络攻击工具层出不穷，手段复杂多样，各类工具在运行环境、接口适配、及操作使用存在非常大的差异性。而通常一次安全测试往往又需要若干种安全测试工具协同联合运行。各种安全测试工具需要独立部署、安装和操作，一方面，需要安全测试人员掌握各类测试工具使用技能，才能利用测试工具实施各类复杂的安全测试；另一方面，各种安全测试工具人机接口、输出数据格式各不相同，需要大量测试人员进行手动配置和操控，测试结果数据很难实现高效共享。此外，当前面临新的攻击威胁不断涌现，新的测试工具和手段层出不穷，要求安全测试也应具有灵活变化适应新的安全测试需求的能力。目前，国内安全测试工具集成的实现主要利用当前主流的渗透测试工具构建，如：Metasploit、Nessus等。由于这些工具都是国外的技术和产品，无法做到自主性，导致扩展和二次开发能力大大受到限制。并且这些工具通常利用插件的技术实现测试工具的封装和扩展，所谓插件是一种现代软件设计思想，其本质是在不修改程序主体的情况下对软件功能进行加强和扩充，在windows下将工具封装成动态链接库的形式，动态利用动态链接库的共享函数库的特性；在Linux系统下被封装成jar包的形式，jar包是java的归档文件。基于插件的集成技术通常受限限于软件集成运行环境，难以做到真正的跨平台封装扩展能力，并且多个插件的运行通常是采用多线程的方式来实现，一个插件线程运行异常往往会影响到其它插件运行。容器技术是一种内核轻量级的操作系统层的虚拟化技术，相比传统的虚拟化技术繁琐的移植和部署，容器技术具有极其轻量、秒级部署、易于移植的特点，可以加速软件的应用自动化流程和应用部署运维。Docker是一个基于Linux的高级容器引擎，以“容器”作为基础与核心，以镜像作为容器“模板”进行复用。Docker镜像是一个轻量级的，独立的，可执行的软件包，包括运行它所需的所有内容；代码，运行时环境，系统工具，系统库。无论外部环境如何，容器的运行状态始终一致，不受干扰。而容器和镜像的紧密关系，主要体现在Docker对容器和镜像的文件系统采取了联合挂载的机制。通过Docker可以把应用软件装载在容器内，变为一种标准化、可移植和自管理的组件，可以用来构建隔离的标准化的运行环境，提供了可移植的标准化的部署过程，Docker可以轻松的完成规模化、自动化的部署工作。本发明基于Docker虚拟化技术，解决如下问题：1)为屏蔽安全测试工具的运行环境、形态、接口的差异性，研究基于Docker镜像实现安全测试工具的统一封装技术，构建统一入口访问点和工具镜像库。2)针对安全测试工具的调用方式及运行条件的差异问题，需研究基于Docker容器安全测试工具创建、加载、卸载实现方法，建立统一的安全测试事件调度管控机制。3)针对安全测试工具的输入输出数据内容及格式的差异性，梳理安全测试各阶段各测试工具的输入输出信息要素，形成统一信息数据表和数据格式转换机制，实现测试工具间结果信息数据直接共享，为测试工具间的联动及自动化测试提供支撑。发明内容本发明的目的在于克服现有技术的不足，提供一种基于Docker的网络安全测试工具平台及构建方法，该平台扩展性好，重用性高、具有统一数据格式，且实现运行环境、实现方式、运行参数命令、外部调用接口以及具体功能用途等各异的安全测试工具的有机集成，可按需进行安全测试工具灵活调用，从而简化安全测试人员的操作，增强自动测试的能力，提升网络安全测试效率。本发明的目的是通过以下方案实现的：一种基于Docker的网络安全测试工具平台，包括：资源层模块，在所述资源层模块中设有安全测试计算机集群和工具镜像库；虚拟层模块，在所述虚拟层模块中设有Docker容器引擎和Kubernets模块；核心层模块，在所述核心层模块中设有工具资源管理模块、测试任务管控模块和测试数据管理模块；应用层模块，在所述应用层模块中设有用户认证模块、日志模块和工具选择模块。进一步地，所述安全测试计算机集群用于为安全测试工具提供操作运行环境；所述工具镜像库用于实现对各类安全测试工具的镜像存储，通过对测试工具及其运行环境封装成容器镜像文件方式，屏蔽各类工具的调用方式、运行环境差异性。进一步地，所述Docker容器引擎用于提供镜像生成和运行容器；所述Kubernets模块用于完成容器应用的编排、部署和调度、监控、服务发现，用户根据测试任务的需要选择，并依托Kubernets模块提供的REST API接口，实现对测试工具容器运行提供统一的控制，通过对容器的启停删执行来实现对测试工具的运行管控。进一步地，所述工具资源管理模块，首先将各类安全测试工具资源按照统一镜像文件格式进行封装，打包成测试工具镜像包，然后基于Docker容器引擎进行统一的管理，实现工具的浏览、工具修改、工具查找、工具添加或上传、工具删除；所述测试任务管控模块，用于解析从应用层获取的测试需求，建立安全测试事件列表，依托虚拟层的RES API接口下载对应的工具镜像文件，启动容器运行，并对测试过程进行实时监控；所述测试数据管理模块，用于实现将安全测试工具格式各异的输入/输出数据进行归一化处理，转换为统一的格式数据。进一步地，所述应用层模块设置有WEB客户端，通过WEB客户端能够远程访问安全测试服务端；所述用户认证模块实现用户的注册、登录、用户信息和权限管理；所述日志模块用于记录系统运行情况，并对测试结果报表进行管理；所述工具选择模块根据用户测试工具选择和配置情况生成安全测试脚本。进一步地，所述工具资源管理模块包括安全测试工具库；所述安全测试工具库由安全测试工具信息库和安全测试镜像库构成；所述安全测试工具信息库用于存储工具说明信息、镜像文件存放路径、执行命令参数、输出结果信息，并用于维护工具程序输入和输出口，实现与用户的交互，帮助用户选择各类工具，并帮助完成测试工具的设置与调用工作；所述安全测试镜像库用于存储封装好的工具镜像文件。进一步地，所述统一的格式数据为基于XML数据格式的STDF数据格式；在所述STDF数据格式中，包括：ObjDataFormat单元，用于定义安全测试中情报搜集、网络扫描阶段产生的数据格式，并作为后一阶段中漏洞利用及攻击实施的输入数据；VulnerabilityData单元，用于定义漏洞扫描阶段获得目标主机的漏洞信息，用于攻击实施阶段及结果输出；并且还包括漏洞唯一标识，所属主机ID，所属服务ID，漏洞名称、类型、危害等级、漏洞描述、创建时间及扫描出该漏洞的测试工具ID；AttackResultData单元，用于定义攻击实施阶段获取的相关结果信息，用于最后测试结果的输出。进一步地，所述安全测试工具信息库的表结构包括Tool Info表结构；在ToolInfo表结构中存放了测试工具存储位置、描述、输入输出相关信息，并采用两级表结构；主一级库表包括测试工具的ID、名称、版本、说明、类型、测试目标、风险等级、存储路径、命令ID、result ID，其tool ID字段为主关键字，用于唯一标识每一个测试工具；二级库表ToolCommnads为测试工具命令参数表，每一个测试工具对应一个攻击命令参数表，给出了该测试工具所有攻击命令参数及其缺省值；表中Command ID与Tool Info表结构中的commandID相对应，command ID字段为该库表的主键；在实际测试时，这些参数将替换为从客户端发调用的测试命令参数值；二级库表Tool Results为测试工具输出结果，每一个测试工具对应一个输出结果表，给出了该测试工具所有测试结果项；表中result ID与Tool Info表中的result ID相对应，result ID字段为该库表的主键；在实际测试完成后，将实际结果填入该表中。进一步地，所述ObjDataFormat单元包括：NetInfo单元，用于定义被测对象的网络相关信息，包括安全测试环境中网络的唯一标识符NetworkID、网络的IP地址范围Rang和用于表示所有与当前网段直接相连的网络的集合Access；HostInfo单元，用于定义了被测主机的相关信息，包括HostID主机唯一标识，NetworkID主机所属网络ID、IP地址、MAC地址和操作系统信息；ServiceInfo单元，用于定义了主机服务信息；用于存储在情报搜集和扫描阶段获得目标主机的相关服务信息，包括服务唯一标识、所属主机ID，服务端口号、服务使用的传输协议和服务的状态；所述AttackResultData单元包括：AttackObj单元，用于定义被攻破的主机相关信息，包括主机ID、IP地址、控制方式、攻击利用的漏洞ID；SensitiveData单元，用于定义攻击实施后获得的敏感数据，包括账号、密码和个人私有数。一种基于如上任一所述基于Docker的网络安全测试工具平台的构建方法，包括步骤：S1，测试人员通过WEB客户端远程访问安全测试计算机集群，根据安全测试任务进行安全测试任务输入及配置，为测试任务管控提供测试脚本输入，为测试数据管理模块提供初始化情报信息；S2，测试任务管控根据当前测试脚本和初始化的情报信息，按照安全测试事件七元组定义格式，建立测试事件列表，启动满足初始条件的安全测试事件；S3，测试任务管控，利用k8s API接口访问容器计算机集群的controller节点，从测试工具镜像库中获取所需的测试工具镜像文件，在容器计算机集群中分配计算资源，创建该安全测试事件的容器执行，每个容器执行产生攻击测试流量对被测目标网络的靶标进行攻击测试；S4，在该安全测试事件的容器执行完成后，将测试的测试结果信息数据提交测试数据管理模块进行统一的数据格式转化，并存入数据库；S5，测试任务管控继续按照测试事件列表，重复步骤S3和S4的操作，直到完成测试事件列表中所有测试事件，则一次完整的安全测试流程结束。本发明的有益效果包括：一方面，本发明基于Docker虚拟化技术，建立了一种扩展性好，重用性高、具有统一数据格式的安全测试工具平台，实现运行环境、实现方式、运行参数命令、外部调用接口以及具体功能用途等各异的安全测试工具的有机集成，可按需进行安全测试工具灵活调用，从而简化安全测试人员的操作，增强自动测试的能力，提升网络安全测试效率。另一方面，本发明利用容器技术兼容性好、启动速度快、资源占用少等技术优势，提出了一种基于Docker的网络安全测试工具平台集成构建方法，可根据安全测试需求自由选择使用安全测试工具和测试步骤，提高了安全测试流程中对安全测试工具使用的灵活性，支持不同的安全测试环境下使用，可有效提高测试效率和测试质量，构建的架构自主可控，且具有良好的扩展以能力，部署便利。再另一方面，本发明创新性的运用容器镜像封装和数据库技术，构建安全测试工具信息库和安全测试镜像库；以自定义的七元组安全测试事件模型为基本控制单元，建立了基于k8s容器集群管理的测试任务管控机制；基于XML数据格式给出了一个STDF数据统一格式，实现了测试数据统一存储和交换。基于上述创新性的实现机制，对各种类型安全测试工具的抽象封装，有效屏蔽工具之间的异构性和差异性，并利用Docker的集群管理机制，实现对各类测试工具的动态加载和按需管控,能够实现测试工具的按需组合调用，为完成各种复杂安全测试功能提供重要支撑。解决了用户搭建安全测试工具运行环境的困难，特别是对于一些新兴的、用户不够了解的安全测试工具,使用更加方便，有效降低测试人员的工作量。附图说明为了更清楚地说明本发明实施例或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动性的前提下，还可以根据这些附图获得其他的附图。图1为本发明实施例基于Docker的安全测试工具平台架构；图2为本发明实施例安全测试工具平台组成及工作流程；图3为本发明实施例安全测试工具信息库；图4为本发明实施例基于容器的安全测试调度机制；图5为本发明实施例STDF数据格式定义。具体实施方式本说明书中所有实施例公开的所有特征，或隐含公开的所有方法或过程中的步骤，除了互相排斥的特征和/或步骤以外，均可以以任何方式组合和/或扩展、替换。实施例1如图1，2所示，一种基于Docker的网络安全测试工具平台，包括：资源层模块，在资源层模块中设有安全测试计算机集群和工具镜像库；虚拟层模块，在虚拟层模块中设有Docker容器引擎和Kubernets模块；核心层模块，在所述核心层模块中设有工具资源管理模块、测试任务管控模块和测试数据管理模块；应用层模块，在应用层模块中设有用户认证模块、日志模块和工具选择模块。在该实施例中，需要说明是，建立了一个开放、异构、可重用的安全测试工具平台架构，可按需实现测试工具的扩展、动态加载和管控。如图1所示，采用容器的虚拟化技术对各类安全测试工具进行封装，从而屏蔽了安全工具之间的差异，使其可独立运行和动态调用，实现分布式的部署，并且引入B/S技术实现远程的管理和调用。实施例2在实施例1的基础上，需要说明是，资源层模块作为安全测试平台运行基础支撑环境。安全集群测试服务器由具有多个强大计算能力和存储资源计算机组成，为安全测试工具提供操作运行环境。工具镜像库实现对信息收集、漏洞评估、密码攻击等各类安全测试工具的镜像存储。通过对测试工具及其运行环境封装成容器镜像文件方式，屏蔽各类工具的调用方式、运行环境等的差异性，从而建立统一的、易扩展、可重用的测试工具库。实施例3在实施例1的基础上，需要说明是，虚拟层模块的构建依托容器的开源技术来实现，利用Docker轻量化、资源隔离、扩展能力强、易于编排和管理的技术特性，对各种类型安全测试工具的抽象封装，有效屏蔽工具之间的异构性和差异性，并利用容器的集群管理机制，实现对各类测试工具的动态加载和按需管控。虚拟层主要包括：Docker容器引擎和Kubernets。其中，Docker容器引擎负责提供镜像生成和运行容器；Kubernets用以完成容器应用的编排、部署和调度、监控、服务发现。用户根据测试任务的需要选择。并依托Kubernets提供REST API接口，实现对测试工具容器运行提供统一的控制，通过对容器的启停删执行来实现对测试工具的运行管控。实施例4在实施例1的基础上，需要说明是，核心层模块主要提供安全测试工具平台的核心功能服务，主要包括：1)工具资源管理：首先将各类安全测试工具资源，按照统一镜像文件格式进行封装，打包成测试工具镜像包，然后基于Docker容器引擎进行统一的管理，实现工具的浏览、工具修改、工具查找、工具添加、工具删除。基于Docker镜像的封装方式，隔离了版本、环境的差异以及系统间的干扰，使得工具的部署变得更加的灵活和高效。2)测试任务管控：实现安全测试任务执行流程的管理调度。一次安全测试任务通常是多个安全测试工具协同关联运行完成的。测试管控模块解析从应用层获取的测试需求，建立安全测试事件列表，依托虚拟层的RES API接口下载对应的工具镜像文件，启动容器运行，并对测试过程进行实时监控。3)测试数据管理：实现将安全测试工具格式各异的输入/输出数据进行归一化处理，转换为统一的格式数据，以解决安全测试过程中的数据存储、交换和分析的问题，从而实现安全测试工具的数据共享和协同联动运行。实施例5在实施例1的基础上，需要说明是，应用层模块提供安全测试工具平台管理和查询的人机交互界面，通过WEB客户端可远程访问安全测试服务端。用户认证模块实现用户的注册、登录、用户信息和权限管理等；日志模块用于记录系统相关的运行情况，并对测试结果报表进行管理；工具选择模块，根据用户测试工具选择和配置情况生成安全测试脚本。实施例6在实施例4的基础上，需要说明是，所述工具资源管理模块包括安全测试工具库；所述安全测试工具库由安全测试工具信息库和安全测试镜像库构成；所述安全测试工具信息库用于存储工具说明信息、镜像文件存放路径、执行命令参数、输出结果信息，并用于维护工具程序输入和输出口，实现与用户的交互，帮助用户选择各类工具，并帮助完成测试工具的设置与调用工作；所述安全测试镜像库用于存储封装好的工具镜像文件。实施例7在实施例4的基础上，需要说明是，所述统一的格式数据为基于XML数据格式的STDF数据格式；在所述STDF数据格式中，包括：ObjDataFormat单元，用于定义安全测试中情报搜集、网络扫描阶段产生的数据格式，并作为后一阶段中漏洞利用及攻击实施的输入数据；VulnerabilityData单元，用于定义漏洞扫描阶段获得目标主机的漏洞信息，用于攻击实施阶段及结果输出；并且还包括漏洞唯一标识，所属主机ID，所属服务ID，漏洞名称、类型、危害等级、漏洞描述、创建时间及扫描出该漏洞的测试工具ID；AttackResultData单元，用于定义攻击实施阶段获取的相关结果信息，用于最后测试结果的输出。实施例8在实施例6的基础上，需要说明是，所述安全测试工具信息库的表结构包括ToolInfo表结构；在Tool Info表结构中存放了测试工具存储位置、描述、输入输出相关信息，并采用两级表结构；主一级库表包括测试工具的ID、名称、版本、说明、类型、测试目标、风险等级、存储路径、命令ID、result ID，其tool ID字段为主关键字，用于唯一标识每一个测试工具；二级库表Tool Commnads为测试工具命令参数表，每一个测试工具对应一个攻击命令参数表，给出了该测试工具所有攻击命令参数及其缺省值；表中Command ID与Tool Info表结构中的command ID相对应，command ID字段为该库表的主键；在实际测试时，这些参数将替换为从客户端发调用的测试命令参数值；二级库表Tool Results为测试工具输出结果，每一个测试工具对应一个输出结果表，给出了该测试工具所有测试结果项；表中result ID与Tool Info表中的result ID相对应，result ID字段为该库表的主键；在实际测试完成后，将实际结果填入该表中。实施例9在实施例8的基础上，需要说明是，所述ObjDataFormat单元包括：NetInfo单元，用于定义被测对象的网络相关信息，包括安全测试环境中网络的唯一标识符NetworkID、网络的IP地址范围Rang和用于表示所有与当前网段直接相连的网络的集合Access；HostInfo单元，用于定义了被测主机的相关信息，包括HostID主机唯一标识，NetworkID主机所属网络ID、IP地址、MAC地址和操作系统信息；ServiceInfo单元，用于定义了主机服务信息；用于存储在情报搜集和扫描阶段获得目标主机的相关服务信息，包括服务唯一标识、所属主机ID，服务端口号、服务使用的传输协议和服务的状态；所述AttackResultData单元包括：AttackObj单元，用于定义被攻破的主机相关信息，包括主机ID、IP地址、控制方式、攻击利用的漏洞ID；SensitiveData单元，用于定义攻击实施后获得的敏感数据，包括账号、密码和个人私有数。实施例10一种基于实施例1～9中任一的基于Docker的网络安全测试工具平台的构建方法，包括步骤：S1，测试人员通过WEB客户端远程访问安全测试计算机集群，根据安全测试任务进行安全测试任务输入及配置，为测试任务管控提供测试脚本输入，为测试数据管理模块提供初始化情报信息；S2，测试任务管控根据当前测试脚本和初始化的情报信息，按照安全测试事件七元组定义格式，建立测试事件列表，启动满足初始条件的安全测试事件；S3，测试任务管控，利用k8s API接口访问容器计算机集群的controller节点，从测试工具镜像库中获取所需的测试工具镜像文件，在容器计算机集群中分配计算资源，创建该安全测试事件的容器执行，每个容器执行产生攻击测试流量对被测目标网络的靶标进行攻击测试；S4，在该安全测试事件的容器执行完成后，将测试的测试结果信息数据提交测试数据管理模块进行统一的数据格式转化，并存入数据库；S5，测试任务管控继续按照测试事件列表，重复步骤S3和S4的操作，直到完成测试事件列表中所有测试事件，则一次完整的安全测试流程结束。本发明的详细实现设计说明本发明实施例基于Docker的网络安全测试工具平台，主要实现的核心功能为工具资源管理、测试任务管控、测试数据管理，具体实施例给出如下详细实现设计，但并不限于如下实施过程。1.工具资源管理容器镜像是一个轻量级的、独立的、可执行的软件包，包括运行它所需的所有内容，如：代码、运行时环境、系统工具、系统库等。无论外部环境如何，容器的运行状态始终一致，不受干扰，适用于多种平台环境，并且可以设置容器镜像入口点参数，因此，将测试工具制作成容器镜像方式，实现了形态和调用各异的测试工具软件统一封装和调用。镜像制作采用编写Dockerfile方式，通过Docker build命令来构建镜像，并基于Kubernets对其进行统一管理。Dockerfile完全透明，所有用于构建镜像的指令都可以通过Dockerfile看到。根据测试需要可通过修改Dockerfile中的指令，可重新扩展工具镜像。Dockerfile包括以下信息：基础镜像信息、镜像操作指令和容器启动时执行指令。通过ENTRYPOINT命令可以指定容器启动时，默认运行的测试工具，并为启动这个测试工具指定参数。安全测试工具库由安全测试工具信息库和安全测试镜像库构成。如图3所示，安全测试工具信息库存储工具说明信息、镜像文件存放路径、执行命令参数、输出结果等信息。它维护了工具程序输入和输出口，实现与用户的交互，帮助用户选择各类工具，并帮助完成测试工具的设置与调用工作。安全测试镜像库则存储封装好工具镜像文件。在本发明中，需要说明的是，设计了安全测试工具信息库的表结构，如图3所示，包括：Tool Info表结构，在Tool Info表结构中存放了测试工具存储位置、描述、输入输出等相关信息，采用两级表结构。主一级库表主要包括测试工具的ID、名称、版本、说明、类型、测试目标、风险等级、存储路径、命令ID、result ID，其tool ID字段为主关键字，用于唯一标识每一个测试工具。二级库表Tool Commnads为测试工具命令参数表，每一个测试工具对应一个攻击命令参数表，给出了该测试工具所有攻击命令参数及其缺省值。Tool Commands表中command ID与Tool Info表中的command ID相对应，command ID字段为该库表的主键。在实际测试时，这些参数将替换为从客户端发调用的测试命令参数值。二级库表Tool Results为测试工具输出结果，每一个测试工具对应一个输出结果表，给出了该测试工具所有测试结果项。表中result ID与Tool Info表中的result ID相对应，result ID字段为该库表的主键。在实际测试完成后，将实际结果填入该表中。2.测试任务管控一次安全测试任务由多个安全测试事件所构成，根据安全测试任务的需要，安全测试事件之间存在串并混合执行的情况，安全测试事件就是指某一安全测试工具的一次执行。安全测试事件使用七元组进行定义：＜STE_ID,STE_name,STE_tool,STE_cmd,complex_factor,pre_info,post_info＞STE_ID:安测试事件的唯一标识；STE_name:安全测试事件名称；STE_tool:安全测试事件执行工具；STE_cmd:安全测试事件指令；complex_factor:安全测试事件复杂度因子；pre_info:安全测试事件前提条件属性信息集合；post_info:安全测试事件输出结果属性信息集合；需要说明的是，安全测试事件复杂度因子的获得可以依托实际测试中，不断的调整达到“经验”积累的效果。或者以成本，技术难度，成功率等属性参数为输入建立一个智能的评估算法。通过将计算值与经验值的比对，进行优化调整。安全测试事件的触发有两种方式，一种为手动触发，通过用户配置安全测试脚本；另一种为条件自动触发，即当满足安全测试事件pre_info中所有前提属性信息的时候，该安全测试事件自动触发执行。条件触发实现了安全测试事件的协同联动。测试工具的执行是以容器的形式运行的，一个容器执行一个测试工具，不同的测试工具独立运行在不同容器内。因此，安全测试任务运行就是通过有序的启动多个测试工具的Docker容器来实现。测试任务管控模块，依据安全测试脚本或者事件联动机制，触发启动Docker容器实现测试任务的调度管理。本发明基于Kubernets进行Docker管理调用，如图4所示。测试任务管控模块的脚本引擎首先解析用户配置的测试脚本，转换为所定义的七元组安全测试事件列表，根据当前初始信息触发满足条件的安全测试事件，并通过K8s提供的REST API接口与k8s API server通讯，调用API服务控制容器的启停删执行及日志回收等操作。依托测试数据管理将测试结果数据的归一化为STDF的格式数据，测试任务管理就可以利用STDF格式信息激活满足调度条件的测试事件获取更多的派生信息，进而激活更多的事件，从而可实现自动化安全测试。3.测试数据管理在安全测试中，尤其是攻击测试，通常是需要多个测试工具要协同工作，即一个攻击测试往往会以其它攻击工具测试的输出作为输入。但是，攻击测试工具的输入输出数据格式各异，测试工具之间信息互通是众多工具能够协作驱动的基础，也是实现自动化测试的关键。测试数据管理就是在对当前主流测试工具的输出信息分门别类的提取关键信息和统一格式进行存储，以解决渗透测试过程中的数据存储、交换和分析的问题。通过对安全测试进行中的数据进行格式化统一表述后，每个测试事件获取的测试数据经过格式化后，信息能够被其它测试事件重新认知并利用，测试管理可以利用信息激活满足调度条件的事件获取更多的派生信息，进而激活更多的测试事件，从而实现测试信息高效利用。本发明实施例通过梳理当前攻击测试阶段主流的测试工具输出信息，基于XML数据格式给出了一个STDF数据统一格式，从而实现了测试数据统一存储和交换。其中，需要说明的是，STDF为本发明自定义术语，该STDF数据格式为本发明解决背景中技术问题而自行设计创造的技术特征。通过对经典攻击测试流程和典型测试工具的结果信息数据梳理，建立了如图5所示的STDF信息数据格式标准，具体定义如下：1)ObjDataFormat，定义了安全测试中情报搜集、网络扫描阶段产生的数据格式，并可作为后一阶段中漏洞利用及攻击实施的输入数据。ObjDataFormat又分为三类，包括：NetInfo，主要定义了被测对象的网络相关信息。又包括：NetworkID；Range代表网络的IP地址范围；Access是一个集合，表示所有与当前网段直接相连的网络。HostInfo，定义了被测主机的相关信息。又包括：HostID主机唯一标识，NetworkID主机所属网络ID,IP地址，MAC地址，操作系统信息。ServiceInfo，定义了主机服务信息。用于存储在情报搜集和扫描阶段获得目标主机的相关服务信息。又包括服务唯一标识、所属主机ID，服务端口号、服务使用的传输协议、服务的状态。2)VulnerabilityData，定义了漏洞扫描阶段获得目标主机的漏洞信息。可用于攻击实施阶段及结果输出。又包括：漏洞唯一标识，所属主机ID,所属服务ID，漏洞名称、类型、危害等级、漏洞描述，创建时间及扫描出该漏洞的测试工具ID。3)AttackResultData，定义了攻击实施阶段获取的相关结果信息，可用于最后测试结果的输出，包括：AttackObj,定义了被攻破的主机相关信息，又包括：主机ID，IP地址，控制方式，攻击利用的漏洞ID。SensitiveData,定义了攻击实施后获得的敏感数据，又包括：账号，密码，个人私有数据等。本发明实施例的应用部署说明本发明实施例的网络安全测试工具平台，提供下面两种部署方式，测试人员根据测试需要选择相应的方式来部署。单机部署网络安全测试工具平台是由一系列安全测试工具组成的，是一个众多工具组成的镜像软件包，可以根据需要将所需的镜像包下载到高性能笔记本电脑中，方便携带，使用便捷。使用时只需将笔记本电脑接入待测网络，根据向导提示进行操作即可实施自动安全测试。平台版部署平台版本是基于私有云为技术基础的版本，将安全测试工具平台部署于被测网络中，测试人员通过网页浏览器接入平台，根据测试向导，输入待测目标基本信息，即可对网络、网站进行安全测试。本发明实施例利用容器技术兼容性好、启动速度快、资源占用少等技术优势，提出了一种基于Docker的安全测试工具平台及集成构建方法，可根据安全测试需求自由选择使用安全测试工具和测试步骤，提高了安全测试流程中对安全测试工具使用的灵活性，支持不同的安全测试环境下使用，可有效提高测试效率和测试质量，该架构自主可控，且具有良好的扩展以能力，部署便利。本发明实施例创新性的运用容器镜像封装和数据库技术，构建安全测试工具信息库和安全测试镜像库；以自定义的七元组安全测试事件模型为基本控制单元，建立了基于k8s容器集群管理的测试任务管控机制；基于XML数据格式给出了一个STDF数据统一格式，实现了测试数据统一存储和交换。基于上述创新性的实现机制，对各种类型安全测试工具的抽象封装，有效屏蔽工具之间的异构性和差异性，并利用Docker的集群管理机制，实现对各类测试工具的动态加载和按需管控，能够实现测试工具的按需组合调用，为完成各种复杂安全测试功能提供重要支撑。本发明解决了用户搭建安全测试工具运行环境的困难，特别是对于一些新兴的、用户不够了解的安全测试工具，使用更加方便，有效降低测试人员的工作量。本发明未涉及部分均与现有技术相同或可采用现有技术加以实现。上述技术方案只是本发明的一种实施方式，对于本领域内的技术人员而言，在本发明公开了应用方法和原理的基础上，很容易做出各种类型的改进或变形，而不仅限于本发明上述具体实施方式所描述的方法，因此前面描述的方式只是优选的，而并不具有限制性的意义。除以上实例以外，本领域技术人员根据上述公开内容获得启示或利用相关领域的知识或技术进行改动获得其他实施例，各个实施例的特征可以互换或替换，本领域人员所进行的改动和变化不脱离本发明的精神和范围，则都应在本发明所附权利要求的保护范围内。
