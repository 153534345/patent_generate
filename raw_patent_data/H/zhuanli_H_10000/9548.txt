标题title
一种大文件远程传输方法
摘要abst
本发明涉及计算机网络传输技术领域，具体涉及一种大文件远程传输方法。前端选择需要上传/下载的文件并向后端发起服务请求；后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端；前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口；大文件传输服务模块对接收的文件进行分包处理后上传/下载，并反馈上传/下载结果信息至前端。能避免大文件传输过程中计算机对传输文件的大小限制，且能保证数据传输过程的完整性、稳定性、并发性以及可靠性。
权利要求书clms
1.一种大文件远程传输方法，其特征在于：前端选择需要上传/下载的文件并向后端发起服务请求；后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端；前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口；大文件传输服务模块对接收的文件进行分包处理后上传/下载，并反馈上传/下载结果信息至前端。2.根据权利要求1所述的大文件远程传输方法，其特征在于，所述前端选择需要上传/下载的文件包括：当进行上传操作时，选择或输入文件的路径、文件的名称、文件的类型和文件的关联属性；当进行下载操作时，选择或输入文件的数据库ID、文件的路径、文件的名称、文件的类型和文件的关联属性。3.根据权利要求1所述的大文件远程传输方法，其特征在于，所述向后端发起服务请求包括：通过JavaScript特定的Ajax传输类的Function调用后端服务器提供的API接口实现后端服务调用，并通过HTTP协议将包裹的文件信息以及请求头的响应协议发送至服务器。4.根据权利要求1所述的大文件远程传输方法，其特征在于，所述后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端包括：当所述服务请求为文件上传请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验通过，则进行信息的数据预入库操作，生成一条文件上传信息记录，将该记录的状态置为待上传状态，根据服务器对应的规则重新封装文件信息并反馈至前端；若校验失败，则向前端反馈报错信息，等待重新校验；当所述服务请求为文件下载请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验失败，则向前端反馈报错信息，等待重新校验；若校验通过，则查询该文件对应的数据库状态；若文件对应的数据库状态为已存在，则根据服务器对应的规则重新封装文件信息并反馈至前端，若文件对应的数据库状态为不存在，则向前端反馈报错信息，等待重新校验。5.根据权利要求1所述的大文件远程传输方法，其特征在于，所述前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口包括：前端的文件上传/下载监听接口接收服务器发送的处理状态信息；若所述处理状态信息为文件校验失败信息，则通过前端界面输出提示信息，若所述处理状态信息为文件校验通过信息，且所述文件校验通过信息附带了所需要上传/下载的文件信息，则将包含有所述文件信息的封装体按照大文件传输服务模块的文件上传/下载接口提供的规范标准进行重新组合，并通过HTTP协议调用传输工具所指定监听的端口下的服务接口。6.根据权利要求1所述的大文件远程传输方法，其特征在于，所述大文件传输服务模块接收到文件后，还包括：判断文件路径下的文件是否是真实存在；若存在，则预设文件上传/下载所需准备的相关元素；获取文件的大小并创建一个size对象用于存放该文件的大小数值。7.根据权利要求1所述的大文件远程传输方法，其特征在于，所述大文件传输服务模块对接收的文件进行分包处理包括：使用QFile对需要上传/下载的文件进行分包处理，分包大小为通过文件的大小数值进行千分整除，并且将分包的数值创建一个bag对象用于存储，同时创建一个transfer对象，每传递成功一个分包，transfer对象进行加一操作。8.根据权利要求7所述的大文件远程传输方法，其特征在于，所述大文件传输服务模块对分包后的文件进行上传包括：尝试连接文件的目标路径，若测试成功，则在目标路径下创建一个temp文件以作为需要传输文件的承载；创建文件上传/下载线程和上传/下载监控线程；在文件上传/下载线程将文件根据分包的数值进行分块处理，并且通过Socket套接字服务进行文件的上传/下载；上传/下载监控线程根据transfer对象中的数值浮动将当前文件上传/下载的进度显示输出，并在传输进程结束时，根据bag对象以及transfer对象的数值比对，确认文件传输是否成功。9.根据权利要求1所述的大文件远程传输方法，其特征在于，反馈上传结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的上传结果信息，并根据所述上传结果信息判断上传操作是否成功；若成功，则输出上传成功提醒，封装成功信息并通过HTTP协议反馈至后端服务器的对应接口，所述后端服务器将对应文件的上传信息记录的状态置为已上传状态；若失败，则输出上传失败提醒。10.根据权利要求1所述的大文件远程传输方法，其特征在于，反馈下载结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的下载结果信息，根据所述下载结果信息判断下载操作是否成功；若成功，则通过前端输出下载成功提醒；若失败，则通过前端输出下载失败提醒。
说明书desc
技术领域本发明涉及计算机网络传输技术领域，具体涉及一种大文件远程传输方法。背景技术大文件传输一直以来都是当前计算机网络软件系统需要面对的核心技术要点。而涉及到大文件数据的传输功能时，不仅仅包括对文件如何传输，如何保障传输的可靠性，如何保证不会出现数据错乱等基本处理事项，还包括了大文件的延时性可靠对接，大文件的传输模式的构建以及大文件传输的监控传输过程等内容。传统的FTP文件传输协议需要用到两个TCP连接，一个是命令链路，用来在FTP客户端与服务器之间传递命令；另一个是数据链路，用来上传或下载数据。而FTP协议拥有两种工作方式：一是PORT方式，它由客户端向服务器的FTP端口发送连接请求，服务器接受连接，建立一条命令链路。当需要传送数据服务时，由客户端在命令链上用PORT命令通知服务器开启专用端口通知客户端的指定端口发送连接请求，建立一条数据链路来传送数据；二是PASV方式，它由客户端向服务器的FTP端口发送连接请求，服务器接受连接，建立一条命令链路。当需要传送数据时，服务器在命令链上用PASV命令通知客户端，让客户端向服务器的指定端口发送连接请求，建立一条数据链路来传送数据。这两种方式的命令链路的连接方法是一样的，而数据链路的建立方法就完全不同。HTTP超文本传输协议由两部分程序实现：一个是客户机程序，另一个是服务器程序，它们运行在不同的端系统中，通过交换HTTP报文进行会话，且HTTP定义了这些报文的格式，以及客户机和服务器是如何进行报文交换的，即：Web客户机是如何向Web服务器请求Web页面，以及服务器如何将Web页面传送给客户机。目前只是在网络应用服务软件系统中使用单一的FTP或者是HTTP协议进行文件的传输均存在缺陷。一是由于服务器建立FTP协议过于复杂，二是由人机交互界面与服务器使用HTTP协议对文件的大小进行传输时有一定的瓶颈限制。从而导致了对大文件的网络传输处理十分复杂，且需要保证文件传输的完整、稳定、并发以及可靠是难以实现的。发明内容本发明的目的就是针对现有技术的缺陷，提供一种大文件远程传输方法，能避免大文件传输过程中计算机对传输文件的大小限制，且能保证数据传输过程的完整性、稳定性、并发性以及可靠性。本发明的技术方案为：前端选择需要上传/下载的文件并向后端发起服务请求；后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端；前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口；大文件传输服务模块对接收的文件进行分包处理后上传/下载，并反馈上传/下载结果信息至前端。较为优选的，所述前端选择需要上传/下载的文件包括：当进行上传操作时，选择或输入文件的路径、文件的名称、文件的类型和文件的关联属性；当进行下载操作时，选择或输入文件的数据库ID、文件的路径、文件的名称、文件的类型和文件的关联属性。较为优选的，所述向后端发起服务请求包括：通过JavaScript特定的Ajax传输类的Function调用后端服务器提供的API接口实现后端服务调用，并通过HTTP协议将包裹的文件信息以及请求头的响应协议发送至服务器。较为优选的，所述后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端包括：当所述服务请求为文件上传请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验通过，则进行信息的数据预入库操作，生成一条文件上传信息记录，将该记录的状态置为待上传状态，根据服务器对应的规则重新封装文件信息并反馈至前端；若校验失败，则向前端反馈报错信息，等待重新校验；当所述服务请求为文件下载请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验失败，则向前端反馈报错信息，等待重新校验；若校验通过，则查询该文件对应的数据库状态；若文件对应的数据库状态为已存在，则根据服务器对应的规则重新封装文件信息并反馈至前端，若文件对应的数据库状态为不存在，则向前端反馈报错信息，等待重新校验。较为优选的，所述前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口包括：前端的文件上传/下载监听接口接收服务器发送的处理状态信息；若所述处理状态信息为文件校验失败信息，则通过前端界面输出提示信息，若所述处理状态信息为文件校验通过信息，且所述文件校验通过信息附带了所需要上传/下载的文件信息，则将包含有所述文件信息的封装体按照大文件传输服务模块的文件上传/下载接口提供的规范标准进行重新组合，并通过HTTP协议调用传输工具所指定监听的端口下的服务接口。较为优选的，所述大文件传输服务模块接收到文件后，还包括：判断文件路径下的文件是否是真实存在；若存在，则预设文件上传/下载所需准备的相关元素；获取文件的大小并创建一个size对象用于存放该文件的大小数值。较为优选的，所述大文件传输服务模块对接收的文件进行分包处理包括：使用QFile对需要上传/下载的文件进行分包处理，分包大小为通过文件的大小数值进行千分整除，并且将分包的数值创建一个bag对象用于存储，同时创建一个transfer对象，每传递成功一个分包，transfer对象进行加一操作。较为优选的，所述大文件传输服务模块对分包后的文件进行上传包括：尝试连接文件的目标路径，若测试成功，则在目标路径下创建一个temp文件以作为需要传输文件的承载；创建文件上传/下载线程和上传/下载监控线程；在文件上传/下载线程将文件根据分包的数值进行分块处理，并且通过Socket套接字服务进行文件的上传/下载；上传/下载监控线程根据transfer对象中的数值浮动将当前文件上传/下载的进度显示输出，并在传输进程结束时，根据bag对象以及transfer对象的数值比对，确认文件传输是否成功。较为优选的，反馈上传结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的上传结果信息，并根据所述上传结果信息判断上传操作是否成功；若成功，则输出上传成功提醒，封装成功信息并通过HTTP协议反馈至后端服务器的对应接口，所述后端服务器将对应文件的上传信息记录的状态置为已上传状态；若失败，则输出上传失败提醒。较为优选的，反馈下载结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的下载结果信息，根据所述下载结果信息判断下载操作是否成功；若成功，则通过前端输出下载成功提醒；若失败，则通过前端输出下载失败提醒。本发明的有益效果为：搭载大文件传输服务模块，在进行文件传输时，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，调用大文件传输服务接口，采用大文件传输服务模块对文件进行分包处理后再进行传输，避免了大文件传输过程中计算机对传输文件的大小限制。1、在文件传输过程中，创建的监控进程与传输进程共享相同的文件分包变量对象，使得传输工具可以一直进行实时的监控，可以观察到文件的传输进度，以及文件的大致传输速率。2、在文件上传、下载两类操作的每一步骤的信息转折点均实现了关键信息的包装转发，如上传操作的步骤一将文件信息转发给后端再由后端同步数据库记录，并且再转还给前端；步骤三由前端包装转发至大文件传输服务模块后再由大文件传输服务模块进行数据的传输；以及步骤五由前端中转携带反馈机制打通后端服务的数据库，实现了同步更新文件的上传终态，实现了数据的互通。3、通过在计算机上安装大文件传输服务模块进行大文件传输，服务器只作为数据库文件上传下载状态的更新方，极大地缓解了服务器承载大量冗长信息传输带来的处理压力，保证了数据传输过程的完整性、稳定性和可靠性。4、通过在计算机上安装大文件传输服务模块进行大文件传输，由于最终的数据传输是由独立的传输工具进行的，每一个客户机都可以安装该传输工具进行文件的传输，因其首先已经经过了服务器数据库的记录更新，所以极大地减弱了并发传输大文件带来的带宽影响，实现了高并发数据传输。附图说明图1为本方法的流程示意图；图2为本方法的上传流程示意图；图3为本方法的下载流程示意图。具体实施方式为了使本申请所要解决的技术问题、技术方案及有益效果更加清楚明白，以下结合附图及实施例，对本申请进行进一步详细说明。应当理解，此处所描述的具体实施例仅仅用以解释本申请，并不用于限定本申请。需要说明的是，当元件被称为“固定于”或“设置于”另一个元件，它可以直接在另一个元件上或者间接在该另一个元件上。当一个元件被称为是“连接于”另一个元件，它可以是直接连接到另一个元件或间接连接至该另一个元件上。需要理解的是，术语“长度”、“宽度”、“上”、“下”、“前”、“后”、“左”、“右”、“竖直”、“水平”、“顶”、“底”“内”、“外”等指示的方位或位置关系为基于附图所示的方位或位置关系，仅是为了便于描述本申请和简化描述，而不是指示或暗示所指的装置或元件必须具有特定的方位、以特定的方位构造和操作，因此不能理解为对本申请的限制。此外，术语“第一”、“第二”仅用于描述目的，而不能理解为指示或暗示相对重要性或者隐含指明所指示的技术特征的数量。由此，限定有“第一”、“第二”的特征可以明示或者隐含地包括一个或者更多个该特征。在本申请的描述中，“多个”的含义是两个或两个以上，除非另有明确具体的限定。实施例一图1示出了本申请较佳实施例提供的一种大文件远程传输方法的流程示意图，为了便于说明，仅示出了与本实施例相关的部分，详述如下：本方法的传输依赖于大文件传输服务模块实现，该模块为一种预先编写的文件传输软件，用户通过在计算机上安装该软件，既能实现本方案大文件传输服务模块的功能，该功能可用于实现本方法的大文件传输。基于该大文件传输服务模块进行文件传输的流程如下：前端选择需要上传/下载的文件并向后端发起服务请求；后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端；前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口；大文件传输服务模块对接收的文件进行分包处理后上传/下载，并反馈上传/下载结果信息至前端。较为优选的，所述前端选择需要上传/下载的文件包括：当进行上传操作时，选择或输入文件的路径、文件的名称、文件的类型和文件的关联属性；当进行下载操作时，选择或输入文件的数据库ID、文件的路径、文件的名称、文件的类型和文件的关联属性。较为优选的，所述向后端发起服务请求包括：通过JavaScript特定的Ajax传输类的Function调用后端服务器提供的API接口实现后端服务调用，并通过HTTP协议将包裹的文件信息以及请求头的响应协议发送至服务器。较为优选的，所述后端接收所述服务请求后，进行文件校验和数据库更新同步，并在处理完成后反馈处理状态信息至前端包括：当所述服务请求为文件上传请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验通过，则进行信息的数据预入库操作，生成一条文件上传信息记录，将该记录的状态置为待上传状态，根据服务器对应的规则重新封装文件信息并反馈至前端；若校验失败，则向前端反馈报错信息，等待重新校验；当所述服务请求为文件下载请求时，后端服务器接收到前端发送的文件后对其进行拆解，获取请求体中的Body，并且提取其中的文件信息；对所述文件信息的属性进行校验，若校验失败，则向前端反馈报错信息，等待重新校验；若校验通过，则查询该文件对应的数据库状态；若文件对应的数据库状态为已存在，则根据服务器对应的规则重新封装文件信息并反馈至前端，若文件对应的数据库状态为不存在，则向前端反馈报错信息，等待重新校验。较为优选的，所述前端接收到所述处理状态信息后，将需要上传/下载的文件按大文件传输服务模块提供的规范标准进行组合，并调用大文件传输服务接口包括：前端的文件上传/下载监听接口接收服务器发送的处理状态信息；若所述处理状态信息为文件校验失败信息，则通过前端界面输出提示信息，若所述处理状态信息为文件校验通过信息，且所述文件校验通过信息附带了所需要上传/下载的文件信息，则将包含有所述文件信息的封装体按照大文件传输服务模块的文件上传/下载接口提供的规范标准进行重新组合，并通过HTTP协议调用传输工具所指定监听的端口下的服务接口。较为优选的，所述大文件传输服务模块接收到文件后，还包括：判断文件路径下的文件是否是真实存在；若存在，则预设文件上传/下载所需准备的相关元素；获取文件的大小并创建一个size对象用于存放该文件的大小数值。较为优选的，所述大文件传输服务模块对接收的文件进行分包处理包括：使用QFile对需要上传/下载的文件进行分包处理，分包大小为通过文件的大小数值进行千分整除，并且将分包的数值创建一个bag对象用于存储，同时创建一个transfer对象，每传递成功一个分包，transfer对象进行加一操作。较为优选的，所述大文件传输服务模块对分包后的文件进行上传包括：尝试连接文件的目标路径，若测试成功，则在目标路径下创建一个temp文件以作为需要传输文件的承载；创建文件上传/下载线程和上传/下载监控线程；在文件上传/下载线程将文件根据分包的数值进行分块处理，并且通过Socket套接字服务进行文件的上传/下载；上传/下载监控线程根据transfer对象中的数值浮动将当前文件上传/下载的进度显示输出，并在传输进程结束时，根据bag对象以及transfer对象的数值比对，确认文件传输是否成功。较为优选的，反馈上传结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的上传结果信息，并根据所述上传结果信息判断上传操作是否成功；若成功，则输出上传成功提醒，封装成功信息并通过HTTP协议反馈至后端服务器的对应接口，所述后端服务器将对应文件的上传信息记录的状态置为已上传状态；若失败，则输出上传失败提醒。较为优选的，反馈下载结果信息至前端后，还包括：前端接收大文件传输服务模块反馈的下载结果信息，根据所述下载结果信息判断下载操作是否成功；若成功，则通过前端输出下载成功提醒；若失败，则通过前端输出下载失败提醒。实施例二如图2所示，本实施例针对文件的上传流程，进行说明，该流程具体如下：步骤一，前端选择需要上传文件并发起后端服务请求。在Web程序的前端浏览器页面相应的业务入口选择需要上传的文件，由前端包装需要上传的文件信息，包括文件的路径、文件的名称、文件的类型、文件的关联属性等，并通过JavaScript特定的Ajax传输类的Function调用后端服务器提供的API接口调用后端服务，通过HTTP协议将包裹的文件信息以及请求头的响应协议发送至服务器。步骤二，后端接收前端发起的请求进行文件校验、数据库更新同步以及处理后信息返回给前端。后端服务器接收到前端发送的包裹信息进行拆解，获取请求体中的Body，并且提取其中的文件信息，包括文件的路径、文件的名称、文件的类型、文件的关联属性等，校验相关属性后通过JDBC服务调用诸如MySQL、Hive等数据库进行信息的数据预入库操作，生成一条文件上传信息记录，并将状态置为0以表示该条记录对应的文件目前处于待上传状态。若文件信息经后端校验失败，则返回一条报错信息，通知前端信息有误，需要重新校验后再次进行请求。若成功则重新根据服务器规则封装文件信息，包括文件的路径、文件的名称、文件的类型、文件所需要传递的目标路径以及确认成功等信息反馈至前端。步骤三，前端接收到后端反馈后进行信息处理并包装与转发给大文件传输工具。前端的文件上传监听接口接收到服务器发送来的处理信息后，根据反馈信息进行处理，若反馈信息为文件信息后端校验失败，则前端界面弹出提示框，提示用户重新进行选择或者所选文件存在问题故障；若反馈信息为正确，并且附带了所需要上传的文件相关信息，则将该反馈的封装体，按照大文件传输工具的文件上传接口提供的规范标准进行重新组合并通过HTTP协议调用传输工具所指定监听的端口下的服务接口。步骤四，大文件传输工具接收到前端所发送的需要上传的文件请求信息后，对文件进行预处理后进行文件上传，并于结束后反馈结果信息给前端。大文件传输工具接收到前端所发送的需要上传文件的请求信息，进行body的拆解以及上传。获取文件的名称、文件的路径以及文件的目标路径三类核心信息项之后，进行文件上传的核心功能。第一步，通过QFileInfo下的exists方法判断文件路径下的文件是否是真实存在着的；第二步，预设文件上传所需准备的相关元素；第三步，通过QFileInfo下的size方法获取文件的大小并创建一个size对象用于存放该文件的大小数值；第四步：使用QFile对需要上传的文件进行分包处理，分包大小为通过文件的大小数值进行千分整除，并且将分包的数值创建一个bag对象用于存储，同时创建一个transfer对象，每传递成功一个分包，transfer对象进行加一操作；第五步，尝试连接文件的目标路径，若测试成功，则在目标路径下创建一个temp文件以作为需要传输文件的承载；第五步，创建两个新的线程，其中之一为文件上传线程，使用Socket套接字实现文件上传的服务。另一为上传监控线程，实现文件进行上传时对文件的传输进度以及状态进行监控。第六步，在文件上传线程将文件根据分包的数值进行分块处理，并且通过Socket套接字服务进行文件的上传，同时，监控线程根据第四步创建的transfer对象中的数值浮动以进度条的形式显示当前文件上传的进度，以及当传输进程结束时，根据bag对象以及transfer对象的数值比对，确认文件传输是否成功的状态。服务结束后同时将结果通过HTTP协议下的服务反馈机制反馈至前端。步骤五，前端接收大文件传输工具反馈信息后包装转发给后端更新数据库记录并在界面做出相应提示。前端接收文件传输工具所反馈信息，拆解信息获取关键的状态字段，判断该次上传的操作是否成功，若成功则同时封装成功信息并通过HTTP协议反馈至后端服务器的对应接口，并由其将对应的文件上传的信息记录状态置为1以表示该条记录对应的文件目前为成功上传的状态。若失败则直接前端弹出窗口提示用户该次上传的操作已失败，需要重新进行文件的上传。实施例三如图3所示，本实施例针对文件的下载流程，进行说明，该流程具体如下：步骤一，前端选择需要下载文件并发起后端服务请求。在Web程序的前端浏览器页面相应的业务入口选择需要下载的文件，由前端包装需要下载的文件信息，包括文件的数据库ID、文件的路径、文件的名称、文件的类型、文件的关联属性等，并通过JavaScript特定的Ajax传输类的Function调用后端服务器提供的API接口调用后端服务，通过HTTP协议将包裹的文件信息以及请求头的响应协议发送至服务器。步骤二，后端接收前端发起的请求进行文件校验、数据库更新同步以及处理后信息返回给前端。后端服务器接收到前端发送的包裹信息进行拆解，获取请求体中的Body，并且提取其中的文件信息，包括文件的数据库ID、文件的路径、文件的名称、文件的类型、文件的关联属性等，校验相关属性后通过JDBC服务调用诸如MySQL、Hive等数据库进行信息的数据查询操作，查询该文件对应的数据库状态。若文件信息经后端校验状态为0，则返回一条异常信息，通知前端信息有误，需要重新校验后再次进行请求。若文件信息经后端校验状态为1则重新根据服务器规则封装文件信息，包括文件的路径、文件的名称、文件的类型、文件所需要传递的目标路径以及确认成功等信息反馈至前端。步骤三，前端接收到后端反馈后进行信息处理并包装与转发给大文件传输工具。前端的文件下载监听接口接收到服务器发送来的处理信息后，根据反馈信息进行处理，若反馈信息为文件信息后端校验失败，则前端界面弹出提示框，提示用户重新进行选择或者所选文件存在问题故障；若反馈信息为正确，并且附带了所需要下载的文件相关信息，则将该反馈的封装体，按照大文件传输工具的文件下载接口提供的规范标准进行重新组合并通过HTTP协议调用传输工具所指定监听的端口下的服务接口。步骤四，大文件传输工具接收到前端所发送的需要下载的文件请求信息后，对文件进行预处理后进行文件下载，并于结束后反馈结果信息给前端。大文件传输工具接收到前端所发送的需要下载文件的请求信息，进行body的拆解以及下载。获取文件的名称、文件的路径以及文件的目标路径三类核心信息项之后，进行文件下载的核心功能。第一步，通过QFileInfo下的exists方法判断文件路径下的文件是否是真实存在着的；第二步，预设文件下载所需准备的相关元素；第三步，通过QFileInfo下的size方法获取文件的大小并创建一个size对象用于存放该文件的大小数值；第四步：使用QFile对需要下载的文件进行分包处理，分包大小为通过文件的大小数值进行千分整除，并且将分包的数值创建一个bag对象用于存储，同时创建一个transfer对象，每传递成功一个分包，transfer对象进行加一操作；第五步，尝试连接文件的目标路径，若测试成功，则在目标路径下创建一个temp文件以作为需要传输文件的承载；第五步，创建两个新的线程，其中之一为文件下载线程，使用Socket套接字实现文件下载的服务。另一为下载监控线程，实现文件进行下载时对文件的传输进度以及状态进行监控。第六步，在文件下载线程将文件根据分包的数值进行分块处理，并且通过Socket套接字服务进行文件的下载，同时，监控线程根据第四步创建的transfer对象中的数值浮动以进度条的形式显示当前文件下载的进度，以及当传输进程结束时，根据bag对象以及transfer对象的数值比对，确认文件传输是否成功的状态。服务结束后同时将结果通过HTTP协议下的服务反馈机制反馈至前端。步骤五，前端接收大文件传输工具反馈信息后在界面做出相应提示。前端接收文件传输工具所反馈信息，拆解信息获取关键的状态字段，判断该次下载的操作是否成功，若成功则弹出窗口提示该次下载的操作已经成功实施。若失败则直接前端弹出窗口提示用户该次下载的操作失败，需要重新进行文件的下载。实施例中各步骤的序号的大小并不意味着执行顺序的先后，各过程的执行顺序应以其功能和内在逻辑确定，而不应对本申请实施例的实施过程构成任何限定。以上所述实施例仅用以说明本申请的技术方案，而非对其限制；尽管参照前述实施例对本申请进行了详细的说明，本领域的普通技术人员应当理解：其依然可以对前述各实施例所记载的技术方案进行修改，或者对其中部分技术特征进行等同替换；而这些修改或者替换，并不使相应技术方案的本质脱离本申请各实施例技术方案的精神和范围，均应包含在本申请的保护范围之内。
