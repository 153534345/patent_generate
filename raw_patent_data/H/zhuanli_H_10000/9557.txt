标题title
一种用户列表处理方法、系统、电子设备及存储介质
摘要abst
本申请实施例公开了一种用户列表处理方法、系统、电子设备及存储介质。本申请实施例提供的技术方案，通过基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。采用上述技术手段，可以减少系统计算资源的占用，并提升用户列表遍历时效，优化用户列表的遍历效果。
权利要求书clms
1.一种用户列表处理方法，其特征在于，包括：基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，所述用户列表的用户根据所述订阅时间信息排序；根据周期性遍历到的所述订阅时间信息以及设定的分段列表用户数量，定位所述用户列表中对应各个分段列表的起始位置，基于所述起始位置生成所述用户列表的分段数据并缓存；在遍历所述用户列表执行关联业务时，从缓存中提取对应的所述分段数据，基于所述分段数据进行所述用户列表的分段遍历。2.根据权利要求1所述的用户列表处理方法，其特征在于，所述在遍历所述用户列表执行关联业务时，从缓存中提取对应的所述分段数据，基于所述分段数据进行所述用户列表的分段遍历，包括：接收请求端发送的所述用户列表的分段数据请求；响应于所述分段数据请求，从缓存中提取对应所述用户列表的所述分段数据；将所述分段数据返回至所述请求端，以用于所述请求端进行所述用户列表的分段遍历，执行所述用户列表的关联业务。3.根据权利要求2所述的用户列表处理方法，其特征在于，在接收请求端发送的所述用户列表的分段数据请求之后，还包括：确定缓存中不存在与所述用户列表相匹配的所述分段数据；响应于所述分段数据请求，返回默认遍历数据至所述请求端，以供所述请求端基于所述默认遍历数据遍历所述用户列表。4.根据权利要求3所述的用户列表处理方法，其特征在于，所述默认遍历数据用于指示所述请求端对所述用户列表进行完整列表的串行遍历。5.根据权利要求3所述的用户列表处理方法，其特征在于，在确定缓存中不存在与所述用户列表相匹配的所述分段数据之后，还包括：新增一个分段数据构建任务，基于所述分段数据构建任务，构建与所述用户列表相匹配的所述分段数据。6.根据权利要求1所述的用户列表处理方法，其特征在于，在基于所述起始位置生成所述用户列表的分段数据并缓存之后，还包括：定时检测所述用户列表是否更新，在确定所述用户列表更新时，更新缓存中与所述用户列表对应的所述分段数据。7.根据权利要求1所述的用户列表处理方法，其特征在于，所述根据周期性遍历到的所述订阅时间信息以及设定的分段列表用户数量，定位所述用户列表中对应各个分段列表的起始位置，包括：在当前所述订阅时间信息的排位与所述分段列表用户数量对应时，确定当前所述订阅时间信息的对应用户位置为所述起始位置。8.一种用户列表处理系统，其特征在于，包括：周期性遍历模块，用于基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，所述用户列表的用户根据所述订阅时间信息排序；定位模块，用于根据周期性遍历到的所述订阅时间信息以及设定的分段列表用户数量，定位所述用户列表中对应各个分段列表的起始位置，基于所述起始位置生成所述用户列表的分段数据并缓存；分段遍历模块，用于在遍历所述用户列表执行关联业务时，从缓存中提取对应的所述分段数据，基于所述分段数据进行所述用户列表的分段遍历。9.一种电子设备，其特征在于，包括：存储器以及一个或多个处理器；所述存储器，用于存储一个或多个程序；当所述一个或多个程序被所述一个或多个处理器执行，使得所述一个或多个处理器实现如权利要求1-7任一所述的用户列表处理方法。10.一种包含计算机可执行指令的存储介质，其特征在于，所述计算机可执行指令在由计算机处理器执行时用于执行如权利要求1-7任一所述的用户列表处理方法。
说明书desc
技术领域本申请实施例涉及计算机技术领域，尤其涉及一种用户列表处理方法、系统、电子设备及存储介质。背景技术目前，在直播软件、社交软件等应用场景中，都需要涉及到遍历用户列表以实现相关的业务功能。例如，在主播开播时，需要遍历用户列表向所有订阅用户推送开播消息。对于订阅用户量较大的情况，在遍历用户列表时，会采用列表分段并行遍历的方式，将用户列表拆分为多个分段，根据完整列表排位以及每个分段的用户数量定位各个分段起始位置的用户，然后从起始位置的用户开始并行遍历分段列表推送开播消息。以此可以提升消息推送时效，避免影响列表尾部用户的消息推送时效。但是，现有并行遍历分段列表方案在进行起始位置的用户定位时，对应每一个分段列表的起始位置，都需要根据用户列表中用户的实时排位，从0开始依序定位到指定排位的位置，进而确定对应分段列表的起始位置。整个过程耗时较大，同时也占用了系统大量的计算资源，影响系统服务性能以及其他业务的正常运行。发明内容本申请实施例提供一种用户列表处理方法、系统、电子设备及存储介质，能够提升用户列表遍历时效，解决用户列表遍历耗时低效的技术问题。在第一方面，本申请实施例提供了一种用户列表处理方法，包括：基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。在第二方面，本申请实施例提供了一种用户列表处理系统，包括：周期性遍历模块，用于基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；定位模块，用于根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；分段遍历模块，用于在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。在第三方面，本申请实施例提供了一种电子设备，包括：存储器以及一个或多个处理器；所述存储器，用于存储一个或多个程序；当所述一个或多个程序被所述一个或多个处理器执行，使得所述一个或多个处理器实现如第一方面所述的用户列表处理方法。在第四方面，本申请实施例提供了一种包含计算机可执行指令的存储介质，所述计算机可执行指令在由计算机处理器执行时用于执行如第一方面所述的用户列表处理方法。本申请实施例通过基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。采用上述技术手段，通过周期性遍历用户列表，结合订阅时间信息定位分段列表的起始位置并缓存，以供后续关联业务直接调用，以此可以减少系统计算资源的占用，并提升用户列表遍历时效，优化用户列表的遍历效果。附图说明图1是本申请实施例提供的一种用户列表处理方法的流程图；图2是本申请实施例中的分段数据请求流程图；图3是本申请实施例中的分段数据返回流程图；图4是本申请实施例中的默认遍历数据返回流程图；图5是本申请实施例提供的一种用户列表处理系统的结构示意图；图6是本申请实施例提供的一种电子设备的结构示意图。具体实施方式为了使本申请的目的、技术方案和优点更加清楚，下面结合附图对本申请具体实施例作进一步的详细描述。可以理解的是，此处所描述的具体实施例仅仅用于解释本申请，而非对本申请的限定。另外还需要说明的是，为了便于描述，附图中仅示出了与本申请相关的部分而非全部内容。在更加详细地讨论示例性实施例之前应当提到的是，一些示例性实施例被描述成作为流程图描绘的处理或方法。虽然流程图将各项操作描述成顺序的处理，但是其中的许多操作可以被并行地、并发地或者同时实施。此外，各项操作的顺序可以被重新安排。当其操作完成时所述处理可以被终止，但是还可以具有未包括在附图中的附加步骤。所述处理可以对应于方法、函数、规程、子例程、子程序等等。本申请提供的一种用户列表处理方法，旨在通过周期性遍历用户列表，结合订阅时间信息定位分段列表的起始位置并缓存，以用于后续执行用户列表关联业务时，直接调用缓存中的分段列表数据进行用户列表分段遍历。以此来节省用户列表遍历的耗时，提升用户列表遍历时效，并减少用户列表遍历过程中的计算资源占用。对于传统的用户列表遍历方式，其在进行用户列表遍历时，一般采用分段列表并列遍历的方式。由于用户列表采用pika的zset数据结构来存储。zset数据结构分段的关键点是定位每一分段的起始位置，基于该起始位置进行分段列表并列遍历。例如，对于拥有3000w个用户的zset集合，需要分为5段，每段用户数为600w，每一段的起始位置在用户列表的起始排位分别是1、600w、1200w、1800w、2400w。其定位起始位置的耗时与对应用户在用户列表中的起始排位大小有关。定位起始位置时，每次都先找到zset在磁盘的第一个用户，然后往后一个一个用户查找，直到找到对应1、600w、1200w、1800w和2400w的起始排位位置的用户。显然，起始位置处用户的排位越大，那么根据起始排位找到起始位置的耗时越大。经测试验证，对于3000w个用户的zset集合，起始排位取值为500w、1000w、1500w、2000w、2500w的耗时大概分别在0.5s、1s、1.5s、2s、2.5s附近波动。且耗时越大，消耗的计算资源也就越大。进一步会阻塞pika对其他请求的响应，增加其他业务的处理耗时，影响其他业务的运行。并且每次进行一个用户列表关联业务，都需要重新定位起始位置，确定用户列表分段方案，并根据分段方案进行分段列表的并列遍历，以此会消耗系统较多的服务性能，进一步影响系统的运行。基于此，提供本申请实施例的一种用户列表处理方法，以解决现有用户列表遍历耗时低效的技术问题。实施例：图1给出了本申请实施例提供的一种用户列表处理方法的流程图，本实施例中提供的用户列表处理方法可以由用户列表处理设备执行，该用户列表处理设备可以通过软件和/或硬件的方式实现，该用户列表处理设备可以是两个或多个物理实体构成，也可以是一个物理实体构成。一般而言，该用户列表处理设备可以是服务器主机等处理设备。下述以该用户列表处理设备为执行用户列表处理方法的主体为例，进行描述。参照图1，该用户列表处理方法具体包括：S110、基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序。为了提升用户列表遍历的时效性，缩短用户列表分段方案的计算耗时，并减少分段方案计算的资源占用，本申请实施例采用周期性遍历用户列表定位分段列表起始位置的方式，在相隔周期之间休眠一段时间，以避免分段方案计算流程长期占用系统计算资源。并且，由于用户列表中的各个用户是基于订阅时间信息的先后顺序进行排序的。订阅时间信息精确到毫秒甚至微秒级别，以此可以确保订阅时间信息的唯一性，避免两个用户之间的订阅时间信息重叠。可以理解的是，订阅时间信息相当于一个分值，订阅时间信息越靠前，其分值越大，则对应用户在用户列表中的排位也就越大。由于用户列表采用zset数据结构存储各个用户，各个用户按照订阅时间信息依序排位。而pika存储服务集群在基于用户排位进行起始位置定位时，无法记忆前一个定位到的起始位置，在进行分段列表各个起始位置定位时，每一次定位操作都需要从用户列表中排位为1的用户开始依序遍历，直到确定对应起始排位的用户作为分段列表的起始位置。因此本申请实施例在周期性遍历用户列表时，每次都记录当前周期最后一个遍历的用户的订阅时间信息，以此可以标记出下一个遍历周期的起始遍历用户，避免每一次遍历操作都需要从第一个排位进行遍历的情况，进而提升分段列表起始位置的时效性。在进行周期性遍历过程中，为了避免长期占用系统计算资源，本申请实施例对每个周期设置固定的遍历用户数量，在完成设定遍历用户数量的遍历操作后，遍历程序休眠设定时长，并在设定休眠时长之后，基于前一个遍历周期中所记录的最后一个遍历用户的订阅时间信息，从该订阅时间信息对应用户的下一个用户开始执行当前周期的用户列表遍历，以此类推，循环遍历整个用户列表，直至定位到所有分段列表的起始位置为止。S120、根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存。进一步的，在基于设定休眠时长周期性遍历用户列表的过程中，即可根据周期性遍历到的订阅时间信息确定已经遍历过的用户数量，结合预设定的分段列表用户数量，即可定位到各个分段列表的起始位置。可以理解的是，对于第一个分段列表，其起始位置为用户列表的第一个用户，可以直接进行起始位置定位。在此之后，当遍历过的用户数量达到该分段列表用户数量时，表示完成一个分段列表所有用户的遍历，下一个遍历到的用户为下一个分段列表的起始位置。以此类推，通过不断地周期性遍历用户列表，最终定位到用户列表中各个分段列表的起始位置。示例性的，以3000w粉丝的主播为例，在进行其用户列表分段方案构建时，以用户列表分五段为例。用户列表分段后，各个分段列表的起始位置分别为排在1、600w、1200w、1800w、2400w位置处的用户。在进行各个分段列表的起始位置定位时，通过周期性多次调用基于分值的分页遍历工具zrangeByScore，逐渐定位到期望的分段列表起始位置。分页遍历工具中，“key”为用户列表的标识信息，用于确定进行周期性遍历的用户列表。“score_start”为当前遍历周期的起始遍历用户的分值。对于第一次用户列表的周期性遍历，其起始遍历用户为用户列表的第一个用户，以其对应的分值作为“score_start”。在此之后，则根据前一个遍历周期记录的最后一个遍历用户的订阅时间信息，以该订阅时间信息之后的一个订阅时间信息作为当前遍历周期的“score_start”，进而确定每个遍历周期的起始遍历用户。“count”为每一个周期需要遍历的用户数量。基于该遍历工具周期性遍历用户列表，直到遍历用户数量达到分段列表用户数量，确定下一个遍历用户为分段列表的起始位置，以此类推，完成用户列表中所有分段列表的起始位置定位。每次调用分页遍历工具时，通过控制“count”的大小来控制pika存储服务集群的资源消耗以及计算耗时。并且每次调用分页遍历工具后会间隔休眠一段时间。以此可以把原先集中进行分段方案计算的资源消耗分摊到多次完成，从而避免pika存储服务集群在计算分段方案时影响系统其它业务的执行。并且，由于pika存储服务集群的底层只维护了订阅时间信息与用户关联的索引，定位起始遍历用户的分值不需要像定位起始排位位置那样每次都从用户列表的第一个用户开始逐个遍历磁盘，而是能根据索引快速定位到起始遍历用户的分值对应的用户在磁盘的位置。以此来提升分段列表起始位置定位的时效，减少分段方案的计算耗时，并避免计算资源的占用。需要说明的是，上述每一个周期需要遍历的用户数量“count”可以根据分段方案计算的时效性需求，以及系统计算资源的合理使用时长进行适应性设置。同理，对于分段列表用户数量，可以结合分段方案计算的时间复杂度，以及用户列表关联业务对用户列表遍历的时效性需求设置。本申请实施例对分段列表用户数量以及每一个周期需要遍历的用户数量“count”的取值不做固定限制，在此不多赘述。进一步地，根据已确定的各个分段列表的起始位置，生成该用户列表的分段数据，以该分段数据作为用户列表的分段方案存储至本地缓存中，以供后续用户列表关联业务的调用。可以理解的是，由于预先将用户列表的分段方案缓存，后续用户列表关联业务可以直接调用，以此可以提升用户列表关联业务执行的时效性，并减少用户列表关联业务执行时的计算资源占用，优化用户列表遍历效果。示例性的，以用户消息推送的平均速度为每秒5w用户为例，如果每个分段列表的用户数在100w内波动的话，则该分段列表的用户消息推送需要20s的总耗时。对于包含3000w用户的用户列表，分五段后，每一段分段列表的长度为600w，并行处理五个分段列表时，总耗时与串行遍历600w用户的列表的总耗时相当。假设一天后，该用户列表的用户数量增长为3050w，则通过定时更新分段方案，依然分5段遍历用户列表，每段长度为612w，那么总耗时与串行遍历612w用户的列表的总耗时相当。只是多了12w/5w＝2.4S的总耗时，对用户列表尾部用户的消息推送影响甚微。而用户列表一般是一个缓慢增长的过程，每天增长的量很少达到百万级别，所以无需实时计算分段方案，做到每天更新即可。基于此，通过上述周期性遍历用户列表，定位分段列表的起始位置，可以提前计算用户列表的分段方案并缓存到数据库，之后可以间隔一段时间后更新，以此来优化用户列表遍历时效性。S130、在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。基于已缓存的分段数据，在执行用户列表的关联业务时，即可从缓存中提取对应用户列表的分段数据，基于该分段数据提供的分段方案，进行用户列表的分段并行遍历，以此来提升用户列表遍历的时效性。具体地，如图2所示，在执行用户列表关联业务时，通过请求端向本申请实施例的用户列表处理设备发送分段数据请求，用户列表处理设备在接收到分段数据请求时，会根据当前请求分段数据的对应用户列表查询缓存，判断缓存中是否有对应该用户列表的分段数据，进而根据查询结果返回相应的用户列表遍历方案给请求端。可以理解的是，分段数据在存储的时候以用户列表的标识信息作为数据索引，以便于后续根据用户列表信息查询缓存，判断是否命中对应的分段数据。其中，若缓存中存在分段数据，则返回相应的分段数据给请求端。如图3所示，分段数据返回流程包括：S1301、接收请求端发送的用户列表的分段数据请求；S1302、响应于分段数据请求，从缓存中提取对应用户列表的分段数据；S1303、将分段数据返回至请求端，以用于请求端进行用户列表的分段遍历，执行用户列表的关联业务。通过在命中缓存中的分段数据后，将分段数据返回至请求端，以提供给请求端一个用户列表的分段方案。请求端基于该分段数据，即可对应进行用户列表的分段并行遍历。例如，在直播平台运营场景中，需要将主播开播信息推送给用户列表中的各个用户。则以执行当前信息推送业务的服务器作为请求端，向本申请实施例的用户列表处理设备发送分段数据请求。用户列表处理设备响应该分段数据请求，查询缓存，在命中对应分段数据后，将分段数据返回至请求端。请求端基于该分段数据，即可对应将用户列表分段成多个分段列表，并从各个分段列表的起始位置开始进行分段列表的并行遍历，对遍历到的用户进行开播消息推送，以此完成本申请实施例基于用户列表的关联业务。另一方面，若缓存中不存在分段数据，则会返回一个默认遍历数据给请求端。如图4所示，默认遍历数据的返回流程包括：S1304、确定缓存中不存在与用户列表相匹配的分段数据；S1305、响应于分段数据请求，返回默认遍历数据至请求端，以供请求端基于默认遍历数据遍历用户列表。可以理解的是，为了避免请求端请求不到分段数据进而影响关联业务的执行，本申请实施例通过预先设置一个默认遍历数据，以在查询不到相匹配的分段数据时，返回该默认遍历数据给请求端，指示请求端以默认遍历数据进行用户列表遍历操作。默认遍历数据根据实际需要设置，本申请实施例对具体的遍历方案不做固定限制，在此不多赘述。可选的，默认遍历数据用于指示请求端对用户列表进行完整列表的串行遍历。对于没有分段数据的用户列表，为了保障列表遍历流程的正常执行，则通过返回指示请求端进行整个用户列表的串行遍历，提供请求端一个平滑过渡的用户列表遍历方案，确保关联业务处理的稳定性。需要说明的是，上述基于分段数据遍历用户列表以执行关联业务的主体可以是独立的服务器，也可以是本申请实施例的用户列表处理设备，即分段数据的生成，用户列表的遍历及关联业务的执行，都可以在本申请实施例的用户列表处理设备上执行。根据系统具体框架设置，可以适应性选择主体执行该遍历用户列表的关联业务，本申请实施例对具体的系统框架不做固定限制，在此不做赘述。可选的，如图2所示，在确定系统没有对应的分段数据后，用户列表处理设备还新增一个分段数据构建任务，基于分段数据构建任务，构建与用户列表相匹配的分段数据。可以理解的是，若缓存中为存储对应用户列表的分段数据，为了保证下一次分段方案调用时，可以返回相应的分段数据给请求端。则本申请实施例通过新增一个分段数据构建任务，参照上述步骤S110-S120生成用户列表的分段数据并缓存，以便于后续请求端调用。以此可以进一步提升用户列表遍历的稳定性，提升请求端的业务执行时效。在一个实施例中，用户列表处理设备还定时检测用户列表是否更新，在确定用户列表更新时，更新缓存中与用户列表对应的分段数据。例如，每隔一天检测用户列表是否更新，在检测到用户列表更新后，参照上述步骤S110-S120重新生成用户列表的分段数据并更新至缓存中，以此来进一步提升用户列表遍历的时效，确保分段数据的高可用性。需要说明的是，由于用户列表在实时更新，而分段数据是定时更新的，则用户列表更新后，也会直接使用缓存中的对应分段数据进行用户列表分段遍历。例如，对于包含3000w用户的用户列表，分五段后，每一段分段列表的长度为600w。一小时后，该用户列表的用户数量增长为3001w，此时基于缓存中的分段数据，仍旧从原来计算的起始位置进行用户列表分段遍历。此时最后一个分段列表多了1W用户，以用户消息推送的平均速度为每秒5w用户为例，该分段列表的遍历耗时会比原来多0.2s，对整体的遍历耗时影响较小。在此之后，当更新缓存的分段数据后，则会重新根据3001w用户平均分段，重新确定分段列表的起始位置，以将新增用户遍历的耗时分摊给各个分段列表，进而缩短整体的用户列表耗时，提升用户列表遍历时效。上述，通过基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。采用上述技术手段，通过周期性遍历用户列表，结合订阅时间信息定位分段列表的起始位置并缓存，以供后续关联业务直接调用，以此可以减少系统计算资源的占用，并提升用户列表遍历时效，优化用户列表的遍历效果。在上述实施例的基础上，图5为本申请提供的一种用户列表处理系统的结构示意图。参考图5，本实施例提供的用户列表处理系统具体包括：周期性遍历模块21、定位模块22和分段遍历模块23。其中，周期性遍历模块21用于基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；定位模块22用于根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；分段遍历模块23用于在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。周期性遍历模块21具体用于在当前订阅时间信息的排位与分段列表用户数量对应时，确定当前订阅时间信息的对应用户位置为起始位置。分段遍历模块23具体用于接收请求端发送的用户列表的分段数据请求；响应于分段数据请求，从缓存中提取对应用户列表的分段数据；将分段数据返回至请求端，以用于请求端进行用户列表的分段遍历，执行用户列表的关联业务。分段遍历模块23还用于确定缓存中不存在与用户列表相匹配的分段数据；响应于分段数据请求，返回默认遍历数据至请求端，以供请求端基于默认遍历数据遍历用户列表；默认遍历数据用于指示请求端对用户列表进行完整列表的串行遍历。分段遍历模块23还用于新增一个分段数据构建任务，基于分段数据构建任务，构建与用户列表相匹配的分段数据。该用户列表处理系统还用于定时检测用户列表是否更新，在确定用户列表更新时，更新缓存中与用户列表对应的分段数据。上述，通过基于设定休眠时长周期性遍历用户列表，每一个遍历周期记录最后一个遍历的用户的订阅时间信息，以用于标记下一个遍历周期的起始遍历用户，用户列表的用户根据订阅时间信息排序；根据周期性遍历到的订阅时间信息以及设定的分段列表用户数量，定位用户列表中对应各个分段列表的起始位置，基于起始位置生成用户列表的分段数据并缓存；在遍历用户列表执行关联业务时，从缓存中提取对应的分段数据，基于分段数据进行用户列表的分段遍历。采用上述技术手段，通过周期性遍历用户列表，结合订阅时间信息定位分段列表的起始位置并缓存，以供后续关联业务直接调用，以此可以减少系统计算资源的占用，并提升用户列表遍历时效，优化用户列表的遍历效果。本申请实施例提供的用户列表处理系统可以用于执行上述实施例提供的用户列表处理方法，具备相应的功能和有益效果。在上述实际上例的基础上，本申请实施例还提供了一种电子设备，参照图6，该电子设备包括：处理器31、存储器32、通信模块33、输入装置34及输出装置35。存储器32作为一种计算机可读存储介质，可用于存储软件程序、计算机可执行程序以及模块，如本申请任意实施例所述的用户列表处理方法对应的程序指令/模块。通信模块33用于进行数据传输。处理器通过运行存储在存储器中的软件程序、指令以及模块，从而执行设备的各种功能应用以及数据处理，即实现上述的用户列表处理方法。输入装置34可用于接收输入的数字或字符信息，以及产生与设备的用户设置以及功能控制有关的键信号输入。输出装置35可包括显示屏等显示设备。上述提供的电子设备可用于执行上述实施例提供的用户列表处理方法，具备相应的功能和有益效果。在上述实施例的基础上，本申请实施例还提供一种包含计算机可执行指令的存储介质，所述计算机可执行指令在由计算机处理器执行时用于执行一种用户列表处理方法，存储介质可以是任何的各种类型的存储器设备或存储设备。当然，本申请实施例所提供的一种包含计算机可执行指令的存储介质，其计算机可执行指令不限于如上所述的用户列表处理方法，还可以执行本申请任意实施例所提供的用户列表处理方法中的相关操作。上述仅为本申请的较佳实施例及所运用的技术原理。本申请不限于这里所述的特定实施例，对本领域技术人员来说能够进行的各种明显变化、重新调整及替代均不会脱离本申请的保护范围。因此，虽然通过以上实施例对本申请进行了较为详细的说明，但是本申请不仅仅限于以上实施例，在不脱离本申请构思的情况下，还可以包括更多其他等效实施例，而本申请的范围由权利要求的范围决定。
