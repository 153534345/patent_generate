标题title
一种应用程序编程接口API管理方法、装置、设备及介质
摘要abst
本发明公开应用程序编程接口API管理方法、装置、设备及介质。应用程序编程接口API管理方法，包括构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明的按项目场景进行模块分化分类，按模块建立模块API文件，相当于按照项目场景就模块进行API的拆解，而不是把所有API都聚集在一起。由于分类的原因，网络层需要业务实现方去写的总量也变少了，总体上减少了工作量。
权利要求书clms
1.一种应用程序编程接口API管理方法，其特征在于，包括：构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。2.根据权利要求1所述的方法，其特征在于，所述构建API父类文件具体包括：对所述API父类文件进行公开功能的编写，集成管理所述公开功能，所述公开功能包括以下封装的功能：APP向服务器请求数据、APP向服务器上传数据和APP下载数据。3.根据权利要求2所述的方法，其特征在于，每个所述模块API文件对该模块的网络请求接口进行收纳，且能调用所述API父类文件的公开功能进行网络请求。4.根据权利要求3所述的方法，其特征在于，所述接口用于调用所述API父类文件进行网络请求具体包括：所述接口用于调用所述API父类文件的公开功能进行网络请求。5.根据权利要求4所述的方法，其特征在于，所述按项目场景进行模块分化分类，按模块建立模块API文件具体包括：按项目场景对业务模块进行模块分化分类，根据项目的业务分为不同子类，所述模块API文件包括不同子类。6.根据权利要求5所述的方法，其特征在于，所述公开功能在父类高级语言应用程序编程接口中执行。7.一种应用程序编程接口API请求方法，其特征在于，包括：发起网络请求；根据所述网络请求的项目场景匹配对应的模块API文件，在该对应的模块API文件调用所述项目场景的接口；所述接口用于调用API父类文件进行网络请求；接收基于所述网络请求返回的目标数据，并将目标数据返回至所述应用程序。8.一种应用程序编程接口API管理装置，其特征在于，包括：构建模块，用于构建API父类文件，所述API父类文件可用于网络请求；分类和建立模块，用于按项目场景进行模块分化分类，按模块建立模块API文件；接收和开放模块，用于接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。9.一种应用程序编程接口API管理设备，其特征在于，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序时实现如权利要求1至6任一项所述的应用程序编程接口API管理方法的步骤。10.一种计算机可读存储介质，其特征在于，所述计算机可读存储介质中存储有程序数据，所述程序数据在被处理器执行时，用于实现如权利要求1-6任一项所述的方法。
说明书desc
技术领域本发明涉及互联网技术领域，特别是涉及应用程序编程接口API管理方法、装置、设备及介质。背景技术随着移动互联网的迅速发展，万物互联的物联网、大数据都是大势所趋，几乎没有“功能不以联网为基础”的APP，所以在移动端APP开发中，网络请求的重要性不言而喻。APP的数据获取以及数据上传都离不开网络连接，每次数据拉取或者上传下载都需要发起一个API请求来实现，因此管理好这些API请求成为APP开发中的一个重要任务。目前市面上对于网络请求的封装主要有集约式和离散式API1、集约式API介绍：所有API的调用只有一个类，然后这个类接收API名字，API参数，以及回调着陆点，即项目中的每个请求都会走统一的入口，对外暴露了请求的URL和Param以及请求方式，入口一般都是通过单例或者类方法来实现，AFNetworking的官方demo就是采用的集约式的方式对网络请求进行的封装，也是目前比较流行的网络请求方式。2、离散式API介绍：离散型API调用是这样的，一个API对应于一个APIManager，然后这个APIManager只需要提供参数就能起飞，API名字、着陆方式都已经集成入APIManager中。即每个网络请求类都是一个对象，它的URL以及请求方式和响应方式均不暴露给外部调用。只能内部通过重载或实现协议的方式来指定，外部调用只需要传Param即可，YTKNetwork就是采用的这种网络请求方式。集约式API管理方式的缺点是对每个请求的定制不够强。离散型API管理方式的缺点是：网络层需要业务实现方去写，变相的增加了部分工作量。由此，亟需有替代的API管理方式。发明内容本发明针对现有技术集约式API和离散型API管理方式各有缺点的原因，提出以下技术方案。本发明采用的一种技术方案是：一种应用程序编程接口API管理方法，包括：构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。可选地，所述构建API父类文件具体包括：对所述API父类文件进行公开功能的编写，集成管理所述公开功能，所述公开功能包括以下封装的功能：APP向服务器请求数据、APP向服务器上传数据和APP下载数据。可选地，每个所述模块API文件对该模块的网络请求接口进行收纳，且能调用所述API父类文件的公开功能进行网络请求。可选地，所述接口用于调用所述API父类文件进行网络请求具体包括：所述接口用于调用所述API父类文件的公开功能进行网络请求。可选地，所述按项目场景进行模块分化分类，按模块建立模块API文件具体包括：按项目场景对业务模块进行模块分化分类，根据项目的业务分为不同子类，所述模块API文件包括不同子类。可选地，所述公开功能在父类高级语言应用程序编程接口中执行。本发明采用的另一种技术方案是：一种应用程序编程接口API请求方法，包括：发起网络请求；根据所述网络请求的项目场景匹配对应的模块API文件，在该对应的模块API文件调用所述项目场景的接口；所述接口用于调用API父类文件进行网络请求；接收基于所述网络请求返回的目标数据，并将目标数据返回至所述应用程序。本发明采用的另一种技术方案是：一种应用程序编程接口API管理装置，包括：构建模块，用于构建API父类文件，所述API父类文件可用于网络请求；分类和建立模块，用于按项目场景进行模块分化分类，按模块建立模块API文件；接收和开放模块，用于接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明采用的另一种技术方案是：一种应用程序编程接口API管理设备，包括：存储器，用于存储计算机程序；处理器，用于执行所述计算机程序时实现如上述的应用程序编程接口API管理方法的步骤。本发明采用的另一种技术方案是：计算机可读存储介质，所述计算机可读存储介质中存储有程序数据，所述程序数据在被处理器执行时，用于实现如上所述的方法。本发明的有益效果是：区别于现有技术的情况，本发明提供的应用程序编程接口API管理方法，包括构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明的按项目场景进行模块分化分类，按模块建立模块API文件，相当于按照项目场景就模块进行API的拆解，而不是把所有API都聚集在一起，耦合度较低。由于分类的原因，网络层需要业务实现方去写的总量也变少了，总体上减少了工作量。而且，设置父类在请求的时候进行收口，即不在各个子类进行网络请求，而是把网络请求方法放到父类去执行，从而实现了分类层面的定制，总体上增强了定制化，聚合度较高。附图说明为了更清楚地说明本发明实施例中的技术方案，下面将对实施例描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。其中：图1是本发明提供的应用程序编程接口API管理方法一实施例的流程图；图2是本发明提供的应用程序编程接口API请求方法一实施例的流程图；图3是本发明提供的应用程序编程接口API管理装置的结构框图；图4是本发明提供的应用程序编程接口API管理设备的结构框图；图5是本发明提供的计算机可读存储介质一实施例的结构示意图。具体实施方式下面将结合本发明实施例中的附图，对本发明实施例中的技术方案进行清楚、完整地描述。可以理解的是，此处所描述的具体实施例仅用于解释本发明，而非对本发明的限定。另外还需要说明的是，为了便于描述，附图中仅示出了与本发明相关的部分而非全部方法和流程。基于本发明中的实施例，本领域普通技术人员在没有做出创造性劳动前提下所获得的所有其他实施例，都属于本发明保护的范围。本发明中的术语“包括”和“具有”以及它们任何变形，意图在于覆盖不排他的包含。例如包含了一系列步骤或单元的过程、方法、系统、产品或设备没有限定于已列出的步骤或单元，而是可选地还包括没有列出的步骤或单元，或可选地还包括对于这些过程、方法、产品或设备固有的其它步骤或单元。在本文中提及“实施例”意味着，结合实施例描述的特定特征、结构或特性可以包含在本发明的至少一个实施例中。在说明书中的各个位置出现该短语并不一定均是指相同的实施例，也不是与其它实施例互斥的独立的或备选的实施例。本领域技术人员显式地和隐式地理解的是，本文所描述的实施例可以与其它实施例相结合。在软件工程中，高内聚低耦合是判断代码设计好坏的标准，具体在面向对象程序设计时，看类的内聚性是否高，耦合度是否低。目的是使得模块的可重用性、移植性大大增强。通常程序结构中各模块的内聚程度越高，模块间的耦合程度就越低。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。除了高内聚低耦合，在软件工程还有父子类的概念，即两个类是父与子的关系，子类可以继承父类的功能，例如在本发明实施例中，父类可以是APIManager，子类可以是AApis，BApis，CApis...，也就是AApis，BApis，CApis文件具备了APIManager的功能，因此APIManager可以对一些子类都需要有的功能进行收口编写，即父类进行基础功能的封装。本着高内聚低耦合的代码结构方式，结合目前市场上已有的主流API管理方式，扬长补短，本发明通过业务分类以及父子类设计进行解耦，在网络请求出进行收口实现高内聚的方式，从而实现API代码的高内聚低耦合的结构。如图1所示，本发明实施例提供应用程序编程接口API管理方法，包括：步骤10、构建API父类文件，所述API父类文件可用于网络请求；步骤20、按项目场景进行模块分化分类，按模块建立模块API文件；步骤30、接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明的有益效果是：区别于现有技术的情况，本发明提供的应用程序编程接口API管理方法，包括构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明的按项目场景进行模块分化分类，按模块建立模块API文件，相当于按照项目场景就模块进行API的拆解，而不是把所有API都聚集在一起，耦合度较低。由于分类的原因，网络层需要业务实现方去写的总量也变少了，总体上减少了工作量。而且，设置父类在请求的时候进行收口，即不在各个子类进行网络请求，而是把网络请求方法放到父类去执行，从而实现了分类层面的定制，总体上增强了定制化，聚合度较高。进一步地，所述构建API父类文件具体包括：对所述API父类文件进行公开功能的编写，集成管理所述公开功能，所述公开功能包括以下封装的功能：APP向服务器请求数据、APP向服务器上传数据和APP下载数据。具体地，首先对API父类文件进行公开功能的编写，集成了一系列的公开功能，例如拉取数据、上报数据、APP下载等公开功能封装，不涉及具体的业务逻辑；进一步地，每个所述模块API文件对该模块的网络请求接口进行收纳，且能调用所述API父类文件的公开功能进行网络请求。进一步地，所述按项目场景进行模块分化分类，按模块建立模块API文件具体包括：按项目场景对业务模块进行模块分化分类，根据项目的业务分为不同子类，所述模块API文件包括不同子类。具体地，对项目进行模块分化分类，按不同的项目场景，每个模块都建立一个API管理类，API管理类即为模块API文件，每个API管理类只对该模块的网络请求接口进行收纳，且只调用父类提供的方法进行网络请求，不处理具体的请求逻辑以及数据逻辑。进一步地，所述接口用于调用所述API父类文件进行网络请求具体包括：所述接口用于调用所述API父类文件的公开功能进行网络请求。在具体的业务代码编写过程中，涉及到网络请求的项目场景时，直接在对应模块API管理类中进行API编写即可例如：需要在B模块中进行订单数据的拉取，需要用到网络请求，此时就要到BApis类中去开放一个订单数据拉取的接口-getOrderDataFromServer；该接口的具体实现就是调用父类APIManager中的方法进行网络请求。本发明的关键点在于对不同项目场景的业务模块进行API的拆解，按模块建立模块API文件，即根据项目的业务分为AApis，BApis，CApis等子类，而不是把所有API都聚集在一起，即低耦合；而且，设置API父类文件在请求的时候进行收口，即不在各个子类进行网络请求，而是把公共功能方法放到父类高级语言应用程序编程接口去执行从而做到高内聚；在具体的业务代码编写过程中，需要网络的业务代码的AApis，BApis，CApis等子类不涉及具体的网络请求逻辑，父类HLLApiManager的网络请求代码不涉及具体的业务逻辑；在进行不同业务模块的开发的时候，不需要知道API父类文件的具体请求方式，只需要调用API父类文件的接口进行网络请求即可，而模块API文件里只做API接口的管理，不做具体的网络请求，而且API的分类是根据模块区分，并非一个API要有一个Manager文件，而且同模块的API放在一个子类里，这样即能避免集约式的放在同一个类里，也不需要像离散式产生大量的类文件，符合软件工程中的高内聚低耦合设计方式清晰的业务逻辑和技术逻辑，也克服了现有技术集约式API管理和离散型API管理方式各自的缺点。本发明实施例主要解决iOS app开发中现有技术存在的API管理方式的痛点，通过优化代码结构来优化了开发者体验，从而提高开发效率以及代码健壮性、使代码更具拓展性、代码逻辑结构更加清晰。如图2所示，本发明实施例还提供一种应用程序编程接口API请求方法，包括：步骤60、发起网络请求；步骤70、根据所述网络请求的项目场景匹配对应的模块API文件，在该对应的模块API文件调用所述项目场景的接口；所述接口用于调用API父类文件进行网络请求；步骤80、接收基于所述网络请求返回的目标数据，并将目标数据返回至所述应用程序。需要说明的是，应用程序编程接口API请求方法是基于上述实施例的应用程序编程接口API管理方法的基础上进行的，并将发起网络请求和将模板数据返回网络需求发起端的过程一并实现的方法。本实施例的应用程序编程接口API请求方法与上述实施例的应用程序编程接口API管理方法基于相同的发明构思，其具体实现过程详细见方法实施例，且上述实施例中的技术特征在本实施例中均对应适用，在此不再详述。根据上述实施例，如图3所示，本发明实施例还提供应用程序编程接口API管理装置50，应用程序编程接口API管理装置50包括：构建模块51，用于构建API父类文件，所述API父类文件可用于网络请求；分类和建立模块52，用于按项目场景进行模块分化分类，按模块建立模块API文件；接收和开放模块53，用于接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本实施例的应用程序编程接口API管理装置与上述实施例的应用程序编程接口API管理方法基于相同的发明构思，其具体实现过程详细见方法实施例，且上述应用程序编程接口API管理方法实施例中的技术特征在本实施例中均对应适用，在此不再详述。如图4所示，本发明实施例还提供应用程序编程接口API管理设备100。应用程序编程接口API管理设备100中包括处理器110和存储器120。其中处理器110和存储器120耦接。存储器120中存储有计算机程序，计算机程序用于执行上述应用程序编程接口API管理方法。应用程序编程接口API管理设备100包括：存储器120，用于存储计算机程序；处理器110，用于执行所述计算机程序时实现如上述的应用程序编程接口API管理方法的步骤。本实施例的应用程序编程接口API管理设备与上述实施例的应用程序编程接口API管理方法基于相同的发明构思，其具体实现过程详细见方法实施例，且上述应用程序编程接口API管理方法实施例中的技术特征在本实施例中均对应适用，在此不再详述。具体参阅图5，图5是本发明提供的计算机可读存储介质一实施例的结构示意图。计算机可读存储介质200中包括程序数据210。程序数据210在被处理器执行时，可以实现上述应用程序编程接口API管理方法。区别于现有技术的情况，本发明提供应用程序编程接口API管理方法。本发明的有益效果是：区别于现有技术的情况，本发明提供应用程序编程接口API管理方法，包括构建API父类文件，所述API父类文件可用于网络请求；按项目场景进行模块分化分类，按模块建立模块API文件；接收网络请求需求，根据所述网络请求需求的项目场景匹配对应的模块API文件，在该对应的模块API文件中开放所述项目场景的接口；所述接口用于调用所述API父类文件进行网络请求。本发明的按项目场景进行模块分化分类，按模块建立模块API文件，相当于按照项目场景就模块进行API的拆解，而不是把所有API都聚集在一起，耦合度较低。由于分类的原因，网络层需要业务实现方去写的总量也变少了，总体上减少了工作量。而且，设置父类在请求的时候进行收口，即不在各个子类进行网络请求，而是把网络请求方法放到父类去执行，从而实现了分类层面的定制，总体上增强了定制化，聚合度较高。以上所述仅为本发明的实施例，并非因此限制本发明的专利范围，凡是利用本发明说明书及附图内容所作的等效结构或等效流程变换，或直接或间接运用在其他相关的技术领域，均同理包括在本发明的专利保护范围内。
