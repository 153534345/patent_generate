标题title
一种基于雾计算的智能交通系统
摘要abst
本发明公开了一种基于雾计算的智能交通系统，解决了现有智能交通系统中存在的响应性能问题与道路状况分析难题。该智能交通系统具有三层，包括用于数据存储与分析的云层、雾层与设备传感器层，是一个响应式和轻量级框架，使用雾节点来处理和匹配用户乘车请求，并完成不同车辆之间的信息通信，从而更为准确地获取车辆地理位置与道路状况信息。本发明基于雾计算的智能交通系统，与仅基于云的系统相比，提供了更好的响应能力，更加安全、可靠和高效。
权利要求书clms
1.一种智能交通系统，该系统基于雾计算来处理和匹配用户乘车请求，并完成不同车辆之间的信息通信，准确地获取车辆地理位置与道路状况信息；该智能交通系统分为三层，分别是云层、雾层与设备传感器层；其中，雾层由分布在一个区域的多个雾节点组成，每个雾节点都连接到云层中的中央服务器；每个雾节点都分配有一个预定义的区域，并且知道或连接到至少一个其他雾节点——它的邻居雾节点；一个区域只有一个主雾节点，主雾节点为区域内专门设立的基站；一个区域可能有较小的雾节点连接到该区域的主雾节点，为主雾节点和连接到它的设备提供网络和计算资源，较小的雾节点包括路边单元、具有存储和计算能力的车辆；雾节点也充当联合节点，每个雾节点使用来自其区域内的车辆的数据来训练本地模型，以将本地模型转发到云层的聚合器；聚合器聚合来自联合节点的本地模型以创建全局模型，从而进行交通管理和公共安全管理。2.如权利要求1所述的智能交通系统，其特征在于，所述云层包括以下组件：1)云数据库：系统所有用户及其帐户信息的数据库，乘客、司机、车辆和支付信息，以及雾节点及其控制区域都存储在云数据库中，用户在系统上创建帐户时访问云数据库，雾节点与云数据库交互以验证用户并在有限的时间内制作用户记录的副本；2)区块链共识节点：负责从云数据库接收新数据，更新区块链，生成新区块并将更新的区块分发到区块链中的其他节点；3)雾节点监视器：主动维护与雾节点的连接以确保它们处于活动状态，并确保雾节点不会过载；4)数据分析智能模块：实现维护交通系统各个方面的全局模型的集成训练，全局模型由来自雾节点的分布式本地模型组成。3.如权利要求1所述的智能交通系统，其特征在于，所述雾层包括以下组件：1)缓存数据库：每个主雾节点都有缓存数据库维护来自云数据库的记录，缓存数据库随着新的乘车请求以及车辆进入受雾节点控制的区域而更新；2)区域地图：主雾节点维护其控制下的区域地图，区域地图用于监控该地区道路上的交通负荷，每个雾节点维护至少一个其他相邻雾节点的映射；3)路线分析模块：路线分析模块汇总区域内来自车辆和传感器的数据，以估计沿该区域道路行驶的成本，主雾节点使用这些数据为司机提供前往目的地的建议；4)请求处理器：负责接受和处理乘客的乘车请求，根据请求时缓存数据库中的记录将乘客与离他们最近的车辆进行匹配，如果该区域中的车辆无法满足该请求，请求处理器可以将请求转发给邻居雾节点；5)邻居列表：每个雾节点维护其直接邻居的记录，保存的信息包括邻居雾节点的位置、控制的区域以及到达该区域的路线，此信息用于转发乘车请求和移交正在完成请求的车辆，跨区域服务请求的车辆在从一个区域移动到另一个区域时被移交给下一个雾节点；6)雾节点控制器：雾节点控制器监控主雾节点控制区域内的其他雾节点设备并将任务分配给其他雾节点设备，在该区域内具有计算、存储和网络资源的路边单元和车辆被分配任务，以协助主雾节点处理数据。4.如权利要求1所述的智能交通系统，其特征在于，所述设备传感器层由终端设备和传感器组成，包括移动设备、智能车辆和路边传感器；乘客和司机使用移动设备中的客户端应用程序向最近的雾节点发送请求；智能车辆将传感数据发送到雾节点，以帮助确定车辆行驶道路上的交通负载，智能车辆被识别并记录在数据库中；路边传感器定期向雾节点发送数据，这些数据包括道路上的车辆数量、车辆的平均速度、天气状况。5.如权利要求1所述的智能交通系统，其特征在于，在该智能交通系统中，通过用户来标示乘客，在云数据库中存储用户的基本信息，每个雾节点维护一个活跃用户列表，用户在离开雾区或在预定义的时间段内处于非活动状态后，将被从列表中删除；当一个用户向雾节点发送乘车请求时，会被添加到所处区域的雾节点的活跃用户列表中；此时雾节点向云数据库请求用户的记录，并获取用户位置、用户接送时间、目的地等信息。6.如权利要求5所述的智能交通系统，其特征在于，雾节点将来自用户的乘车请求作为输入并对其进行处理以产生车辆-乘客匹配，该过程包括以下步骤：1)用户发起请求；2)雾节点接收请求后，判断当前用户是否在当前雾节点的活跃用户列表中，如果在的话将乘车请求进行存储，并进行下一步分析，如果不在列表中，则从云数据库请求用户记录；3)如果云数据库内没有该用户记录，则向用户返回响应信息，需要创建用户，创建成功后则将用户记录添加到云数据库中，并且将用户添加到雾节点的活跃用户列表中；4)根据用户请求中带有的位置信息，雾节点查询自己所分配领域内的车辆，根据距离找到接近用户并且空闲可用的车辆；5)遍历所有步骤4)中找到的可用车辆列表，分析每个车辆的距离与行驶成本，根据距离和行驶成本进行排序，找到最佳车辆；6)将匹配出的最佳车辆信息发送给用户；7)如果发现没有匹配的车辆，则将用户记录发送给邻近的雾节点，由邻近雾节点处理该用户的请求。7.如权利要求1所述的智能交通系统，其特征在于，车辆向所在区域的雾节点定时发送状态更新请求，使用进行标识，其中si为每个车辆的位置信息，id为车辆标识符，l为车辆当前位置，t为发送更新的时间，sp为车辆行驶速度，dr为行进方向，a表示车辆是否可接受乘车请求。8.如权利要求1所述的智能交通系统，其特征在于，每个雾节点将其区域的地图建模为有向图F，每个有向图使用G表示，其中E表示道路，V为道路顶点；对于某两个雾节点Fi与Fj，如果它们共享至少一条道路，则说明它们为相邻雾节点，即Ei∩Ej≠在相邻雾节点的每个有向图中，每个邻居雾节点被表示为图中的顶点；对于每个雾节点负责的区域，使用公式Cost＝1-估算车辆在当前区域的行驶阻塞程度Cost，其中SPv表示车辆的评价速度，MAXv表示在道路上的允许最大速度；相邻雾节点之间保持联系并交换地图。9.如权利要求8所述的智能交通系统，其特征在于，雾节点计算车辆从起始点到目的地之间的最短距离的步骤如下：1)使用一个数组dis来表示从车辆起始点以及道路两端顶点到目的地的最短距离，初始时每个距离都定义为无穷大；2)对车辆所需经过的区域内所有道路的长度进行统计，使用preV集合进行存储；3)从直接接近目的地的道路顶点开始遍历，遍历数组dis中的各个元素，计算从各个元素到目的地的距离，如果能直接到达，则将对应的数组dis中的值更新为该距离；4)如果遍历数组dis时其中的元素无法直接到达，则通过将本道路顶点到与其相邻的雾节点的距离，加上与其相邻的雾节点到目的地的距离来更新数组dis；5)从次接近目的地的道路顶点开始遍历，采用步骤3)和步骤4)的方法对数组dis进行更新；6)继续迭代分析，每一轮分析的顶点都比上一轮距离目的地更远，直至迭代分析完所有雾节点，此时数组dis中车辆位置到目的地的距离即为车辆到目的地的最短距离。10.如权利要求1所述的智能交通系统，其特征在于，车辆在行使过程中与雾节点保持持续连接，当车辆的当前位置位于与相邻雾节点共享的边缘上，并且车辆的方向是朝向相邻雾节点时，车辆离开区域中的雾节点将行程数据发送到车辆正在进入的相邻雾节点。
说明书desc
技术领域本发明涉及智能交通与计算机安全技术领域，尤其涉及一种基于雾计算的智能交通系统。背景技术随着世界人口增长到77.8亿人，城市人口继续快速增长，城市地区的交通变得越来越具有挑战性。联合国人口基金报告说，现在世界上一半以上的人口居住在城镇，并且随着越来越多的人迁移到城市地区，预计这一数字还会上升。快速的城市化对公共交通系统产生了巨大的影响，交通拥堵、停车位不足、出行时间延长和环境污染等已经成为城市交通发展的重大挑战。这一问题是一个世界性的问题，据报道称，2017年英国司机每年平均在高峰时段浪费31小时，而在2011年，与交通有关的问题使欧盟损失了大约4％的GDP。当前解决道路交通挑战的传统方法，例如扩建道路和建设新车道等，价格昂贵且不太理想，因为这些方法往往难以跟上城市化进程，快速的城市化需要更为创新的技术与方法来解决交通挑战。在此基础上，已经陆续有越来越多的新技术产生，其中智能交通系统已在改善城市交通方面取得了不错的成果。ITS系统将信息和通信系统与现有的交通基础设施相结合，以提供可持续和高效的交通系统。ITS系统中使用的技术包括移动技术、物联网、云计算、全球定位系统技术等，通过对出行最佳路线的规划来解决上述问题。然而，这一方法仍存在较多问题。首先，云服务器的使用将用户体验与网络延迟相关联，且低延迟会影响应用程序的性能。此外，使用GPS位置信息和最近车辆调度算法来确定位置并匹配驾驶员和乘客仍存在挑战，尤其是在城市地区，由于交通或道路上的其他条件，车辆可能需要比预计更长的时间才能到达乘客的位置。而随着技术的发展，雾计算等技术的兴起，为智能交通系统中的核心问题解决提供了新的思路。发明内容为了克服上述现有技术的不足，解决现有智能交通系统中存在的问题，本发明提供一种基于雾计算的智能交通系统，能够解决现有智能交通系统中存在的响应性能问题与道路状况分析难题，是一个更加安全、可靠、高效的智能交通系统。本发明提供的技术方案是：一种基于雾计算的智能交通系统，整个系统基于雾计算来处理和匹配用户乘车请求，并完成不同车辆之间的信息通信，从而更为准确地获取车辆地理位置与道路状况信息。系统分为三层，分别是云层、雾层与设备传感器层，具有如下特点：雾层由分布在一个区域的多个雾节点组成，每个雾节点都连接到云层中的中央服务器；每个雾节点都分配有一个预定义的区域，并且知道或连接到至少一个其他雾节点——它的邻居雾节点；一个区域只有一个主雾节点，主雾节点为区域内专门设立的具备较高计算性能的基站，一个区域也可能有较小的雾节点连接到该区域的主雾节点，为主雾节点和连接到它的设备提供网络和一些计算资源，较小的雾节点可能为路边单元或具有存储和计算能力的车辆；雾节点也充当联合节点，每个雾节点使用来自其区域内的车辆的数据来训练本地模型，以将本地模型转发到可能位于云层的聚合器。聚合器聚合来自联合节点的本地模型以创建全局模型，从而进行交通管理和公共安全管理。云层拥有大量的计算、存储和网络资源。它是系统的中心点，维护着整个系统有效运行所需的资源。云层将由以下组件组成：云数据库：系统所有用户及其帐户信息的数据库，乘客、司机、车辆和支付信息，以及雾节点及其控制区域都存储在云数据库中，用户在系统上创建帐户时访问云数据库，雾节点与云数据库交互以验证用户并在有限的时间内制作用户记录的副本；区块链共识节点：负责从云数据库接收新数据，更新区块链，生成新区块并将更新的区块分发到区块链中的其他节点；雾节点监视器：主动维护与雾节点的连接以确保它们处于活动状态，雾节点监视器还将确保雾节点不会过载，比如通过重新分配雾节点的区域以处理过载；数据分析智能模块：如图1所示，云层维护交通系统各个方面的全局模型，全局模型由来自雾节点的分布式本地模型组成，这些模型可能对包括交通管理、执法和公共安全在内的多个部门有用。数据分析智能模块实现全局模型的集成训练。雾层由一些具备处理、存储和网络功能的节点组成。每个区域都有一个主雾节点，用于接收和处理乘客的请求。除主雾节点外，其他雾节点由无线电接入网络、路边单元或具有计算能力的车辆组成。从功能上来看，整个雾层由以下组件构成：缓存数据库：每个主雾节点都维护来自云数据库的记录，即每个主雾节点都有缓存数据库，缓存数据库会随着新的乘车请求以及车辆进入受雾节点控制的区域而更新；区域地图：主雾节点维护其控制下的区域地图，该地图用于监控该地区道路上的交通负荷，每个雾节点还维护至少一个其他相邻雾节点的映射，以此来间接获取相邻雾节点所维护的区域地图；路线分析模块：路线分析模块汇总区域内来自车辆和传感器的数据，以估计沿该区域道路行驶的成本，路线分析模块可能是该区域内主雾节点或其他雾节点的一部分，主雾节点使用这些数据为司机提供前往目的地的建议；请求处理器：负责接受和处理乘客的乘车请求，根据请求时缓存数据库中的记录将乘客与离他们最近的车辆进行匹配，如果该区域中的车辆无法满足该请求，请求处理器可以将请求转发给邻居雾节点；邻居列表：每个雾节点维护其直接邻居的记录，保存的信息可能包括邻居雾节点的位置、它控制的区域以及到达该区域的路线，此信息用于转发乘车请求和移交正在完成请求的车辆，跨区域服务请求的车辆在从一个区域移动到另一个区域时被移交给下一个雾节点；雾节点控制器：雾节点控制器监控主雾节点控制区域内的其他雾节点设备并将任务分配给其他雾节点设备，在该区域内具有计算、存储和网络资源的路边单元和车辆被分配任务，以协助主雾节点处理数据，任务包括计算道路上的旅行成本或检查该地区的交通拥堵情况。设备传感器层由终端设备和传感器组成，分为三类：移动设备：乘客和司机将使用移动设备与系统进行交互，移动设备中的客户端应用程序应向离它最近的雾节点发送请求；智能车辆：智能车辆将传感数据发送到雾节点，以帮助确定车辆行驶道路上的交通负载，智能车辆被识别并记录在数据库中；路边传感器：沿路的传感器向雾节点发送数据，例如道路上的车辆数量、车辆的平均速度、天气状况等，传感器定期向雾节点发送数据。本发明的有益效果为：本发明提出了一个基于雾计算的集成的智能交通系统。该系统具有三层，包括用于数据存储与分析的云层、雾层与设备传感器层。本发明设计的智能交通系统为一个响应式和轻量级框架，它使用雾节点来处理和匹配用户乘车请求，雾设备直接接收用户的请求，并在本地将它们与同一区域内的驱动程序匹配，与仅基于云的系统相比，这提供了更好的响应能力。附图说明图1为本发明中模型训练组成示意图。图2为本发明智能交通系统的总体架构图。具体实施方式下面结合附图，通过实施例进一步描述本发明，但不以任何方式限制本发明的范围。图2展现了本发明提出的智能交通系统的总体架构，下面针对于上述架构图中各部分进行说明：用户属性定义用户用以标示乘客，在云数据库中会存储其基本信息，而在参与交通事件时，每个雾节点维护一个活跃用户列表，用户在离开雾区或在预定义的时间段内处于非活动状态后，将被从列表中删除；当一个用户向雾节点发送乘车请求时，会被添加到所处区域的雾节点的活跃用户列表中。此时雾节点向云数据库请求用户的记录，并获取用户位置、用户接送时间、目的地等信息。车辆属性定义雾区内的车辆需向所在区域的雾节点定时发送状态更新请求，使用进行标识，其中si为每个车辆的位置信息，id为车辆标识符，l为车辆当前位置，t为发送更新的时间，sp为车辆行驶速度，dr为行进方向，a表示车辆是否可接受乘车请求。地图表示与速度计算每个雾节点会将其区域的地图建模为有向图F，每个有向图使用G表示，E表示道路，V为道路顶点，对于某两个雾节点Fi与Fj，如果它们共享至少一条道路时，则说明它们为相邻雾节点，即：此外，在相邻雾节点中的每个有向图中，每个邻居雾节点被表示为图中的顶点。对于每个雾节点负责的区域，主要使用以下公式估算车辆在当前区域的行驶阻塞程度Cost，其中SPv表示车辆的评价速度，MAXv表示在道路上的允许最大速度：Cost＝1-即沿给定方向行驶的成本是通过找出沿给定方向行驶的车辆的平均速度，除以道路的速度限制，再使用1减去来计算的。需要说明的是，Cost为零意味着给定道路上的车辆正在以限速移动，即意味着交通受限。上述计算可以由主雾节点或受其控制的区域内的其他雾节点完成。相邻雾节点之间需保持联系并交换地图，以方便在雾区寻找路线。请求处理与车辆匹配雾层接收来自用户的乘车请求以进行车辆匹配。参与匹配的双方为一对司机和乘客。对于要处理的请求，用户的记录必须在雾节点的活跃用户记录中。如果请求用户不是活跃用户，则雾节点会在处理他们的乘车请求之前向云发送请求以获得用户数据。雾节点将乘车请求作为输入并对其进行处理以产生车辆-乘客匹配的过程包括：步骤一，用户发起请求；步骤二，雾节点接收请求后，判断当前用户是否在当前雾节点的活跃用户列表中，如果在的话将乘车请求进行存储，并进行下一步分析，如果不在列表中，则从云数据库请求用户记录；步骤三，如果云数据库内没有该用户记录，则向用户返回响应信息，需要创建用户，创建成功后则将用户记录添加到云数据库中，并且将用户添加到雾节点的活跃用户列表中；步骤四，根据用户请求中带有的位置信息，雾节点查询自己所分配领域内的车辆，根据距离找到接近用户并且空闲可用的车辆；步骤五，遍历所有步骤四中找到的可用车辆列表，分析每个车辆的距离与行驶成本，根据距离和行驶成本进行排序，找到最佳车辆；步骤六，将匹配出的最佳车辆信息发送给用户；步骤七，如果发现没有匹配的车辆，则将用户记录发送给邻近的雾节点，由邻近雾节点处理该用户的请求。具体可以通过以下算法将乘车请求作为输入并对其进行处理以产生匹配。乘车请求存储为r，数组D是靠近接送地点的司机，σ是驾驶员与乘客之间的最小允许距离，满足最小允许距离才能被视为潜在匹配。可以看出，一旦验证了用户的记录，雾节点就会在定义的半径内搜索司机，请求将发送给定义范围内可满足请求的所有车辆，一旦附近的司机接受请求，用户就会收到通知。在附近没有司机的地方，请求被转发到离用户最近的邻居雾节点。路线推荐功能司机接载乘客后，雾节点会提供关于到达行程目的地的最佳路线的建议。每个主雾节点使用方程式计算每条道路上的成本。雾节点根据权重计算到目的地的最短/最佳路线，计算流程中会使用Djikstra最短路径算法的变体查找两点之间的最短路径，从而计算从起始点到目的地之间的最短距离，具体如下：步骤一，使用一个数组dis来表示从车辆起始点以及道路两端顶点到目的地的最短距离，为方便计算，初始时每个距离都定义为无穷大，即从初始未开始计算时，每个点到目的地的最短距离相同，后续将随着计算进行更新；步骤二，对车辆所需经过的区域内所有道路的长度进行统计，使用preV集合进行存储；步骤三，从直接接近目的地的道路顶点开始遍历，遍历数组dis中的各个元素，计算从各个元素到目的地的距离，如果能直接到达，则将对应的数组dis中的值更新为该距离；步骤四，如果遍历数组dis时其中的元素无法直接到达，则通过将本道路顶点到与其相邻的雾节点的距离，加上与其相邻的雾节点到目的地的距离来更新数组dis；步骤五，从次接近目的地的道路顶点开始遍历，其分析流程与步骤三、四相同，对数组dis进行更新；步骤六，继续迭代分析，每一轮分析的顶点都比上一轮距离目的地更远，直至迭代分析完所有雾节点，此时数组dis中车辆位置到目的地的距离即为车辆到目的地的最短距离。具体算法如下：邻近区域车辆移交为确保在旅途中与驾驶员和车辆保持持续连接，雾节点在车辆接近邻近雾节点时将行程和用户移交给邻近雾节点。当车辆的当前位置位于与相邻雾节点共享的边缘上，并且车辆的方向是朝向相邻雾节点时，车辆离开区域中的雾节点会将行程数据发送到车辆正在进入的相邻雾节点。移交流程如下：步骤一，获取车辆的地理位置与行进方向；步骤二，判断车辆是否位于当前雾节点与相邻雾节点的重合的道路上，如果是则进行下一轮判断；步骤三，判断当前车辆的行进位置是否朝向相邻的雾节点管控的区域，如果是则将车辆的信息与乘客分配权移交给相邻的雾节点，否则更新其位置。该过程显示在以下算法中：算法中获取车辆的位置s及其行进方向。如果s位于与另一个雾节点共享的边缘并且行进方向朝向另一个雾节点，车辆被移交给相邻的雾节点；否则，更新其位置。
